
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bac  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08022bac  08022bac  00022bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022c38  08022c38  00023068  2**0
                  CONTENTS
  4 .ARM          00000008  08022c38  08022c38  00022c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022c40  08022c40  00023068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022c40  08022c40  00022c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022c44  08022c44  00022c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08022c48  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08022cb0  00023068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08022cb0  000231d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023068  2**0
                  CONTENTS, READONLY
 12 .debug_line   000074d1  00000000  00000000  00023098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006d  00000000  00000000  0002a569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000073eb  00000000  00000000  0002a5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019d0  00000000  00000000  000319c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000700  00000000  00000000  00033398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fbc23  00000000  00000000  00033a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000004b2  00000000  00000000  0012f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029e35  00000000  00000000  0012fb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  001599a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ff8  00000000  00000000  00159a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000063f  00000000  00000000  0015ba54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  0015c093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000068 	.word	0x20000068
 801001c:	00000000 	.word	0x00000000
 8010020:	08022b94 	.word	0x08022b94

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	2000006c 	.word	0x2000006c
 801003c:	08022b94 	.word	0x08022b94
	...

08020000 <kalman>:
* R0 = pointer to state variables struct
* S0 = current measurement value
*/

kalman:
	PUSH {R1} //following ARM calling convention
 8020000:	b402      	push	{r1}
	//self->p = self->p + self->q:
	VLDR.f32 S1, [R0] //store self->p in floating point register S1
 8020002:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32 S2, [R0, #4] //store self->q in floating point register S2
 8020006:	ed90 1a01 	vldr	s2, [r0, #4]
	VADD.f32 S1, S1, S2 //self->p = self->p + self->q
 802000a:	ee70 0a81 	vadd.f32	s1, s1, s2

	//self->k = self->p / (self->p + self->r):
	VLDR.f32 S3, [R0, #8] //store self->r in floating point register S3
 802000e:	edd0 1a02 	vldr	s3, [r0, #8]
	VADD.f32 S10, S1, S3 //do (self->p + self->r) and store result in S10
 8020012:	ee30 5aa1 	vadd.f32	s10, s1, s3
	VDIV.f32 S4, S1, S10 //self->k = self->p / (self->p + self->r) with S4 storing self->k value
 8020016:	ee80 2a85 	vdiv.f32	s4, s1, s10
	VSTR.f32 S4, [R0, #16] //store self->k value in state variable
 802001a:	ed80 2a04 	vstr	s4, [r0, #16]

	//self->x = self->x + self->k*(measurement - self->x)
	VLDR.f32 S5, [R0, #12] //store self->x in floating point register S5
 802001e:	edd0 2a03 	vldr	s5, [r0, #12]
	VSUB.f32 S10, S0, S5 //do (measurement - self->x) and store result in S10
 8020022:	ee30 5a62 	vsub.f32	s10, s0, s5
	VMUL.f32 S10, S4, S10 //do self->k*(measurement - self->x) and store result in S10
 8020026:	ee22 5a05 	vmul.f32	s10, s4, s10
	VADD.f32 S5, S5, S10 //self->x = self->x + self->k*(measurement - self->x)
 802002a:	ee72 2a85 	vadd.f32	s5, s5, s10
	VSTR.f32 S5, [R0, #12] //store self->x value in state variable
 802002e:	edc0 2a03 	vstr	s5, [r0, #12]

	//self->p = (1 - self->k)*self->p
	//MOV R1, #0x3F800000 //hexadecimal representation of 1.0
	VMOV S9, #1.0 //store value of 1.0 in floating point register
 8020032:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
	VSUB.f32 S10, S9, S4 //do (1-self->k) and store result in S10
 8020036:	ee34 5ac2 	vsub.f32	s10, s9, s4
	VMUL.f32 S1, S10, S1 //S1 stores self->p value; do self->p=(1-self->k)*self->p
 802003a:	ee65 0a20 	vmul.f32	s1, s10, s1
	VSTR.f32 S1, [R0] //store self->p back in state variable
 802003e:	edc0 0a00 	vstr	s1, [r0]

	//check the FPSCR for errors
	VMRS R1, FPSCR //move the contents of FPSCR to R1
 8020042:	eef1 1a10 	vmrs	r1, fpscr
	TST R1, #8 //test if the overflow flag (bit 3) is set
 8020046:	f011 0f08 	tst.w	r1, #8
	BNE handle_error //branch if overflow occured
 802004a:	d10c      	bne.n	8020066 <handle_error>

	TST R1, #4 //test if the underflow flag (bit 2) is set
 802004c:	f011 0f04 	tst.w	r1, #4
    BNE handle_error //branch if underflow occured
 8020050:	d109      	bne.n	8020066 <handle_error>

    TST R1, #2 //test if the divide by zero flag (bit 1) is set
 8020052:	f011 0f02 	tst.w	r1, #2
    BNE handle_error //branch if divide by zero occured
 8020056:	d106      	bne.n	8020066 <handle_error>

    TST R1, #1 //test if the invalid operation flag (bit 0) is set
 8020058:	f011 0f01 	tst.w	r1, #1
    BNE handle_error //branch if invalid operation occured
 802005c:	d103      	bne.n	8020066 <handle_error>

	//return self->x
	VMOV S0, S5 //move self->x to S0
 802005e:	eeb0 0a62 	vmov.f32	s0, s5
	POP {R1} //reset register to initial state
 8020062:	bc02      	pop	{r1}
	BX LR //return
 8020064:	4770      	bx	lr

08020066 <handle_error>:


handle_error:
	VMOV S0, #-1.0 //move value of -1.0 to register that will store the value to be returned
 8020066:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
	POP {R1}
 802006a:	bc02      	pop	{r1}
	BX LR //return
 802006c:	4770      	bx	lr
 802006e:	bf00      	nop

08020070 <memchr>:
 8020070:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020074:	2a10      	cmp	r2, #16
 8020076:	db2b      	blt.n	80200d0 <memchr+0x60>
 8020078:	f010 0f07 	tst.w	r0, #7
 802007c:	d008      	beq.n	8020090 <memchr+0x20>
 802007e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020082:	3a01      	subs	r2, #1
 8020084:	428b      	cmp	r3, r1
 8020086:	d02d      	beq.n	80200e4 <memchr+0x74>
 8020088:	f010 0f07 	tst.w	r0, #7
 802008c:	b342      	cbz	r2, 80200e0 <memchr+0x70>
 802008e:	d1f6      	bne.n	802007e <memchr+0xe>
 8020090:	b4f0      	push	{r4, r5, r6, r7}
 8020092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802009a:	f022 0407 	bic.w	r4, r2, #7
 802009e:	f07f 0700 	mvns.w	r7, #0
 80200a2:	2300      	movs	r3, #0
 80200a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80200a8:	3c08      	subs	r4, #8
 80200aa:	ea85 0501 	eor.w	r5, r5, r1
 80200ae:	ea86 0601 	eor.w	r6, r6, r1
 80200b2:	fa85 f547 	uadd8	r5, r5, r7
 80200b6:	faa3 f587 	sel	r5, r3, r7
 80200ba:	fa86 f647 	uadd8	r6, r6, r7
 80200be:	faa5 f687 	sel	r6, r5, r7
 80200c2:	b98e      	cbnz	r6, 80200e8 <memchr+0x78>
 80200c4:	d1ee      	bne.n	80200a4 <memchr+0x34>
 80200c6:	bcf0      	pop	{r4, r5, r6, r7}
 80200c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80200cc:	f002 0207 	and.w	r2, r2, #7
 80200d0:	b132      	cbz	r2, 80200e0 <memchr+0x70>
 80200d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200d6:	3a01      	subs	r2, #1
 80200d8:	ea83 0301 	eor.w	r3, r3, r1
 80200dc:	b113      	cbz	r3, 80200e4 <memchr+0x74>
 80200de:	d1f8      	bne.n	80200d2 <memchr+0x62>
 80200e0:	2000      	movs	r0, #0
 80200e2:	4770      	bx	lr
 80200e4:	3801      	subs	r0, #1
 80200e6:	4770      	bx	lr
 80200e8:	2d00      	cmp	r5, #0
 80200ea:	bf06      	itte	eq
 80200ec:	4635      	moveq	r5, r6
 80200ee:	3803      	subeq	r0, #3
 80200f0:	3807      	subne	r0, #7
 80200f2:	f015 0f01 	tst.w	r5, #1
 80200f6:	d107      	bne.n	8020108 <memchr+0x98>
 80200f8:	3001      	adds	r0, #1
 80200fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80200fe:	bf02      	ittt	eq
 8020100:	3001      	addeq	r0, #1
 8020102:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020106:	3001      	addeq	r0, #1
 8020108:	bcf0      	pop	{r4, r5, r6, r7}
 802010a:	3801      	subs	r0, #1
 802010c:	4770      	bx	lr
 802010e:	bf00      	nop

08020110 <CMSISKalmanfilter>:
#include "CMSIS_KalmanFilter.h"
#include "arm_math.h"

int CMSISKalmanfilter(float* InputArray, float* OutputArray, kalman_state* kf, int Length) {
 8020110:	b580      	push	{r7, lr}
 8020112:	b088      	sub	sp, #32
 8020114:	af00      	add	r7, sp, #0
 8020116:	60f8      	str	r0, [r7, #12]
 8020118:	60b9      	str	r1, [r7, #8]
 802011a:	607a      	str	r2, [r7, #4]
 802011c:	603b      	str	r3, [r7, #0]
	//Null input exception
	if (InputArray == 0 || OutputArray == 0  || kf == 0) {
 802011e:	68fb      	ldr	r3, [r7, #12]
 8020120:	2b00      	cmp	r3, #0
 8020122:	d005      	beq.n	8020130 <CMSISKalmanfilter+0x20>
 8020124:	68bb      	ldr	r3, [r7, #8]
 8020126:	2b00      	cmp	r3, #0
 8020128:	d002      	beq.n	8020130 <CMSISKalmanfilter+0x20>
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	2b00      	cmp	r3, #0
 802012e:	d102      	bne.n	8020136 <CMSISKalmanfilter+0x26>
	        return -1;
 8020130:	f04f 33ff 	mov.w	r3, #4294967295
 8020134:	e078      	b.n	8020228 <CMSISKalmanfilter+0x118>
	    }
    for (int i = 0; i < Length; i++) {
 8020136:	2300      	movs	r3, #0
 8020138:	61fb      	str	r3, [r7, #28]
 802013a:	e070      	b.n	802021e <CMSISKalmanfilter+0x10e>
        arm_add_f32(&kf->p, &kf->q,&kf->p,1);
 802013c:	6878      	ldr	r0, [r7, #4]
 802013e:	687b      	ldr	r3, [r7, #4]
 8020140:	1d19      	adds	r1, r3, #4
 8020142:	687a      	ldr	r2, [r7, #4]
 8020144:	2301      	movs	r3, #1
 8020146:	f001 fd7f 	bl	8021c48 <arm_add_f32>
        arm_add_f32(&kf->p, &kf->r,&kf->k,1);
 802014a:	6878      	ldr	r0, [r7, #4]
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	f103 0108 	add.w	r1, r3, #8
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	f103 0210 	add.w	r2, r3, #16
 8020158:	2301      	movs	r3, #1
 802015a:	f001 fd75 	bl	8021c48 <arm_add_f32>

        //check division by 0
        if (kf->k==0){
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	edd3 7a04 	vldr	s15, [r3, #16]
 8020164:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802016c:	d102      	bne.n	8020174 <CMSISKalmanfilter+0x64>
                	return -2;
 802016e:	f06f 0301 	mvn.w	r3, #1
 8020172:	e059      	b.n	8020228 <CMSISKalmanfilter+0x118>
                }
        kf->k = kf->p/kf->k;
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	edd3 6a00 	vldr	s13, [r3]
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	ed93 7a04 	vldr	s14, [r3, #16]
 8020180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	edc3 7a04 	vstr	s15, [r3, #16]


        float32_t temp;
        arm_sub_f32(&InputArray[i], &kf->x, &temp, 1);
 802018a:	69fb      	ldr	r3, [r7, #28]
 802018c:	009b      	lsls	r3, r3, #2
 802018e:	68fa      	ldr	r2, [r7, #12]
 8020190:	18d0      	adds	r0, r2, r3
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	f103 010c 	add.w	r1, r3, #12
 8020198:	f107 0218 	add.w	r2, r7, #24
 802019c:	2301      	movs	r3, #1
 802019e:	f001 fc9f 	bl	8021ae0 <arm_sub_f32>
        arm_mult_f32(&kf->k, &temp, &temp, 1);
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	f103 0010 	add.w	r0, r3, #16
 80201a8:	f107 0218 	add.w	r2, r7, #24
 80201ac:	f107 0118 	add.w	r1, r7, #24
 80201b0:	2301      	movs	r3, #1
 80201b2:	f001 fcef 	bl	8021b94 <arm_mult_f32>
        arm_add_f32(&kf->x, &temp, &kf->x, 1);
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	f103 000c 	add.w	r0, r3, #12
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	f103 020c 	add.w	r2, r3, #12
 80201c2:	f107 0118 	add.w	r1, r7, #24
 80201c6:	2301      	movs	r3, #1
 80201c8:	f001 fd3e 	bl	8021c48 <arm_add_f32>
        float one = 1.0;
 80201cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80201d0:	617b      	str	r3, [r7, #20]
        arm_sub_f32(&one, &kf->k, &temp, 1);
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	f103 0110 	add.w	r1, r3, #16
 80201d8:	f107 0218 	add.w	r2, r7, #24
 80201dc:	f107 0014 	add.w	r0, r7, #20
 80201e0:	2301      	movs	r3, #1
 80201e2:	f001 fc7d 	bl	8021ae0 <arm_sub_f32>
        arm_mult_f32(&kf->p, &temp, &kf->p, 1);
 80201e6:	6878      	ldr	r0, [r7, #4]
 80201e8:	687a      	ldr	r2, [r7, #4]
 80201ea:	f107 0118 	add.w	r1, r7, #24
 80201ee:	2301      	movs	r3, #1
 80201f0:	f001 fcd0 	bl	8021b94 <arm_mult_f32>
        //check output
        if (isnan(kf->x)){
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80201fa:	eef4 7a67 	vcmp.f32	s15, s15
 80201fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020202:	d702      	bvc.n	802020a <CMSISKalmanfilter+0xfa>
             return -3;
 8020204:	f06f 0302 	mvn.w	r3, #2
 8020208:	e00e      	b.n	8020228 <CMSISKalmanfilter+0x118>
        }
        OutputArray[i] = kf->x;
 802020a:	69fb      	ldr	r3, [r7, #28]
 802020c:	009b      	lsls	r3, r3, #2
 802020e:	68ba      	ldr	r2, [r7, #8]
 8020210:	4413      	add	r3, r2
 8020212:	687a      	ldr	r2, [r7, #4]
 8020214:	68d2      	ldr	r2, [r2, #12]
 8020216:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < Length; i++) {
 8020218:	69fb      	ldr	r3, [r7, #28]
 802021a:	3301      	adds	r3, #1
 802021c:	61fb      	str	r3, [r7, #28]
 802021e:	69fa      	ldr	r2, [r7, #28]
 8020220:	683b      	ldr	r3, [r7, #0]
 8020222:	429a      	cmp	r2, r3
 8020224:	db8a      	blt.n	802013c <CMSISKalmanfilter+0x2c>
    }
    return 0;
 8020226:	2300      	movs	r3, #0
}
 8020228:	4618      	mov	r0, r3
 802022a:	3720      	adds	r7, #32
 802022c:	46bd      	mov	sp, r7
 802022e:	bd80      	pop	{r7, pc}

08020230 <KalmanFilter_init>:
#include "KalmanFilter.h"

void KalmanFilter_init(kalman_state *kf, float q, float r, float p, float initial_value) {
 8020230:	b480      	push	{r7}
 8020232:	b087      	sub	sp, #28
 8020234:	af00      	add	r7, sp, #0
 8020236:	6178      	str	r0, [r7, #20]
 8020238:	ed87 0a04 	vstr	s0, [r7, #16]
 802023c:	edc7 0a03 	vstr	s1, [r7, #12]
 8020240:	ed87 1a02 	vstr	s2, [r7, #8]
 8020244:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->q = q;
 8020248:	697b      	ldr	r3, [r7, #20]
 802024a:	693a      	ldr	r2, [r7, #16]
 802024c:	605a      	str	r2, [r3, #4]
    kf->r = r;
 802024e:	697b      	ldr	r3, [r7, #20]
 8020250:	68fa      	ldr	r2, [r7, #12]
 8020252:	609a      	str	r2, [r3, #8]
    kf->p = p;
 8020254:	697b      	ldr	r3, [r7, #20]
 8020256:	68ba      	ldr	r2, [r7, #8]
 8020258:	601a      	str	r2, [r3, #0]
    kf->x = initial_value;
 802025a:	697b      	ldr	r3, [r7, #20]
 802025c:	687a      	ldr	r2, [r7, #4]
 802025e:	60da      	str	r2, [r3, #12]
    kf->k = 0.0;
 8020260:	697b      	ldr	r3, [r7, #20]
 8020262:	f04f 0200 	mov.w	r2, #0
 8020266:	611a      	str	r2, [r3, #16]
}
 8020268:	bf00      	nop
 802026a:	371c      	adds	r7, #28
 802026c:	46bd      	mov	sp, r7
 802026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020272:	4770      	bx	lr

08020274 <Kalmanfilter>:
//    kf->x = kf->x + kf->k * (measurement - kf->x);
//    kf->p = (1 - kf->k) * kf->p;
//
//    return kf->x;
//}
int Kalmanfilter(float* InputArray, float* OutputArray, kalman_state* kf, int Length){
 8020274:	b480      	push	{r7}
 8020276:	b087      	sub	sp, #28
 8020278:	af00      	add	r7, sp, #0
 802027a:	60f8      	str	r0, [r7, #12]
 802027c:	60b9      	str	r1, [r7, #8]
 802027e:	607a      	str	r2, [r7, #4]
 8020280:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < Length; i++) {
 8020282:	2300      	movs	r3, #0
 8020284:	617b      	str	r3, [r7, #20]
 8020286:	e06d      	b.n	8020364 <Kalmanfilter+0xf0>
		if (InputArray == 0 || OutputArray == 0 || kf == 0) {
 8020288:	68fb      	ldr	r3, [r7, #12]
 802028a:	2b00      	cmp	r3, #0
 802028c:	d005      	beq.n	802029a <Kalmanfilter+0x26>
 802028e:	68bb      	ldr	r3, [r7, #8]
 8020290:	2b00      	cmp	r3, #0
 8020292:	d002      	beq.n	802029a <Kalmanfilter+0x26>
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	2b00      	cmp	r3, #0
 8020298:	d102      	bne.n	80202a0 <Kalmanfilter+0x2c>
			        return -1;
 802029a:	f04f 33ff 	mov.w	r3, #4294967295
 802029e:	e066      	b.n	802036e <Kalmanfilter+0xfa>
			    }
	        kf->p += kf->q;
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	ed93 7a00 	vldr	s14, [r3]
 80202a6:	687b      	ldr	r3, [r7, #4]
 80202a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80202ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	edc3 7a00 	vstr	s15, [r3]
	        kf->k = kf->p / (kf->p + kf->r);
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	edd3 6a00 	vldr	s13, [r3]
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	ed93 7a00 	vldr	s14, [r3]
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80202c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80202cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80202d0:	687b      	ldr	r3, [r7, #4]
 80202d2:	edc3 7a04 	vstr	s15, [r3, #16]
	        //check division by 0
			if (isnan(kf->k)){
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80202dc:	eef4 7a67 	vcmp.f32	s15, s15
 80202e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202e4:	d702      	bvc.n	80202ec <Kalmanfilter+0x78>
				return -2;
 80202e6:	f06f 0301 	mvn.w	r3, #1
 80202ea:	e040      	b.n	802036e <Kalmanfilter+0xfa>
			}
	        kf->x += kf->k * (InputArray[i] - kf->x);
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80202f2:	687b      	ldr	r3, [r7, #4]
 80202f4:	edd3 6a04 	vldr	s13, [r3, #16]
 80202f8:	697b      	ldr	r3, [r7, #20]
 80202fa:	009b      	lsls	r3, r3, #2
 80202fc:	68fa      	ldr	r2, [r7, #12]
 80202fe:	4413      	add	r3, r2
 8020300:	ed93 6a00 	vldr	s12, [r3]
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	edd3 7a03 	vldr	s15, [r3, #12]
 802030a:	ee76 7a67 	vsub.f32	s15, s12, s15
 802030e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020316:	687b      	ldr	r3, [r7, #4]
 8020318:	edc3 7a03 	vstr	s15, [r3, #12]
	        kf->p *= (1.0f - kf->k);
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	ed93 7a00 	vldr	s14, [r3]
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	edd3 7a04 	vldr	s15, [r3, #16]
 8020328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802032c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8020330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	edc3 7a00 	vstr	s15, [r3]
	        //check output
			if (isnan(kf->x)){
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	edd3 7a03 	vldr	s15, [r3, #12]
 8020340:	eef4 7a67 	vcmp.f32	s15, s15
 8020344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020348:	d702      	bvc.n	8020350 <Kalmanfilter+0xdc>
				 return -3;
 802034a:	f06f 0302 	mvn.w	r3, #2
 802034e:	e00e      	b.n	802036e <Kalmanfilter+0xfa>
			}
	        OutputArray[i] = kf->x;
 8020350:	697b      	ldr	r3, [r7, #20]
 8020352:	009b      	lsls	r3, r3, #2
 8020354:	68ba      	ldr	r2, [r7, #8]
 8020356:	4413      	add	r3, r2
 8020358:	687a      	ldr	r2, [r7, #4]
 802035a:	68d2      	ldr	r2, [r2, #12]
 802035c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Length; i++) {
 802035e:	697b      	ldr	r3, [r7, #20]
 8020360:	3301      	adds	r3, #1
 8020362:	617b      	str	r3, [r7, #20]
 8020364:	697a      	ldr	r2, [r7, #20]
 8020366:	683b      	ldr	r3, [r7, #0]
 8020368:	429a      	cmp	r2, r3
 802036a:	db8d      	blt.n	8020288 <Kalmanfilter+0x14>
	    }
	    return 0;
 802036c:	2300      	movs	r3, #0
}
 802036e:	4618      	mov	r0, r3
 8020370:	371c      	adds	r7, #28
 8020372:	46bd      	mov	sp, r7
 8020374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020378:	4770      	bx	lr
	...

0802037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802037c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020380:	b09a      	sub	sp, #104	@ 0x68
 8020382:	af00      	add	r7, sp, #0
  HAL_Init();
 8020384:	f000 fac9 	bl	802091a <HAL_Init>
  SystemClock_Config();
 8020388:	f000 f916 	bl	80205b8 <SystemClock_Config>
  kalman_state *kalmanFilterObject = malloc(sizeof(kalman_state));
 802038c:	2014      	movs	r0, #20
 802038e:	f001 fcb5 	bl	8021cfc <malloc>
 8020392:	4603      	mov	r3, r0
 8020394:	65fb      	str	r3, [r7, #92]	@ 0x5c
  KalmanFilter_init(kalmanFilterObject, 0.1, 0.1, 0.1, 5);
 8020396:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 802039a:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 80205a8 <main+0x22c>
 802039e:	eddf 0a82 	vldr	s1, [pc, #520]	@ 80205a8 <main+0x22c>
 80203a2:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 80205a8 <main+0x22c>
 80203a6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80203a8:	f7ff ff42 	bl	8020230 <KalmanFilter_init>
  //to test results from Table 1 in lab doc:

  float x;
  float inarray[5] = {0,1,2,3,4};
 80203ac:	4b7f      	ldr	r3, [pc, #508]	@ (80205ac <main+0x230>)
 80203ae:	f107 0520 	add.w	r5, r7, #32
 80203b2:	461c      	mov	r4, r3
 80203b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80203b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80203b8:	6823      	ldr	r3, [r4, #0]
 80203ba:	602b      	str	r3, [r5, #0]
  int len = sizeof(inarray) / sizeof(inarray[0]);
 80203bc:	2305      	movs	r3, #5
 80203be:	65bb      	str	r3, [r7, #88]	@ 0x58
  float arm_outarray[len];
 80203c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80203c2:	1e4b      	subs	r3, r1, #1
 80203c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80203c6:	460a      	mov	r2, r1
 80203c8:	2300      	movs	r3, #0
 80203ca:	4690      	mov	r8, r2
 80203cc:	4699      	mov	r9, r3
 80203ce:	f04f 0200 	mov.w	r2, #0
 80203d2:	f04f 0300 	mov.w	r3, #0
 80203d6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80203da:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80203de:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80203e2:	460a      	mov	r2, r1
 80203e4:	2300      	movs	r3, #0
 80203e6:	61ba      	str	r2, [r7, #24]
 80203e8:	61fb      	str	r3, [r7, #28]
 80203ea:	f04f 0200 	mov.w	r2, #0
 80203ee:	f04f 0300 	mov.w	r3, #0
 80203f2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80203f6:	4628      	mov	r0, r5
 80203f8:	0143      	lsls	r3, r0, #5
 80203fa:	4620      	mov	r0, r4
 80203fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8020400:	4620      	mov	r0, r4
 8020402:	0142      	lsls	r2, r0, #5
 8020404:	460b      	mov	r3, r1
 8020406:	009b      	lsls	r3, r3, #2
 8020408:	3307      	adds	r3, #7
 802040a:	08db      	lsrs	r3, r3, #3
 802040c:	00db      	lsls	r3, r3, #3
 802040e:	ebad 0d03 	sub.w	sp, sp, r3
 8020412:	466b      	mov	r3, sp
 8020414:	3303      	adds	r3, #3
 8020416:	089b      	lsrs	r3, r3, #2
 8020418:	009b      	lsls	r3, r3, #2
 802041a:	653b      	str	r3, [r7, #80]	@ 0x50
  for(int i=0; i<5; i++){
 802041c:	2300      	movs	r3, #0
 802041e:	667b      	str	r3, [r7, #100]	@ 0x64
 8020420:	e018      	b.n	8020454 <main+0xd8>
	  arm_outarray[i] = kalman(kalmanFilterObject, inarray[i]);
 8020422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020424:	009b      	lsls	r3, r3, #2
 8020426:	3348      	adds	r3, #72	@ 0x48
 8020428:	f107 0220 	add.w	r2, r7, #32
 802042c:	4413      	add	r3, r2
 802042e:	3b48      	subs	r3, #72	@ 0x48
 8020430:	edd3 7a00 	vldr	s15, [r3]
 8020434:	eeb0 0a67 	vmov.f32	s0, s15
 8020438:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 802043a:	f7ff fde1 	bl	8020000 <kalman>
 802043e:	eef0 7a40 	vmov.f32	s15, s0
 8020442:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8020444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020446:	009b      	lsls	r3, r3, #2
 8020448:	4413      	add	r3, r2
 802044a:	edc3 7a00 	vstr	s15, [r3]
  for(int i=0; i<5; i++){
 802044e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020450:	3301      	adds	r3, #1
 8020452:	667b      	str	r3, [r7, #100]	@ 0x64
 8020454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020456:	2b04      	cmp	r3, #4
 8020458:	dde3      	ble.n	8020422 <main+0xa6>

  }
  //C Version
  float outarray[len];
 802045a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 802045c:	1e4b      	subs	r3, r1, #1
 802045e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020460:	460a      	mov	r2, r1
 8020462:	2300      	movs	r3, #0
 8020464:	613a      	str	r2, [r7, #16]
 8020466:	617b      	str	r3, [r7, #20]
 8020468:	f04f 0200 	mov.w	r2, #0
 802046c:	f04f 0300 	mov.w	r3, #0
 8020470:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8020474:	4628      	mov	r0, r5
 8020476:	0143      	lsls	r3, r0, #5
 8020478:	4620      	mov	r0, r4
 802047a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802047e:	4620      	mov	r0, r4
 8020480:	0142      	lsls	r2, r0, #5
 8020482:	460a      	mov	r2, r1
 8020484:	2300      	movs	r3, #0
 8020486:	60ba      	str	r2, [r7, #8]
 8020488:	60fb      	str	r3, [r7, #12]
 802048a:	f04f 0200 	mov.w	r2, #0
 802048e:	f04f 0300 	mov.w	r3, #0
 8020492:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8020496:	4628      	mov	r0, r5
 8020498:	0143      	lsls	r3, r0, #5
 802049a:	4620      	mov	r0, r4
 802049c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80204a0:	4620      	mov	r0, r4
 80204a2:	0142      	lsls	r2, r0, #5
 80204a4:	460b      	mov	r3, r1
 80204a6:	009b      	lsls	r3, r3, #2
 80204a8:	3307      	adds	r3, #7
 80204aa:	08db      	lsrs	r3, r3, #3
 80204ac:	00db      	lsls	r3, r3, #3
 80204ae:	ebad 0d03 	sub.w	sp, sp, r3
 80204b2:	466b      	mov	r3, sp
 80204b4:	3303      	adds	r3, #3
 80204b6:	089b      	lsrs	r3, r3, #2
 80204b8:	009b      	lsls	r3, r3, #2
 80204ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  kalman_state *kfc = malloc(sizeof(kalman_state));
 80204bc:	2014      	movs	r0, #20
 80204be:	f001 fc1d 	bl	8021cfc <malloc>
 80204c2:	4603      	mov	r3, r0
 80204c4:	647b      	str	r3, [r7, #68]	@ 0x44
  KalmanFilter_init(kfc, 0.1, 0.1, 0.1, 5);
 80204c6:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80204ca:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 80205a8 <main+0x22c>
 80204ce:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80205a8 <main+0x22c>
 80204d2:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80205a8 <main+0x22c>
 80204d6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80204d8:	f7ff feaa 	bl	8020230 <KalmanFilter_init>

  int state = Kalmanfilter( inarray, outarray, kfc,len);
 80204dc:	f107 0020 	add.w	r0, r7, #32
 80204e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80204e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80204e4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80204e6:	f7ff fec5 	bl	8020274 <Kalmanfilter>
 80204ea:	6438      	str	r0, [r7, #64]	@ 0x40
  //CMSIS-DSP C version
  float CMSISoutarray[len];
 80204ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80204ee:	1e4b      	subs	r3, r1, #1
 80204f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80204f2:	460a      	mov	r2, r1
 80204f4:	2300      	movs	r3, #0
 80204f6:	603a      	str	r2, [r7, #0]
 80204f8:	607b      	str	r3, [r7, #4]
 80204fa:	f04f 0200 	mov.w	r2, #0
 80204fe:	f04f 0300 	mov.w	r3, #0
 8020502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8020506:	4628      	mov	r0, r5
 8020508:	0143      	lsls	r3, r0, #5
 802050a:	4620      	mov	r0, r4
 802050c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8020510:	4620      	mov	r0, r4
 8020512:	0142      	lsls	r2, r0, #5
 8020514:	460a      	mov	r2, r1
 8020516:	2300      	movs	r3, #0
 8020518:	4692      	mov	sl, r2
 802051a:	469b      	mov	fp, r3
 802051c:	f04f 0200 	mov.w	r2, #0
 8020520:	f04f 0300 	mov.w	r3, #0
 8020524:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8020528:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 802052c:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8020530:	460b      	mov	r3, r1
 8020532:	009b      	lsls	r3, r3, #2
 8020534:	3307      	adds	r3, #7
 8020536:	08db      	lsrs	r3, r3, #3
 8020538:	00db      	lsls	r3, r3, #3
 802053a:	ebad 0d03 	sub.w	sp, sp, r3
 802053e:	466b      	mov	r3, sp
 8020540:	3303      	adds	r3, #3
 8020542:	089b      	lsrs	r3, r3, #2
 8020544:	009b      	lsls	r3, r3, #2
 8020546:	63bb      	str	r3, [r7, #56]	@ 0x38
  kalman_state *CMSISkfc = malloc(sizeof(kalman_state));
 8020548:	2014      	movs	r0, #20
 802054a:	f001 fbd7 	bl	8021cfc <malloc>
 802054e:	4603      	mov	r3, r0
 8020550:	637b      	str	r3, [r7, #52]	@ 0x34
  KalmanFilter_init(CMSISkfc, 0.1, 0.1, 0.1, 5);
 8020552:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8020556:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 80205a8 <main+0x22c>
 802055a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80205a8 <main+0x22c>
 802055e:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80205a8 <main+0x22c>
 8020562:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8020564:	f7ff fe64 	bl	8020230 <KalmanFilter_init>

  state = CMSISKalmanfilter( inarray, CMSISoutarray, CMSISkfc,len);
 8020568:	f107 0020 	add.w	r0, r7, #32
 802056c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802056e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020570:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8020572:	f7ff fdcd 	bl	8020110 <CMSISKalmanfilter>
 8020576:	6438      	str	r0, [r7, #64]	@ 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0; i<5; i++){
 8020578:	2300      	movs	r3, #0
 802057a:	663b      	str	r3, [r7, #96]	@ 0x60
 802057c:	e010      	b.n	80205a0 <main+0x224>
	 	  printf("%d",i);
 802057e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8020580:	480b      	ldr	r0, [pc, #44]	@ (80205b0 <main+0x234>)
 8020582:	f001 fdf3 	bl	802216c <iprintf>
	 	  fflush(stdout);
 8020586:	4b0b      	ldr	r3, [pc, #44]	@ (80205b4 <main+0x238>)
 8020588:	681b      	ldr	r3, [r3, #0]
 802058a:	689b      	ldr	r3, [r3, #8]
 802058c:	4618      	mov	r0, r3
 802058e:	f001 fd17 	bl	8021fc0 <fflush>
	 	  HAL_Delay(1000);
 8020592:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8020596:	f000 fa35 	bl	8020a04 <HAL_Delay>
	  for(int i=0; i<5; i++){
 802059a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802059c:	3301      	adds	r3, #1
 802059e:	663b      	str	r3, [r7, #96]	@ 0x60
 80205a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80205a2:	2b04      	cmp	r3, #4
 80205a4:	ddeb      	ble.n	802057e <main+0x202>
 80205a6:	e7e7      	b.n	8020578 <main+0x1fc>
 80205a8:	3dcccccd 	.word	0x3dcccccd
 80205ac:	08022bb0 	.word	0x08022bb0
 80205b0:	08022bac 	.word	0x08022bac
 80205b4:	20000018 	.word	0x20000018

080205b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80205b8:	b580      	push	{r7, lr}
 80205ba:	b096      	sub	sp, #88	@ 0x58
 80205bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205be:	f107 0314 	add.w	r3, r7, #20
 80205c2:	2244      	movs	r2, #68	@ 0x44
 80205c4:	2100      	movs	r1, #0
 80205c6:	4618      	mov	r0, r3
 80205c8:	f001 fe25 	bl	8022216 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205cc:	463b      	mov	r3, r7
 80205ce:	2200      	movs	r2, #0
 80205d0:	601a      	str	r2, [r3, #0]
 80205d2:	605a      	str	r2, [r3, #4]
 80205d4:	609a      	str	r2, [r3, #8]
 80205d6:	60da      	str	r2, [r3, #12]
 80205d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80205da:	2000      	movs	r0, #0
 80205dc:	f000 fb3c 	bl	8020c58 <HAL_PWREx_ControlVoltageScaling>
 80205e0:	4603      	mov	r3, r0
 80205e2:	2b00      	cmp	r3, #0
 80205e4:	d001      	beq.n	80205ea <SystemClock_Config+0x32>
  {
    Error_Handler();
 80205e6:	f000 f838 	bl	802065a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80205ea:	2310      	movs	r3, #16
 80205ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80205ee:	2301      	movs	r3, #1
 80205f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80205f2:	2300      	movs	r3, #0
 80205f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80205f6:	2360      	movs	r3, #96	@ 0x60
 80205f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80205fa:	2302      	movs	r3, #2
 80205fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80205fe:	2301      	movs	r3, #1
 8020600:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8020602:	2301      	movs	r3, #1
 8020604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8020606:	233c      	movs	r3, #60	@ 0x3c
 8020608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802060a:	2302      	movs	r3, #2
 802060c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 802060e:	2302      	movs	r3, #2
 8020610:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8020612:	2302      	movs	r3, #2
 8020614:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020616:	f107 0314 	add.w	r3, r7, #20
 802061a:	4618      	mov	r0, r3
 802061c:	f000 fbc0 	bl	8020da0 <HAL_RCC_OscConfig>
 8020620:	4603      	mov	r3, r0
 8020622:	2b00      	cmp	r3, #0
 8020624:	d001      	beq.n	802062a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8020626:	f000 f818 	bl	802065a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802062a:	230f      	movs	r3, #15
 802062c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802062e:	2303      	movs	r3, #3
 8020630:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020632:	2300      	movs	r3, #0
 8020634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020636:	2300      	movs	r3, #0
 8020638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802063a:	2300      	movs	r3, #0
 802063c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802063e:	463b      	mov	r3, r7
 8020640:	2105      	movs	r1, #5
 8020642:	4618      	mov	r0, r3
 8020644:	f000 ffc6 	bl	80215d4 <HAL_RCC_ClockConfig>
 8020648:	4603      	mov	r3, r0
 802064a:	2b00      	cmp	r3, #0
 802064c:	d001      	beq.n	8020652 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802064e:	f000 f804 	bl	802065a <Error_Handler>
  }
}
 8020652:	bf00      	nop
 8020654:	3758      	adds	r7, #88	@ 0x58
 8020656:	46bd      	mov	sp, r7
 8020658:	bd80      	pop	{r7, pc}

0802065a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802065a:	b480      	push	{r7}
 802065c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802065e:	b672      	cpsid	i
}
 8020660:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020662:	bf00      	nop
 8020664:	e7fd      	b.n	8020662 <Error_Handler+0x8>
	...

08020668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020668:	b480      	push	{r7}
 802066a:	b083      	sub	sp, #12
 802066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802066e:	4b0f      	ldr	r3, [pc, #60]	@ (80206ac <HAL_MspInit+0x44>)
 8020670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020672:	4a0e      	ldr	r2, [pc, #56]	@ (80206ac <HAL_MspInit+0x44>)
 8020674:	f043 0301 	orr.w	r3, r3, #1
 8020678:	6613      	str	r3, [r2, #96]	@ 0x60
 802067a:	4b0c      	ldr	r3, [pc, #48]	@ (80206ac <HAL_MspInit+0x44>)
 802067c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802067e:	f003 0301 	and.w	r3, r3, #1
 8020682:	607b      	str	r3, [r7, #4]
 8020684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020686:	4b09      	ldr	r3, [pc, #36]	@ (80206ac <HAL_MspInit+0x44>)
 8020688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802068a:	4a08      	ldr	r2, [pc, #32]	@ (80206ac <HAL_MspInit+0x44>)
 802068c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020690:	6593      	str	r3, [r2, #88]	@ 0x58
 8020692:	4b06      	ldr	r3, [pc, #24]	@ (80206ac <HAL_MspInit+0x44>)
 8020694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802069a:	603b      	str	r3, [r7, #0]
 802069c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802069e:	bf00      	nop
 80206a0:	370c      	adds	r7, #12
 80206a2:	46bd      	mov	sp, r7
 80206a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206a8:	4770      	bx	lr
 80206aa:	bf00      	nop
 80206ac:	40021000 	.word	0x40021000

080206b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80206b0:	b480      	push	{r7}
 80206b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80206b4:	bf00      	nop
 80206b6:	e7fd      	b.n	80206b4 <NMI_Handler+0x4>

080206b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80206b8:	b480      	push	{r7}
 80206ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80206bc:	bf00      	nop
 80206be:	e7fd      	b.n	80206bc <HardFault_Handler+0x4>

080206c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80206c0:	b480      	push	{r7}
 80206c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80206c4:	bf00      	nop
 80206c6:	e7fd      	b.n	80206c4 <MemManage_Handler+0x4>

080206c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80206c8:	b480      	push	{r7}
 80206ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80206cc:	bf00      	nop
 80206ce:	e7fd      	b.n	80206cc <BusFault_Handler+0x4>

080206d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80206d0:	b480      	push	{r7}
 80206d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80206d4:	bf00      	nop
 80206d6:	e7fd      	b.n	80206d4 <UsageFault_Handler+0x4>

080206d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80206d8:	b480      	push	{r7}
 80206da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80206dc:	bf00      	nop
 80206de:	46bd      	mov	sp, r7
 80206e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206e4:	4770      	bx	lr

080206e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80206e6:	b480      	push	{r7}
 80206e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80206ea:	bf00      	nop
 80206ec:	46bd      	mov	sp, r7
 80206ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206f2:	4770      	bx	lr

080206f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80206f4:	b480      	push	{r7}
 80206f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80206f8:	bf00      	nop
 80206fa:	46bd      	mov	sp, r7
 80206fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020700:	4770      	bx	lr

08020702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020702:	b580      	push	{r7, lr}
 8020704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020706:	f000 f95d 	bl	80209c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802070a:	bf00      	nop
 802070c:	bd80      	pop	{r7, pc}
	...

08020710 <ITM_SendChar>:

#define ITM_STIMULUS_PORT0					*((volatile uint32_t*) 0xE00000000)

#define ITM_TRACE_EN					*((volatile uint32_t*) 0xE00000E00)

void ITM_SendChar(uint8_t ch){
 8020710:	b480      	push	{r7}
 8020712:	b083      	sub	sp, #12
 8020714:	af00      	add	r7, sp, #0
 8020716:	4603      	mov	r3, r0
 8020718:	71fb      	strb	r3, [r7, #7]

	DEMCR |= (1<<24);
 802071a:	4b0f      	ldr	r3, [pc, #60]	@ (8020758 <ITM_SendChar+0x48>)
 802071c:	681b      	ldr	r3, [r3, #0]
 802071e:	4a0e      	ldr	r2, [pc, #56]	@ (8020758 <ITM_SendChar+0x48>)
 8020720:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020724:	6013      	str	r3, [r2, #0]
	ITM_TRACE_EN |= (1<<0);
 8020726:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8020730:	f043 0301 	orr.w	r3, r3, #1
 8020734:	6013      	str	r3, [r2, #0]

	while(!(ITM_STIMULUS_PORT0 & 1));
 8020736:	bf00      	nop
 8020738:	2300      	movs	r3, #0
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	f003 0301 	and.w	r3, r3, #1
 8020740:	2b00      	cmp	r3, #0
 8020742:	d0f9      	beq.n	8020738 <ITM_SendChar+0x28>

	ITM_STIMULUS_PORT0 = ch;
 8020744:	2200      	movs	r2, #0
 8020746:	79fb      	ldrb	r3, [r7, #7]
 8020748:	6013      	str	r3, [r2, #0]


}
 802074a:	bf00      	nop
 802074c:	370c      	adds	r7, #12
 802074e:	46bd      	mov	sp, r7
 8020750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020754:	4770      	bx	lr
 8020756:	bf00      	nop
 8020758:	e000edfc 	.word	0xe000edfc

0802075c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802075c:	b580      	push	{r7, lr}
 802075e:	b086      	sub	sp, #24
 8020760:	af00      	add	r7, sp, #0
 8020762:	60f8      	str	r0, [r7, #12]
 8020764:	60b9      	str	r1, [r7, #8]
 8020766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020768:	2300      	movs	r3, #0
 802076a:	617b      	str	r3, [r7, #20]
 802076c:	e00a      	b.n	8020784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 802076e:	f3af 8000 	nop.w
 8020772:	4601      	mov	r1, r0
 8020774:	68bb      	ldr	r3, [r7, #8]
 8020776:	1c5a      	adds	r2, r3, #1
 8020778:	60ba      	str	r2, [r7, #8]
 802077a:	b2ca      	uxtb	r2, r1
 802077c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802077e:	697b      	ldr	r3, [r7, #20]
 8020780:	3301      	adds	r3, #1
 8020782:	617b      	str	r3, [r7, #20]
 8020784:	697a      	ldr	r2, [r7, #20]
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	429a      	cmp	r2, r3
 802078a:	dbf0      	blt.n	802076e <_read+0x12>
  }

  return len;
 802078c:	687b      	ldr	r3, [r7, #4]
}
 802078e:	4618      	mov	r0, r3
 8020790:	3718      	adds	r7, #24
 8020792:	46bd      	mov	sp, r7
 8020794:	bd80      	pop	{r7, pc}

08020796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8020796:	b580      	push	{r7, lr}
 8020798:	b086      	sub	sp, #24
 802079a:	af00      	add	r7, sp, #0
 802079c:	60f8      	str	r0, [r7, #12]
 802079e:	60b9      	str	r1, [r7, #8]
 80207a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80207a2:	2300      	movs	r3, #0
 80207a4:	617b      	str	r3, [r7, #20]
 80207a6:	e009      	b.n	80207bc <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80207a8:	68bb      	ldr	r3, [r7, #8]
 80207aa:	1c5a      	adds	r2, r3, #1
 80207ac:	60ba      	str	r2, [r7, #8]
 80207ae:	781b      	ldrb	r3, [r3, #0]
 80207b0:	4618      	mov	r0, r3
 80207b2:	f7ff ffad 	bl	8020710 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80207b6:	697b      	ldr	r3, [r7, #20]
 80207b8:	3301      	adds	r3, #1
 80207ba:	617b      	str	r3, [r7, #20]
 80207bc:	697a      	ldr	r2, [r7, #20]
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	429a      	cmp	r2, r3
 80207c2:	dbf1      	blt.n	80207a8 <_write+0x12>
  }
  return len;
 80207c4:	687b      	ldr	r3, [r7, #4]
}
 80207c6:	4618      	mov	r0, r3
 80207c8:	3718      	adds	r7, #24
 80207ca:	46bd      	mov	sp, r7
 80207cc:	bd80      	pop	{r7, pc}

080207ce <_close>:

int _close(int file)
{
 80207ce:	b480      	push	{r7}
 80207d0:	b083      	sub	sp, #12
 80207d2:	af00      	add	r7, sp, #0
 80207d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80207d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80207da:	4618      	mov	r0, r3
 80207dc:	370c      	adds	r7, #12
 80207de:	46bd      	mov	sp, r7
 80207e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207e4:	4770      	bx	lr

080207e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80207e6:	b480      	push	{r7}
 80207e8:	b083      	sub	sp, #12
 80207ea:	af00      	add	r7, sp, #0
 80207ec:	6078      	str	r0, [r7, #4]
 80207ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80207f0:	683b      	ldr	r3, [r7, #0]
 80207f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80207f6:	605a      	str	r2, [r3, #4]
  return 0;
 80207f8:	2300      	movs	r3, #0
}
 80207fa:	4618      	mov	r0, r3
 80207fc:	370c      	adds	r7, #12
 80207fe:	46bd      	mov	sp, r7
 8020800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020804:	4770      	bx	lr

08020806 <_isatty>:

int _isatty(int file)
{
 8020806:	b480      	push	{r7}
 8020808:	b083      	sub	sp, #12
 802080a:	af00      	add	r7, sp, #0
 802080c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802080e:	2301      	movs	r3, #1
}
 8020810:	4618      	mov	r0, r3
 8020812:	370c      	adds	r7, #12
 8020814:	46bd      	mov	sp, r7
 8020816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802081a:	4770      	bx	lr

0802081c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802081c:	b480      	push	{r7}
 802081e:	b085      	sub	sp, #20
 8020820:	af00      	add	r7, sp, #0
 8020822:	60f8      	str	r0, [r7, #12]
 8020824:	60b9      	str	r1, [r7, #8]
 8020826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8020828:	2300      	movs	r3, #0
}
 802082a:	4618      	mov	r0, r3
 802082c:	3714      	adds	r7, #20
 802082e:	46bd      	mov	sp, r7
 8020830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020834:	4770      	bx	lr
	...

08020838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020838:	b580      	push	{r7, lr}
 802083a:	b086      	sub	sp, #24
 802083c:	af00      	add	r7, sp, #0
 802083e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020840:	4a14      	ldr	r2, [pc, #80]	@ (8020894 <_sbrk+0x5c>)
 8020842:	4b15      	ldr	r3, [pc, #84]	@ (8020898 <_sbrk+0x60>)
 8020844:	1ad3      	subs	r3, r2, r3
 8020846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020848:	697b      	ldr	r3, [r7, #20]
 802084a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802084c:	4b13      	ldr	r3, [pc, #76]	@ (802089c <_sbrk+0x64>)
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d102      	bne.n	802085a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020854:	4b11      	ldr	r3, [pc, #68]	@ (802089c <_sbrk+0x64>)
 8020856:	4a12      	ldr	r2, [pc, #72]	@ (80208a0 <_sbrk+0x68>)
 8020858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802085a:	4b10      	ldr	r3, [pc, #64]	@ (802089c <_sbrk+0x64>)
 802085c:	681a      	ldr	r2, [r3, #0]
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	4413      	add	r3, r2
 8020862:	693a      	ldr	r2, [r7, #16]
 8020864:	429a      	cmp	r2, r3
 8020866:	d207      	bcs.n	8020878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8020868:	f001 fd34 	bl	80222d4 <__errno>
 802086c:	4603      	mov	r3, r0
 802086e:	220c      	movs	r2, #12
 8020870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020872:	f04f 33ff 	mov.w	r3, #4294967295
 8020876:	e009      	b.n	802088c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8020878:	4b08      	ldr	r3, [pc, #32]	@ (802089c <_sbrk+0x64>)
 802087a:	681b      	ldr	r3, [r3, #0]
 802087c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802087e:	4b07      	ldr	r3, [pc, #28]	@ (802089c <_sbrk+0x64>)
 8020880:	681a      	ldr	r2, [r3, #0]
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	4413      	add	r3, r2
 8020886:	4a05      	ldr	r2, [pc, #20]	@ (802089c <_sbrk+0x64>)
 8020888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802088a:	68fb      	ldr	r3, [r7, #12]
}
 802088c:	4618      	mov	r0, r3
 802088e:	3718      	adds	r7, #24
 8020890:	46bd      	mov	sp, r7
 8020892:	bd80      	pop	{r7, pc}
 8020894:	200a0000 	.word	0x200a0000
 8020898:	00000400 	.word	0x00000400
 802089c:	20000084 	.word	0x20000084
 80208a0:	200001d8 	.word	0x200001d8

080208a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80208a4:	b480      	push	{r7}
 80208a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80208a8:	4b06      	ldr	r3, [pc, #24]	@ (80208c4 <SystemInit+0x20>)
 80208aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80208ae:	4a05      	ldr	r2, [pc, #20]	@ (80208c4 <SystemInit+0x20>)
 80208b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80208b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80208b8:	bf00      	nop
 80208ba:	46bd      	mov	sp, r7
 80208bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c0:	4770      	bx	lr
 80208c2:	bf00      	nop
 80208c4:	e000ed00 	.word	0xe000ed00

080208c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80208c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8020900 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80208cc:	f7ff ffea 	bl	80208a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80208d0:	480c      	ldr	r0, [pc, #48]	@ (8020904 <LoopForever+0x6>)
  ldr r1, =_edata
 80208d2:	490d      	ldr	r1, [pc, #52]	@ (8020908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80208d4:	4a0d      	ldr	r2, [pc, #52]	@ (802090c <LoopForever+0xe>)
  movs r3, #0
 80208d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80208d8:	e002      	b.n	80208e0 <LoopCopyDataInit>

080208da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80208da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80208dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80208de:	3304      	adds	r3, #4

080208e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80208e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80208e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80208e4:	d3f9      	bcc.n	80208da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80208e6:	4a0a      	ldr	r2, [pc, #40]	@ (8020910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80208e8:	4c0a      	ldr	r4, [pc, #40]	@ (8020914 <LoopForever+0x16>)
  movs r3, #0
 80208ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80208ec:	e001      	b.n	80208f2 <LoopFillZerobss>

080208ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80208ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80208f0:	3204      	adds	r2, #4

080208f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80208f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80208f4:	d3fb      	bcc.n	80208ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80208f6:	f001 fcf3 	bl	80222e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80208fa:	f7ff fd3f 	bl	802037c <main>

080208fe <LoopForever>:

LoopForever:
    b LoopForever
 80208fe:	e7fe      	b.n	80208fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8020900:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8020904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020908:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 802090c:	08022c48 	.word	0x08022c48
  ldr r2, =_sbss
 8020910:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8020914:	200001d8 	.word	0x200001d8

08020918 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020918:	e7fe      	b.n	8020918 <ADC1_IRQHandler>

0802091a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802091a:	b580      	push	{r7, lr}
 802091c:	b082      	sub	sp, #8
 802091e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8020920:	2300      	movs	r3, #0
 8020922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020924:	2003      	movs	r0, #3
 8020926:	f000 f943 	bl	8020bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802092a:	2000      	movs	r0, #0
 802092c:	f000 f80e 	bl	802094c <HAL_InitTick>
 8020930:	4603      	mov	r3, r0
 8020932:	2b00      	cmp	r3, #0
 8020934:	d002      	beq.n	802093c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8020936:	2301      	movs	r3, #1
 8020938:	71fb      	strb	r3, [r7, #7]
 802093a:	e001      	b.n	8020940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 802093c:	f7ff fe94 	bl	8020668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020940:	79fb      	ldrb	r3, [r7, #7]
}
 8020942:	4618      	mov	r0, r3
 8020944:	3708      	adds	r7, #8
 8020946:	46bd      	mov	sp, r7
 8020948:	bd80      	pop	{r7, pc}
	...

0802094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802094c:	b580      	push	{r7, lr}
 802094e:	b084      	sub	sp, #16
 8020950:	af00      	add	r7, sp, #0
 8020952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020954:	2300      	movs	r3, #0
 8020956:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020958:	4b17      	ldr	r3, [pc, #92]	@ (80209b8 <HAL_InitTick+0x6c>)
 802095a:	781b      	ldrb	r3, [r3, #0]
 802095c:	2b00      	cmp	r3, #0
 802095e:	d023      	beq.n	80209a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020960:	4b16      	ldr	r3, [pc, #88]	@ (80209bc <HAL_InitTick+0x70>)
 8020962:	681a      	ldr	r2, [r3, #0]
 8020964:	4b14      	ldr	r3, [pc, #80]	@ (80209b8 <HAL_InitTick+0x6c>)
 8020966:	781b      	ldrb	r3, [r3, #0]
 8020968:	4619      	mov	r1, r3
 802096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020972:	fbb2 f3f3 	udiv	r3, r2, r3
 8020976:	4618      	mov	r0, r3
 8020978:	f000 f941 	bl	8020bfe <HAL_SYSTICK_Config>
 802097c:	4603      	mov	r3, r0
 802097e:	2b00      	cmp	r3, #0
 8020980:	d10f      	bne.n	80209a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	2b0f      	cmp	r3, #15
 8020986:	d809      	bhi.n	802099c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020988:	2200      	movs	r2, #0
 802098a:	6879      	ldr	r1, [r7, #4]
 802098c:	f04f 30ff 	mov.w	r0, #4294967295
 8020990:	f000 f919 	bl	8020bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020994:	4a0a      	ldr	r2, [pc, #40]	@ (80209c0 <HAL_InitTick+0x74>)
 8020996:	687b      	ldr	r3, [r7, #4]
 8020998:	6013      	str	r3, [r2, #0]
 802099a:	e007      	b.n	80209ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 802099c:	2301      	movs	r3, #1
 802099e:	73fb      	strb	r3, [r7, #15]
 80209a0:	e004      	b.n	80209ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80209a2:	2301      	movs	r3, #1
 80209a4:	73fb      	strb	r3, [r7, #15]
 80209a6:	e001      	b.n	80209ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80209a8:	2301      	movs	r3, #1
 80209aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80209ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80209ae:	4618      	mov	r0, r3
 80209b0:	3710      	adds	r7, #16
 80209b2:	46bd      	mov	sp, r7
 80209b4:	bd80      	pop	{r7, pc}
 80209b6:	bf00      	nop
 80209b8:	20000008 	.word	0x20000008
 80209bc:	20000000 	.word	0x20000000
 80209c0:	20000004 	.word	0x20000004

080209c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80209c4:	b480      	push	{r7}
 80209c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80209c8:	4b06      	ldr	r3, [pc, #24]	@ (80209e4 <HAL_IncTick+0x20>)
 80209ca:	781b      	ldrb	r3, [r3, #0]
 80209cc:	461a      	mov	r2, r3
 80209ce:	4b06      	ldr	r3, [pc, #24]	@ (80209e8 <HAL_IncTick+0x24>)
 80209d0:	681b      	ldr	r3, [r3, #0]
 80209d2:	4413      	add	r3, r2
 80209d4:	4a04      	ldr	r2, [pc, #16]	@ (80209e8 <HAL_IncTick+0x24>)
 80209d6:	6013      	str	r3, [r2, #0]
}
 80209d8:	bf00      	nop
 80209da:	46bd      	mov	sp, r7
 80209dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209e0:	4770      	bx	lr
 80209e2:	bf00      	nop
 80209e4:	20000008 	.word	0x20000008
 80209e8:	20000088 	.word	0x20000088

080209ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80209ec:	b480      	push	{r7}
 80209ee:	af00      	add	r7, sp, #0
  return uwTick;
 80209f0:	4b03      	ldr	r3, [pc, #12]	@ (8020a00 <HAL_GetTick+0x14>)
 80209f2:	681b      	ldr	r3, [r3, #0]
}
 80209f4:	4618      	mov	r0, r3
 80209f6:	46bd      	mov	sp, r7
 80209f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209fc:	4770      	bx	lr
 80209fe:	bf00      	nop
 8020a00:	20000088 	.word	0x20000088

08020a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020a04:	b580      	push	{r7, lr}
 8020a06:	b084      	sub	sp, #16
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020a0c:	f7ff ffee 	bl	80209ec <HAL_GetTick>
 8020a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020a12:	687b      	ldr	r3, [r7, #4]
 8020a14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020a16:	68fb      	ldr	r3, [r7, #12]
 8020a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020a1c:	d005      	beq.n	8020a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8020a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8020a48 <HAL_Delay+0x44>)
 8020a20:	781b      	ldrb	r3, [r3, #0]
 8020a22:	461a      	mov	r2, r3
 8020a24:	68fb      	ldr	r3, [r7, #12]
 8020a26:	4413      	add	r3, r2
 8020a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8020a2a:	bf00      	nop
 8020a2c:	f7ff ffde 	bl	80209ec <HAL_GetTick>
 8020a30:	4602      	mov	r2, r0
 8020a32:	68bb      	ldr	r3, [r7, #8]
 8020a34:	1ad3      	subs	r3, r2, r3
 8020a36:	68fa      	ldr	r2, [r7, #12]
 8020a38:	429a      	cmp	r2, r3
 8020a3a:	d8f7      	bhi.n	8020a2c <HAL_Delay+0x28>
  {
  }
}
 8020a3c:	bf00      	nop
 8020a3e:	bf00      	nop
 8020a40:	3710      	adds	r7, #16
 8020a42:	46bd      	mov	sp, r7
 8020a44:	bd80      	pop	{r7, pc}
 8020a46:	bf00      	nop
 8020a48:	20000008 	.word	0x20000008

08020a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020a4c:	b480      	push	{r7}
 8020a4e:	b085      	sub	sp, #20
 8020a50:	af00      	add	r7, sp, #0
 8020a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	f003 0307 	and.w	r3, r3, #7
 8020a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8020a90 <__NVIC_SetPriorityGrouping+0x44>)
 8020a5e:	68db      	ldr	r3, [r3, #12]
 8020a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020a62:	68ba      	ldr	r2, [r7, #8]
 8020a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020a68:	4013      	ands	r3, r2
 8020a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020a6c:	68fb      	ldr	r3, [r7, #12]
 8020a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020a70:	68bb      	ldr	r3, [r7, #8]
 8020a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020a7e:	4a04      	ldr	r2, [pc, #16]	@ (8020a90 <__NVIC_SetPriorityGrouping+0x44>)
 8020a80:	68bb      	ldr	r3, [r7, #8]
 8020a82:	60d3      	str	r3, [r2, #12]
}
 8020a84:	bf00      	nop
 8020a86:	3714      	adds	r7, #20
 8020a88:	46bd      	mov	sp, r7
 8020a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a8e:	4770      	bx	lr
 8020a90:	e000ed00 	.word	0xe000ed00

08020a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020a94:	b480      	push	{r7}
 8020a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020a98:	4b04      	ldr	r3, [pc, #16]	@ (8020aac <__NVIC_GetPriorityGrouping+0x18>)
 8020a9a:	68db      	ldr	r3, [r3, #12]
 8020a9c:	0a1b      	lsrs	r3, r3, #8
 8020a9e:	f003 0307 	and.w	r3, r3, #7
}
 8020aa2:	4618      	mov	r0, r3
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aaa:	4770      	bx	lr
 8020aac:	e000ed00 	.word	0xe000ed00

08020ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020ab0:	b480      	push	{r7}
 8020ab2:	b083      	sub	sp, #12
 8020ab4:	af00      	add	r7, sp, #0
 8020ab6:	4603      	mov	r3, r0
 8020ab8:	6039      	str	r1, [r7, #0]
 8020aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	db0a      	blt.n	8020ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020ac4:	683b      	ldr	r3, [r7, #0]
 8020ac6:	b2da      	uxtb	r2, r3
 8020ac8:	490c      	ldr	r1, [pc, #48]	@ (8020afc <__NVIC_SetPriority+0x4c>)
 8020aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020ace:	0112      	lsls	r2, r2, #4
 8020ad0:	b2d2      	uxtb	r2, r2
 8020ad2:	440b      	add	r3, r1
 8020ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020ad8:	e00a      	b.n	8020af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020ada:	683b      	ldr	r3, [r7, #0]
 8020adc:	b2da      	uxtb	r2, r3
 8020ade:	4908      	ldr	r1, [pc, #32]	@ (8020b00 <__NVIC_SetPriority+0x50>)
 8020ae0:	79fb      	ldrb	r3, [r7, #7]
 8020ae2:	f003 030f 	and.w	r3, r3, #15
 8020ae6:	3b04      	subs	r3, #4
 8020ae8:	0112      	lsls	r2, r2, #4
 8020aea:	b2d2      	uxtb	r2, r2
 8020aec:	440b      	add	r3, r1
 8020aee:	761a      	strb	r2, [r3, #24]
}
 8020af0:	bf00      	nop
 8020af2:	370c      	adds	r7, #12
 8020af4:	46bd      	mov	sp, r7
 8020af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020afa:	4770      	bx	lr
 8020afc:	e000e100 	.word	0xe000e100
 8020b00:	e000ed00 	.word	0xe000ed00

08020b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020b04:	b480      	push	{r7}
 8020b06:	b089      	sub	sp, #36	@ 0x24
 8020b08:	af00      	add	r7, sp, #0
 8020b0a:	60f8      	str	r0, [r7, #12]
 8020b0c:	60b9      	str	r1, [r7, #8]
 8020b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020b10:	68fb      	ldr	r3, [r7, #12]
 8020b12:	f003 0307 	and.w	r3, r3, #7
 8020b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020b18:	69fb      	ldr	r3, [r7, #28]
 8020b1a:	f1c3 0307 	rsb	r3, r3, #7
 8020b1e:	2b04      	cmp	r3, #4
 8020b20:	bf28      	it	cs
 8020b22:	2304      	movcs	r3, #4
 8020b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020b26:	69fb      	ldr	r3, [r7, #28]
 8020b28:	3304      	adds	r3, #4
 8020b2a:	2b06      	cmp	r3, #6
 8020b2c:	d902      	bls.n	8020b34 <NVIC_EncodePriority+0x30>
 8020b2e:	69fb      	ldr	r3, [r7, #28]
 8020b30:	3b03      	subs	r3, #3
 8020b32:	e000      	b.n	8020b36 <NVIC_EncodePriority+0x32>
 8020b34:	2300      	movs	r3, #0
 8020b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b38:	f04f 32ff 	mov.w	r2, #4294967295
 8020b3c:	69bb      	ldr	r3, [r7, #24]
 8020b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8020b42:	43da      	mvns	r2, r3
 8020b44:	68bb      	ldr	r3, [r7, #8]
 8020b46:	401a      	ands	r2, r3
 8020b48:	697b      	ldr	r3, [r7, #20]
 8020b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8020b50:	697b      	ldr	r3, [r7, #20]
 8020b52:	fa01 f303 	lsl.w	r3, r1, r3
 8020b56:	43d9      	mvns	r1, r3
 8020b58:	687b      	ldr	r3, [r7, #4]
 8020b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b5c:	4313      	orrs	r3, r2
         );
}
 8020b5e:	4618      	mov	r0, r3
 8020b60:	3724      	adds	r7, #36	@ 0x24
 8020b62:	46bd      	mov	sp, r7
 8020b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b68:	4770      	bx	lr
	...

08020b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020b6c:	b580      	push	{r7, lr}
 8020b6e:	b082      	sub	sp, #8
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	3b01      	subs	r3, #1
 8020b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020b7c:	d301      	bcc.n	8020b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020b7e:	2301      	movs	r3, #1
 8020b80:	e00f      	b.n	8020ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020b82:	4a0a      	ldr	r2, [pc, #40]	@ (8020bac <SysTick_Config+0x40>)
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	3b01      	subs	r3, #1
 8020b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020b8a:	210f      	movs	r1, #15
 8020b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8020b90:	f7ff ff8e 	bl	8020ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020b94:	4b05      	ldr	r3, [pc, #20]	@ (8020bac <SysTick_Config+0x40>)
 8020b96:	2200      	movs	r2, #0
 8020b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020b9a:	4b04      	ldr	r3, [pc, #16]	@ (8020bac <SysTick_Config+0x40>)
 8020b9c:	2207      	movs	r2, #7
 8020b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020ba0:	2300      	movs	r3, #0
}
 8020ba2:	4618      	mov	r0, r3
 8020ba4:	3708      	adds	r7, #8
 8020ba6:	46bd      	mov	sp, r7
 8020ba8:	bd80      	pop	{r7, pc}
 8020baa:	bf00      	nop
 8020bac:	e000e010 	.word	0xe000e010

08020bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020bb0:	b580      	push	{r7, lr}
 8020bb2:	b082      	sub	sp, #8
 8020bb4:	af00      	add	r7, sp, #0
 8020bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020bb8:	6878      	ldr	r0, [r7, #4]
 8020bba:	f7ff ff47 	bl	8020a4c <__NVIC_SetPriorityGrouping>
}
 8020bbe:	bf00      	nop
 8020bc0:	3708      	adds	r7, #8
 8020bc2:	46bd      	mov	sp, r7
 8020bc4:	bd80      	pop	{r7, pc}

08020bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020bc6:	b580      	push	{r7, lr}
 8020bc8:	b086      	sub	sp, #24
 8020bca:	af00      	add	r7, sp, #0
 8020bcc:	4603      	mov	r3, r0
 8020bce:	60b9      	str	r1, [r7, #8]
 8020bd0:	607a      	str	r2, [r7, #4]
 8020bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8020bd4:	2300      	movs	r3, #0
 8020bd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020bd8:	f7ff ff5c 	bl	8020a94 <__NVIC_GetPriorityGrouping>
 8020bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020bde:	687a      	ldr	r2, [r7, #4]
 8020be0:	68b9      	ldr	r1, [r7, #8]
 8020be2:	6978      	ldr	r0, [r7, #20]
 8020be4:	f7ff ff8e 	bl	8020b04 <NVIC_EncodePriority>
 8020be8:	4602      	mov	r2, r0
 8020bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020bee:	4611      	mov	r1, r2
 8020bf0:	4618      	mov	r0, r3
 8020bf2:	f7ff ff5d 	bl	8020ab0 <__NVIC_SetPriority>
}
 8020bf6:	bf00      	nop
 8020bf8:	3718      	adds	r7, #24
 8020bfa:	46bd      	mov	sp, r7
 8020bfc:	bd80      	pop	{r7, pc}

08020bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020bfe:	b580      	push	{r7, lr}
 8020c00:	b082      	sub	sp, #8
 8020c02:	af00      	add	r7, sp, #0
 8020c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020c06:	6878      	ldr	r0, [r7, #4]
 8020c08:	f7ff ffb0 	bl	8020b6c <SysTick_Config>
 8020c0c:	4603      	mov	r3, r0
}
 8020c0e:	4618      	mov	r0, r3
 8020c10:	3708      	adds	r7, #8
 8020c12:	46bd      	mov	sp, r7
 8020c14:	bd80      	pop	{r7, pc}
	...

08020c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8020c18:	b480      	push	{r7}
 8020c1a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8020c54 <HAL_PWREx_GetVoltageRange+0x3c>)
 8020c1e:	681b      	ldr	r3, [r3, #0]
 8020c20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020c28:	d102      	bne.n	8020c30 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8020c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020c2e:	e00b      	b.n	8020c48 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8020c30:	4b08      	ldr	r3, [pc, #32]	@ (8020c54 <HAL_PWREx_GetVoltageRange+0x3c>)
 8020c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020c3e:	d102      	bne.n	8020c46 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8020c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8020c44:	e000      	b.n	8020c48 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8020c46:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8020c48:	4618      	mov	r0, r3
 8020c4a:	46bd      	mov	sp, r7
 8020c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c50:	4770      	bx	lr
 8020c52:	bf00      	nop
 8020c54:	40007000 	.word	0x40007000

08020c58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8020c58:	b480      	push	{r7}
 8020c5a:	b085      	sub	sp, #20
 8020c5c:	af00      	add	r7, sp, #0
 8020c5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8020c60:	687b      	ldr	r3, [r7, #4]
 8020c62:	2b00      	cmp	r3, #0
 8020c64:	d141      	bne.n	8020cea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020c66:	4b4b      	ldr	r3, [pc, #300]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c68:	681b      	ldr	r3, [r3, #0]
 8020c6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020c72:	d131      	bne.n	8020cd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020c74:	4b47      	ldr	r3, [pc, #284]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020c7a:	4a46      	ldr	r2, [pc, #280]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020c80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8020c84:	4b43      	ldr	r3, [pc, #268]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c86:	681b      	ldr	r3, [r3, #0]
 8020c88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020c8c:	4a41      	ldr	r2, [pc, #260]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020c92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8020c94:	4b40      	ldr	r3, [pc, #256]	@ (8020d98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8020c96:	681b      	ldr	r3, [r3, #0]
 8020c98:	2232      	movs	r2, #50	@ 0x32
 8020c9a:	fb02 f303 	mul.w	r3, r2, r3
 8020c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8020d9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8020ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8020ca4:	0c9b      	lsrs	r3, r3, #18
 8020ca6:	3301      	adds	r3, #1
 8020ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020caa:	e002      	b.n	8020cb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	3b01      	subs	r3, #1
 8020cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020cb2:	4b38      	ldr	r3, [pc, #224]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020cb4:	695b      	ldr	r3, [r3, #20]
 8020cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020cbe:	d102      	bne.n	8020cc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8020cc0:	68fb      	ldr	r3, [r7, #12]
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	d1f2      	bne.n	8020cac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8020cc6:	4b33      	ldr	r3, [pc, #204]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020cc8:	695b      	ldr	r3, [r3, #20]
 8020cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020cd2:	d158      	bne.n	8020d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8020cd4:	2303      	movs	r3, #3
 8020cd6:	e057      	b.n	8020d88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020cde:	4a2d      	ldr	r2, [pc, #180]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020ce4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020ce8:	e04d      	b.n	8020d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020cf0:	d141      	bne.n	8020d76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020cf2:	4b28      	ldr	r3, [pc, #160]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020cf4:	681b      	ldr	r3, [r3, #0]
 8020cf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020cfe:	d131      	bne.n	8020d64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020d00:	4b24      	ldr	r3, [pc, #144]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020d06:	4a23      	ldr	r2, [pc, #140]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020d0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8020d10:	4b20      	ldr	r3, [pc, #128]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d12:	681b      	ldr	r3, [r3, #0]
 8020d14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020d18:	4a1e      	ldr	r2, [pc, #120]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020d1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8020d20:	4b1d      	ldr	r3, [pc, #116]	@ (8020d98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	2232      	movs	r2, #50	@ 0x32
 8020d26:	fb02 f303 	mul.w	r3, r2, r3
 8020d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8020d9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8020d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8020d30:	0c9b      	lsrs	r3, r3, #18
 8020d32:	3301      	adds	r3, #1
 8020d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020d36:	e002      	b.n	8020d3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	3b01      	subs	r3, #1
 8020d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020d3e:	4b15      	ldr	r3, [pc, #84]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d40:	695b      	ldr	r3, [r3, #20]
 8020d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020d4a:	d102      	bne.n	8020d52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8020d4c:	68fb      	ldr	r3, [r7, #12]
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d1f2      	bne.n	8020d38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8020d52:	4b10      	ldr	r3, [pc, #64]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d54:	695b      	ldr	r3, [r3, #20]
 8020d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020d5e:	d112      	bne.n	8020d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8020d60:	2303      	movs	r3, #3
 8020d62:	e011      	b.n	8020d88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020d64:	4b0b      	ldr	r3, [pc, #44]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020d70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020d74:	e007      	b.n	8020d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8020d76:	4b07      	ldr	r3, [pc, #28]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d78:	681b      	ldr	r3, [r3, #0]
 8020d7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020d7e:	4a05      	ldr	r2, [pc, #20]	@ (8020d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8020d84:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8020d86:	2300      	movs	r3, #0
}
 8020d88:	4618      	mov	r0, r3
 8020d8a:	3714      	adds	r7, #20
 8020d8c:	46bd      	mov	sp, r7
 8020d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d92:	4770      	bx	lr
 8020d94:	40007000 	.word	0x40007000
 8020d98:	20000000 	.word	0x20000000
 8020d9c:	431bde83 	.word	0x431bde83

08020da0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020da0:	b580      	push	{r7, lr}
 8020da2:	b088      	sub	sp, #32
 8020da4:	af00      	add	r7, sp, #0
 8020da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d102      	bne.n	8020db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8020dae:	2301      	movs	r3, #1
 8020db0:	f000 bc08 	b.w	80215c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8020db4:	4b96      	ldr	r3, [pc, #600]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020db6:	689b      	ldr	r3, [r3, #8]
 8020db8:	f003 030c 	and.w	r3, r3, #12
 8020dbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8020dbe:	4b94      	ldr	r3, [pc, #592]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020dc0:	68db      	ldr	r3, [r3, #12]
 8020dc2:	f003 0303 	and.w	r3, r3, #3
 8020dc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8020dc8:	687b      	ldr	r3, [r7, #4]
 8020dca:	681b      	ldr	r3, [r3, #0]
 8020dcc:	f003 0310 	and.w	r3, r3, #16
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	f000 80e4 	beq.w	8020f9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8020dd6:	69bb      	ldr	r3, [r7, #24]
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d007      	beq.n	8020dec <HAL_RCC_OscConfig+0x4c>
 8020ddc:	69bb      	ldr	r3, [r7, #24]
 8020dde:	2b0c      	cmp	r3, #12
 8020de0:	f040 808b 	bne.w	8020efa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8020de4:	697b      	ldr	r3, [r7, #20]
 8020de6:	2b01      	cmp	r3, #1
 8020de8:	f040 8087 	bne.w	8020efa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8020dec:	4b88      	ldr	r3, [pc, #544]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020dee:	681b      	ldr	r3, [r3, #0]
 8020df0:	f003 0302 	and.w	r3, r3, #2
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	d005      	beq.n	8020e04 <HAL_RCC_OscConfig+0x64>
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	699b      	ldr	r3, [r3, #24]
 8020dfc:	2b00      	cmp	r3, #0
 8020dfe:	d101      	bne.n	8020e04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8020e00:	2301      	movs	r3, #1
 8020e02:	e3df      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	6a1a      	ldr	r2, [r3, #32]
 8020e08:	4b81      	ldr	r3, [pc, #516]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e0a:	681b      	ldr	r3, [r3, #0]
 8020e0c:	f003 0308 	and.w	r3, r3, #8
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	d004      	beq.n	8020e1e <HAL_RCC_OscConfig+0x7e>
 8020e14:	4b7e      	ldr	r3, [pc, #504]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020e1c:	e005      	b.n	8020e2a <HAL_RCC_OscConfig+0x8a>
 8020e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020e24:	091b      	lsrs	r3, r3, #4
 8020e26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020e2a:	4293      	cmp	r3, r2
 8020e2c:	d223      	bcs.n	8020e76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	6a1b      	ldr	r3, [r3, #32]
 8020e32:	4618      	mov	r0, r3
 8020e34:	f000 fd94 	bl	8021960 <RCC_SetFlashLatencyFromMSIRange>
 8020e38:	4603      	mov	r3, r0
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d001      	beq.n	8020e42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8020e3e:	2301      	movs	r3, #1
 8020e40:	e3c0      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8020e42:	4b73      	ldr	r3, [pc, #460]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e44:	681b      	ldr	r3, [r3, #0]
 8020e46:	4a72      	ldr	r2, [pc, #456]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e48:	f043 0308 	orr.w	r3, r3, #8
 8020e4c:	6013      	str	r3, [r2, #0]
 8020e4e:	4b70      	ldr	r3, [pc, #448]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e50:	681b      	ldr	r3, [r3, #0]
 8020e52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	6a1b      	ldr	r3, [r3, #32]
 8020e5a:	496d      	ldr	r1, [pc, #436]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e5c:	4313      	orrs	r3, r2
 8020e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8020e60:	4b6b      	ldr	r3, [pc, #428]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e62:	685b      	ldr	r3, [r3, #4]
 8020e64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	69db      	ldr	r3, [r3, #28]
 8020e6c:	021b      	lsls	r3, r3, #8
 8020e6e:	4968      	ldr	r1, [pc, #416]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e70:	4313      	orrs	r3, r2
 8020e72:	604b      	str	r3, [r1, #4]
 8020e74:	e025      	b.n	8020ec2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8020e76:	4b66      	ldr	r3, [pc, #408]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e78:	681b      	ldr	r3, [r3, #0]
 8020e7a:	4a65      	ldr	r2, [pc, #404]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e7c:	f043 0308 	orr.w	r3, r3, #8
 8020e80:	6013      	str	r3, [r2, #0]
 8020e82:	4b63      	ldr	r3, [pc, #396]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e84:	681b      	ldr	r3, [r3, #0]
 8020e86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	6a1b      	ldr	r3, [r3, #32]
 8020e8e:	4960      	ldr	r1, [pc, #384]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e90:	4313      	orrs	r3, r2
 8020e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8020e94:	4b5e      	ldr	r3, [pc, #376]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020e96:	685b      	ldr	r3, [r3, #4]
 8020e98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	69db      	ldr	r3, [r3, #28]
 8020ea0:	021b      	lsls	r3, r3, #8
 8020ea2:	495b      	ldr	r1, [pc, #364]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020ea4:	4313      	orrs	r3, r2
 8020ea6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8020ea8:	69bb      	ldr	r3, [r7, #24]
 8020eaa:	2b00      	cmp	r3, #0
 8020eac:	d109      	bne.n	8020ec2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	6a1b      	ldr	r3, [r3, #32]
 8020eb2:	4618      	mov	r0, r3
 8020eb4:	f000 fd54 	bl	8021960 <RCC_SetFlashLatencyFromMSIRange>
 8020eb8:	4603      	mov	r3, r0
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d001      	beq.n	8020ec2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8020ebe:	2301      	movs	r3, #1
 8020ec0:	e380      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8020ec2:	f000 fcc1 	bl	8021848 <HAL_RCC_GetSysClockFreq>
 8020ec6:	4602      	mov	r2, r0
 8020ec8:	4b51      	ldr	r3, [pc, #324]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020eca:	689b      	ldr	r3, [r3, #8]
 8020ecc:	091b      	lsrs	r3, r3, #4
 8020ece:	f003 030f 	and.w	r3, r3, #15
 8020ed2:	4950      	ldr	r1, [pc, #320]	@ (8021014 <HAL_RCC_OscConfig+0x274>)
 8020ed4:	5ccb      	ldrb	r3, [r1, r3]
 8020ed6:	f003 031f 	and.w	r3, r3, #31
 8020eda:	fa22 f303 	lsr.w	r3, r2, r3
 8020ede:	4a4e      	ldr	r2, [pc, #312]	@ (8021018 <HAL_RCC_OscConfig+0x278>)
 8020ee0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8020ee2:	4b4e      	ldr	r3, [pc, #312]	@ (802101c <HAL_RCC_OscConfig+0x27c>)
 8020ee4:	681b      	ldr	r3, [r3, #0]
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	f7ff fd30 	bl	802094c <HAL_InitTick>
 8020eec:	4603      	mov	r3, r0
 8020eee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8020ef0:	7bfb      	ldrb	r3, [r7, #15]
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	d052      	beq.n	8020f9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8020ef6:	7bfb      	ldrb	r3, [r7, #15]
 8020ef8:	e364      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	699b      	ldr	r3, [r3, #24]
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d032      	beq.n	8020f68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8020f02:	4b43      	ldr	r3, [pc, #268]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f04:	681b      	ldr	r3, [r3, #0]
 8020f06:	4a42      	ldr	r2, [pc, #264]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f08:	f043 0301 	orr.w	r3, r3, #1
 8020f0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8020f0e:	f7ff fd6d 	bl	80209ec <HAL_GetTick>
 8020f12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8020f14:	e008      	b.n	8020f28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8020f16:	f7ff fd69 	bl	80209ec <HAL_GetTick>
 8020f1a:	4602      	mov	r2, r0
 8020f1c:	693b      	ldr	r3, [r7, #16]
 8020f1e:	1ad3      	subs	r3, r2, r3
 8020f20:	2b02      	cmp	r3, #2
 8020f22:	d901      	bls.n	8020f28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8020f24:	2303      	movs	r3, #3
 8020f26:	e34d      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8020f28:	4b39      	ldr	r3, [pc, #228]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f2a:	681b      	ldr	r3, [r3, #0]
 8020f2c:	f003 0302 	and.w	r3, r3, #2
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d0f0      	beq.n	8020f16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8020f34:	4b36      	ldr	r3, [pc, #216]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f36:	681b      	ldr	r3, [r3, #0]
 8020f38:	4a35      	ldr	r2, [pc, #212]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f3a:	f043 0308 	orr.w	r3, r3, #8
 8020f3e:	6013      	str	r3, [r2, #0]
 8020f40:	4b33      	ldr	r3, [pc, #204]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	6a1b      	ldr	r3, [r3, #32]
 8020f4c:	4930      	ldr	r1, [pc, #192]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f4e:	4313      	orrs	r3, r2
 8020f50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8020f52:	4b2f      	ldr	r3, [pc, #188]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f54:	685b      	ldr	r3, [r3, #4]
 8020f56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	69db      	ldr	r3, [r3, #28]
 8020f5e:	021b      	lsls	r3, r3, #8
 8020f60:	492b      	ldr	r1, [pc, #172]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f62:	4313      	orrs	r3, r2
 8020f64:	604b      	str	r3, [r1, #4]
 8020f66:	e01a      	b.n	8020f9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8020f68:	4b29      	ldr	r3, [pc, #164]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f6a:	681b      	ldr	r3, [r3, #0]
 8020f6c:	4a28      	ldr	r2, [pc, #160]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f6e:	f023 0301 	bic.w	r3, r3, #1
 8020f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8020f74:	f7ff fd3a 	bl	80209ec <HAL_GetTick>
 8020f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8020f7a:	e008      	b.n	8020f8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8020f7c:	f7ff fd36 	bl	80209ec <HAL_GetTick>
 8020f80:	4602      	mov	r2, r0
 8020f82:	693b      	ldr	r3, [r7, #16]
 8020f84:	1ad3      	subs	r3, r2, r3
 8020f86:	2b02      	cmp	r3, #2
 8020f88:	d901      	bls.n	8020f8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8020f8a:	2303      	movs	r3, #3
 8020f8c:	e31a      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8020f8e:	4b20      	ldr	r3, [pc, #128]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020f90:	681b      	ldr	r3, [r3, #0]
 8020f92:	f003 0302 	and.w	r3, r3, #2
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d1f0      	bne.n	8020f7c <HAL_RCC_OscConfig+0x1dc>
 8020f9a:	e000      	b.n	8020f9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8020f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8020f9e:	687b      	ldr	r3, [r7, #4]
 8020fa0:	681b      	ldr	r3, [r3, #0]
 8020fa2:	f003 0301 	and.w	r3, r3, #1
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	d073      	beq.n	8021092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8020faa:	69bb      	ldr	r3, [r7, #24]
 8020fac:	2b08      	cmp	r3, #8
 8020fae:	d005      	beq.n	8020fbc <HAL_RCC_OscConfig+0x21c>
 8020fb0:	69bb      	ldr	r3, [r7, #24]
 8020fb2:	2b0c      	cmp	r3, #12
 8020fb4:	d10e      	bne.n	8020fd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8020fb6:	697b      	ldr	r3, [r7, #20]
 8020fb8:	2b03      	cmp	r3, #3
 8020fba:	d10b      	bne.n	8020fd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020fbc:	4b14      	ldr	r3, [pc, #80]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020fbe:	681b      	ldr	r3, [r3, #0]
 8020fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d063      	beq.n	8021090 <HAL_RCC_OscConfig+0x2f0>
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	685b      	ldr	r3, [r3, #4]
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	d15f      	bne.n	8021090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8020fd0:	2301      	movs	r3, #1
 8020fd2:	e2f7      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	685b      	ldr	r3, [r3, #4]
 8020fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020fdc:	d106      	bne.n	8020fec <HAL_RCC_OscConfig+0x24c>
 8020fde:	4b0c      	ldr	r3, [pc, #48]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020fe8:	6013      	str	r3, [r2, #0]
 8020fea:	e025      	b.n	8021038 <HAL_RCC_OscConfig+0x298>
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	685b      	ldr	r3, [r3, #4]
 8020ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8020ff4:	d114      	bne.n	8021020 <HAL_RCC_OscConfig+0x280>
 8020ff6:	4b06      	ldr	r3, [pc, #24]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020ff8:	681b      	ldr	r3, [r3, #0]
 8020ffa:	4a05      	ldr	r2, [pc, #20]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8020ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8021000:	6013      	str	r3, [r2, #0]
 8021002:	4b03      	ldr	r3, [pc, #12]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8021004:	681b      	ldr	r3, [r3, #0]
 8021006:	4a02      	ldr	r2, [pc, #8]	@ (8021010 <HAL_RCC_OscConfig+0x270>)
 8021008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802100c:	6013      	str	r3, [r2, #0]
 802100e:	e013      	b.n	8021038 <HAL_RCC_OscConfig+0x298>
 8021010:	40021000 	.word	0x40021000
 8021014:	08022bc4 	.word	0x08022bc4
 8021018:	20000000 	.word	0x20000000
 802101c:	20000004 	.word	0x20000004
 8021020:	4ba0      	ldr	r3, [pc, #640]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021022:	681b      	ldr	r3, [r3, #0]
 8021024:	4a9f      	ldr	r2, [pc, #636]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 802102a:	6013      	str	r3, [r2, #0]
 802102c:	4b9d      	ldr	r3, [pc, #628]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	4a9c      	ldr	r2, [pc, #624]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	685b      	ldr	r3, [r3, #4]
 802103c:	2b00      	cmp	r3, #0
 802103e:	d013      	beq.n	8021068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021040:	f7ff fcd4 	bl	80209ec <HAL_GetTick>
 8021044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021046:	e008      	b.n	802105a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021048:	f7ff fcd0 	bl	80209ec <HAL_GetTick>
 802104c:	4602      	mov	r2, r0
 802104e:	693b      	ldr	r3, [r7, #16]
 8021050:	1ad3      	subs	r3, r2, r3
 8021052:	2b64      	cmp	r3, #100	@ 0x64
 8021054:	d901      	bls.n	802105a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8021056:	2303      	movs	r3, #3
 8021058:	e2b4      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802105a:	4b92      	ldr	r3, [pc, #584]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021062:	2b00      	cmp	r3, #0
 8021064:	d0f0      	beq.n	8021048 <HAL_RCC_OscConfig+0x2a8>
 8021066:	e014      	b.n	8021092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021068:	f7ff fcc0 	bl	80209ec <HAL_GetTick>
 802106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 802106e:	e008      	b.n	8021082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021070:	f7ff fcbc 	bl	80209ec <HAL_GetTick>
 8021074:	4602      	mov	r2, r0
 8021076:	693b      	ldr	r3, [r7, #16]
 8021078:	1ad3      	subs	r3, r2, r3
 802107a:	2b64      	cmp	r3, #100	@ 0x64
 802107c:	d901      	bls.n	8021082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 802107e:	2303      	movs	r3, #3
 8021080:	e2a0      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021082:	4b88      	ldr	r3, [pc, #544]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802108a:	2b00      	cmp	r3, #0
 802108c:	d1f0      	bne.n	8021070 <HAL_RCC_OscConfig+0x2d0>
 802108e:	e000      	b.n	8021092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	f003 0302 	and.w	r3, r3, #2
 802109a:	2b00      	cmp	r3, #0
 802109c:	d060      	beq.n	8021160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 802109e:	69bb      	ldr	r3, [r7, #24]
 80210a0:	2b04      	cmp	r3, #4
 80210a2:	d005      	beq.n	80210b0 <HAL_RCC_OscConfig+0x310>
 80210a4:	69bb      	ldr	r3, [r7, #24]
 80210a6:	2b0c      	cmp	r3, #12
 80210a8:	d119      	bne.n	80210de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80210aa:	697b      	ldr	r3, [r7, #20]
 80210ac:	2b02      	cmp	r3, #2
 80210ae:	d116      	bne.n	80210de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80210b0:	4b7c      	ldr	r3, [pc, #496]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d005      	beq.n	80210c8 <HAL_RCC_OscConfig+0x328>
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	68db      	ldr	r3, [r3, #12]
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	d101      	bne.n	80210c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80210c4:	2301      	movs	r3, #1
 80210c6:	e27d      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80210c8:	4b76      	ldr	r3, [pc, #472]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80210ca:	685b      	ldr	r3, [r3, #4]
 80210cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80210d0:	687b      	ldr	r3, [r7, #4]
 80210d2:	691b      	ldr	r3, [r3, #16]
 80210d4:	061b      	lsls	r3, r3, #24
 80210d6:	4973      	ldr	r1, [pc, #460]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80210d8:	4313      	orrs	r3, r2
 80210da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80210dc:	e040      	b.n	8021160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	68db      	ldr	r3, [r3, #12]
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d023      	beq.n	802112e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80210e6:	4b6f      	ldr	r3, [pc, #444]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	4a6e      	ldr	r2, [pc, #440]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80210ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80210f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80210f2:	f7ff fc7b 	bl	80209ec <HAL_GetTick>
 80210f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80210f8:	e008      	b.n	802110c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80210fa:	f7ff fc77 	bl	80209ec <HAL_GetTick>
 80210fe:	4602      	mov	r2, r0
 8021100:	693b      	ldr	r3, [r7, #16]
 8021102:	1ad3      	subs	r3, r2, r3
 8021104:	2b02      	cmp	r3, #2
 8021106:	d901      	bls.n	802110c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8021108:	2303      	movs	r3, #3
 802110a:	e25b      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802110c:	4b65      	ldr	r3, [pc, #404]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021114:	2b00      	cmp	r3, #0
 8021116:	d0f0      	beq.n	80210fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021118:	4b62      	ldr	r3, [pc, #392]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 802111a:	685b      	ldr	r3, [r3, #4]
 802111c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	691b      	ldr	r3, [r3, #16]
 8021124:	061b      	lsls	r3, r3, #24
 8021126:	495f      	ldr	r1, [pc, #380]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021128:	4313      	orrs	r3, r2
 802112a:	604b      	str	r3, [r1, #4]
 802112c:	e018      	b.n	8021160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802112e:	4b5d      	ldr	r3, [pc, #372]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	4a5c      	ldr	r2, [pc, #368]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802113a:	f7ff fc57 	bl	80209ec <HAL_GetTick>
 802113e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021140:	e008      	b.n	8021154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021142:	f7ff fc53 	bl	80209ec <HAL_GetTick>
 8021146:	4602      	mov	r2, r0
 8021148:	693b      	ldr	r3, [r7, #16]
 802114a:	1ad3      	subs	r3, r2, r3
 802114c:	2b02      	cmp	r3, #2
 802114e:	d901      	bls.n	8021154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8021150:	2303      	movs	r3, #3
 8021152:	e237      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021154:	4b53      	ldr	r3, [pc, #332]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021156:	681b      	ldr	r3, [r3, #0]
 8021158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802115c:	2b00      	cmp	r3, #0
 802115e:	d1f0      	bne.n	8021142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	f003 0308 	and.w	r3, r3, #8
 8021168:	2b00      	cmp	r3, #0
 802116a:	d03c      	beq.n	80211e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	695b      	ldr	r3, [r3, #20]
 8021170:	2b00      	cmp	r3, #0
 8021172:	d01c      	beq.n	80211ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021174:	4b4b      	ldr	r3, [pc, #300]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802117a:	4a4a      	ldr	r2, [pc, #296]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 802117c:	f043 0301 	orr.w	r3, r3, #1
 8021180:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021184:	f7ff fc32 	bl	80209ec <HAL_GetTick>
 8021188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 802118a:	e008      	b.n	802119e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802118c:	f7ff fc2e 	bl	80209ec <HAL_GetTick>
 8021190:	4602      	mov	r2, r0
 8021192:	693b      	ldr	r3, [r7, #16]
 8021194:	1ad3      	subs	r3, r2, r3
 8021196:	2b02      	cmp	r3, #2
 8021198:	d901      	bls.n	802119e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 802119a:	2303      	movs	r3, #3
 802119c:	e212      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 802119e:	4b41      	ldr	r3, [pc, #260]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80211a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80211a4:	f003 0302 	and.w	r3, r3, #2
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d0ef      	beq.n	802118c <HAL_RCC_OscConfig+0x3ec>
 80211ac:	e01b      	b.n	80211e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80211ae:	4b3d      	ldr	r3, [pc, #244]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80211b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80211b4:	4a3b      	ldr	r2, [pc, #236]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80211b6:	f023 0301 	bic.w	r3, r3, #1
 80211ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80211be:	f7ff fc15 	bl	80209ec <HAL_GetTick>
 80211c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80211c4:	e008      	b.n	80211d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80211c6:	f7ff fc11 	bl	80209ec <HAL_GetTick>
 80211ca:	4602      	mov	r2, r0
 80211cc:	693b      	ldr	r3, [r7, #16]
 80211ce:	1ad3      	subs	r3, r2, r3
 80211d0:	2b02      	cmp	r3, #2
 80211d2:	d901      	bls.n	80211d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80211d4:	2303      	movs	r3, #3
 80211d6:	e1f5      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80211d8:	4b32      	ldr	r3, [pc, #200]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80211da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80211de:	f003 0302 	and.w	r3, r3, #2
 80211e2:	2b00      	cmp	r3, #0
 80211e4:	d1ef      	bne.n	80211c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80211e6:	687b      	ldr	r3, [r7, #4]
 80211e8:	681b      	ldr	r3, [r3, #0]
 80211ea:	f003 0304 	and.w	r3, r3, #4
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	f000 80a6 	beq.w	8021340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80211f4:	2300      	movs	r3, #0
 80211f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80211f8:	4b2a      	ldr	r3, [pc, #168]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 80211fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80211fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021200:	2b00      	cmp	r3, #0
 8021202:	d10d      	bne.n	8021220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021204:	4b27      	ldr	r3, [pc, #156]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021208:	4a26      	ldr	r2, [pc, #152]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 802120a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802120e:	6593      	str	r3, [r2, #88]	@ 0x58
 8021210:	4b24      	ldr	r3, [pc, #144]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021218:	60bb      	str	r3, [r7, #8]
 802121a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802121c:	2301      	movs	r3, #1
 802121e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021220:	4b21      	ldr	r3, [pc, #132]	@ (80212a8 <HAL_RCC_OscConfig+0x508>)
 8021222:	681b      	ldr	r3, [r3, #0]
 8021224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021228:	2b00      	cmp	r3, #0
 802122a:	d118      	bne.n	802125e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802122c:	4b1e      	ldr	r3, [pc, #120]	@ (80212a8 <HAL_RCC_OscConfig+0x508>)
 802122e:	681b      	ldr	r3, [r3, #0]
 8021230:	4a1d      	ldr	r2, [pc, #116]	@ (80212a8 <HAL_RCC_OscConfig+0x508>)
 8021232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021238:	f7ff fbd8 	bl	80209ec <HAL_GetTick>
 802123c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802123e:	e008      	b.n	8021252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021240:	f7ff fbd4 	bl	80209ec <HAL_GetTick>
 8021244:	4602      	mov	r2, r0
 8021246:	693b      	ldr	r3, [r7, #16]
 8021248:	1ad3      	subs	r3, r2, r3
 802124a:	2b02      	cmp	r3, #2
 802124c:	d901      	bls.n	8021252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 802124e:	2303      	movs	r3, #3
 8021250:	e1b8      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021252:	4b15      	ldr	r3, [pc, #84]	@ (80212a8 <HAL_RCC_OscConfig+0x508>)
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802125a:	2b00      	cmp	r3, #0
 802125c:	d0f0      	beq.n	8021240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	689b      	ldr	r3, [r3, #8]
 8021262:	2b01      	cmp	r3, #1
 8021264:	d108      	bne.n	8021278 <HAL_RCC_OscConfig+0x4d8>
 8021266:	4b0f      	ldr	r3, [pc, #60]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802126c:	4a0d      	ldr	r2, [pc, #52]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 802126e:	f043 0301 	orr.w	r3, r3, #1
 8021272:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021276:	e029      	b.n	80212cc <HAL_RCC_OscConfig+0x52c>
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	689b      	ldr	r3, [r3, #8]
 802127c:	2b05      	cmp	r3, #5
 802127e:	d115      	bne.n	80212ac <HAL_RCC_OscConfig+0x50c>
 8021280:	4b08      	ldr	r3, [pc, #32]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021286:	4a07      	ldr	r2, [pc, #28]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021288:	f043 0304 	orr.w	r3, r3, #4
 802128c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021290:	4b04      	ldr	r3, [pc, #16]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021296:	4a03      	ldr	r2, [pc, #12]	@ (80212a4 <HAL_RCC_OscConfig+0x504>)
 8021298:	f043 0301 	orr.w	r3, r3, #1
 802129c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80212a0:	e014      	b.n	80212cc <HAL_RCC_OscConfig+0x52c>
 80212a2:	bf00      	nop
 80212a4:	40021000 	.word	0x40021000
 80212a8:	40007000 	.word	0x40007000
 80212ac:	4b9d      	ldr	r3, [pc, #628]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80212ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80212b2:	4a9c      	ldr	r2, [pc, #624]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80212b4:	f023 0301 	bic.w	r3, r3, #1
 80212b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80212bc:	4b99      	ldr	r3, [pc, #612]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80212be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80212c2:	4a98      	ldr	r2, [pc, #608]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80212c4:	f023 0304 	bic.w	r3, r3, #4
 80212c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	689b      	ldr	r3, [r3, #8]
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	d016      	beq.n	8021302 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80212d4:	f7ff fb8a 	bl	80209ec <HAL_GetTick>
 80212d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80212da:	e00a      	b.n	80212f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80212dc:	f7ff fb86 	bl	80209ec <HAL_GetTick>
 80212e0:	4602      	mov	r2, r0
 80212e2:	693b      	ldr	r3, [r7, #16]
 80212e4:	1ad3      	subs	r3, r2, r3
 80212e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80212ea:	4293      	cmp	r3, r2
 80212ec:	d901      	bls.n	80212f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80212ee:	2303      	movs	r3, #3
 80212f0:	e168      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80212f2:	4b8c      	ldr	r3, [pc, #560]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80212f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80212f8:	f003 0302 	and.w	r3, r3, #2
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d0ed      	beq.n	80212dc <HAL_RCC_OscConfig+0x53c>
 8021300:	e015      	b.n	802132e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021302:	f7ff fb73 	bl	80209ec <HAL_GetTick>
 8021306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021308:	e00a      	b.n	8021320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802130a:	f7ff fb6f 	bl	80209ec <HAL_GetTick>
 802130e:	4602      	mov	r2, r0
 8021310:	693b      	ldr	r3, [r7, #16]
 8021312:	1ad3      	subs	r3, r2, r3
 8021314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021318:	4293      	cmp	r3, r2
 802131a:	d901      	bls.n	8021320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 802131c:	2303      	movs	r3, #3
 802131e:	e151      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021320:	4b80      	ldr	r3, [pc, #512]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021326:	f003 0302 	and.w	r3, r3, #2
 802132a:	2b00      	cmp	r3, #0
 802132c:	d1ed      	bne.n	802130a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802132e:	7ffb      	ldrb	r3, [r7, #31]
 8021330:	2b01      	cmp	r3, #1
 8021332:	d105      	bne.n	8021340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021334:	4b7b      	ldr	r3, [pc, #492]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021338:	4a7a      	ldr	r2, [pc, #488]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 802133a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802133e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	681b      	ldr	r3, [r3, #0]
 8021344:	f003 0320 	and.w	r3, r3, #32
 8021348:	2b00      	cmp	r3, #0
 802134a:	d03c      	beq.n	80213c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021350:	2b00      	cmp	r3, #0
 8021352:	d01c      	beq.n	802138e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8021354:	4b73      	ldr	r3, [pc, #460]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 802135a:	4a72      	ldr	r2, [pc, #456]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 802135c:	f043 0301 	orr.w	r3, r3, #1
 8021360:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021364:	f7ff fb42 	bl	80209ec <HAL_GetTick>
 8021368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 802136a:	e008      	b.n	802137e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802136c:	f7ff fb3e 	bl	80209ec <HAL_GetTick>
 8021370:	4602      	mov	r2, r0
 8021372:	693b      	ldr	r3, [r7, #16]
 8021374:	1ad3      	subs	r3, r2, r3
 8021376:	2b02      	cmp	r3, #2
 8021378:	d901      	bls.n	802137e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 802137a:	2303      	movs	r3, #3
 802137c:	e122      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 802137e:	4b69      	ldr	r3, [pc, #420]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021380:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021384:	f003 0302 	and.w	r3, r3, #2
 8021388:	2b00      	cmp	r3, #0
 802138a:	d0ef      	beq.n	802136c <HAL_RCC_OscConfig+0x5cc>
 802138c:	e01b      	b.n	80213c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 802138e:	4b65      	ldr	r3, [pc, #404]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021390:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021394:	4a63      	ldr	r2, [pc, #396]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021396:	f023 0301 	bic.w	r3, r3, #1
 802139a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802139e:	f7ff fb25 	bl	80209ec <HAL_GetTick>
 80213a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80213a4:	e008      	b.n	80213b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80213a6:	f7ff fb21 	bl	80209ec <HAL_GetTick>
 80213aa:	4602      	mov	r2, r0
 80213ac:	693b      	ldr	r3, [r7, #16]
 80213ae:	1ad3      	subs	r3, r2, r3
 80213b0:	2b02      	cmp	r3, #2
 80213b2:	d901      	bls.n	80213b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80213b4:	2303      	movs	r3, #3
 80213b6:	e105      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80213b8:	4b5a      	ldr	r3, [pc, #360]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80213ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80213be:	f003 0302 	and.w	r3, r3, #2
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	d1ef      	bne.n	80213a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	f000 80f9 	beq.w	80215c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213d4:	2b02      	cmp	r3, #2
 80213d6:	f040 80cf 	bne.w	8021578 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80213da:	4b52      	ldr	r3, [pc, #328]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80213dc:	68db      	ldr	r3, [r3, #12]
 80213de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80213e0:	697b      	ldr	r3, [r7, #20]
 80213e2:	f003 0203 	and.w	r2, r3, #3
 80213e6:	687b      	ldr	r3, [r7, #4]
 80213e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80213ea:	429a      	cmp	r2, r3
 80213ec:	d12c      	bne.n	8021448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80213ee:	697b      	ldr	r3, [r7, #20]
 80213f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80213f8:	3b01      	subs	r3, #1
 80213fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80213fc:	429a      	cmp	r2, r3
 80213fe:	d123      	bne.n	8021448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021400:	697b      	ldr	r3, [r7, #20]
 8021402:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8021406:	687b      	ldr	r3, [r7, #4]
 8021408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802140a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 802140c:	429a      	cmp	r2, r3
 802140e:	d11b      	bne.n	8021448 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021410:	697b      	ldr	r3, [r7, #20]
 8021412:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802141a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802141c:	429a      	cmp	r2, r3
 802141e:	d113      	bne.n	8021448 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021420:	697b      	ldr	r3, [r7, #20]
 8021422:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8021426:	687b      	ldr	r3, [r7, #4]
 8021428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802142a:	085b      	lsrs	r3, r3, #1
 802142c:	3b01      	subs	r3, #1
 802142e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021430:	429a      	cmp	r2, r3
 8021432:	d109      	bne.n	8021448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8021434:	697b      	ldr	r3, [r7, #20]
 8021436:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 802143a:	687b      	ldr	r3, [r7, #4]
 802143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802143e:	085b      	lsrs	r3, r3, #1
 8021440:	3b01      	subs	r3, #1
 8021442:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021444:	429a      	cmp	r2, r3
 8021446:	d071      	beq.n	802152c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8021448:	69bb      	ldr	r3, [r7, #24]
 802144a:	2b0c      	cmp	r3, #12
 802144c:	d068      	beq.n	8021520 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 802144e:	4b35      	ldr	r3, [pc, #212]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021450:	681b      	ldr	r3, [r3, #0]
 8021452:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8021456:	2b00      	cmp	r3, #0
 8021458:	d105      	bne.n	8021466 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 802145a:	4b32      	ldr	r3, [pc, #200]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 802145c:	681b      	ldr	r3, [r3, #0]
 802145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021462:	2b00      	cmp	r3, #0
 8021464:	d001      	beq.n	802146a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8021466:	2301      	movs	r3, #1
 8021468:	e0ac      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 802146a:	4b2e      	ldr	r3, [pc, #184]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	4a2d      	ldr	r2, [pc, #180]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021470:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8021474:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8021476:	f7ff fab9 	bl	80209ec <HAL_GetTick>
 802147a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 802147c:	e008      	b.n	8021490 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802147e:	f7ff fab5 	bl	80209ec <HAL_GetTick>
 8021482:	4602      	mov	r2, r0
 8021484:	693b      	ldr	r3, [r7, #16]
 8021486:	1ad3      	subs	r3, r2, r3
 8021488:	2b02      	cmp	r3, #2
 802148a:	d901      	bls.n	8021490 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 802148c:	2303      	movs	r3, #3
 802148e:	e099      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021490:	4b24      	ldr	r3, [pc, #144]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021498:	2b00      	cmp	r3, #0
 802149a:	d1f0      	bne.n	802147e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802149c:	4b21      	ldr	r3, [pc, #132]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 802149e:	68da      	ldr	r2, [r3, #12]
 80214a0:	4b21      	ldr	r3, [pc, #132]	@ (8021528 <HAL_RCC_OscConfig+0x788>)
 80214a2:	4013      	ands	r3, r2
 80214a4:	687a      	ldr	r2, [r7, #4]
 80214a6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80214a8:	687a      	ldr	r2, [r7, #4]
 80214aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80214ac:	3a01      	subs	r2, #1
 80214ae:	0112      	lsls	r2, r2, #4
 80214b0:	4311      	orrs	r1, r2
 80214b2:	687a      	ldr	r2, [r7, #4]
 80214b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80214b6:	0212      	lsls	r2, r2, #8
 80214b8:	4311      	orrs	r1, r2
 80214ba:	687a      	ldr	r2, [r7, #4]
 80214bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80214be:	0852      	lsrs	r2, r2, #1
 80214c0:	3a01      	subs	r2, #1
 80214c2:	0552      	lsls	r2, r2, #21
 80214c4:	4311      	orrs	r1, r2
 80214c6:	687a      	ldr	r2, [r7, #4]
 80214c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80214ca:	0852      	lsrs	r2, r2, #1
 80214cc:	3a01      	subs	r2, #1
 80214ce:	0652      	lsls	r2, r2, #25
 80214d0:	4311      	orrs	r1, r2
 80214d2:	687a      	ldr	r2, [r7, #4]
 80214d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80214d6:	06d2      	lsls	r2, r2, #27
 80214d8:	430a      	orrs	r2, r1
 80214da:	4912      	ldr	r1, [pc, #72]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80214dc:	4313      	orrs	r3, r2
 80214de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80214e0:	4b10      	ldr	r3, [pc, #64]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	4a0f      	ldr	r2, [pc, #60]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80214e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80214ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80214ec:	4b0d      	ldr	r3, [pc, #52]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80214ee:	68db      	ldr	r3, [r3, #12]
 80214f0:	4a0c      	ldr	r2, [pc, #48]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 80214f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80214f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80214f8:	f7ff fa78 	bl	80209ec <HAL_GetTick>
 80214fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80214fe:	e008      	b.n	8021512 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021500:	f7ff fa74 	bl	80209ec <HAL_GetTick>
 8021504:	4602      	mov	r2, r0
 8021506:	693b      	ldr	r3, [r7, #16]
 8021508:	1ad3      	subs	r3, r2, r3
 802150a:	2b02      	cmp	r3, #2
 802150c:	d901      	bls.n	8021512 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 802150e:	2303      	movs	r3, #3
 8021510:	e058      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021512:	4b04      	ldr	r3, [pc, #16]	@ (8021524 <HAL_RCC_OscConfig+0x784>)
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802151a:	2b00      	cmp	r3, #0
 802151c:	d0f0      	beq.n	8021500 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 802151e:	e050      	b.n	80215c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8021520:	2301      	movs	r3, #1
 8021522:	e04f      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
 8021524:	40021000 	.word	0x40021000
 8021528:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802152c:	4b27      	ldr	r3, [pc, #156]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 802152e:	681b      	ldr	r3, [r3, #0]
 8021530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021534:	2b00      	cmp	r3, #0
 8021536:	d144      	bne.n	80215c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8021538:	4b24      	ldr	r3, [pc, #144]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 802153a:	681b      	ldr	r3, [r3, #0]
 802153c:	4a23      	ldr	r2, [pc, #140]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 802153e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8021542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8021544:	4b21      	ldr	r3, [pc, #132]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 8021546:	68db      	ldr	r3, [r3, #12]
 8021548:	4a20      	ldr	r2, [pc, #128]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 802154a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 802154e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8021550:	f7ff fa4c 	bl	80209ec <HAL_GetTick>
 8021554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021556:	e008      	b.n	802156a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021558:	f7ff fa48 	bl	80209ec <HAL_GetTick>
 802155c:	4602      	mov	r2, r0
 802155e:	693b      	ldr	r3, [r7, #16]
 8021560:	1ad3      	subs	r3, r2, r3
 8021562:	2b02      	cmp	r3, #2
 8021564:	d901      	bls.n	802156a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8021566:	2303      	movs	r3, #3
 8021568:	e02c      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802156a:	4b18      	ldr	r3, [pc, #96]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 802156c:	681b      	ldr	r3, [r3, #0]
 802156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021572:	2b00      	cmp	r3, #0
 8021574:	d0f0      	beq.n	8021558 <HAL_RCC_OscConfig+0x7b8>
 8021576:	e024      	b.n	80215c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8021578:	69bb      	ldr	r3, [r7, #24]
 802157a:	2b0c      	cmp	r3, #12
 802157c:	d01f      	beq.n	80215be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802157e:	4b13      	ldr	r3, [pc, #76]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 8021580:	681b      	ldr	r3, [r3, #0]
 8021582:	4a12      	ldr	r2, [pc, #72]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 8021584:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8021588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802158a:	f7ff fa2f 	bl	80209ec <HAL_GetTick>
 802158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021590:	e008      	b.n	80215a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021592:	f7ff fa2b 	bl	80209ec <HAL_GetTick>
 8021596:	4602      	mov	r2, r0
 8021598:	693b      	ldr	r3, [r7, #16]
 802159a:	1ad3      	subs	r3, r2, r3
 802159c:	2b02      	cmp	r3, #2
 802159e:	d901      	bls.n	80215a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80215a0:	2303      	movs	r3, #3
 80215a2:	e00f      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80215a4:	4b09      	ldr	r3, [pc, #36]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d1f0      	bne.n	8021592 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80215b0:	4b06      	ldr	r3, [pc, #24]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 80215b2:	68da      	ldr	r2, [r3, #12]
 80215b4:	4905      	ldr	r1, [pc, #20]	@ (80215cc <HAL_RCC_OscConfig+0x82c>)
 80215b6:	4b06      	ldr	r3, [pc, #24]	@ (80215d0 <HAL_RCC_OscConfig+0x830>)
 80215b8:	4013      	ands	r3, r2
 80215ba:	60cb      	str	r3, [r1, #12]
 80215bc:	e001      	b.n	80215c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80215be:	2301      	movs	r3, #1
 80215c0:	e000      	b.n	80215c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80215c2:	2300      	movs	r3, #0
}
 80215c4:	4618      	mov	r0, r3
 80215c6:	3720      	adds	r7, #32
 80215c8:	46bd      	mov	sp, r7
 80215ca:	bd80      	pop	{r7, pc}
 80215cc:	40021000 	.word	0x40021000
 80215d0:	feeefffc 	.word	0xfeeefffc

080215d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80215d4:	b580      	push	{r7, lr}
 80215d6:	b086      	sub	sp, #24
 80215d8:	af00      	add	r7, sp, #0
 80215da:	6078      	str	r0, [r7, #4]
 80215dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80215de:	2300      	movs	r3, #0
 80215e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d101      	bne.n	80215ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80215e8:	2301      	movs	r3, #1
 80215ea:	e11d      	b.n	8021828 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80215ec:	4b90      	ldr	r3, [pc, #576]	@ (8021830 <HAL_RCC_ClockConfig+0x25c>)
 80215ee:	681b      	ldr	r3, [r3, #0]
 80215f0:	f003 030f 	and.w	r3, r3, #15
 80215f4:	683a      	ldr	r2, [r7, #0]
 80215f6:	429a      	cmp	r2, r3
 80215f8:	d910      	bls.n	802161c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80215fa:	4b8d      	ldr	r3, [pc, #564]	@ (8021830 <HAL_RCC_ClockConfig+0x25c>)
 80215fc:	681b      	ldr	r3, [r3, #0]
 80215fe:	f023 020f 	bic.w	r2, r3, #15
 8021602:	498b      	ldr	r1, [pc, #556]	@ (8021830 <HAL_RCC_ClockConfig+0x25c>)
 8021604:	683b      	ldr	r3, [r7, #0]
 8021606:	4313      	orrs	r3, r2
 8021608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802160a:	4b89      	ldr	r3, [pc, #548]	@ (8021830 <HAL_RCC_ClockConfig+0x25c>)
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	f003 030f 	and.w	r3, r3, #15
 8021612:	683a      	ldr	r2, [r7, #0]
 8021614:	429a      	cmp	r2, r3
 8021616:	d001      	beq.n	802161c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8021618:	2301      	movs	r3, #1
 802161a:	e105      	b.n	8021828 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	681b      	ldr	r3, [r3, #0]
 8021620:	f003 0302 	and.w	r3, r3, #2
 8021624:	2b00      	cmp	r3, #0
 8021626:	d010      	beq.n	802164a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	689a      	ldr	r2, [r3, #8]
 802162c:	4b81      	ldr	r3, [pc, #516]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 802162e:	689b      	ldr	r3, [r3, #8]
 8021630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021634:	429a      	cmp	r2, r3
 8021636:	d908      	bls.n	802164a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021638:	4b7e      	ldr	r3, [pc, #504]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 802163a:	689b      	ldr	r3, [r3, #8]
 802163c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	689b      	ldr	r3, [r3, #8]
 8021644:	497b      	ldr	r1, [pc, #492]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021646:	4313      	orrs	r3, r2
 8021648:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	681b      	ldr	r3, [r3, #0]
 802164e:	f003 0301 	and.w	r3, r3, #1
 8021652:	2b00      	cmp	r3, #0
 8021654:	d079      	beq.n	802174a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	685b      	ldr	r3, [r3, #4]
 802165a:	2b03      	cmp	r3, #3
 802165c:	d11e      	bne.n	802169c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802165e:	4b75      	ldr	r3, [pc, #468]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021660:	681b      	ldr	r3, [r3, #0]
 8021662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021666:	2b00      	cmp	r3, #0
 8021668:	d101      	bne.n	802166e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 802166a:	2301      	movs	r3, #1
 802166c:	e0dc      	b.n	8021828 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 802166e:	f000 f9d1 	bl	8021a14 <RCC_GetSysClockFreqFromPLLSource>
 8021672:	4603      	mov	r3, r0
 8021674:	4a70      	ldr	r2, [pc, #448]	@ (8021838 <HAL_RCC_ClockConfig+0x264>)
 8021676:	4293      	cmp	r3, r2
 8021678:	d946      	bls.n	8021708 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 802167a:	4b6e      	ldr	r3, [pc, #440]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 802167c:	689b      	ldr	r3, [r3, #8]
 802167e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021682:	2b00      	cmp	r3, #0
 8021684:	d140      	bne.n	8021708 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021686:	4b6b      	ldr	r3, [pc, #428]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021688:	689b      	ldr	r3, [r3, #8]
 802168a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802168e:	4a69      	ldr	r2, [pc, #420]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021696:	2380      	movs	r3, #128	@ 0x80
 8021698:	617b      	str	r3, [r7, #20]
 802169a:	e035      	b.n	8021708 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802169c:	687b      	ldr	r3, [r7, #4]
 802169e:	685b      	ldr	r3, [r3, #4]
 80216a0:	2b02      	cmp	r3, #2
 80216a2:	d107      	bne.n	80216b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80216a4:	4b63      	ldr	r3, [pc, #396]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80216a6:	681b      	ldr	r3, [r3, #0]
 80216a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d115      	bne.n	80216dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80216b0:	2301      	movs	r3, #1
 80216b2:	e0b9      	b.n	8021828 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	685b      	ldr	r3, [r3, #4]
 80216b8:	2b00      	cmp	r3, #0
 80216ba:	d107      	bne.n	80216cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80216bc:	4b5d      	ldr	r3, [pc, #372]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	f003 0302 	and.w	r3, r3, #2
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	d109      	bne.n	80216dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80216c8:	2301      	movs	r3, #1
 80216ca:	e0ad      	b.n	8021828 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80216cc:	4b59      	ldr	r3, [pc, #356]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80216ce:	681b      	ldr	r3, [r3, #0]
 80216d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d101      	bne.n	80216dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80216d8:	2301      	movs	r3, #1
 80216da:	e0a5      	b.n	8021828 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80216dc:	f000 f8b4 	bl	8021848 <HAL_RCC_GetSysClockFreq>
 80216e0:	4603      	mov	r3, r0
 80216e2:	4a55      	ldr	r2, [pc, #340]	@ (8021838 <HAL_RCC_ClockConfig+0x264>)
 80216e4:	4293      	cmp	r3, r2
 80216e6:	d90f      	bls.n	8021708 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80216e8:	4b52      	ldr	r3, [pc, #328]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80216ea:	689b      	ldr	r3, [r3, #8]
 80216ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d109      	bne.n	8021708 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80216f4:	4b4f      	ldr	r3, [pc, #316]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80216f6:	689b      	ldr	r3, [r3, #8]
 80216f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80216fc:	4a4d      	ldr	r2, [pc, #308]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80216fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021702:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021704:	2380      	movs	r3, #128	@ 0x80
 8021706:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8021708:	4b4a      	ldr	r3, [pc, #296]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 802170a:	689b      	ldr	r3, [r3, #8]
 802170c:	f023 0203 	bic.w	r2, r3, #3
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	685b      	ldr	r3, [r3, #4]
 8021714:	4947      	ldr	r1, [pc, #284]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021716:	4313      	orrs	r3, r2
 8021718:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802171a:	f7ff f967 	bl	80209ec <HAL_GetTick>
 802171e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021720:	e00a      	b.n	8021738 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021722:	f7ff f963 	bl	80209ec <HAL_GetTick>
 8021726:	4602      	mov	r2, r0
 8021728:	693b      	ldr	r3, [r7, #16]
 802172a:	1ad3      	subs	r3, r2, r3
 802172c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021730:	4293      	cmp	r3, r2
 8021732:	d901      	bls.n	8021738 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8021734:	2303      	movs	r3, #3
 8021736:	e077      	b.n	8021828 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021738:	4b3e      	ldr	r3, [pc, #248]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 802173a:	689b      	ldr	r3, [r3, #8]
 802173c:	f003 020c 	and.w	r2, r3, #12
 8021740:	687b      	ldr	r3, [r7, #4]
 8021742:	685b      	ldr	r3, [r3, #4]
 8021744:	009b      	lsls	r3, r3, #2
 8021746:	429a      	cmp	r2, r3
 8021748:	d1eb      	bne.n	8021722 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 802174a:	697b      	ldr	r3, [r7, #20]
 802174c:	2b80      	cmp	r3, #128	@ 0x80
 802174e:	d105      	bne.n	802175c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8021750:	4b38      	ldr	r3, [pc, #224]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021752:	689b      	ldr	r3, [r3, #8]
 8021754:	4a37      	ldr	r2, [pc, #220]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802175a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	681b      	ldr	r3, [r3, #0]
 8021760:	f003 0302 	and.w	r3, r3, #2
 8021764:	2b00      	cmp	r3, #0
 8021766:	d010      	beq.n	802178a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	689a      	ldr	r2, [r3, #8]
 802176c:	4b31      	ldr	r3, [pc, #196]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 802176e:	689b      	ldr	r3, [r3, #8]
 8021770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021774:	429a      	cmp	r2, r3
 8021776:	d208      	bcs.n	802178a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021778:	4b2e      	ldr	r3, [pc, #184]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 802177a:	689b      	ldr	r3, [r3, #8]
 802177c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	689b      	ldr	r3, [r3, #8]
 8021784:	492b      	ldr	r1, [pc, #172]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021786:	4313      	orrs	r3, r2
 8021788:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802178a:	4b29      	ldr	r3, [pc, #164]	@ (8021830 <HAL_RCC_ClockConfig+0x25c>)
 802178c:	681b      	ldr	r3, [r3, #0]
 802178e:	f003 030f 	and.w	r3, r3, #15
 8021792:	683a      	ldr	r2, [r7, #0]
 8021794:	429a      	cmp	r2, r3
 8021796:	d210      	bcs.n	80217ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021798:	4b25      	ldr	r3, [pc, #148]	@ (8021830 <HAL_RCC_ClockConfig+0x25c>)
 802179a:	681b      	ldr	r3, [r3, #0]
 802179c:	f023 020f 	bic.w	r2, r3, #15
 80217a0:	4923      	ldr	r1, [pc, #140]	@ (8021830 <HAL_RCC_ClockConfig+0x25c>)
 80217a2:	683b      	ldr	r3, [r7, #0]
 80217a4:	4313      	orrs	r3, r2
 80217a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80217a8:	4b21      	ldr	r3, [pc, #132]	@ (8021830 <HAL_RCC_ClockConfig+0x25c>)
 80217aa:	681b      	ldr	r3, [r3, #0]
 80217ac:	f003 030f 	and.w	r3, r3, #15
 80217b0:	683a      	ldr	r2, [r7, #0]
 80217b2:	429a      	cmp	r2, r3
 80217b4:	d001      	beq.n	80217ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80217b6:	2301      	movs	r3, #1
 80217b8:	e036      	b.n	8021828 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	681b      	ldr	r3, [r3, #0]
 80217be:	f003 0304 	and.w	r3, r3, #4
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	d008      	beq.n	80217d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80217c6:	4b1b      	ldr	r3, [pc, #108]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80217c8:	689b      	ldr	r3, [r3, #8]
 80217ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	68db      	ldr	r3, [r3, #12]
 80217d2:	4918      	ldr	r1, [pc, #96]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80217d4:	4313      	orrs	r3, r2
 80217d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80217d8:	687b      	ldr	r3, [r7, #4]
 80217da:	681b      	ldr	r3, [r3, #0]
 80217dc:	f003 0308 	and.w	r3, r3, #8
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	d009      	beq.n	80217f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80217e4:	4b13      	ldr	r3, [pc, #76]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80217e6:	689b      	ldr	r3, [r3, #8]
 80217e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	691b      	ldr	r3, [r3, #16]
 80217f0:	00db      	lsls	r3, r3, #3
 80217f2:	4910      	ldr	r1, [pc, #64]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 80217f4:	4313      	orrs	r3, r2
 80217f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80217f8:	f000 f826 	bl	8021848 <HAL_RCC_GetSysClockFreq>
 80217fc:	4602      	mov	r2, r0
 80217fe:	4b0d      	ldr	r3, [pc, #52]	@ (8021834 <HAL_RCC_ClockConfig+0x260>)
 8021800:	689b      	ldr	r3, [r3, #8]
 8021802:	091b      	lsrs	r3, r3, #4
 8021804:	f003 030f 	and.w	r3, r3, #15
 8021808:	490c      	ldr	r1, [pc, #48]	@ (802183c <HAL_RCC_ClockConfig+0x268>)
 802180a:	5ccb      	ldrb	r3, [r1, r3]
 802180c:	f003 031f 	and.w	r3, r3, #31
 8021810:	fa22 f303 	lsr.w	r3, r2, r3
 8021814:	4a0a      	ldr	r2, [pc, #40]	@ (8021840 <HAL_RCC_ClockConfig+0x26c>)
 8021816:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8021818:	4b0a      	ldr	r3, [pc, #40]	@ (8021844 <HAL_RCC_ClockConfig+0x270>)
 802181a:	681b      	ldr	r3, [r3, #0]
 802181c:	4618      	mov	r0, r3
 802181e:	f7ff f895 	bl	802094c <HAL_InitTick>
 8021822:	4603      	mov	r3, r0
 8021824:	73fb      	strb	r3, [r7, #15]

  return status;
 8021826:	7bfb      	ldrb	r3, [r7, #15]
}
 8021828:	4618      	mov	r0, r3
 802182a:	3718      	adds	r7, #24
 802182c:	46bd      	mov	sp, r7
 802182e:	bd80      	pop	{r7, pc}
 8021830:	40022000 	.word	0x40022000
 8021834:	40021000 	.word	0x40021000
 8021838:	04c4b400 	.word	0x04c4b400
 802183c:	08022bc4 	.word	0x08022bc4
 8021840:	20000000 	.word	0x20000000
 8021844:	20000004 	.word	0x20000004

08021848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021848:	b480      	push	{r7}
 802184a:	b089      	sub	sp, #36	@ 0x24
 802184c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 802184e:	2300      	movs	r3, #0
 8021850:	61fb      	str	r3, [r7, #28]
 8021852:	2300      	movs	r3, #0
 8021854:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021856:	4b3e      	ldr	r3, [pc, #248]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 8021858:	689b      	ldr	r3, [r3, #8]
 802185a:	f003 030c 	and.w	r3, r3, #12
 802185e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021860:	4b3b      	ldr	r3, [pc, #236]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 8021862:	68db      	ldr	r3, [r3, #12]
 8021864:	f003 0303 	and.w	r3, r3, #3
 8021868:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 802186a:	693b      	ldr	r3, [r7, #16]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d005      	beq.n	802187c <HAL_RCC_GetSysClockFreq+0x34>
 8021870:	693b      	ldr	r3, [r7, #16]
 8021872:	2b0c      	cmp	r3, #12
 8021874:	d121      	bne.n	80218ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8021876:	68fb      	ldr	r3, [r7, #12]
 8021878:	2b01      	cmp	r3, #1
 802187a:	d11e      	bne.n	80218ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 802187c:	4b34      	ldr	r3, [pc, #208]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 802187e:	681b      	ldr	r3, [r3, #0]
 8021880:	f003 0308 	and.w	r3, r3, #8
 8021884:	2b00      	cmp	r3, #0
 8021886:	d107      	bne.n	8021898 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021888:	4b31      	ldr	r3, [pc, #196]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 802188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802188e:	0a1b      	lsrs	r3, r3, #8
 8021890:	f003 030f 	and.w	r3, r3, #15
 8021894:	61fb      	str	r3, [r7, #28]
 8021896:	e005      	b.n	80218a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021898:	4b2d      	ldr	r3, [pc, #180]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 802189a:	681b      	ldr	r3, [r3, #0]
 802189c:	091b      	lsrs	r3, r3, #4
 802189e:	f003 030f 	and.w	r3, r3, #15
 80218a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80218a4:	4a2b      	ldr	r2, [pc, #172]	@ (8021954 <HAL_RCC_GetSysClockFreq+0x10c>)
 80218a6:	69fb      	ldr	r3, [r7, #28]
 80218a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80218ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80218ae:	693b      	ldr	r3, [r7, #16]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d10d      	bne.n	80218d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80218b4:	69fb      	ldr	r3, [r7, #28]
 80218b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80218b8:	e00a      	b.n	80218d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80218ba:	693b      	ldr	r3, [r7, #16]
 80218bc:	2b04      	cmp	r3, #4
 80218be:	d102      	bne.n	80218c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80218c0:	4b25      	ldr	r3, [pc, #148]	@ (8021958 <HAL_RCC_GetSysClockFreq+0x110>)
 80218c2:	61bb      	str	r3, [r7, #24]
 80218c4:	e004      	b.n	80218d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80218c6:	693b      	ldr	r3, [r7, #16]
 80218c8:	2b08      	cmp	r3, #8
 80218ca:	d101      	bne.n	80218d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80218cc:	4b23      	ldr	r3, [pc, #140]	@ (802195c <HAL_RCC_GetSysClockFreq+0x114>)
 80218ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80218d0:	693b      	ldr	r3, [r7, #16]
 80218d2:	2b0c      	cmp	r3, #12
 80218d4:	d134      	bne.n	8021940 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80218d6:	4b1e      	ldr	r3, [pc, #120]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 80218d8:	68db      	ldr	r3, [r3, #12]
 80218da:	f003 0303 	and.w	r3, r3, #3
 80218de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80218e0:	68bb      	ldr	r3, [r7, #8]
 80218e2:	2b02      	cmp	r3, #2
 80218e4:	d003      	beq.n	80218ee <HAL_RCC_GetSysClockFreq+0xa6>
 80218e6:	68bb      	ldr	r3, [r7, #8]
 80218e8:	2b03      	cmp	r3, #3
 80218ea:	d003      	beq.n	80218f4 <HAL_RCC_GetSysClockFreq+0xac>
 80218ec:	e005      	b.n	80218fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80218ee:	4b1a      	ldr	r3, [pc, #104]	@ (8021958 <HAL_RCC_GetSysClockFreq+0x110>)
 80218f0:	617b      	str	r3, [r7, #20]
      break;
 80218f2:	e005      	b.n	8021900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80218f4:	4b19      	ldr	r3, [pc, #100]	@ (802195c <HAL_RCC_GetSysClockFreq+0x114>)
 80218f6:	617b      	str	r3, [r7, #20]
      break;
 80218f8:	e002      	b.n	8021900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80218fa:	69fb      	ldr	r3, [r7, #28]
 80218fc:	617b      	str	r3, [r7, #20]
      break;
 80218fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021900:	4b13      	ldr	r3, [pc, #76]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 8021902:	68db      	ldr	r3, [r3, #12]
 8021904:	091b      	lsrs	r3, r3, #4
 8021906:	f003 030f 	and.w	r3, r3, #15
 802190a:	3301      	adds	r3, #1
 802190c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 802190e:	4b10      	ldr	r3, [pc, #64]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 8021910:	68db      	ldr	r3, [r3, #12]
 8021912:	0a1b      	lsrs	r3, r3, #8
 8021914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021918:	697a      	ldr	r2, [r7, #20]
 802191a:	fb03 f202 	mul.w	r2, r3, r2
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	fbb2 f3f3 	udiv	r3, r2, r3
 8021924:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021926:	4b0a      	ldr	r3, [pc, #40]	@ (8021950 <HAL_RCC_GetSysClockFreq+0x108>)
 8021928:	68db      	ldr	r3, [r3, #12]
 802192a:	0e5b      	lsrs	r3, r3, #25
 802192c:	f003 0303 	and.w	r3, r3, #3
 8021930:	3301      	adds	r3, #1
 8021932:	005b      	lsls	r3, r3, #1
 8021934:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8021936:	697a      	ldr	r2, [r7, #20]
 8021938:	683b      	ldr	r3, [r7, #0]
 802193a:	fbb2 f3f3 	udiv	r3, r2, r3
 802193e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8021940:	69bb      	ldr	r3, [r7, #24]
}
 8021942:	4618      	mov	r0, r3
 8021944:	3724      	adds	r7, #36	@ 0x24
 8021946:	46bd      	mov	sp, r7
 8021948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802194c:	4770      	bx	lr
 802194e:	bf00      	nop
 8021950:	40021000 	.word	0x40021000
 8021954:	08022bd4 	.word	0x08022bd4
 8021958:	00f42400 	.word	0x00f42400
 802195c:	007a1200 	.word	0x007a1200

08021960 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8021960:	b580      	push	{r7, lr}
 8021962:	b086      	sub	sp, #24
 8021964:	af00      	add	r7, sp, #0
 8021966:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8021968:	2300      	movs	r3, #0
 802196a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 802196c:	4b27      	ldr	r3, [pc, #156]	@ (8021a0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021974:	2b00      	cmp	r3, #0
 8021976:	d003      	beq.n	8021980 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8021978:	f7ff f94e 	bl	8020c18 <HAL_PWREx_GetVoltageRange>
 802197c:	6178      	str	r0, [r7, #20]
 802197e:	e014      	b.n	80219aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8021980:	4b22      	ldr	r3, [pc, #136]	@ (8021a0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021984:	4a21      	ldr	r2, [pc, #132]	@ (8021a0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802198a:	6593      	str	r3, [r2, #88]	@ 0x58
 802198c:	4b1f      	ldr	r3, [pc, #124]	@ (8021a0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021994:	60fb      	str	r3, [r7, #12]
 8021996:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8021998:	f7ff f93e 	bl	8020c18 <HAL_PWREx_GetVoltageRange>
 802199c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 802199e:	4b1b      	ldr	r3, [pc, #108]	@ (8021a0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80219a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80219a2:	4a1a      	ldr	r2, [pc, #104]	@ (8021a0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80219a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80219a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80219aa:	697b      	ldr	r3, [r7, #20]
 80219ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80219b0:	d10b      	bne.n	80219ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80219b2:	687b      	ldr	r3, [r7, #4]
 80219b4:	2b80      	cmp	r3, #128	@ 0x80
 80219b6:	d913      	bls.n	80219e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80219b8:	687b      	ldr	r3, [r7, #4]
 80219ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80219bc:	d902      	bls.n	80219c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80219be:	2302      	movs	r3, #2
 80219c0:	613b      	str	r3, [r7, #16]
 80219c2:	e00d      	b.n	80219e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80219c4:	2301      	movs	r3, #1
 80219c6:	613b      	str	r3, [r7, #16]
 80219c8:	e00a      	b.n	80219e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80219ca:	687b      	ldr	r3, [r7, #4]
 80219cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80219ce:	d902      	bls.n	80219d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80219d0:	2302      	movs	r3, #2
 80219d2:	613b      	str	r3, [r7, #16]
 80219d4:	e004      	b.n	80219e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80219d6:	687b      	ldr	r3, [r7, #4]
 80219d8:	2b70      	cmp	r3, #112	@ 0x70
 80219da:	d101      	bne.n	80219e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80219dc:	2301      	movs	r3, #1
 80219de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80219e0:	4b0b      	ldr	r3, [pc, #44]	@ (8021a10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80219e2:	681b      	ldr	r3, [r3, #0]
 80219e4:	f023 020f 	bic.w	r2, r3, #15
 80219e8:	4909      	ldr	r1, [pc, #36]	@ (8021a10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80219ea:	693b      	ldr	r3, [r7, #16]
 80219ec:	4313      	orrs	r3, r2
 80219ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80219f0:	4b07      	ldr	r3, [pc, #28]	@ (8021a10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80219f2:	681b      	ldr	r3, [r3, #0]
 80219f4:	f003 030f 	and.w	r3, r3, #15
 80219f8:	693a      	ldr	r2, [r7, #16]
 80219fa:	429a      	cmp	r2, r3
 80219fc:	d001      	beq.n	8021a02 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80219fe:	2301      	movs	r3, #1
 8021a00:	e000      	b.n	8021a04 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8021a02:	2300      	movs	r3, #0
}
 8021a04:	4618      	mov	r0, r3
 8021a06:	3718      	adds	r7, #24
 8021a08:	46bd      	mov	sp, r7
 8021a0a:	bd80      	pop	{r7, pc}
 8021a0c:	40021000 	.word	0x40021000
 8021a10:	40022000 	.word	0x40022000

08021a14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8021a14:	b480      	push	{r7}
 8021a16:	b087      	sub	sp, #28
 8021a18:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8021ad0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a1c:	68db      	ldr	r3, [r3, #12]
 8021a1e:	f003 0303 	and.w	r3, r3, #3
 8021a22:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8021a24:	68fb      	ldr	r3, [r7, #12]
 8021a26:	2b03      	cmp	r3, #3
 8021a28:	d00b      	beq.n	8021a42 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8021a2a:	68fb      	ldr	r3, [r7, #12]
 8021a2c:	2b03      	cmp	r3, #3
 8021a2e:	d825      	bhi.n	8021a7c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8021a30:	68fb      	ldr	r3, [r7, #12]
 8021a32:	2b01      	cmp	r3, #1
 8021a34:	d008      	beq.n	8021a48 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8021a36:	68fb      	ldr	r3, [r7, #12]
 8021a38:	2b02      	cmp	r3, #2
 8021a3a:	d11f      	bne.n	8021a7c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8021a3c:	4b25      	ldr	r3, [pc, #148]	@ (8021ad4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8021a3e:	613b      	str	r3, [r7, #16]
    break;
 8021a40:	e01f      	b.n	8021a82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8021a42:	4b25      	ldr	r3, [pc, #148]	@ (8021ad8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8021a44:	613b      	str	r3, [r7, #16]
    break;
 8021a46:	e01c      	b.n	8021a82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021a48:	4b21      	ldr	r3, [pc, #132]	@ (8021ad0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a4a:	681b      	ldr	r3, [r3, #0]
 8021a4c:	f003 0308 	and.w	r3, r3, #8
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	d107      	bne.n	8021a64 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021a54:	4b1e      	ldr	r3, [pc, #120]	@ (8021ad0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021a5a:	0a1b      	lsrs	r3, r3, #8
 8021a5c:	f003 030f 	and.w	r3, r3, #15
 8021a60:	617b      	str	r3, [r7, #20]
 8021a62:	e005      	b.n	8021a70 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021a64:	4b1a      	ldr	r3, [pc, #104]	@ (8021ad0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	091b      	lsrs	r3, r3, #4
 8021a6a:	f003 030f 	and.w	r3, r3, #15
 8021a6e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8021a70:	4a1a      	ldr	r2, [pc, #104]	@ (8021adc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8021a72:	697b      	ldr	r3, [r7, #20]
 8021a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021a78:	613b      	str	r3, [r7, #16]
    break;
 8021a7a:	e002      	b.n	8021a82 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8021a7c:	2300      	movs	r3, #0
 8021a7e:	613b      	str	r3, [r7, #16]
    break;
 8021a80:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021a82:	4b13      	ldr	r3, [pc, #76]	@ (8021ad0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a84:	68db      	ldr	r3, [r3, #12]
 8021a86:	091b      	lsrs	r3, r3, #4
 8021a88:	f003 030f 	and.w	r3, r3, #15
 8021a8c:	3301      	adds	r3, #1
 8021a8e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021a90:	4b0f      	ldr	r3, [pc, #60]	@ (8021ad0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a92:	68db      	ldr	r3, [r3, #12]
 8021a94:	0a1b      	lsrs	r3, r3, #8
 8021a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021a9a:	693a      	ldr	r2, [r7, #16]
 8021a9c:	fb03 f202 	mul.w	r2, r3, r2
 8021aa0:	68bb      	ldr	r3, [r7, #8]
 8021aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8021aa6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021aa8:	4b09      	ldr	r3, [pc, #36]	@ (8021ad0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021aaa:	68db      	ldr	r3, [r3, #12]
 8021aac:	0e5b      	lsrs	r3, r3, #25
 8021aae:	f003 0303 	and.w	r3, r3, #3
 8021ab2:	3301      	adds	r3, #1
 8021ab4:	005b      	lsls	r3, r3, #1
 8021ab6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8021ab8:	693a      	ldr	r2, [r7, #16]
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ac0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8021ac2:	683b      	ldr	r3, [r7, #0]
}
 8021ac4:	4618      	mov	r0, r3
 8021ac6:	371c      	adds	r7, #28
 8021ac8:	46bd      	mov	sp, r7
 8021aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ace:	4770      	bx	lr
 8021ad0:	40021000 	.word	0x40021000
 8021ad4:	00f42400 	.word	0x00f42400
 8021ad8:	007a1200 	.word	0x007a1200
 8021adc:	08022bd4 	.word	0x08022bd4

08021ae0 <arm_sub_f32>:
 8021ae0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8021ae4:	b4f0      	push	{r4, r5, r6, r7}
 8021ae6:	d033      	beq.n	8021b50 <arm_sub_f32+0x70>
 8021ae8:	f100 0610 	add.w	r6, r0, #16
 8021aec:	f101 0510 	add.w	r5, r1, #16
 8021af0:	f102 0410 	add.w	r4, r2, #16
 8021af4:	4667      	mov	r7, ip
 8021af6:	ed15 7a04 	vldr	s14, [r5, #-16]
 8021afa:	ed56 7a04 	vldr	s15, [r6, #-16]
 8021afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b02:	3f01      	subs	r7, #1
 8021b04:	ed44 7a04 	vstr	s15, [r4, #-16]
 8021b08:	ed15 7a03 	vldr	s14, [r5, #-12]
 8021b0c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8021b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b14:	f106 0610 	add.w	r6, r6, #16
 8021b18:	ed44 7a03 	vstr	s15, [r4, #-12]
 8021b1c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8021b20:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8021b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b28:	f105 0510 	add.w	r5, r5, #16
 8021b2c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8021b30:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8021b34:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8021b38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b3c:	f104 0410 	add.w	r4, r4, #16
 8021b40:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8021b44:	d1d7      	bne.n	8021af6 <arm_sub_f32+0x16>
 8021b46:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8021b4a:	4420      	add	r0, r4
 8021b4c:	4421      	add	r1, r4
 8021b4e:	4422      	add	r2, r4
 8021b50:	f013 0303 	ands.w	r3, r3, #3
 8021b54:	d01b      	beq.n	8021b8e <arm_sub_f32+0xae>
 8021b56:	edd0 7a00 	vldr	s15, [r0]
 8021b5a:	ed91 7a00 	vldr	s14, [r1]
 8021b5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b62:	3b01      	subs	r3, #1
 8021b64:	edc2 7a00 	vstr	s15, [r2]
 8021b68:	d011      	beq.n	8021b8e <arm_sub_f32+0xae>
 8021b6a:	edd0 7a01 	vldr	s15, [r0, #4]
 8021b6e:	ed91 7a01 	vldr	s14, [r1, #4]
 8021b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b76:	2b01      	cmp	r3, #1
 8021b78:	edc2 7a01 	vstr	s15, [r2, #4]
 8021b7c:	d007      	beq.n	8021b8e <arm_sub_f32+0xae>
 8021b7e:	edd0 7a02 	vldr	s15, [r0, #8]
 8021b82:	ed91 7a02 	vldr	s14, [r1, #8]
 8021b86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b8a:	edc2 7a02 	vstr	s15, [r2, #8]
 8021b8e:	bcf0      	pop	{r4, r5, r6, r7}
 8021b90:	4770      	bx	lr
 8021b92:	bf00      	nop

08021b94 <arm_mult_f32>:
 8021b94:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8021b98:	b4f0      	push	{r4, r5, r6, r7}
 8021b9a:	d033      	beq.n	8021c04 <arm_mult_f32+0x70>
 8021b9c:	f100 0610 	add.w	r6, r0, #16
 8021ba0:	f101 0510 	add.w	r5, r1, #16
 8021ba4:	f102 0410 	add.w	r4, r2, #16
 8021ba8:	4667      	mov	r7, ip
 8021baa:	ed15 7a04 	vldr	s14, [r5, #-16]
 8021bae:	ed56 7a04 	vldr	s15, [r6, #-16]
 8021bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021bb6:	3f01      	subs	r7, #1
 8021bb8:	ed44 7a04 	vstr	s15, [r4, #-16]
 8021bbc:	ed15 7a03 	vldr	s14, [r5, #-12]
 8021bc0:	ed56 7a03 	vldr	s15, [r6, #-12]
 8021bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021bc8:	f106 0610 	add.w	r6, r6, #16
 8021bcc:	ed44 7a03 	vstr	s15, [r4, #-12]
 8021bd0:	ed15 7a02 	vldr	s14, [r5, #-8]
 8021bd4:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8021bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021bdc:	f105 0510 	add.w	r5, r5, #16
 8021be0:	ed44 7a02 	vstr	s15, [r4, #-8]
 8021be4:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8021be8:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8021bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021bf0:	f104 0410 	add.w	r4, r4, #16
 8021bf4:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8021bf8:	d1d7      	bne.n	8021baa <arm_mult_f32+0x16>
 8021bfa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8021bfe:	4420      	add	r0, r4
 8021c00:	4421      	add	r1, r4
 8021c02:	4422      	add	r2, r4
 8021c04:	f013 0303 	ands.w	r3, r3, #3
 8021c08:	d01b      	beq.n	8021c42 <arm_mult_f32+0xae>
 8021c0a:	edd1 7a00 	vldr	s15, [r1]
 8021c0e:	ed90 7a00 	vldr	s14, [r0]
 8021c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021c16:	3b01      	subs	r3, #1
 8021c18:	edc2 7a00 	vstr	s15, [r2]
 8021c1c:	d011      	beq.n	8021c42 <arm_mult_f32+0xae>
 8021c1e:	edd0 7a01 	vldr	s15, [r0, #4]
 8021c22:	ed91 7a01 	vldr	s14, [r1, #4]
 8021c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021c2a:	2b01      	cmp	r3, #1
 8021c2c:	edc2 7a01 	vstr	s15, [r2, #4]
 8021c30:	d007      	beq.n	8021c42 <arm_mult_f32+0xae>
 8021c32:	edd0 7a02 	vldr	s15, [r0, #8]
 8021c36:	ed91 7a02 	vldr	s14, [r1, #8]
 8021c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021c3e:	edc2 7a02 	vstr	s15, [r2, #8]
 8021c42:	bcf0      	pop	{r4, r5, r6, r7}
 8021c44:	4770      	bx	lr
 8021c46:	bf00      	nop

08021c48 <arm_add_f32>:
 8021c48:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8021c4c:	b4f0      	push	{r4, r5, r6, r7}
 8021c4e:	d033      	beq.n	8021cb8 <arm_add_f32+0x70>
 8021c50:	f100 0610 	add.w	r6, r0, #16
 8021c54:	f101 0510 	add.w	r5, r1, #16
 8021c58:	f102 0410 	add.w	r4, r2, #16
 8021c5c:	4667      	mov	r7, ip
 8021c5e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8021c62:	ed56 7a04 	vldr	s15, [r6, #-16]
 8021c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c6a:	3f01      	subs	r7, #1
 8021c6c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8021c70:	ed15 7a03 	vldr	s14, [r5, #-12]
 8021c74:	ed56 7a03 	vldr	s15, [r6, #-12]
 8021c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c7c:	f106 0610 	add.w	r6, r6, #16
 8021c80:	ed44 7a03 	vstr	s15, [r4, #-12]
 8021c84:	ed15 7a02 	vldr	s14, [r5, #-8]
 8021c88:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8021c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c90:	f105 0510 	add.w	r5, r5, #16
 8021c94:	ed44 7a02 	vstr	s15, [r4, #-8]
 8021c98:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8021c9c:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8021ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021ca4:	f104 0410 	add.w	r4, r4, #16
 8021ca8:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8021cac:	d1d7      	bne.n	8021c5e <arm_add_f32+0x16>
 8021cae:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8021cb2:	4420      	add	r0, r4
 8021cb4:	4421      	add	r1, r4
 8021cb6:	4422      	add	r2, r4
 8021cb8:	f013 0303 	ands.w	r3, r3, #3
 8021cbc:	d01b      	beq.n	8021cf6 <arm_add_f32+0xae>
 8021cbe:	edd1 7a00 	vldr	s15, [r1]
 8021cc2:	ed90 7a00 	vldr	s14, [r0]
 8021cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021cca:	3b01      	subs	r3, #1
 8021ccc:	edc2 7a00 	vstr	s15, [r2]
 8021cd0:	d011      	beq.n	8021cf6 <arm_add_f32+0xae>
 8021cd2:	edd0 7a01 	vldr	s15, [r0, #4]
 8021cd6:	ed91 7a01 	vldr	s14, [r1, #4]
 8021cda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021cde:	2b01      	cmp	r3, #1
 8021ce0:	edc2 7a01 	vstr	s15, [r2, #4]
 8021ce4:	d007      	beq.n	8021cf6 <arm_add_f32+0xae>
 8021ce6:	edd0 7a02 	vldr	s15, [r0, #8]
 8021cea:	ed91 7a02 	vldr	s14, [r1, #8]
 8021cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021cf2:	edc2 7a02 	vstr	s15, [r2, #8]
 8021cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8021cf8:	4770      	bx	lr
 8021cfa:	bf00      	nop

08021cfc <malloc>:
 8021cfc:	4b02      	ldr	r3, [pc, #8]	@ (8021d08 <malloc+0xc>)
 8021cfe:	4601      	mov	r1, r0
 8021d00:	6818      	ldr	r0, [r3, #0]
 8021d02:	f000 b825 	b.w	8021d50 <_malloc_r>
 8021d06:	bf00      	nop
 8021d08:	20000018 	.word	0x20000018

08021d0c <sbrk_aligned>:
 8021d0c:	b570      	push	{r4, r5, r6, lr}
 8021d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8021d4c <sbrk_aligned+0x40>)
 8021d10:	460c      	mov	r4, r1
 8021d12:	6831      	ldr	r1, [r6, #0]
 8021d14:	4605      	mov	r5, r0
 8021d16:	b911      	cbnz	r1, 8021d1e <sbrk_aligned+0x12>
 8021d18:	f000 faba 	bl	8022290 <_sbrk_r>
 8021d1c:	6030      	str	r0, [r6, #0]
 8021d1e:	4621      	mov	r1, r4
 8021d20:	4628      	mov	r0, r5
 8021d22:	f000 fab5 	bl	8022290 <_sbrk_r>
 8021d26:	1c43      	adds	r3, r0, #1
 8021d28:	d103      	bne.n	8021d32 <sbrk_aligned+0x26>
 8021d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8021d2e:	4620      	mov	r0, r4
 8021d30:	bd70      	pop	{r4, r5, r6, pc}
 8021d32:	1cc4      	adds	r4, r0, #3
 8021d34:	f024 0403 	bic.w	r4, r4, #3
 8021d38:	42a0      	cmp	r0, r4
 8021d3a:	d0f8      	beq.n	8021d2e <sbrk_aligned+0x22>
 8021d3c:	1a21      	subs	r1, r4, r0
 8021d3e:	4628      	mov	r0, r5
 8021d40:	f000 faa6 	bl	8022290 <_sbrk_r>
 8021d44:	3001      	adds	r0, #1
 8021d46:	d1f2      	bne.n	8021d2e <sbrk_aligned+0x22>
 8021d48:	e7ef      	b.n	8021d2a <sbrk_aligned+0x1e>
 8021d4a:	bf00      	nop
 8021d4c:	2000008c 	.word	0x2000008c

08021d50 <_malloc_r>:
 8021d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d54:	1ccd      	adds	r5, r1, #3
 8021d56:	f025 0503 	bic.w	r5, r5, #3
 8021d5a:	3508      	adds	r5, #8
 8021d5c:	2d0c      	cmp	r5, #12
 8021d5e:	bf38      	it	cc
 8021d60:	250c      	movcc	r5, #12
 8021d62:	2d00      	cmp	r5, #0
 8021d64:	4606      	mov	r6, r0
 8021d66:	db01      	blt.n	8021d6c <_malloc_r+0x1c>
 8021d68:	42a9      	cmp	r1, r5
 8021d6a:	d904      	bls.n	8021d76 <_malloc_r+0x26>
 8021d6c:	230c      	movs	r3, #12
 8021d6e:	6033      	str	r3, [r6, #0]
 8021d70:	2000      	movs	r0, #0
 8021d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021e4c <_malloc_r+0xfc>
 8021d7a:	f000 f869 	bl	8021e50 <__malloc_lock>
 8021d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8021d82:	461c      	mov	r4, r3
 8021d84:	bb44      	cbnz	r4, 8021dd8 <_malloc_r+0x88>
 8021d86:	4629      	mov	r1, r5
 8021d88:	4630      	mov	r0, r6
 8021d8a:	f7ff ffbf 	bl	8021d0c <sbrk_aligned>
 8021d8e:	1c43      	adds	r3, r0, #1
 8021d90:	4604      	mov	r4, r0
 8021d92:	d158      	bne.n	8021e46 <_malloc_r+0xf6>
 8021d94:	f8d8 4000 	ldr.w	r4, [r8]
 8021d98:	4627      	mov	r7, r4
 8021d9a:	2f00      	cmp	r7, #0
 8021d9c:	d143      	bne.n	8021e26 <_malloc_r+0xd6>
 8021d9e:	2c00      	cmp	r4, #0
 8021da0:	d04b      	beq.n	8021e3a <_malloc_r+0xea>
 8021da2:	6823      	ldr	r3, [r4, #0]
 8021da4:	4639      	mov	r1, r7
 8021da6:	4630      	mov	r0, r6
 8021da8:	eb04 0903 	add.w	r9, r4, r3
 8021dac:	f000 fa70 	bl	8022290 <_sbrk_r>
 8021db0:	4581      	cmp	r9, r0
 8021db2:	d142      	bne.n	8021e3a <_malloc_r+0xea>
 8021db4:	6821      	ldr	r1, [r4, #0]
 8021db6:	1a6d      	subs	r5, r5, r1
 8021db8:	4629      	mov	r1, r5
 8021dba:	4630      	mov	r0, r6
 8021dbc:	f7ff ffa6 	bl	8021d0c <sbrk_aligned>
 8021dc0:	3001      	adds	r0, #1
 8021dc2:	d03a      	beq.n	8021e3a <_malloc_r+0xea>
 8021dc4:	6823      	ldr	r3, [r4, #0]
 8021dc6:	442b      	add	r3, r5
 8021dc8:	6023      	str	r3, [r4, #0]
 8021dca:	f8d8 3000 	ldr.w	r3, [r8]
 8021dce:	685a      	ldr	r2, [r3, #4]
 8021dd0:	bb62      	cbnz	r2, 8021e2c <_malloc_r+0xdc>
 8021dd2:	f8c8 7000 	str.w	r7, [r8]
 8021dd6:	e00f      	b.n	8021df8 <_malloc_r+0xa8>
 8021dd8:	6822      	ldr	r2, [r4, #0]
 8021dda:	1b52      	subs	r2, r2, r5
 8021ddc:	d420      	bmi.n	8021e20 <_malloc_r+0xd0>
 8021dde:	2a0b      	cmp	r2, #11
 8021de0:	d917      	bls.n	8021e12 <_malloc_r+0xc2>
 8021de2:	1961      	adds	r1, r4, r5
 8021de4:	42a3      	cmp	r3, r4
 8021de6:	6025      	str	r5, [r4, #0]
 8021de8:	bf18      	it	ne
 8021dea:	6059      	strne	r1, [r3, #4]
 8021dec:	6863      	ldr	r3, [r4, #4]
 8021dee:	bf08      	it	eq
 8021df0:	f8c8 1000 	streq.w	r1, [r8]
 8021df4:	5162      	str	r2, [r4, r5]
 8021df6:	604b      	str	r3, [r1, #4]
 8021df8:	4630      	mov	r0, r6
 8021dfa:	f000 f82f 	bl	8021e5c <__malloc_unlock>
 8021dfe:	f104 000b 	add.w	r0, r4, #11
 8021e02:	1d23      	adds	r3, r4, #4
 8021e04:	f020 0007 	bic.w	r0, r0, #7
 8021e08:	1ac2      	subs	r2, r0, r3
 8021e0a:	bf1c      	itt	ne
 8021e0c:	1a1b      	subne	r3, r3, r0
 8021e0e:	50a3      	strne	r3, [r4, r2]
 8021e10:	e7af      	b.n	8021d72 <_malloc_r+0x22>
 8021e12:	6862      	ldr	r2, [r4, #4]
 8021e14:	42a3      	cmp	r3, r4
 8021e16:	bf0c      	ite	eq
 8021e18:	f8c8 2000 	streq.w	r2, [r8]
 8021e1c:	605a      	strne	r2, [r3, #4]
 8021e1e:	e7eb      	b.n	8021df8 <_malloc_r+0xa8>
 8021e20:	4623      	mov	r3, r4
 8021e22:	6864      	ldr	r4, [r4, #4]
 8021e24:	e7ae      	b.n	8021d84 <_malloc_r+0x34>
 8021e26:	463c      	mov	r4, r7
 8021e28:	687f      	ldr	r7, [r7, #4]
 8021e2a:	e7b6      	b.n	8021d9a <_malloc_r+0x4a>
 8021e2c:	461a      	mov	r2, r3
 8021e2e:	685b      	ldr	r3, [r3, #4]
 8021e30:	42a3      	cmp	r3, r4
 8021e32:	d1fb      	bne.n	8021e2c <_malloc_r+0xdc>
 8021e34:	2300      	movs	r3, #0
 8021e36:	6053      	str	r3, [r2, #4]
 8021e38:	e7de      	b.n	8021df8 <_malloc_r+0xa8>
 8021e3a:	230c      	movs	r3, #12
 8021e3c:	6033      	str	r3, [r6, #0]
 8021e3e:	4630      	mov	r0, r6
 8021e40:	f000 f80c 	bl	8021e5c <__malloc_unlock>
 8021e44:	e794      	b.n	8021d70 <_malloc_r+0x20>
 8021e46:	6005      	str	r5, [r0, #0]
 8021e48:	e7d6      	b.n	8021df8 <_malloc_r+0xa8>
 8021e4a:	bf00      	nop
 8021e4c:	20000090 	.word	0x20000090

08021e50 <__malloc_lock>:
 8021e50:	4801      	ldr	r0, [pc, #4]	@ (8021e58 <__malloc_lock+0x8>)
 8021e52:	f000 ba6a 	b.w	802232a <__retarget_lock_acquire_recursive>
 8021e56:	bf00      	nop
 8021e58:	200001d4 	.word	0x200001d4

08021e5c <__malloc_unlock>:
 8021e5c:	4801      	ldr	r0, [pc, #4]	@ (8021e64 <__malloc_unlock+0x8>)
 8021e5e:	f000 ba65 	b.w	802232c <__retarget_lock_release_recursive>
 8021e62:	bf00      	nop
 8021e64:	200001d4 	.word	0x200001d4

08021e68 <__sflush_r>:
 8021e68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e70:	0716      	lsls	r6, r2, #28
 8021e72:	4605      	mov	r5, r0
 8021e74:	460c      	mov	r4, r1
 8021e76:	d454      	bmi.n	8021f22 <__sflush_r+0xba>
 8021e78:	684b      	ldr	r3, [r1, #4]
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	dc02      	bgt.n	8021e84 <__sflush_r+0x1c>
 8021e7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	dd48      	ble.n	8021f16 <__sflush_r+0xae>
 8021e84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021e86:	2e00      	cmp	r6, #0
 8021e88:	d045      	beq.n	8021f16 <__sflush_r+0xae>
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021e90:	682f      	ldr	r7, [r5, #0]
 8021e92:	6a21      	ldr	r1, [r4, #32]
 8021e94:	602b      	str	r3, [r5, #0]
 8021e96:	d030      	beq.n	8021efa <__sflush_r+0x92>
 8021e98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021e9a:	89a3      	ldrh	r3, [r4, #12]
 8021e9c:	0759      	lsls	r1, r3, #29
 8021e9e:	d505      	bpl.n	8021eac <__sflush_r+0x44>
 8021ea0:	6863      	ldr	r3, [r4, #4]
 8021ea2:	1ad2      	subs	r2, r2, r3
 8021ea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021ea6:	b10b      	cbz	r3, 8021eac <__sflush_r+0x44>
 8021ea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021eaa:	1ad2      	subs	r2, r2, r3
 8021eac:	2300      	movs	r3, #0
 8021eae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021eb0:	6a21      	ldr	r1, [r4, #32]
 8021eb2:	4628      	mov	r0, r5
 8021eb4:	47b0      	blx	r6
 8021eb6:	1c43      	adds	r3, r0, #1
 8021eb8:	89a3      	ldrh	r3, [r4, #12]
 8021eba:	d106      	bne.n	8021eca <__sflush_r+0x62>
 8021ebc:	6829      	ldr	r1, [r5, #0]
 8021ebe:	291d      	cmp	r1, #29
 8021ec0:	d82b      	bhi.n	8021f1a <__sflush_r+0xb2>
 8021ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8021f6c <__sflush_r+0x104>)
 8021ec4:	410a      	asrs	r2, r1
 8021ec6:	07d6      	lsls	r6, r2, #31
 8021ec8:	d427      	bmi.n	8021f1a <__sflush_r+0xb2>
 8021eca:	2200      	movs	r2, #0
 8021ecc:	6062      	str	r2, [r4, #4]
 8021ece:	04d9      	lsls	r1, r3, #19
 8021ed0:	6922      	ldr	r2, [r4, #16]
 8021ed2:	6022      	str	r2, [r4, #0]
 8021ed4:	d504      	bpl.n	8021ee0 <__sflush_r+0x78>
 8021ed6:	1c42      	adds	r2, r0, #1
 8021ed8:	d101      	bne.n	8021ede <__sflush_r+0x76>
 8021eda:	682b      	ldr	r3, [r5, #0]
 8021edc:	b903      	cbnz	r3, 8021ee0 <__sflush_r+0x78>
 8021ede:	6560      	str	r0, [r4, #84]	@ 0x54
 8021ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021ee2:	602f      	str	r7, [r5, #0]
 8021ee4:	b1b9      	cbz	r1, 8021f16 <__sflush_r+0xae>
 8021ee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021eea:	4299      	cmp	r1, r3
 8021eec:	d002      	beq.n	8021ef4 <__sflush_r+0x8c>
 8021eee:	4628      	mov	r0, r5
 8021ef0:	f000 fa1e 	bl	8022330 <_free_r>
 8021ef4:	2300      	movs	r3, #0
 8021ef6:	6363      	str	r3, [r4, #52]	@ 0x34
 8021ef8:	e00d      	b.n	8021f16 <__sflush_r+0xae>
 8021efa:	2301      	movs	r3, #1
 8021efc:	4628      	mov	r0, r5
 8021efe:	47b0      	blx	r6
 8021f00:	4602      	mov	r2, r0
 8021f02:	1c50      	adds	r0, r2, #1
 8021f04:	d1c9      	bne.n	8021e9a <__sflush_r+0x32>
 8021f06:	682b      	ldr	r3, [r5, #0]
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d0c6      	beq.n	8021e9a <__sflush_r+0x32>
 8021f0c:	2b1d      	cmp	r3, #29
 8021f0e:	d001      	beq.n	8021f14 <__sflush_r+0xac>
 8021f10:	2b16      	cmp	r3, #22
 8021f12:	d11e      	bne.n	8021f52 <__sflush_r+0xea>
 8021f14:	602f      	str	r7, [r5, #0]
 8021f16:	2000      	movs	r0, #0
 8021f18:	e022      	b.n	8021f60 <__sflush_r+0xf8>
 8021f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021f1e:	b21b      	sxth	r3, r3
 8021f20:	e01b      	b.n	8021f5a <__sflush_r+0xf2>
 8021f22:	690f      	ldr	r7, [r1, #16]
 8021f24:	2f00      	cmp	r7, #0
 8021f26:	d0f6      	beq.n	8021f16 <__sflush_r+0xae>
 8021f28:	0793      	lsls	r3, r2, #30
 8021f2a:	680e      	ldr	r6, [r1, #0]
 8021f2c:	bf08      	it	eq
 8021f2e:	694b      	ldreq	r3, [r1, #20]
 8021f30:	600f      	str	r7, [r1, #0]
 8021f32:	bf18      	it	ne
 8021f34:	2300      	movne	r3, #0
 8021f36:	eba6 0807 	sub.w	r8, r6, r7
 8021f3a:	608b      	str	r3, [r1, #8]
 8021f3c:	f1b8 0f00 	cmp.w	r8, #0
 8021f40:	dde9      	ble.n	8021f16 <__sflush_r+0xae>
 8021f42:	6a21      	ldr	r1, [r4, #32]
 8021f44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021f46:	4643      	mov	r3, r8
 8021f48:	463a      	mov	r2, r7
 8021f4a:	4628      	mov	r0, r5
 8021f4c:	47b0      	blx	r6
 8021f4e:	2800      	cmp	r0, #0
 8021f50:	dc08      	bgt.n	8021f64 <__sflush_r+0xfc>
 8021f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021f5a:	81a3      	strh	r3, [r4, #12]
 8021f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8021f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f64:	4407      	add	r7, r0
 8021f66:	eba8 0800 	sub.w	r8, r8, r0
 8021f6a:	e7e7      	b.n	8021f3c <__sflush_r+0xd4>
 8021f6c:	dfbffffe 	.word	0xdfbffffe

08021f70 <_fflush_r>:
 8021f70:	b538      	push	{r3, r4, r5, lr}
 8021f72:	690b      	ldr	r3, [r1, #16]
 8021f74:	4605      	mov	r5, r0
 8021f76:	460c      	mov	r4, r1
 8021f78:	b913      	cbnz	r3, 8021f80 <_fflush_r+0x10>
 8021f7a:	2500      	movs	r5, #0
 8021f7c:	4628      	mov	r0, r5
 8021f7e:	bd38      	pop	{r3, r4, r5, pc}
 8021f80:	b118      	cbz	r0, 8021f8a <_fflush_r+0x1a>
 8021f82:	6a03      	ldr	r3, [r0, #32]
 8021f84:	b90b      	cbnz	r3, 8021f8a <_fflush_r+0x1a>
 8021f86:	f000 f8bb 	bl	8022100 <__sinit>
 8021f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021f8e:	2b00      	cmp	r3, #0
 8021f90:	d0f3      	beq.n	8021f7a <_fflush_r+0xa>
 8021f92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021f94:	07d0      	lsls	r0, r2, #31
 8021f96:	d404      	bmi.n	8021fa2 <_fflush_r+0x32>
 8021f98:	0599      	lsls	r1, r3, #22
 8021f9a:	d402      	bmi.n	8021fa2 <_fflush_r+0x32>
 8021f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f9e:	f000 f9c4 	bl	802232a <__retarget_lock_acquire_recursive>
 8021fa2:	4628      	mov	r0, r5
 8021fa4:	4621      	mov	r1, r4
 8021fa6:	f7ff ff5f 	bl	8021e68 <__sflush_r>
 8021faa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021fac:	07da      	lsls	r2, r3, #31
 8021fae:	4605      	mov	r5, r0
 8021fb0:	d4e4      	bmi.n	8021f7c <_fflush_r+0xc>
 8021fb2:	89a3      	ldrh	r3, [r4, #12]
 8021fb4:	059b      	lsls	r3, r3, #22
 8021fb6:	d4e1      	bmi.n	8021f7c <_fflush_r+0xc>
 8021fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021fba:	f000 f9b7 	bl	802232c <__retarget_lock_release_recursive>
 8021fbe:	e7dd      	b.n	8021f7c <_fflush_r+0xc>

08021fc0 <fflush>:
 8021fc0:	4601      	mov	r1, r0
 8021fc2:	b920      	cbnz	r0, 8021fce <fflush+0xe>
 8021fc4:	4a04      	ldr	r2, [pc, #16]	@ (8021fd8 <fflush+0x18>)
 8021fc6:	4905      	ldr	r1, [pc, #20]	@ (8021fdc <fflush+0x1c>)
 8021fc8:	4805      	ldr	r0, [pc, #20]	@ (8021fe0 <fflush+0x20>)
 8021fca:	f000 b8b1 	b.w	8022130 <_fwalk_sglue>
 8021fce:	4b05      	ldr	r3, [pc, #20]	@ (8021fe4 <fflush+0x24>)
 8021fd0:	6818      	ldr	r0, [r3, #0]
 8021fd2:	f7ff bfcd 	b.w	8021f70 <_fflush_r>
 8021fd6:	bf00      	nop
 8021fd8:	2000000c 	.word	0x2000000c
 8021fdc:	08021f71 	.word	0x08021f71
 8021fe0:	2000001c 	.word	0x2000001c
 8021fe4:	20000018 	.word	0x20000018

08021fe8 <std>:
 8021fe8:	2300      	movs	r3, #0
 8021fea:	b510      	push	{r4, lr}
 8021fec:	4604      	mov	r4, r0
 8021fee:	e9c0 3300 	strd	r3, r3, [r0]
 8021ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021ff6:	6083      	str	r3, [r0, #8]
 8021ff8:	8181      	strh	r1, [r0, #12]
 8021ffa:	6643      	str	r3, [r0, #100]	@ 0x64
 8021ffc:	81c2      	strh	r2, [r0, #14]
 8021ffe:	6183      	str	r3, [r0, #24]
 8022000:	4619      	mov	r1, r3
 8022002:	2208      	movs	r2, #8
 8022004:	305c      	adds	r0, #92	@ 0x5c
 8022006:	f000 f906 	bl	8022216 <memset>
 802200a:	4b0d      	ldr	r3, [pc, #52]	@ (8022040 <std+0x58>)
 802200c:	6263      	str	r3, [r4, #36]	@ 0x24
 802200e:	4b0d      	ldr	r3, [pc, #52]	@ (8022044 <std+0x5c>)
 8022010:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022012:	4b0d      	ldr	r3, [pc, #52]	@ (8022048 <std+0x60>)
 8022014:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8022016:	4b0d      	ldr	r3, [pc, #52]	@ (802204c <std+0x64>)
 8022018:	6323      	str	r3, [r4, #48]	@ 0x30
 802201a:	4b0d      	ldr	r3, [pc, #52]	@ (8022050 <std+0x68>)
 802201c:	6224      	str	r4, [r4, #32]
 802201e:	429c      	cmp	r4, r3
 8022020:	d006      	beq.n	8022030 <std+0x48>
 8022022:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022026:	4294      	cmp	r4, r2
 8022028:	d002      	beq.n	8022030 <std+0x48>
 802202a:	33d0      	adds	r3, #208	@ 0xd0
 802202c:	429c      	cmp	r4, r3
 802202e:	d105      	bne.n	802203c <std+0x54>
 8022030:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022038:	f000 b976 	b.w	8022328 <__retarget_lock_init_recursive>
 802203c:	bd10      	pop	{r4, pc}
 802203e:	bf00      	nop
 8022040:	08022191 	.word	0x08022191
 8022044:	080221b3 	.word	0x080221b3
 8022048:	080221eb 	.word	0x080221eb
 802204c:	0802220f 	.word	0x0802220f
 8022050:	20000094 	.word	0x20000094

08022054 <stdio_exit_handler>:
 8022054:	4a02      	ldr	r2, [pc, #8]	@ (8022060 <stdio_exit_handler+0xc>)
 8022056:	4903      	ldr	r1, [pc, #12]	@ (8022064 <stdio_exit_handler+0x10>)
 8022058:	4803      	ldr	r0, [pc, #12]	@ (8022068 <stdio_exit_handler+0x14>)
 802205a:	f000 b869 	b.w	8022130 <_fwalk_sglue>
 802205e:	bf00      	nop
 8022060:	2000000c 	.word	0x2000000c
 8022064:	08021f71 	.word	0x08021f71
 8022068:	2000001c 	.word	0x2000001c

0802206c <cleanup_stdio>:
 802206c:	6841      	ldr	r1, [r0, #4]
 802206e:	4b0c      	ldr	r3, [pc, #48]	@ (80220a0 <cleanup_stdio+0x34>)
 8022070:	4299      	cmp	r1, r3
 8022072:	b510      	push	{r4, lr}
 8022074:	4604      	mov	r4, r0
 8022076:	d001      	beq.n	802207c <cleanup_stdio+0x10>
 8022078:	f7ff ff7a 	bl	8021f70 <_fflush_r>
 802207c:	68a1      	ldr	r1, [r4, #8]
 802207e:	4b09      	ldr	r3, [pc, #36]	@ (80220a4 <cleanup_stdio+0x38>)
 8022080:	4299      	cmp	r1, r3
 8022082:	d002      	beq.n	802208a <cleanup_stdio+0x1e>
 8022084:	4620      	mov	r0, r4
 8022086:	f7ff ff73 	bl	8021f70 <_fflush_r>
 802208a:	68e1      	ldr	r1, [r4, #12]
 802208c:	4b06      	ldr	r3, [pc, #24]	@ (80220a8 <cleanup_stdio+0x3c>)
 802208e:	4299      	cmp	r1, r3
 8022090:	d004      	beq.n	802209c <cleanup_stdio+0x30>
 8022092:	4620      	mov	r0, r4
 8022094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022098:	f7ff bf6a 	b.w	8021f70 <_fflush_r>
 802209c:	bd10      	pop	{r4, pc}
 802209e:	bf00      	nop
 80220a0:	20000094 	.word	0x20000094
 80220a4:	200000fc 	.word	0x200000fc
 80220a8:	20000164 	.word	0x20000164

080220ac <global_stdio_init.part.0>:
 80220ac:	b510      	push	{r4, lr}
 80220ae:	4b0b      	ldr	r3, [pc, #44]	@ (80220dc <global_stdio_init.part.0+0x30>)
 80220b0:	4c0b      	ldr	r4, [pc, #44]	@ (80220e0 <global_stdio_init.part.0+0x34>)
 80220b2:	4a0c      	ldr	r2, [pc, #48]	@ (80220e4 <global_stdio_init.part.0+0x38>)
 80220b4:	601a      	str	r2, [r3, #0]
 80220b6:	4620      	mov	r0, r4
 80220b8:	2200      	movs	r2, #0
 80220ba:	2104      	movs	r1, #4
 80220bc:	f7ff ff94 	bl	8021fe8 <std>
 80220c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80220c4:	2201      	movs	r2, #1
 80220c6:	2109      	movs	r1, #9
 80220c8:	f7ff ff8e 	bl	8021fe8 <std>
 80220cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80220d0:	2202      	movs	r2, #2
 80220d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80220d6:	2112      	movs	r1, #18
 80220d8:	f7ff bf86 	b.w	8021fe8 <std>
 80220dc:	200001cc 	.word	0x200001cc
 80220e0:	20000094 	.word	0x20000094
 80220e4:	08022055 	.word	0x08022055

080220e8 <__sfp_lock_acquire>:
 80220e8:	4801      	ldr	r0, [pc, #4]	@ (80220f0 <__sfp_lock_acquire+0x8>)
 80220ea:	f000 b91e 	b.w	802232a <__retarget_lock_acquire_recursive>
 80220ee:	bf00      	nop
 80220f0:	200001d5 	.word	0x200001d5

080220f4 <__sfp_lock_release>:
 80220f4:	4801      	ldr	r0, [pc, #4]	@ (80220fc <__sfp_lock_release+0x8>)
 80220f6:	f000 b919 	b.w	802232c <__retarget_lock_release_recursive>
 80220fa:	bf00      	nop
 80220fc:	200001d5 	.word	0x200001d5

08022100 <__sinit>:
 8022100:	b510      	push	{r4, lr}
 8022102:	4604      	mov	r4, r0
 8022104:	f7ff fff0 	bl	80220e8 <__sfp_lock_acquire>
 8022108:	6a23      	ldr	r3, [r4, #32]
 802210a:	b11b      	cbz	r3, 8022114 <__sinit+0x14>
 802210c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022110:	f7ff bff0 	b.w	80220f4 <__sfp_lock_release>
 8022114:	4b04      	ldr	r3, [pc, #16]	@ (8022128 <__sinit+0x28>)
 8022116:	6223      	str	r3, [r4, #32]
 8022118:	4b04      	ldr	r3, [pc, #16]	@ (802212c <__sinit+0x2c>)
 802211a:	681b      	ldr	r3, [r3, #0]
 802211c:	2b00      	cmp	r3, #0
 802211e:	d1f5      	bne.n	802210c <__sinit+0xc>
 8022120:	f7ff ffc4 	bl	80220ac <global_stdio_init.part.0>
 8022124:	e7f2      	b.n	802210c <__sinit+0xc>
 8022126:	bf00      	nop
 8022128:	0802206d 	.word	0x0802206d
 802212c:	200001cc 	.word	0x200001cc

08022130 <_fwalk_sglue>:
 8022130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022134:	4607      	mov	r7, r0
 8022136:	4688      	mov	r8, r1
 8022138:	4614      	mov	r4, r2
 802213a:	2600      	movs	r6, #0
 802213c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022140:	f1b9 0901 	subs.w	r9, r9, #1
 8022144:	d505      	bpl.n	8022152 <_fwalk_sglue+0x22>
 8022146:	6824      	ldr	r4, [r4, #0]
 8022148:	2c00      	cmp	r4, #0
 802214a:	d1f7      	bne.n	802213c <_fwalk_sglue+0xc>
 802214c:	4630      	mov	r0, r6
 802214e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022152:	89ab      	ldrh	r3, [r5, #12]
 8022154:	2b01      	cmp	r3, #1
 8022156:	d907      	bls.n	8022168 <_fwalk_sglue+0x38>
 8022158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802215c:	3301      	adds	r3, #1
 802215e:	d003      	beq.n	8022168 <_fwalk_sglue+0x38>
 8022160:	4629      	mov	r1, r5
 8022162:	4638      	mov	r0, r7
 8022164:	47c0      	blx	r8
 8022166:	4306      	orrs	r6, r0
 8022168:	3568      	adds	r5, #104	@ 0x68
 802216a:	e7e9      	b.n	8022140 <_fwalk_sglue+0x10>

0802216c <iprintf>:
 802216c:	b40f      	push	{r0, r1, r2, r3}
 802216e:	b507      	push	{r0, r1, r2, lr}
 8022170:	4906      	ldr	r1, [pc, #24]	@ (802218c <iprintf+0x20>)
 8022172:	ab04      	add	r3, sp, #16
 8022174:	6808      	ldr	r0, [r1, #0]
 8022176:	f853 2b04 	ldr.w	r2, [r3], #4
 802217a:	6881      	ldr	r1, [r0, #8]
 802217c:	9301      	str	r3, [sp, #4]
 802217e:	f000 f94b 	bl	8022418 <_vfiprintf_r>
 8022182:	b003      	add	sp, #12
 8022184:	f85d eb04 	ldr.w	lr, [sp], #4
 8022188:	b004      	add	sp, #16
 802218a:	4770      	bx	lr
 802218c:	20000018 	.word	0x20000018

08022190 <__sread>:
 8022190:	b510      	push	{r4, lr}
 8022192:	460c      	mov	r4, r1
 8022194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022198:	f000 f868 	bl	802226c <_read_r>
 802219c:	2800      	cmp	r0, #0
 802219e:	bfab      	itete	ge
 80221a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80221a2:	89a3      	ldrhlt	r3, [r4, #12]
 80221a4:	181b      	addge	r3, r3, r0
 80221a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80221aa:	bfac      	ite	ge
 80221ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80221ae:	81a3      	strhlt	r3, [r4, #12]
 80221b0:	bd10      	pop	{r4, pc}

080221b2 <__swrite>:
 80221b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80221b6:	461f      	mov	r7, r3
 80221b8:	898b      	ldrh	r3, [r1, #12]
 80221ba:	05db      	lsls	r3, r3, #23
 80221bc:	4605      	mov	r5, r0
 80221be:	460c      	mov	r4, r1
 80221c0:	4616      	mov	r6, r2
 80221c2:	d505      	bpl.n	80221d0 <__swrite+0x1e>
 80221c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221c8:	2302      	movs	r3, #2
 80221ca:	2200      	movs	r2, #0
 80221cc:	f000 f83c 	bl	8022248 <_lseek_r>
 80221d0:	89a3      	ldrh	r3, [r4, #12]
 80221d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80221d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80221da:	81a3      	strh	r3, [r4, #12]
 80221dc:	4632      	mov	r2, r6
 80221de:	463b      	mov	r3, r7
 80221e0:	4628      	mov	r0, r5
 80221e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80221e6:	f000 b863 	b.w	80222b0 <_write_r>

080221ea <__sseek>:
 80221ea:	b510      	push	{r4, lr}
 80221ec:	460c      	mov	r4, r1
 80221ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221f2:	f000 f829 	bl	8022248 <_lseek_r>
 80221f6:	1c43      	adds	r3, r0, #1
 80221f8:	89a3      	ldrh	r3, [r4, #12]
 80221fa:	bf15      	itete	ne
 80221fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80221fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022202:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022206:	81a3      	strheq	r3, [r4, #12]
 8022208:	bf18      	it	ne
 802220a:	81a3      	strhne	r3, [r4, #12]
 802220c:	bd10      	pop	{r4, pc}

0802220e <__sclose>:
 802220e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022212:	f000 b809 	b.w	8022228 <_close_r>

08022216 <memset>:
 8022216:	4402      	add	r2, r0
 8022218:	4603      	mov	r3, r0
 802221a:	4293      	cmp	r3, r2
 802221c:	d100      	bne.n	8022220 <memset+0xa>
 802221e:	4770      	bx	lr
 8022220:	f803 1b01 	strb.w	r1, [r3], #1
 8022224:	e7f9      	b.n	802221a <memset+0x4>
	...

08022228 <_close_r>:
 8022228:	b538      	push	{r3, r4, r5, lr}
 802222a:	4d06      	ldr	r5, [pc, #24]	@ (8022244 <_close_r+0x1c>)
 802222c:	2300      	movs	r3, #0
 802222e:	4604      	mov	r4, r0
 8022230:	4608      	mov	r0, r1
 8022232:	602b      	str	r3, [r5, #0]
 8022234:	f7fe facb 	bl	80207ce <_close>
 8022238:	1c43      	adds	r3, r0, #1
 802223a:	d102      	bne.n	8022242 <_close_r+0x1a>
 802223c:	682b      	ldr	r3, [r5, #0]
 802223e:	b103      	cbz	r3, 8022242 <_close_r+0x1a>
 8022240:	6023      	str	r3, [r4, #0]
 8022242:	bd38      	pop	{r3, r4, r5, pc}
 8022244:	200001d0 	.word	0x200001d0

08022248 <_lseek_r>:
 8022248:	b538      	push	{r3, r4, r5, lr}
 802224a:	4d07      	ldr	r5, [pc, #28]	@ (8022268 <_lseek_r+0x20>)
 802224c:	4604      	mov	r4, r0
 802224e:	4608      	mov	r0, r1
 8022250:	4611      	mov	r1, r2
 8022252:	2200      	movs	r2, #0
 8022254:	602a      	str	r2, [r5, #0]
 8022256:	461a      	mov	r2, r3
 8022258:	f7fe fae0 	bl	802081c <_lseek>
 802225c:	1c43      	adds	r3, r0, #1
 802225e:	d102      	bne.n	8022266 <_lseek_r+0x1e>
 8022260:	682b      	ldr	r3, [r5, #0]
 8022262:	b103      	cbz	r3, 8022266 <_lseek_r+0x1e>
 8022264:	6023      	str	r3, [r4, #0]
 8022266:	bd38      	pop	{r3, r4, r5, pc}
 8022268:	200001d0 	.word	0x200001d0

0802226c <_read_r>:
 802226c:	b538      	push	{r3, r4, r5, lr}
 802226e:	4d07      	ldr	r5, [pc, #28]	@ (802228c <_read_r+0x20>)
 8022270:	4604      	mov	r4, r0
 8022272:	4608      	mov	r0, r1
 8022274:	4611      	mov	r1, r2
 8022276:	2200      	movs	r2, #0
 8022278:	602a      	str	r2, [r5, #0]
 802227a:	461a      	mov	r2, r3
 802227c:	f7fe fa6e 	bl	802075c <_read>
 8022280:	1c43      	adds	r3, r0, #1
 8022282:	d102      	bne.n	802228a <_read_r+0x1e>
 8022284:	682b      	ldr	r3, [r5, #0]
 8022286:	b103      	cbz	r3, 802228a <_read_r+0x1e>
 8022288:	6023      	str	r3, [r4, #0]
 802228a:	bd38      	pop	{r3, r4, r5, pc}
 802228c:	200001d0 	.word	0x200001d0

08022290 <_sbrk_r>:
 8022290:	b538      	push	{r3, r4, r5, lr}
 8022292:	4d06      	ldr	r5, [pc, #24]	@ (80222ac <_sbrk_r+0x1c>)
 8022294:	2300      	movs	r3, #0
 8022296:	4604      	mov	r4, r0
 8022298:	4608      	mov	r0, r1
 802229a:	602b      	str	r3, [r5, #0]
 802229c:	f7fe facc 	bl	8020838 <_sbrk>
 80222a0:	1c43      	adds	r3, r0, #1
 80222a2:	d102      	bne.n	80222aa <_sbrk_r+0x1a>
 80222a4:	682b      	ldr	r3, [r5, #0]
 80222a6:	b103      	cbz	r3, 80222aa <_sbrk_r+0x1a>
 80222a8:	6023      	str	r3, [r4, #0]
 80222aa:	bd38      	pop	{r3, r4, r5, pc}
 80222ac:	200001d0 	.word	0x200001d0

080222b0 <_write_r>:
 80222b0:	b538      	push	{r3, r4, r5, lr}
 80222b2:	4d07      	ldr	r5, [pc, #28]	@ (80222d0 <_write_r+0x20>)
 80222b4:	4604      	mov	r4, r0
 80222b6:	4608      	mov	r0, r1
 80222b8:	4611      	mov	r1, r2
 80222ba:	2200      	movs	r2, #0
 80222bc:	602a      	str	r2, [r5, #0]
 80222be:	461a      	mov	r2, r3
 80222c0:	f7fe fa69 	bl	8020796 <_write>
 80222c4:	1c43      	adds	r3, r0, #1
 80222c6:	d102      	bne.n	80222ce <_write_r+0x1e>
 80222c8:	682b      	ldr	r3, [r5, #0]
 80222ca:	b103      	cbz	r3, 80222ce <_write_r+0x1e>
 80222cc:	6023      	str	r3, [r4, #0]
 80222ce:	bd38      	pop	{r3, r4, r5, pc}
 80222d0:	200001d0 	.word	0x200001d0

080222d4 <__errno>:
 80222d4:	4b01      	ldr	r3, [pc, #4]	@ (80222dc <__errno+0x8>)
 80222d6:	6818      	ldr	r0, [r3, #0]
 80222d8:	4770      	bx	lr
 80222da:	bf00      	nop
 80222dc:	20000018 	.word	0x20000018

080222e0 <__libc_init_array>:
 80222e0:	b570      	push	{r4, r5, r6, lr}
 80222e2:	4d0d      	ldr	r5, [pc, #52]	@ (8022318 <__libc_init_array+0x38>)
 80222e4:	4c0d      	ldr	r4, [pc, #52]	@ (802231c <__libc_init_array+0x3c>)
 80222e6:	1b64      	subs	r4, r4, r5
 80222e8:	10a4      	asrs	r4, r4, #2
 80222ea:	2600      	movs	r6, #0
 80222ec:	42a6      	cmp	r6, r4
 80222ee:	d109      	bne.n	8022304 <__libc_init_array+0x24>
 80222f0:	4d0b      	ldr	r5, [pc, #44]	@ (8022320 <__libc_init_array+0x40>)
 80222f2:	4c0c      	ldr	r4, [pc, #48]	@ (8022324 <__libc_init_array+0x44>)
 80222f4:	f000 fc4e 	bl	8022b94 <_init>
 80222f8:	1b64      	subs	r4, r4, r5
 80222fa:	10a4      	asrs	r4, r4, #2
 80222fc:	2600      	movs	r6, #0
 80222fe:	42a6      	cmp	r6, r4
 8022300:	d105      	bne.n	802230e <__libc_init_array+0x2e>
 8022302:	bd70      	pop	{r4, r5, r6, pc}
 8022304:	f855 3b04 	ldr.w	r3, [r5], #4
 8022308:	4798      	blx	r3
 802230a:	3601      	adds	r6, #1
 802230c:	e7ee      	b.n	80222ec <__libc_init_array+0xc>
 802230e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022312:	4798      	blx	r3
 8022314:	3601      	adds	r6, #1
 8022316:	e7f2      	b.n	80222fe <__libc_init_array+0x1e>
 8022318:	08022c40 	.word	0x08022c40
 802231c:	08022c40 	.word	0x08022c40
 8022320:	08022c40 	.word	0x08022c40
 8022324:	08022c44 	.word	0x08022c44

08022328 <__retarget_lock_init_recursive>:
 8022328:	4770      	bx	lr

0802232a <__retarget_lock_acquire_recursive>:
 802232a:	4770      	bx	lr

0802232c <__retarget_lock_release_recursive>:
 802232c:	4770      	bx	lr
	...

08022330 <_free_r>:
 8022330:	b538      	push	{r3, r4, r5, lr}
 8022332:	4605      	mov	r5, r0
 8022334:	2900      	cmp	r1, #0
 8022336:	d041      	beq.n	80223bc <_free_r+0x8c>
 8022338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802233c:	1f0c      	subs	r4, r1, #4
 802233e:	2b00      	cmp	r3, #0
 8022340:	bfb8      	it	lt
 8022342:	18e4      	addlt	r4, r4, r3
 8022344:	f7ff fd84 	bl	8021e50 <__malloc_lock>
 8022348:	4a1d      	ldr	r2, [pc, #116]	@ (80223c0 <_free_r+0x90>)
 802234a:	6813      	ldr	r3, [r2, #0]
 802234c:	b933      	cbnz	r3, 802235c <_free_r+0x2c>
 802234e:	6063      	str	r3, [r4, #4]
 8022350:	6014      	str	r4, [r2, #0]
 8022352:	4628      	mov	r0, r5
 8022354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022358:	f7ff bd80 	b.w	8021e5c <__malloc_unlock>
 802235c:	42a3      	cmp	r3, r4
 802235e:	d908      	bls.n	8022372 <_free_r+0x42>
 8022360:	6820      	ldr	r0, [r4, #0]
 8022362:	1821      	adds	r1, r4, r0
 8022364:	428b      	cmp	r3, r1
 8022366:	bf01      	itttt	eq
 8022368:	6819      	ldreq	r1, [r3, #0]
 802236a:	685b      	ldreq	r3, [r3, #4]
 802236c:	1809      	addeq	r1, r1, r0
 802236e:	6021      	streq	r1, [r4, #0]
 8022370:	e7ed      	b.n	802234e <_free_r+0x1e>
 8022372:	461a      	mov	r2, r3
 8022374:	685b      	ldr	r3, [r3, #4]
 8022376:	b10b      	cbz	r3, 802237c <_free_r+0x4c>
 8022378:	42a3      	cmp	r3, r4
 802237a:	d9fa      	bls.n	8022372 <_free_r+0x42>
 802237c:	6811      	ldr	r1, [r2, #0]
 802237e:	1850      	adds	r0, r2, r1
 8022380:	42a0      	cmp	r0, r4
 8022382:	d10b      	bne.n	802239c <_free_r+0x6c>
 8022384:	6820      	ldr	r0, [r4, #0]
 8022386:	4401      	add	r1, r0
 8022388:	1850      	adds	r0, r2, r1
 802238a:	4283      	cmp	r3, r0
 802238c:	6011      	str	r1, [r2, #0]
 802238e:	d1e0      	bne.n	8022352 <_free_r+0x22>
 8022390:	6818      	ldr	r0, [r3, #0]
 8022392:	685b      	ldr	r3, [r3, #4]
 8022394:	6053      	str	r3, [r2, #4]
 8022396:	4408      	add	r0, r1
 8022398:	6010      	str	r0, [r2, #0]
 802239a:	e7da      	b.n	8022352 <_free_r+0x22>
 802239c:	d902      	bls.n	80223a4 <_free_r+0x74>
 802239e:	230c      	movs	r3, #12
 80223a0:	602b      	str	r3, [r5, #0]
 80223a2:	e7d6      	b.n	8022352 <_free_r+0x22>
 80223a4:	6820      	ldr	r0, [r4, #0]
 80223a6:	1821      	adds	r1, r4, r0
 80223a8:	428b      	cmp	r3, r1
 80223aa:	bf04      	itt	eq
 80223ac:	6819      	ldreq	r1, [r3, #0]
 80223ae:	685b      	ldreq	r3, [r3, #4]
 80223b0:	6063      	str	r3, [r4, #4]
 80223b2:	bf04      	itt	eq
 80223b4:	1809      	addeq	r1, r1, r0
 80223b6:	6021      	streq	r1, [r4, #0]
 80223b8:	6054      	str	r4, [r2, #4]
 80223ba:	e7ca      	b.n	8022352 <_free_r+0x22>
 80223bc:	bd38      	pop	{r3, r4, r5, pc}
 80223be:	bf00      	nop
 80223c0:	20000090 	.word	0x20000090

080223c4 <__sfputc_r>:
 80223c4:	6893      	ldr	r3, [r2, #8]
 80223c6:	3b01      	subs	r3, #1
 80223c8:	2b00      	cmp	r3, #0
 80223ca:	b410      	push	{r4}
 80223cc:	6093      	str	r3, [r2, #8]
 80223ce:	da08      	bge.n	80223e2 <__sfputc_r+0x1e>
 80223d0:	6994      	ldr	r4, [r2, #24]
 80223d2:	42a3      	cmp	r3, r4
 80223d4:	db01      	blt.n	80223da <__sfputc_r+0x16>
 80223d6:	290a      	cmp	r1, #10
 80223d8:	d103      	bne.n	80223e2 <__sfputc_r+0x1e>
 80223da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80223de:	f000 bac1 	b.w	8022964 <__swbuf_r>
 80223e2:	6813      	ldr	r3, [r2, #0]
 80223e4:	1c58      	adds	r0, r3, #1
 80223e6:	6010      	str	r0, [r2, #0]
 80223e8:	7019      	strb	r1, [r3, #0]
 80223ea:	4608      	mov	r0, r1
 80223ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80223f0:	4770      	bx	lr

080223f2 <__sfputs_r>:
 80223f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223f4:	4606      	mov	r6, r0
 80223f6:	460f      	mov	r7, r1
 80223f8:	4614      	mov	r4, r2
 80223fa:	18d5      	adds	r5, r2, r3
 80223fc:	42ac      	cmp	r4, r5
 80223fe:	d101      	bne.n	8022404 <__sfputs_r+0x12>
 8022400:	2000      	movs	r0, #0
 8022402:	e007      	b.n	8022414 <__sfputs_r+0x22>
 8022404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022408:	463a      	mov	r2, r7
 802240a:	4630      	mov	r0, r6
 802240c:	f7ff ffda 	bl	80223c4 <__sfputc_r>
 8022410:	1c43      	adds	r3, r0, #1
 8022412:	d1f3      	bne.n	80223fc <__sfputs_r+0xa>
 8022414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022418 <_vfiprintf_r>:
 8022418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802241c:	460d      	mov	r5, r1
 802241e:	b09d      	sub	sp, #116	@ 0x74
 8022420:	4614      	mov	r4, r2
 8022422:	4698      	mov	r8, r3
 8022424:	4606      	mov	r6, r0
 8022426:	b118      	cbz	r0, 8022430 <_vfiprintf_r+0x18>
 8022428:	6a03      	ldr	r3, [r0, #32]
 802242a:	b90b      	cbnz	r3, 8022430 <_vfiprintf_r+0x18>
 802242c:	f7ff fe68 	bl	8022100 <__sinit>
 8022430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022432:	07d9      	lsls	r1, r3, #31
 8022434:	d405      	bmi.n	8022442 <_vfiprintf_r+0x2a>
 8022436:	89ab      	ldrh	r3, [r5, #12]
 8022438:	059a      	lsls	r2, r3, #22
 802243a:	d402      	bmi.n	8022442 <_vfiprintf_r+0x2a>
 802243c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802243e:	f7ff ff74 	bl	802232a <__retarget_lock_acquire_recursive>
 8022442:	89ab      	ldrh	r3, [r5, #12]
 8022444:	071b      	lsls	r3, r3, #28
 8022446:	d501      	bpl.n	802244c <_vfiprintf_r+0x34>
 8022448:	692b      	ldr	r3, [r5, #16]
 802244a:	b99b      	cbnz	r3, 8022474 <_vfiprintf_r+0x5c>
 802244c:	4629      	mov	r1, r5
 802244e:	4630      	mov	r0, r6
 8022450:	f000 fac6 	bl	80229e0 <__swsetup_r>
 8022454:	b170      	cbz	r0, 8022474 <_vfiprintf_r+0x5c>
 8022456:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022458:	07dc      	lsls	r4, r3, #31
 802245a:	d504      	bpl.n	8022466 <_vfiprintf_r+0x4e>
 802245c:	f04f 30ff 	mov.w	r0, #4294967295
 8022460:	b01d      	add	sp, #116	@ 0x74
 8022462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022466:	89ab      	ldrh	r3, [r5, #12]
 8022468:	0598      	lsls	r0, r3, #22
 802246a:	d4f7      	bmi.n	802245c <_vfiprintf_r+0x44>
 802246c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802246e:	f7ff ff5d 	bl	802232c <__retarget_lock_release_recursive>
 8022472:	e7f3      	b.n	802245c <_vfiprintf_r+0x44>
 8022474:	2300      	movs	r3, #0
 8022476:	9309      	str	r3, [sp, #36]	@ 0x24
 8022478:	2320      	movs	r3, #32
 802247a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802247e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022482:	2330      	movs	r3, #48	@ 0x30
 8022484:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022634 <_vfiprintf_r+0x21c>
 8022488:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802248c:	f04f 0901 	mov.w	r9, #1
 8022490:	4623      	mov	r3, r4
 8022492:	469a      	mov	sl, r3
 8022494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022498:	b10a      	cbz	r2, 802249e <_vfiprintf_r+0x86>
 802249a:	2a25      	cmp	r2, #37	@ 0x25
 802249c:	d1f9      	bne.n	8022492 <_vfiprintf_r+0x7a>
 802249e:	ebba 0b04 	subs.w	fp, sl, r4
 80224a2:	d00b      	beq.n	80224bc <_vfiprintf_r+0xa4>
 80224a4:	465b      	mov	r3, fp
 80224a6:	4622      	mov	r2, r4
 80224a8:	4629      	mov	r1, r5
 80224aa:	4630      	mov	r0, r6
 80224ac:	f7ff ffa1 	bl	80223f2 <__sfputs_r>
 80224b0:	3001      	adds	r0, #1
 80224b2:	f000 80a7 	beq.w	8022604 <_vfiprintf_r+0x1ec>
 80224b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80224b8:	445a      	add	r2, fp
 80224ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80224bc:	f89a 3000 	ldrb.w	r3, [sl]
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	f000 809f 	beq.w	8022604 <_vfiprintf_r+0x1ec>
 80224c6:	2300      	movs	r3, #0
 80224c8:	f04f 32ff 	mov.w	r2, #4294967295
 80224cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80224d0:	f10a 0a01 	add.w	sl, sl, #1
 80224d4:	9304      	str	r3, [sp, #16]
 80224d6:	9307      	str	r3, [sp, #28]
 80224d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80224dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80224de:	4654      	mov	r4, sl
 80224e0:	2205      	movs	r2, #5
 80224e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80224e6:	4853      	ldr	r0, [pc, #332]	@ (8022634 <_vfiprintf_r+0x21c>)
 80224e8:	f7fd fdc2 	bl	8020070 <memchr>
 80224ec:	9a04      	ldr	r2, [sp, #16]
 80224ee:	b9d8      	cbnz	r0, 8022528 <_vfiprintf_r+0x110>
 80224f0:	06d1      	lsls	r1, r2, #27
 80224f2:	bf44      	itt	mi
 80224f4:	2320      	movmi	r3, #32
 80224f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80224fa:	0713      	lsls	r3, r2, #28
 80224fc:	bf44      	itt	mi
 80224fe:	232b      	movmi	r3, #43	@ 0x2b
 8022500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022504:	f89a 3000 	ldrb.w	r3, [sl]
 8022508:	2b2a      	cmp	r3, #42	@ 0x2a
 802250a:	d015      	beq.n	8022538 <_vfiprintf_r+0x120>
 802250c:	9a07      	ldr	r2, [sp, #28]
 802250e:	4654      	mov	r4, sl
 8022510:	2000      	movs	r0, #0
 8022512:	f04f 0c0a 	mov.w	ip, #10
 8022516:	4621      	mov	r1, r4
 8022518:	f811 3b01 	ldrb.w	r3, [r1], #1
 802251c:	3b30      	subs	r3, #48	@ 0x30
 802251e:	2b09      	cmp	r3, #9
 8022520:	d94b      	bls.n	80225ba <_vfiprintf_r+0x1a2>
 8022522:	b1b0      	cbz	r0, 8022552 <_vfiprintf_r+0x13a>
 8022524:	9207      	str	r2, [sp, #28]
 8022526:	e014      	b.n	8022552 <_vfiprintf_r+0x13a>
 8022528:	eba0 0308 	sub.w	r3, r0, r8
 802252c:	fa09 f303 	lsl.w	r3, r9, r3
 8022530:	4313      	orrs	r3, r2
 8022532:	9304      	str	r3, [sp, #16]
 8022534:	46a2      	mov	sl, r4
 8022536:	e7d2      	b.n	80224de <_vfiprintf_r+0xc6>
 8022538:	9b03      	ldr	r3, [sp, #12]
 802253a:	1d19      	adds	r1, r3, #4
 802253c:	681b      	ldr	r3, [r3, #0]
 802253e:	9103      	str	r1, [sp, #12]
 8022540:	2b00      	cmp	r3, #0
 8022542:	bfbb      	ittet	lt
 8022544:	425b      	neglt	r3, r3
 8022546:	f042 0202 	orrlt.w	r2, r2, #2
 802254a:	9307      	strge	r3, [sp, #28]
 802254c:	9307      	strlt	r3, [sp, #28]
 802254e:	bfb8      	it	lt
 8022550:	9204      	strlt	r2, [sp, #16]
 8022552:	7823      	ldrb	r3, [r4, #0]
 8022554:	2b2e      	cmp	r3, #46	@ 0x2e
 8022556:	d10a      	bne.n	802256e <_vfiprintf_r+0x156>
 8022558:	7863      	ldrb	r3, [r4, #1]
 802255a:	2b2a      	cmp	r3, #42	@ 0x2a
 802255c:	d132      	bne.n	80225c4 <_vfiprintf_r+0x1ac>
 802255e:	9b03      	ldr	r3, [sp, #12]
 8022560:	1d1a      	adds	r2, r3, #4
 8022562:	681b      	ldr	r3, [r3, #0]
 8022564:	9203      	str	r2, [sp, #12]
 8022566:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802256a:	3402      	adds	r4, #2
 802256c:	9305      	str	r3, [sp, #20]
 802256e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022644 <_vfiprintf_r+0x22c>
 8022572:	7821      	ldrb	r1, [r4, #0]
 8022574:	2203      	movs	r2, #3
 8022576:	4650      	mov	r0, sl
 8022578:	f7fd fd7a 	bl	8020070 <memchr>
 802257c:	b138      	cbz	r0, 802258e <_vfiprintf_r+0x176>
 802257e:	9b04      	ldr	r3, [sp, #16]
 8022580:	eba0 000a 	sub.w	r0, r0, sl
 8022584:	2240      	movs	r2, #64	@ 0x40
 8022586:	4082      	lsls	r2, r0
 8022588:	4313      	orrs	r3, r2
 802258a:	3401      	adds	r4, #1
 802258c:	9304      	str	r3, [sp, #16]
 802258e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022592:	4829      	ldr	r0, [pc, #164]	@ (8022638 <_vfiprintf_r+0x220>)
 8022594:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022598:	2206      	movs	r2, #6
 802259a:	f7fd fd69 	bl	8020070 <memchr>
 802259e:	2800      	cmp	r0, #0
 80225a0:	d03f      	beq.n	8022622 <_vfiprintf_r+0x20a>
 80225a2:	4b26      	ldr	r3, [pc, #152]	@ (802263c <_vfiprintf_r+0x224>)
 80225a4:	bb1b      	cbnz	r3, 80225ee <_vfiprintf_r+0x1d6>
 80225a6:	9b03      	ldr	r3, [sp, #12]
 80225a8:	3307      	adds	r3, #7
 80225aa:	f023 0307 	bic.w	r3, r3, #7
 80225ae:	3308      	adds	r3, #8
 80225b0:	9303      	str	r3, [sp, #12]
 80225b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80225b4:	443b      	add	r3, r7
 80225b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80225b8:	e76a      	b.n	8022490 <_vfiprintf_r+0x78>
 80225ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80225be:	460c      	mov	r4, r1
 80225c0:	2001      	movs	r0, #1
 80225c2:	e7a8      	b.n	8022516 <_vfiprintf_r+0xfe>
 80225c4:	2300      	movs	r3, #0
 80225c6:	3401      	adds	r4, #1
 80225c8:	9305      	str	r3, [sp, #20]
 80225ca:	4619      	mov	r1, r3
 80225cc:	f04f 0c0a 	mov.w	ip, #10
 80225d0:	4620      	mov	r0, r4
 80225d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80225d6:	3a30      	subs	r2, #48	@ 0x30
 80225d8:	2a09      	cmp	r2, #9
 80225da:	d903      	bls.n	80225e4 <_vfiprintf_r+0x1cc>
 80225dc:	2b00      	cmp	r3, #0
 80225de:	d0c6      	beq.n	802256e <_vfiprintf_r+0x156>
 80225e0:	9105      	str	r1, [sp, #20]
 80225e2:	e7c4      	b.n	802256e <_vfiprintf_r+0x156>
 80225e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80225e8:	4604      	mov	r4, r0
 80225ea:	2301      	movs	r3, #1
 80225ec:	e7f0      	b.n	80225d0 <_vfiprintf_r+0x1b8>
 80225ee:	ab03      	add	r3, sp, #12
 80225f0:	9300      	str	r3, [sp, #0]
 80225f2:	462a      	mov	r2, r5
 80225f4:	4b12      	ldr	r3, [pc, #72]	@ (8022640 <_vfiprintf_r+0x228>)
 80225f6:	a904      	add	r1, sp, #16
 80225f8:	4630      	mov	r0, r6
 80225fa:	f3af 8000 	nop.w
 80225fe:	4607      	mov	r7, r0
 8022600:	1c78      	adds	r0, r7, #1
 8022602:	d1d6      	bne.n	80225b2 <_vfiprintf_r+0x19a>
 8022604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022606:	07d9      	lsls	r1, r3, #31
 8022608:	d405      	bmi.n	8022616 <_vfiprintf_r+0x1fe>
 802260a:	89ab      	ldrh	r3, [r5, #12]
 802260c:	059a      	lsls	r2, r3, #22
 802260e:	d402      	bmi.n	8022616 <_vfiprintf_r+0x1fe>
 8022610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022612:	f7ff fe8b 	bl	802232c <__retarget_lock_release_recursive>
 8022616:	89ab      	ldrh	r3, [r5, #12]
 8022618:	065b      	lsls	r3, r3, #25
 802261a:	f53f af1f 	bmi.w	802245c <_vfiprintf_r+0x44>
 802261e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022620:	e71e      	b.n	8022460 <_vfiprintf_r+0x48>
 8022622:	ab03      	add	r3, sp, #12
 8022624:	9300      	str	r3, [sp, #0]
 8022626:	462a      	mov	r2, r5
 8022628:	4b05      	ldr	r3, [pc, #20]	@ (8022640 <_vfiprintf_r+0x228>)
 802262a:	a904      	add	r1, sp, #16
 802262c:	4630      	mov	r0, r6
 802262e:	f000 f879 	bl	8022724 <_printf_i>
 8022632:	e7e4      	b.n	80225fe <_vfiprintf_r+0x1e6>
 8022634:	08022c04 	.word	0x08022c04
 8022638:	08022c0e 	.word	0x08022c0e
 802263c:	00000000 	.word	0x00000000
 8022640:	080223f3 	.word	0x080223f3
 8022644:	08022c0a 	.word	0x08022c0a

08022648 <_printf_common>:
 8022648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802264c:	4616      	mov	r6, r2
 802264e:	4698      	mov	r8, r3
 8022650:	688a      	ldr	r2, [r1, #8]
 8022652:	690b      	ldr	r3, [r1, #16]
 8022654:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022658:	4293      	cmp	r3, r2
 802265a:	bfb8      	it	lt
 802265c:	4613      	movlt	r3, r2
 802265e:	6033      	str	r3, [r6, #0]
 8022660:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022664:	4607      	mov	r7, r0
 8022666:	460c      	mov	r4, r1
 8022668:	b10a      	cbz	r2, 802266e <_printf_common+0x26>
 802266a:	3301      	adds	r3, #1
 802266c:	6033      	str	r3, [r6, #0]
 802266e:	6823      	ldr	r3, [r4, #0]
 8022670:	0699      	lsls	r1, r3, #26
 8022672:	bf42      	ittt	mi
 8022674:	6833      	ldrmi	r3, [r6, #0]
 8022676:	3302      	addmi	r3, #2
 8022678:	6033      	strmi	r3, [r6, #0]
 802267a:	6825      	ldr	r5, [r4, #0]
 802267c:	f015 0506 	ands.w	r5, r5, #6
 8022680:	d106      	bne.n	8022690 <_printf_common+0x48>
 8022682:	f104 0a19 	add.w	sl, r4, #25
 8022686:	68e3      	ldr	r3, [r4, #12]
 8022688:	6832      	ldr	r2, [r6, #0]
 802268a:	1a9b      	subs	r3, r3, r2
 802268c:	42ab      	cmp	r3, r5
 802268e:	dc26      	bgt.n	80226de <_printf_common+0x96>
 8022690:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022694:	6822      	ldr	r2, [r4, #0]
 8022696:	3b00      	subs	r3, #0
 8022698:	bf18      	it	ne
 802269a:	2301      	movne	r3, #1
 802269c:	0692      	lsls	r2, r2, #26
 802269e:	d42b      	bmi.n	80226f8 <_printf_common+0xb0>
 80226a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80226a4:	4641      	mov	r1, r8
 80226a6:	4638      	mov	r0, r7
 80226a8:	47c8      	blx	r9
 80226aa:	3001      	adds	r0, #1
 80226ac:	d01e      	beq.n	80226ec <_printf_common+0xa4>
 80226ae:	6823      	ldr	r3, [r4, #0]
 80226b0:	6922      	ldr	r2, [r4, #16]
 80226b2:	f003 0306 	and.w	r3, r3, #6
 80226b6:	2b04      	cmp	r3, #4
 80226b8:	bf02      	ittt	eq
 80226ba:	68e5      	ldreq	r5, [r4, #12]
 80226bc:	6833      	ldreq	r3, [r6, #0]
 80226be:	1aed      	subeq	r5, r5, r3
 80226c0:	68a3      	ldr	r3, [r4, #8]
 80226c2:	bf0c      	ite	eq
 80226c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80226c8:	2500      	movne	r5, #0
 80226ca:	4293      	cmp	r3, r2
 80226cc:	bfc4      	itt	gt
 80226ce:	1a9b      	subgt	r3, r3, r2
 80226d0:	18ed      	addgt	r5, r5, r3
 80226d2:	2600      	movs	r6, #0
 80226d4:	341a      	adds	r4, #26
 80226d6:	42b5      	cmp	r5, r6
 80226d8:	d11a      	bne.n	8022710 <_printf_common+0xc8>
 80226da:	2000      	movs	r0, #0
 80226dc:	e008      	b.n	80226f0 <_printf_common+0xa8>
 80226de:	2301      	movs	r3, #1
 80226e0:	4652      	mov	r2, sl
 80226e2:	4641      	mov	r1, r8
 80226e4:	4638      	mov	r0, r7
 80226e6:	47c8      	blx	r9
 80226e8:	3001      	adds	r0, #1
 80226ea:	d103      	bne.n	80226f4 <_printf_common+0xac>
 80226ec:	f04f 30ff 	mov.w	r0, #4294967295
 80226f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226f4:	3501      	adds	r5, #1
 80226f6:	e7c6      	b.n	8022686 <_printf_common+0x3e>
 80226f8:	18e1      	adds	r1, r4, r3
 80226fa:	1c5a      	adds	r2, r3, #1
 80226fc:	2030      	movs	r0, #48	@ 0x30
 80226fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022702:	4422      	add	r2, r4
 8022704:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022708:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802270c:	3302      	adds	r3, #2
 802270e:	e7c7      	b.n	80226a0 <_printf_common+0x58>
 8022710:	2301      	movs	r3, #1
 8022712:	4622      	mov	r2, r4
 8022714:	4641      	mov	r1, r8
 8022716:	4638      	mov	r0, r7
 8022718:	47c8      	blx	r9
 802271a:	3001      	adds	r0, #1
 802271c:	d0e6      	beq.n	80226ec <_printf_common+0xa4>
 802271e:	3601      	adds	r6, #1
 8022720:	e7d9      	b.n	80226d6 <_printf_common+0x8e>
	...

08022724 <_printf_i>:
 8022724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022728:	7e0f      	ldrb	r7, [r1, #24]
 802272a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802272c:	2f78      	cmp	r7, #120	@ 0x78
 802272e:	4691      	mov	r9, r2
 8022730:	4680      	mov	r8, r0
 8022732:	460c      	mov	r4, r1
 8022734:	469a      	mov	sl, r3
 8022736:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802273a:	d807      	bhi.n	802274c <_printf_i+0x28>
 802273c:	2f62      	cmp	r7, #98	@ 0x62
 802273e:	d80a      	bhi.n	8022756 <_printf_i+0x32>
 8022740:	2f00      	cmp	r7, #0
 8022742:	f000 80d2 	beq.w	80228ea <_printf_i+0x1c6>
 8022746:	2f58      	cmp	r7, #88	@ 0x58
 8022748:	f000 80b9 	beq.w	80228be <_printf_i+0x19a>
 802274c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022750:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022754:	e03a      	b.n	80227cc <_printf_i+0xa8>
 8022756:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802275a:	2b15      	cmp	r3, #21
 802275c:	d8f6      	bhi.n	802274c <_printf_i+0x28>
 802275e:	a101      	add	r1, pc, #4	@ (adr r1, 8022764 <_printf_i+0x40>)
 8022760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022764:	080227bd 	.word	0x080227bd
 8022768:	080227d1 	.word	0x080227d1
 802276c:	0802274d 	.word	0x0802274d
 8022770:	0802274d 	.word	0x0802274d
 8022774:	0802274d 	.word	0x0802274d
 8022778:	0802274d 	.word	0x0802274d
 802277c:	080227d1 	.word	0x080227d1
 8022780:	0802274d 	.word	0x0802274d
 8022784:	0802274d 	.word	0x0802274d
 8022788:	0802274d 	.word	0x0802274d
 802278c:	0802274d 	.word	0x0802274d
 8022790:	080228d1 	.word	0x080228d1
 8022794:	080227fb 	.word	0x080227fb
 8022798:	0802288b 	.word	0x0802288b
 802279c:	0802274d 	.word	0x0802274d
 80227a0:	0802274d 	.word	0x0802274d
 80227a4:	080228f3 	.word	0x080228f3
 80227a8:	0802274d 	.word	0x0802274d
 80227ac:	080227fb 	.word	0x080227fb
 80227b0:	0802274d 	.word	0x0802274d
 80227b4:	0802274d 	.word	0x0802274d
 80227b8:	08022893 	.word	0x08022893
 80227bc:	6833      	ldr	r3, [r6, #0]
 80227be:	1d1a      	adds	r2, r3, #4
 80227c0:	681b      	ldr	r3, [r3, #0]
 80227c2:	6032      	str	r2, [r6, #0]
 80227c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80227c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80227cc:	2301      	movs	r3, #1
 80227ce:	e09d      	b.n	802290c <_printf_i+0x1e8>
 80227d0:	6833      	ldr	r3, [r6, #0]
 80227d2:	6820      	ldr	r0, [r4, #0]
 80227d4:	1d19      	adds	r1, r3, #4
 80227d6:	6031      	str	r1, [r6, #0]
 80227d8:	0606      	lsls	r6, r0, #24
 80227da:	d501      	bpl.n	80227e0 <_printf_i+0xbc>
 80227dc:	681d      	ldr	r5, [r3, #0]
 80227de:	e003      	b.n	80227e8 <_printf_i+0xc4>
 80227e0:	0645      	lsls	r5, r0, #25
 80227e2:	d5fb      	bpl.n	80227dc <_printf_i+0xb8>
 80227e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80227e8:	2d00      	cmp	r5, #0
 80227ea:	da03      	bge.n	80227f4 <_printf_i+0xd0>
 80227ec:	232d      	movs	r3, #45	@ 0x2d
 80227ee:	426d      	negs	r5, r5
 80227f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80227f4:	4859      	ldr	r0, [pc, #356]	@ (802295c <_printf_i+0x238>)
 80227f6:	230a      	movs	r3, #10
 80227f8:	e011      	b.n	802281e <_printf_i+0xfa>
 80227fa:	6821      	ldr	r1, [r4, #0]
 80227fc:	6833      	ldr	r3, [r6, #0]
 80227fe:	0608      	lsls	r0, r1, #24
 8022800:	f853 5b04 	ldr.w	r5, [r3], #4
 8022804:	d402      	bmi.n	802280c <_printf_i+0xe8>
 8022806:	0649      	lsls	r1, r1, #25
 8022808:	bf48      	it	mi
 802280a:	b2ad      	uxthmi	r5, r5
 802280c:	2f6f      	cmp	r7, #111	@ 0x6f
 802280e:	4853      	ldr	r0, [pc, #332]	@ (802295c <_printf_i+0x238>)
 8022810:	6033      	str	r3, [r6, #0]
 8022812:	bf14      	ite	ne
 8022814:	230a      	movne	r3, #10
 8022816:	2308      	moveq	r3, #8
 8022818:	2100      	movs	r1, #0
 802281a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802281e:	6866      	ldr	r6, [r4, #4]
 8022820:	60a6      	str	r6, [r4, #8]
 8022822:	2e00      	cmp	r6, #0
 8022824:	bfa2      	ittt	ge
 8022826:	6821      	ldrge	r1, [r4, #0]
 8022828:	f021 0104 	bicge.w	r1, r1, #4
 802282c:	6021      	strge	r1, [r4, #0]
 802282e:	b90d      	cbnz	r5, 8022834 <_printf_i+0x110>
 8022830:	2e00      	cmp	r6, #0
 8022832:	d04b      	beq.n	80228cc <_printf_i+0x1a8>
 8022834:	4616      	mov	r6, r2
 8022836:	fbb5 f1f3 	udiv	r1, r5, r3
 802283a:	fb03 5711 	mls	r7, r3, r1, r5
 802283e:	5dc7      	ldrb	r7, [r0, r7]
 8022840:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022844:	462f      	mov	r7, r5
 8022846:	42bb      	cmp	r3, r7
 8022848:	460d      	mov	r5, r1
 802284a:	d9f4      	bls.n	8022836 <_printf_i+0x112>
 802284c:	2b08      	cmp	r3, #8
 802284e:	d10b      	bne.n	8022868 <_printf_i+0x144>
 8022850:	6823      	ldr	r3, [r4, #0]
 8022852:	07df      	lsls	r7, r3, #31
 8022854:	d508      	bpl.n	8022868 <_printf_i+0x144>
 8022856:	6923      	ldr	r3, [r4, #16]
 8022858:	6861      	ldr	r1, [r4, #4]
 802285a:	4299      	cmp	r1, r3
 802285c:	bfde      	ittt	le
 802285e:	2330      	movle	r3, #48	@ 0x30
 8022860:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022864:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022868:	1b92      	subs	r2, r2, r6
 802286a:	6122      	str	r2, [r4, #16]
 802286c:	f8cd a000 	str.w	sl, [sp]
 8022870:	464b      	mov	r3, r9
 8022872:	aa03      	add	r2, sp, #12
 8022874:	4621      	mov	r1, r4
 8022876:	4640      	mov	r0, r8
 8022878:	f7ff fee6 	bl	8022648 <_printf_common>
 802287c:	3001      	adds	r0, #1
 802287e:	d14a      	bne.n	8022916 <_printf_i+0x1f2>
 8022880:	f04f 30ff 	mov.w	r0, #4294967295
 8022884:	b004      	add	sp, #16
 8022886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802288a:	6823      	ldr	r3, [r4, #0]
 802288c:	f043 0320 	orr.w	r3, r3, #32
 8022890:	6023      	str	r3, [r4, #0]
 8022892:	4833      	ldr	r0, [pc, #204]	@ (8022960 <_printf_i+0x23c>)
 8022894:	2778      	movs	r7, #120	@ 0x78
 8022896:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802289a:	6823      	ldr	r3, [r4, #0]
 802289c:	6831      	ldr	r1, [r6, #0]
 802289e:	061f      	lsls	r7, r3, #24
 80228a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80228a4:	d402      	bmi.n	80228ac <_printf_i+0x188>
 80228a6:	065f      	lsls	r7, r3, #25
 80228a8:	bf48      	it	mi
 80228aa:	b2ad      	uxthmi	r5, r5
 80228ac:	6031      	str	r1, [r6, #0]
 80228ae:	07d9      	lsls	r1, r3, #31
 80228b0:	bf44      	itt	mi
 80228b2:	f043 0320 	orrmi.w	r3, r3, #32
 80228b6:	6023      	strmi	r3, [r4, #0]
 80228b8:	b11d      	cbz	r5, 80228c2 <_printf_i+0x19e>
 80228ba:	2310      	movs	r3, #16
 80228bc:	e7ac      	b.n	8022818 <_printf_i+0xf4>
 80228be:	4827      	ldr	r0, [pc, #156]	@ (802295c <_printf_i+0x238>)
 80228c0:	e7e9      	b.n	8022896 <_printf_i+0x172>
 80228c2:	6823      	ldr	r3, [r4, #0]
 80228c4:	f023 0320 	bic.w	r3, r3, #32
 80228c8:	6023      	str	r3, [r4, #0]
 80228ca:	e7f6      	b.n	80228ba <_printf_i+0x196>
 80228cc:	4616      	mov	r6, r2
 80228ce:	e7bd      	b.n	802284c <_printf_i+0x128>
 80228d0:	6833      	ldr	r3, [r6, #0]
 80228d2:	6825      	ldr	r5, [r4, #0]
 80228d4:	6961      	ldr	r1, [r4, #20]
 80228d6:	1d18      	adds	r0, r3, #4
 80228d8:	6030      	str	r0, [r6, #0]
 80228da:	062e      	lsls	r6, r5, #24
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	d501      	bpl.n	80228e4 <_printf_i+0x1c0>
 80228e0:	6019      	str	r1, [r3, #0]
 80228e2:	e002      	b.n	80228ea <_printf_i+0x1c6>
 80228e4:	0668      	lsls	r0, r5, #25
 80228e6:	d5fb      	bpl.n	80228e0 <_printf_i+0x1bc>
 80228e8:	8019      	strh	r1, [r3, #0]
 80228ea:	2300      	movs	r3, #0
 80228ec:	6123      	str	r3, [r4, #16]
 80228ee:	4616      	mov	r6, r2
 80228f0:	e7bc      	b.n	802286c <_printf_i+0x148>
 80228f2:	6833      	ldr	r3, [r6, #0]
 80228f4:	1d1a      	adds	r2, r3, #4
 80228f6:	6032      	str	r2, [r6, #0]
 80228f8:	681e      	ldr	r6, [r3, #0]
 80228fa:	6862      	ldr	r2, [r4, #4]
 80228fc:	2100      	movs	r1, #0
 80228fe:	4630      	mov	r0, r6
 8022900:	f7fd fbb6 	bl	8020070 <memchr>
 8022904:	b108      	cbz	r0, 802290a <_printf_i+0x1e6>
 8022906:	1b80      	subs	r0, r0, r6
 8022908:	6060      	str	r0, [r4, #4]
 802290a:	6863      	ldr	r3, [r4, #4]
 802290c:	6123      	str	r3, [r4, #16]
 802290e:	2300      	movs	r3, #0
 8022910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022914:	e7aa      	b.n	802286c <_printf_i+0x148>
 8022916:	6923      	ldr	r3, [r4, #16]
 8022918:	4632      	mov	r2, r6
 802291a:	4649      	mov	r1, r9
 802291c:	4640      	mov	r0, r8
 802291e:	47d0      	blx	sl
 8022920:	3001      	adds	r0, #1
 8022922:	d0ad      	beq.n	8022880 <_printf_i+0x15c>
 8022924:	6823      	ldr	r3, [r4, #0]
 8022926:	079b      	lsls	r3, r3, #30
 8022928:	d413      	bmi.n	8022952 <_printf_i+0x22e>
 802292a:	68e0      	ldr	r0, [r4, #12]
 802292c:	9b03      	ldr	r3, [sp, #12]
 802292e:	4298      	cmp	r0, r3
 8022930:	bfb8      	it	lt
 8022932:	4618      	movlt	r0, r3
 8022934:	e7a6      	b.n	8022884 <_printf_i+0x160>
 8022936:	2301      	movs	r3, #1
 8022938:	4632      	mov	r2, r6
 802293a:	4649      	mov	r1, r9
 802293c:	4640      	mov	r0, r8
 802293e:	47d0      	blx	sl
 8022940:	3001      	adds	r0, #1
 8022942:	d09d      	beq.n	8022880 <_printf_i+0x15c>
 8022944:	3501      	adds	r5, #1
 8022946:	68e3      	ldr	r3, [r4, #12]
 8022948:	9903      	ldr	r1, [sp, #12]
 802294a:	1a5b      	subs	r3, r3, r1
 802294c:	42ab      	cmp	r3, r5
 802294e:	dcf2      	bgt.n	8022936 <_printf_i+0x212>
 8022950:	e7eb      	b.n	802292a <_printf_i+0x206>
 8022952:	2500      	movs	r5, #0
 8022954:	f104 0619 	add.w	r6, r4, #25
 8022958:	e7f5      	b.n	8022946 <_printf_i+0x222>
 802295a:	bf00      	nop
 802295c:	08022c15 	.word	0x08022c15
 8022960:	08022c26 	.word	0x08022c26

08022964 <__swbuf_r>:
 8022964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022966:	460e      	mov	r6, r1
 8022968:	4614      	mov	r4, r2
 802296a:	4605      	mov	r5, r0
 802296c:	b118      	cbz	r0, 8022976 <__swbuf_r+0x12>
 802296e:	6a03      	ldr	r3, [r0, #32]
 8022970:	b90b      	cbnz	r3, 8022976 <__swbuf_r+0x12>
 8022972:	f7ff fbc5 	bl	8022100 <__sinit>
 8022976:	69a3      	ldr	r3, [r4, #24]
 8022978:	60a3      	str	r3, [r4, #8]
 802297a:	89a3      	ldrh	r3, [r4, #12]
 802297c:	071a      	lsls	r2, r3, #28
 802297e:	d501      	bpl.n	8022984 <__swbuf_r+0x20>
 8022980:	6923      	ldr	r3, [r4, #16]
 8022982:	b943      	cbnz	r3, 8022996 <__swbuf_r+0x32>
 8022984:	4621      	mov	r1, r4
 8022986:	4628      	mov	r0, r5
 8022988:	f000 f82a 	bl	80229e0 <__swsetup_r>
 802298c:	b118      	cbz	r0, 8022996 <__swbuf_r+0x32>
 802298e:	f04f 37ff 	mov.w	r7, #4294967295
 8022992:	4638      	mov	r0, r7
 8022994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022996:	6823      	ldr	r3, [r4, #0]
 8022998:	6922      	ldr	r2, [r4, #16]
 802299a:	1a98      	subs	r0, r3, r2
 802299c:	6963      	ldr	r3, [r4, #20]
 802299e:	b2f6      	uxtb	r6, r6
 80229a0:	4283      	cmp	r3, r0
 80229a2:	4637      	mov	r7, r6
 80229a4:	dc05      	bgt.n	80229b2 <__swbuf_r+0x4e>
 80229a6:	4621      	mov	r1, r4
 80229a8:	4628      	mov	r0, r5
 80229aa:	f7ff fae1 	bl	8021f70 <_fflush_r>
 80229ae:	2800      	cmp	r0, #0
 80229b0:	d1ed      	bne.n	802298e <__swbuf_r+0x2a>
 80229b2:	68a3      	ldr	r3, [r4, #8]
 80229b4:	3b01      	subs	r3, #1
 80229b6:	60a3      	str	r3, [r4, #8]
 80229b8:	6823      	ldr	r3, [r4, #0]
 80229ba:	1c5a      	adds	r2, r3, #1
 80229bc:	6022      	str	r2, [r4, #0]
 80229be:	701e      	strb	r6, [r3, #0]
 80229c0:	6962      	ldr	r2, [r4, #20]
 80229c2:	1c43      	adds	r3, r0, #1
 80229c4:	429a      	cmp	r2, r3
 80229c6:	d004      	beq.n	80229d2 <__swbuf_r+0x6e>
 80229c8:	89a3      	ldrh	r3, [r4, #12]
 80229ca:	07db      	lsls	r3, r3, #31
 80229cc:	d5e1      	bpl.n	8022992 <__swbuf_r+0x2e>
 80229ce:	2e0a      	cmp	r6, #10
 80229d0:	d1df      	bne.n	8022992 <__swbuf_r+0x2e>
 80229d2:	4621      	mov	r1, r4
 80229d4:	4628      	mov	r0, r5
 80229d6:	f7ff facb 	bl	8021f70 <_fflush_r>
 80229da:	2800      	cmp	r0, #0
 80229dc:	d0d9      	beq.n	8022992 <__swbuf_r+0x2e>
 80229de:	e7d6      	b.n	802298e <__swbuf_r+0x2a>

080229e0 <__swsetup_r>:
 80229e0:	b538      	push	{r3, r4, r5, lr}
 80229e2:	4b29      	ldr	r3, [pc, #164]	@ (8022a88 <__swsetup_r+0xa8>)
 80229e4:	4605      	mov	r5, r0
 80229e6:	6818      	ldr	r0, [r3, #0]
 80229e8:	460c      	mov	r4, r1
 80229ea:	b118      	cbz	r0, 80229f4 <__swsetup_r+0x14>
 80229ec:	6a03      	ldr	r3, [r0, #32]
 80229ee:	b90b      	cbnz	r3, 80229f4 <__swsetup_r+0x14>
 80229f0:	f7ff fb86 	bl	8022100 <__sinit>
 80229f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80229f8:	0719      	lsls	r1, r3, #28
 80229fa:	d422      	bmi.n	8022a42 <__swsetup_r+0x62>
 80229fc:	06da      	lsls	r2, r3, #27
 80229fe:	d407      	bmi.n	8022a10 <__swsetup_r+0x30>
 8022a00:	2209      	movs	r2, #9
 8022a02:	602a      	str	r2, [r5, #0]
 8022a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022a08:	81a3      	strh	r3, [r4, #12]
 8022a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8022a0e:	e033      	b.n	8022a78 <__swsetup_r+0x98>
 8022a10:	0758      	lsls	r0, r3, #29
 8022a12:	d512      	bpl.n	8022a3a <__swsetup_r+0x5a>
 8022a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022a16:	b141      	cbz	r1, 8022a2a <__swsetup_r+0x4a>
 8022a18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022a1c:	4299      	cmp	r1, r3
 8022a1e:	d002      	beq.n	8022a26 <__swsetup_r+0x46>
 8022a20:	4628      	mov	r0, r5
 8022a22:	f7ff fc85 	bl	8022330 <_free_r>
 8022a26:	2300      	movs	r3, #0
 8022a28:	6363      	str	r3, [r4, #52]	@ 0x34
 8022a2a:	89a3      	ldrh	r3, [r4, #12]
 8022a2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022a30:	81a3      	strh	r3, [r4, #12]
 8022a32:	2300      	movs	r3, #0
 8022a34:	6063      	str	r3, [r4, #4]
 8022a36:	6923      	ldr	r3, [r4, #16]
 8022a38:	6023      	str	r3, [r4, #0]
 8022a3a:	89a3      	ldrh	r3, [r4, #12]
 8022a3c:	f043 0308 	orr.w	r3, r3, #8
 8022a40:	81a3      	strh	r3, [r4, #12]
 8022a42:	6923      	ldr	r3, [r4, #16]
 8022a44:	b94b      	cbnz	r3, 8022a5a <__swsetup_r+0x7a>
 8022a46:	89a3      	ldrh	r3, [r4, #12]
 8022a48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022a50:	d003      	beq.n	8022a5a <__swsetup_r+0x7a>
 8022a52:	4621      	mov	r1, r4
 8022a54:	4628      	mov	r0, r5
 8022a56:	f000 f83f 	bl	8022ad8 <__smakebuf_r>
 8022a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a5e:	f013 0201 	ands.w	r2, r3, #1
 8022a62:	d00a      	beq.n	8022a7a <__swsetup_r+0x9a>
 8022a64:	2200      	movs	r2, #0
 8022a66:	60a2      	str	r2, [r4, #8]
 8022a68:	6962      	ldr	r2, [r4, #20]
 8022a6a:	4252      	negs	r2, r2
 8022a6c:	61a2      	str	r2, [r4, #24]
 8022a6e:	6922      	ldr	r2, [r4, #16]
 8022a70:	b942      	cbnz	r2, 8022a84 <__swsetup_r+0xa4>
 8022a72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022a76:	d1c5      	bne.n	8022a04 <__swsetup_r+0x24>
 8022a78:	bd38      	pop	{r3, r4, r5, pc}
 8022a7a:	0799      	lsls	r1, r3, #30
 8022a7c:	bf58      	it	pl
 8022a7e:	6962      	ldrpl	r2, [r4, #20]
 8022a80:	60a2      	str	r2, [r4, #8]
 8022a82:	e7f4      	b.n	8022a6e <__swsetup_r+0x8e>
 8022a84:	2000      	movs	r0, #0
 8022a86:	e7f7      	b.n	8022a78 <__swsetup_r+0x98>
 8022a88:	20000018 	.word	0x20000018

08022a8c <__swhatbuf_r>:
 8022a8c:	b570      	push	{r4, r5, r6, lr}
 8022a8e:	460c      	mov	r4, r1
 8022a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a94:	2900      	cmp	r1, #0
 8022a96:	b096      	sub	sp, #88	@ 0x58
 8022a98:	4615      	mov	r5, r2
 8022a9a:	461e      	mov	r6, r3
 8022a9c:	da0d      	bge.n	8022aba <__swhatbuf_r+0x2e>
 8022a9e:	89a3      	ldrh	r3, [r4, #12]
 8022aa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022aa4:	f04f 0100 	mov.w	r1, #0
 8022aa8:	bf14      	ite	ne
 8022aaa:	2340      	movne	r3, #64	@ 0x40
 8022aac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022ab0:	2000      	movs	r0, #0
 8022ab2:	6031      	str	r1, [r6, #0]
 8022ab4:	602b      	str	r3, [r5, #0]
 8022ab6:	b016      	add	sp, #88	@ 0x58
 8022ab8:	bd70      	pop	{r4, r5, r6, pc}
 8022aba:	466a      	mov	r2, sp
 8022abc:	f000 f848 	bl	8022b50 <_fstat_r>
 8022ac0:	2800      	cmp	r0, #0
 8022ac2:	dbec      	blt.n	8022a9e <__swhatbuf_r+0x12>
 8022ac4:	9901      	ldr	r1, [sp, #4]
 8022ac6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022aca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022ace:	4259      	negs	r1, r3
 8022ad0:	4159      	adcs	r1, r3
 8022ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022ad6:	e7eb      	b.n	8022ab0 <__swhatbuf_r+0x24>

08022ad8 <__smakebuf_r>:
 8022ad8:	898b      	ldrh	r3, [r1, #12]
 8022ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022adc:	079d      	lsls	r5, r3, #30
 8022ade:	4606      	mov	r6, r0
 8022ae0:	460c      	mov	r4, r1
 8022ae2:	d507      	bpl.n	8022af4 <__smakebuf_r+0x1c>
 8022ae4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022ae8:	6023      	str	r3, [r4, #0]
 8022aea:	6123      	str	r3, [r4, #16]
 8022aec:	2301      	movs	r3, #1
 8022aee:	6163      	str	r3, [r4, #20]
 8022af0:	b003      	add	sp, #12
 8022af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022af4:	ab01      	add	r3, sp, #4
 8022af6:	466a      	mov	r2, sp
 8022af8:	f7ff ffc8 	bl	8022a8c <__swhatbuf_r>
 8022afc:	9f00      	ldr	r7, [sp, #0]
 8022afe:	4605      	mov	r5, r0
 8022b00:	4639      	mov	r1, r7
 8022b02:	4630      	mov	r0, r6
 8022b04:	f7ff f924 	bl	8021d50 <_malloc_r>
 8022b08:	b948      	cbnz	r0, 8022b1e <__smakebuf_r+0x46>
 8022b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b0e:	059a      	lsls	r2, r3, #22
 8022b10:	d4ee      	bmi.n	8022af0 <__smakebuf_r+0x18>
 8022b12:	f023 0303 	bic.w	r3, r3, #3
 8022b16:	f043 0302 	orr.w	r3, r3, #2
 8022b1a:	81a3      	strh	r3, [r4, #12]
 8022b1c:	e7e2      	b.n	8022ae4 <__smakebuf_r+0xc>
 8022b1e:	89a3      	ldrh	r3, [r4, #12]
 8022b20:	6020      	str	r0, [r4, #0]
 8022b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022b26:	81a3      	strh	r3, [r4, #12]
 8022b28:	9b01      	ldr	r3, [sp, #4]
 8022b2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022b2e:	b15b      	cbz	r3, 8022b48 <__smakebuf_r+0x70>
 8022b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022b34:	4630      	mov	r0, r6
 8022b36:	f000 f81d 	bl	8022b74 <_isatty_r>
 8022b3a:	b128      	cbz	r0, 8022b48 <__smakebuf_r+0x70>
 8022b3c:	89a3      	ldrh	r3, [r4, #12]
 8022b3e:	f023 0303 	bic.w	r3, r3, #3
 8022b42:	f043 0301 	orr.w	r3, r3, #1
 8022b46:	81a3      	strh	r3, [r4, #12]
 8022b48:	89a3      	ldrh	r3, [r4, #12]
 8022b4a:	431d      	orrs	r5, r3
 8022b4c:	81a5      	strh	r5, [r4, #12]
 8022b4e:	e7cf      	b.n	8022af0 <__smakebuf_r+0x18>

08022b50 <_fstat_r>:
 8022b50:	b538      	push	{r3, r4, r5, lr}
 8022b52:	4d07      	ldr	r5, [pc, #28]	@ (8022b70 <_fstat_r+0x20>)
 8022b54:	2300      	movs	r3, #0
 8022b56:	4604      	mov	r4, r0
 8022b58:	4608      	mov	r0, r1
 8022b5a:	4611      	mov	r1, r2
 8022b5c:	602b      	str	r3, [r5, #0]
 8022b5e:	f7fd fe42 	bl	80207e6 <_fstat>
 8022b62:	1c43      	adds	r3, r0, #1
 8022b64:	d102      	bne.n	8022b6c <_fstat_r+0x1c>
 8022b66:	682b      	ldr	r3, [r5, #0]
 8022b68:	b103      	cbz	r3, 8022b6c <_fstat_r+0x1c>
 8022b6a:	6023      	str	r3, [r4, #0]
 8022b6c:	bd38      	pop	{r3, r4, r5, pc}
 8022b6e:	bf00      	nop
 8022b70:	200001d0 	.word	0x200001d0

08022b74 <_isatty_r>:
 8022b74:	b538      	push	{r3, r4, r5, lr}
 8022b76:	4d06      	ldr	r5, [pc, #24]	@ (8022b90 <_isatty_r+0x1c>)
 8022b78:	2300      	movs	r3, #0
 8022b7a:	4604      	mov	r4, r0
 8022b7c:	4608      	mov	r0, r1
 8022b7e:	602b      	str	r3, [r5, #0]
 8022b80:	f7fd fe41 	bl	8020806 <_isatty>
 8022b84:	1c43      	adds	r3, r0, #1
 8022b86:	d102      	bne.n	8022b8e <_isatty_r+0x1a>
 8022b88:	682b      	ldr	r3, [r5, #0]
 8022b8a:	b103      	cbz	r3, 8022b8e <_isatty_r+0x1a>
 8022b8c:	6023      	str	r3, [r4, #0]
 8022b8e:	bd38      	pop	{r3, r4, r5, pc}
 8022b90:	200001d0 	.word	0x200001d0

08022b94 <_init>:
 8022b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b96:	bf00      	nop
 8022b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022b9a:	bc08      	pop	{r3}
 8022b9c:	469e      	mov	lr, r3
 8022b9e:	4770      	bx	lr

08022ba0 <_fini>:
 8022ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ba2:	bf00      	nop
 8022ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022ba6:	bc08      	pop	{r3}
 8022ba8:	469e      	mov	lr, r3
 8022baa:	4770      	bx	lr
