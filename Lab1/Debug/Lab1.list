
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011788  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08021788  08021788  00021788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080217c8  080217c8  0002205c  2**0
                  CONTENTS
  4 .ARM          00000000  080217c8  080217c8  0002205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080217c8  080217c8  0002205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080217c8  080217c8  000217c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080217cc  080217cc  000217cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080217d0  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0802182c  0002205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0802182c  000221c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002205c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00005c14  00000000  00000000  0002208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006e  00000000  00000000  00027ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000040bc  00000000  00000000  00027d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000ff7  00000000  00000000  0002bdca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005c8  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f7fef  00000000  00000000  0002d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000418  00000000  00000000  0012537f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000289d7  00000000  00000000  00125797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e16e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001794  00000000  00000000  0014e1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	2000005c 	.word	0x2000005c
 801001c:	00000000 	.word	0x00000000
 8010020:	08021770 	.word	0x08021770

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000060 	.word	0x20000060
 801003c:	08021770 	.word	0x08021770
	...

08020000 <kalman>:
* R0 = pointer to state variables struct
* S0 = current measurement value
*/

kalman:
	PUSH {R1}
 8020000:	b402      	push	{r1}
	//self->p = self->p + self->q:
	VLDR.f32 S1, [R0] //store self->p in floating point register S1
 8020002:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32 S2, [R0, #4] //store self->q in floating point register S2
 8020006:	ed90 1a01 	vldr	s2, [r0, #4]
	VADD.f32 S1, S1, S2 //self->p = self->p + self->q
 802000a:	ee70 0a81 	vadd.f32	s1, s1, s2

	//self->k = self->p / (self->p + self->r):
	VLDR.f32 S3, [R0, #8] //store self->r in floating point register S3
 802000e:	edd0 1a02 	vldr	s3, [r0, #8]
	VADD.f32 S10, S1, S3 //do (self->p + self->r) and store result in S10
 8020012:	ee30 5aa1 	vadd.f32	s10, s1, s3
	VDIV.f32 S4, S1, S10 //self->k = self->p / (self->p + self->r) with S4 storing self->k value
 8020016:	ee80 2a85 	vdiv.f32	s4, s1, s10
	VSTR.f32 S4, [R0, #16] //store self->k value in state variable
 802001a:	ed80 2a04 	vstr	s4, [r0, #16]

	//self->x = self->x + self->k*(measurement - self->x)
	VLDR.f32 S5, [R0, #12] //store self->x in floating point register S5
 802001e:	edd0 2a03 	vldr	s5, [r0, #12]
	VSUB.f32 S10, S0, S5 //do (measurement - self->x) and store result in S10
 8020022:	ee30 5a62 	vsub.f32	s10, s0, s5
	VMUL.f32 S10, S4, S10 //do self->k*(measurement - self->x) and store result in S10
 8020026:	ee22 5a05 	vmul.f32	s10, s4, s10
	VADD.f32 S5, S5, S10 //self->x = self->x + self->k*(measurement - self->x)
 802002a:	ee72 2a85 	vadd.f32	s5, s5, s10
	VSTR.f32 S5, [R0, #12] //store self->x value in state variable
 802002e:	edc0 2a03 	vstr	s5, [r0, #12]

	//self->p = (1 - self->k)*self->p
	//MOV R1, #0x3F800000 //hexadecimal representation of 1.0
	VMOV S9, #1.0 //store value of 1.0 in floating point register
 8020032:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
	VSUB.f32 S10, S9, S4 //do (1-self->k) and store result in S10
 8020036:	ee34 5ac2 	vsub.f32	s10, s9, s4
	VMUL.f32 S1, S10, S1 //S1 stores self->p value; do self->p=(1-self->k)*self->p
 802003a:	ee65 0a20 	vmul.f32	s1, s10, s1
	VSTR.f32 S1, [R0] //store self->p back in state variable
 802003e:	edc0 0a00 	vstr	s1, [r0]

	//check the FPSCR for errors
	VMRS R1, FPSCR //move the contents of FPSCR to R1
 8020042:	eef1 1a10 	vmrs	r1, fpscr
	TST R1, #8 //test if the overflow flag (bit 3) is set
 8020046:	f011 0f08 	tst.w	r1, #8
	BNE handle_error //branch if overflow occured
 802004a:	d10c      	bne.n	8020066 <handle_error>

	TST R1, #4 //test if the underflow flag (bit 2) is set
 802004c:	f011 0f04 	tst.w	r1, #4
    BNE handle_error //branch if underflow occured
 8020050:	d109      	bne.n	8020066 <handle_error>

    TST R1, #2 //test if the divide by zero flag (bit 1) is set
 8020052:	f011 0f02 	tst.w	r1, #2
    BNE handle_error //branch if divide by zero occured
 8020056:	d106      	bne.n	8020066 <handle_error>

    TST R1, #1 //test if the invalid operation flag (bit 0) is set
 8020058:	f011 0f01 	tst.w	r1, #1
    BNE handle_error //branch if invalid operation occured
 802005c:	d103      	bne.n	8020066 <handle_error>

	//return self->x
	VMOV S0, S5 //move self->x to S0
 802005e:	eeb0 0a62 	vmov.f32	s0, s5
	POP {R1}
 8020062:	bc02      	pop	{r1}
	BX LR //return
 8020064:	4770      	bx	lr

08020066 <handle_error>:


handle_error:
	VMOV S0, #-1.0 //move value of -1.0 to register that will store the value to be returned
 8020066:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
	POP {R1}
 802006a:	bc02      	pop	{r1}
	BX LR //return
 802006c:	4770      	bx	lr
 802006e:	bf00      	nop

08020070 <KalmanFilter_init>:
#include "KalmanFilter.h"

void KalmanFilter_init(kalman_state *kf, float q, float r, float p, float initial_value) {
 8020070:	b480      	push	{r7}
 8020072:	b087      	sub	sp, #28
 8020074:	af00      	add	r7, sp, #0
 8020076:	6178      	str	r0, [r7, #20]
 8020078:	ed87 0a04 	vstr	s0, [r7, #16]
 802007c:	edc7 0a03 	vstr	s1, [r7, #12]
 8020080:	ed87 1a02 	vstr	s2, [r7, #8]
 8020084:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->q = q;
 8020088:	697b      	ldr	r3, [r7, #20]
 802008a:	693a      	ldr	r2, [r7, #16]
 802008c:	605a      	str	r2, [r3, #4]
    kf->r = r;
 802008e:	697b      	ldr	r3, [r7, #20]
 8020090:	68fa      	ldr	r2, [r7, #12]
 8020092:	609a      	str	r2, [r3, #8]
    kf->p = p;
 8020094:	697b      	ldr	r3, [r7, #20]
 8020096:	68ba      	ldr	r2, [r7, #8]
 8020098:	601a      	str	r2, [r3, #0]
    kf->x = initial_value;
 802009a:	697b      	ldr	r3, [r7, #20]
 802009c:	687a      	ldr	r2, [r7, #4]
 802009e:	60da      	str	r2, [r3, #12]
    kf->k = 0.0;
 80200a0:	697b      	ldr	r3, [r7, #20]
 80200a2:	f04f 0200 	mov.w	r2, #0
 80200a6:	611a      	str	r2, [r3, #16]
}
 80200a8:	bf00      	nop
 80200aa:	371c      	adds	r7, #28
 80200ac:	46bd      	mov	sp, r7
 80200ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200b2:	4770      	bx	lr

080200b4 <KalmanFilter_update>:

float KalmanFilter_update(kalman_state *kf, float measurement) {
 80200b4:	b480      	push	{r7}
 80200b6:	b083      	sub	sp, #12
 80200b8:	af00      	add	r7, sp, #0
 80200ba:	6078      	str	r0, [r7, #4]
 80200bc:	ed87 0a00 	vstr	s0, [r7]
    kf->p = kf->p + kf->q;
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	ed93 7a00 	vldr	s14, [r3]
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80200cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80200d0:	687b      	ldr	r3, [r7, #4]
 80200d2:	edc3 7a00 	vstr	s15, [r3]
    kf->k = kf->p / (kf->p + kf->r);
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	edd3 6a00 	vldr	s13, [r3]
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	ed93 7a00 	vldr	s14, [r3]
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80200e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80200ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80200f0:	687b      	ldr	r3, [r7, #4]
 80200f2:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x = kf->x + kf->k * (measurement - kf->x);
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	edd3 6a04 	vldr	s13, [r3, #16]
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	edd3 7a03 	vldr	s15, [r3, #12]
 8020108:	ed97 6a00 	vldr	s12, [r7]
 802010c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8020110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p = (1 - kf->k) * kf->p;
 802011e:	687b      	ldr	r3, [r7, #4]
 8020120:	edd3 7a04 	vldr	s15, [r3, #16]
 8020124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020128:	ee37 7a67 	vsub.f32	s14, s14, s15
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	edd3 7a00 	vldr	s15, [r3]
 8020132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020136:	687b      	ldr	r3, [r7, #4]
 8020138:	edc3 7a00 	vstr	s15, [r3]

    return kf->x;
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	68db      	ldr	r3, [r3, #12]
 8020140:	ee07 3a90 	vmov	s15, r3
}
 8020144:	eeb0 0a67 	vmov.f32	s0, s15
 8020148:	370c      	adds	r7, #12
 802014a:	46bd      	mov	sp, r7
 802014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020150:	4770      	bx	lr
	...

08020154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020154:	b580      	push	{r7, lr}
 8020156:	b084      	sub	sp, #16
 8020158:	af00      	add	r7, sp, #0
  kalman_state *kalmanFilterObject = malloc(sizeof(kalman_state));
 802015a:	2014      	movs	r0, #20
 802015c:	f001 fa0e 	bl	802157c <malloc>
 8020160:	4603      	mov	r3, r0
 8020162:	60bb      	str	r3, [r7, #8]
  KalmanFilter_init(kalmanFilterObject, 0.1, 0.1, 0.1, 5);
 8020164:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8020168:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 80201bc <main+0x68>
 802016c:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80201bc <main+0x68>
 8020170:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80201bc <main+0x68>
 8020174:	68b8      	ldr	r0, [r7, #8]
 8020176:	f7ff ff7b 	bl	8020070 <KalmanFilter_init>
  float x;
  for(int i=0; i<5; i++){
 802017a:	2300      	movs	r3, #0
 802017c:	60fb      	str	r3, [r7, #12]
 802017e:	e00e      	b.n	802019e <main+0x4a>
	  x = kalman(kalmanFilterObject, i);
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	ee07 3a90 	vmov	s15, r3
 8020186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802018a:	eeb0 0a67 	vmov.f32	s0, s15
 802018e:	68b8      	ldr	r0, [r7, #8]
 8020190:	f7ff ff36 	bl	8020000 <kalman>
 8020194:	ed87 0a01 	vstr	s0, [r7, #4]
  for(int i=0; i<5; i++){
 8020198:	68fb      	ldr	r3, [r7, #12]
 802019a:	3301      	adds	r3, #1
 802019c:	60fb      	str	r3, [r7, #12]
 802019e:	68fb      	ldr	r3, [r7, #12]
 80201a0:	2b04      	cmp	r3, #4
 80201a2:	dded      	ble.n	8020180 <main+0x2c>
  }
  KalmanFilter_update(kalmanFilterObject, 0);
 80201a4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80201c0 <main+0x6c>
 80201a8:	68b8      	ldr	r0, [r7, #8]
 80201aa:	f7ff ff83 	bl	80200b4 <KalmanFilter_update>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80201ae:	f000 f926 	bl	80203fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80201b2:	f000 f807 	bl	80201c4 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80201b6:	bf00      	nop
 80201b8:	e7fd      	b.n	80201b6 <main+0x62>
 80201ba:	bf00      	nop
 80201bc:	3dcccccd 	.word	0x3dcccccd
 80201c0:	00000000 	.word	0x00000000

080201c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80201c4:	b580      	push	{r7, lr}
 80201c6:	b096      	sub	sp, #88	@ 0x58
 80201c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80201ca:	f107 0314 	add.w	r3, r7, #20
 80201ce:	2244      	movs	r2, #68	@ 0x44
 80201d0:	2100      	movs	r1, #0
 80201d2:	4618      	mov	r0, r3
 80201d4:	f001 fa88 	bl	80216e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80201d8:	463b      	mov	r3, r7
 80201da:	2200      	movs	r2, #0
 80201dc:	601a      	str	r2, [r3, #0]
 80201de:	605a      	str	r2, [r3, #4]
 80201e0:	609a      	str	r2, [r3, #8]
 80201e2:	60da      	str	r2, [r3, #12]
 80201e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80201e6:	2000      	movs	r0, #0
 80201e8:	f000 fa84 	bl	80206f4 <HAL_PWREx_ControlVoltageScaling>
 80201ec:	4603      	mov	r3, r0
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d001      	beq.n	80201f6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80201f2:	f000 f838 	bl	8020266 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80201f6:	2310      	movs	r3, #16
 80201f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80201fa:	2301      	movs	r3, #1
 80201fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80201fe:	2300      	movs	r3, #0
 8020200:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8020202:	2360      	movs	r3, #96	@ 0x60
 8020204:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020206:	2302      	movs	r3, #2
 8020208:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 802020a:	2301      	movs	r3, #1
 802020c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 802020e:	2301      	movs	r3, #1
 8020210:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8020212:	233c      	movs	r3, #60	@ 0x3c
 8020214:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020216:	2302      	movs	r3, #2
 8020218:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 802021a:	2302      	movs	r3, #2
 802021c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 802021e:	2302      	movs	r3, #2
 8020220:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020222:	f107 0314 	add.w	r3, r7, #20
 8020226:	4618      	mov	r0, r3
 8020228:	f000 fb08 	bl	802083c <HAL_RCC_OscConfig>
 802022c:	4603      	mov	r3, r0
 802022e:	2b00      	cmp	r3, #0
 8020230:	d001      	beq.n	8020236 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8020232:	f000 f818 	bl	8020266 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020236:	230f      	movs	r3, #15
 8020238:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802023a:	2303      	movs	r3, #3
 802023c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802023e:	2300      	movs	r3, #0
 8020240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020242:	2300      	movs	r3, #0
 8020244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020246:	2300      	movs	r3, #0
 8020248:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802024a:	463b      	mov	r3, r7
 802024c:	2105      	movs	r1, #5
 802024e:	4618      	mov	r0, r3
 8020250:	f000 ff0e 	bl	8021070 <HAL_RCC_ClockConfig>
 8020254:	4603      	mov	r3, r0
 8020256:	2b00      	cmp	r3, #0
 8020258:	d001      	beq.n	802025e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802025a:	f000 f804 	bl	8020266 <Error_Handler>
  }
}
 802025e:	bf00      	nop
 8020260:	3758      	adds	r7, #88	@ 0x58
 8020262:	46bd      	mov	sp, r7
 8020264:	bd80      	pop	{r7, pc}

08020266 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020266:	b480      	push	{r7}
 8020268:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802026a:	b672      	cpsid	i
}
 802026c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802026e:	bf00      	nop
 8020270:	e7fd      	b.n	802026e <Error_Handler+0x8>
	...

08020274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020274:	b480      	push	{r7}
 8020276:	b083      	sub	sp, #12
 8020278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802027a:	4b0f      	ldr	r3, [pc, #60]	@ (80202b8 <HAL_MspInit+0x44>)
 802027c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802027e:	4a0e      	ldr	r2, [pc, #56]	@ (80202b8 <HAL_MspInit+0x44>)
 8020280:	f043 0301 	orr.w	r3, r3, #1
 8020284:	6613      	str	r3, [r2, #96]	@ 0x60
 8020286:	4b0c      	ldr	r3, [pc, #48]	@ (80202b8 <HAL_MspInit+0x44>)
 8020288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802028a:	f003 0301 	and.w	r3, r3, #1
 802028e:	607b      	str	r3, [r7, #4]
 8020290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020292:	4b09      	ldr	r3, [pc, #36]	@ (80202b8 <HAL_MspInit+0x44>)
 8020294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020296:	4a08      	ldr	r2, [pc, #32]	@ (80202b8 <HAL_MspInit+0x44>)
 8020298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802029c:	6593      	str	r3, [r2, #88]	@ 0x58
 802029e:	4b06      	ldr	r3, [pc, #24]	@ (80202b8 <HAL_MspInit+0x44>)
 80202a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80202a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80202a6:	603b      	str	r3, [r7, #0]
 80202a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80202aa:	bf00      	nop
 80202ac:	370c      	adds	r7, #12
 80202ae:	46bd      	mov	sp, r7
 80202b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202b4:	4770      	bx	lr
 80202b6:	bf00      	nop
 80202b8:	40021000 	.word	0x40021000

080202bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80202bc:	b480      	push	{r7}
 80202be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80202c0:	bf00      	nop
 80202c2:	e7fd      	b.n	80202c0 <NMI_Handler+0x4>

080202c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80202c4:	b480      	push	{r7}
 80202c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80202c8:	bf00      	nop
 80202ca:	e7fd      	b.n	80202c8 <HardFault_Handler+0x4>

080202cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80202cc:	b480      	push	{r7}
 80202ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80202d0:	bf00      	nop
 80202d2:	e7fd      	b.n	80202d0 <MemManage_Handler+0x4>

080202d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80202d4:	b480      	push	{r7}
 80202d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80202d8:	bf00      	nop
 80202da:	e7fd      	b.n	80202d8 <BusFault_Handler+0x4>

080202dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80202dc:	b480      	push	{r7}
 80202de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80202e0:	bf00      	nop
 80202e2:	e7fd      	b.n	80202e0 <UsageFault_Handler+0x4>

080202e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80202e4:	b480      	push	{r7}
 80202e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80202e8:	bf00      	nop
 80202ea:	46bd      	mov	sp, r7
 80202ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202f0:	4770      	bx	lr

080202f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80202f2:	b480      	push	{r7}
 80202f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80202f6:	bf00      	nop
 80202f8:	46bd      	mov	sp, r7
 80202fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202fe:	4770      	bx	lr

08020300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020300:	b480      	push	{r7}
 8020302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020304:	bf00      	nop
 8020306:	46bd      	mov	sp, r7
 8020308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802030c:	4770      	bx	lr

0802030e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802030e:	b580      	push	{r7, lr}
 8020310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020312:	f000 f8c9 	bl	80204a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020316:	bf00      	nop
 8020318:	bd80      	pop	{r7, pc}
	...

0802031c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802031c:	b580      	push	{r7, lr}
 802031e:	b086      	sub	sp, #24
 8020320:	af00      	add	r7, sp, #0
 8020322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020324:	4a14      	ldr	r2, [pc, #80]	@ (8020378 <_sbrk+0x5c>)
 8020326:	4b15      	ldr	r3, [pc, #84]	@ (802037c <_sbrk+0x60>)
 8020328:	1ad3      	subs	r3, r2, r3
 802032a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802032c:	697b      	ldr	r3, [r7, #20]
 802032e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020330:	4b13      	ldr	r3, [pc, #76]	@ (8020380 <_sbrk+0x64>)
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	2b00      	cmp	r3, #0
 8020336:	d102      	bne.n	802033e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020338:	4b11      	ldr	r3, [pc, #68]	@ (8020380 <_sbrk+0x64>)
 802033a:	4a12      	ldr	r2, [pc, #72]	@ (8020384 <_sbrk+0x68>)
 802033c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802033e:	4b10      	ldr	r3, [pc, #64]	@ (8020380 <_sbrk+0x64>)
 8020340:	681a      	ldr	r2, [r3, #0]
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	4413      	add	r3, r2
 8020346:	693a      	ldr	r2, [r7, #16]
 8020348:	429a      	cmp	r2, r3
 802034a:	d207      	bcs.n	802035c <_sbrk+0x40>
  {
    errno = ENOMEM;
 802034c:	f001 f9e4 	bl	8021718 <__errno>
 8020350:	4603      	mov	r3, r0
 8020352:	220c      	movs	r2, #12
 8020354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020356:	f04f 33ff 	mov.w	r3, #4294967295
 802035a:	e009      	b.n	8020370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802035c:	4b08      	ldr	r3, [pc, #32]	@ (8020380 <_sbrk+0x64>)
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020362:	4b07      	ldr	r3, [pc, #28]	@ (8020380 <_sbrk+0x64>)
 8020364:	681a      	ldr	r2, [r3, #0]
 8020366:	687b      	ldr	r3, [r7, #4]
 8020368:	4413      	add	r3, r2
 802036a:	4a05      	ldr	r2, [pc, #20]	@ (8020380 <_sbrk+0x64>)
 802036c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802036e:	68fb      	ldr	r3, [r7, #12]
}
 8020370:	4618      	mov	r0, r3
 8020372:	3718      	adds	r7, #24
 8020374:	46bd      	mov	sp, r7
 8020376:	bd80      	pop	{r7, pc}
 8020378:	200a0000 	.word	0x200a0000
 802037c:	00000400 	.word	0x00000400
 8020380:	20000078 	.word	0x20000078
 8020384:	200001c8 	.word	0x200001c8

08020388 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8020388:	b480      	push	{r7}
 802038a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 802038c:	4b06      	ldr	r3, [pc, #24]	@ (80203a8 <SystemInit+0x20>)
 802038e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020392:	4a05      	ldr	r2, [pc, #20]	@ (80203a8 <SystemInit+0x20>)
 8020394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8020398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 802039c:	bf00      	nop
 802039e:	46bd      	mov	sp, r7
 80203a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a4:	4770      	bx	lr
 80203a6:	bf00      	nop
 80203a8:	e000ed00 	.word	0xe000ed00

080203ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80203ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80203e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80203b0:	f7ff ffea 	bl	8020388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80203b4:	480c      	ldr	r0, [pc, #48]	@ (80203e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80203b6:	490d      	ldr	r1, [pc, #52]	@ (80203ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80203b8:	4a0d      	ldr	r2, [pc, #52]	@ (80203f0 <LoopForever+0xe>)
  movs r3, #0
 80203ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80203bc:	e002      	b.n	80203c4 <LoopCopyDataInit>

080203be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80203be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80203c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80203c2:	3304      	adds	r3, #4

080203c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80203c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80203c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80203c8:	d3f9      	bcc.n	80203be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80203ca:	4a0a      	ldr	r2, [pc, #40]	@ (80203f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80203cc:	4c0a      	ldr	r4, [pc, #40]	@ (80203f8 <LoopForever+0x16>)
  movs r3, #0
 80203ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80203d0:	e001      	b.n	80203d6 <LoopFillZerobss>

080203d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80203d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80203d4:	3204      	adds	r2, #4

080203d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80203d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80203d8:	d3fb      	bcc.n	80203d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80203da:	f001 f9a3 	bl	8021724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80203de:	f7ff feb9 	bl	8020154 <main>

080203e2 <LoopForever>:

LoopForever:
    b LoopForever
 80203e2:	e7fe      	b.n	80203e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80203e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80203e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80203ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80203f0:	080217d0 	.word	0x080217d0
  ldr r2, =_sbss
 80203f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80203f8:	200001c8 	.word	0x200001c8

080203fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80203fc:	e7fe      	b.n	80203fc <ADC1_IRQHandler>

080203fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80203fe:	b580      	push	{r7, lr}
 8020400:	b082      	sub	sp, #8
 8020402:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8020404:	2300      	movs	r3, #0
 8020406:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020408:	2003      	movs	r0, #3
 802040a:	f000 f91f 	bl	802064c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802040e:	2000      	movs	r0, #0
 8020410:	f000 f80e 	bl	8020430 <HAL_InitTick>
 8020414:	4603      	mov	r3, r0
 8020416:	2b00      	cmp	r3, #0
 8020418:	d002      	beq.n	8020420 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 802041a:	2301      	movs	r3, #1
 802041c:	71fb      	strb	r3, [r7, #7]
 802041e:	e001      	b.n	8020424 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020420:	f7ff ff28 	bl	8020274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020424:	79fb      	ldrb	r3, [r7, #7]
}
 8020426:	4618      	mov	r0, r3
 8020428:	3708      	adds	r7, #8
 802042a:	46bd      	mov	sp, r7
 802042c:	bd80      	pop	{r7, pc}
	...

08020430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020430:	b580      	push	{r7, lr}
 8020432:	b084      	sub	sp, #16
 8020434:	af00      	add	r7, sp, #0
 8020436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020438:	2300      	movs	r3, #0
 802043a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 802043c:	4b17      	ldr	r3, [pc, #92]	@ (802049c <HAL_InitTick+0x6c>)
 802043e:	781b      	ldrb	r3, [r3, #0]
 8020440:	2b00      	cmp	r3, #0
 8020442:	d023      	beq.n	802048c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020444:	4b16      	ldr	r3, [pc, #88]	@ (80204a0 <HAL_InitTick+0x70>)
 8020446:	681a      	ldr	r2, [r3, #0]
 8020448:	4b14      	ldr	r3, [pc, #80]	@ (802049c <HAL_InitTick+0x6c>)
 802044a:	781b      	ldrb	r3, [r3, #0]
 802044c:	4619      	mov	r1, r3
 802044e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020452:	fbb3 f3f1 	udiv	r3, r3, r1
 8020456:	fbb2 f3f3 	udiv	r3, r2, r3
 802045a:	4618      	mov	r0, r3
 802045c:	f000 f91d 	bl	802069a <HAL_SYSTICK_Config>
 8020460:	4603      	mov	r3, r0
 8020462:	2b00      	cmp	r3, #0
 8020464:	d10f      	bne.n	8020486 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	2b0f      	cmp	r3, #15
 802046a:	d809      	bhi.n	8020480 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802046c:	2200      	movs	r2, #0
 802046e:	6879      	ldr	r1, [r7, #4]
 8020470:	f04f 30ff 	mov.w	r0, #4294967295
 8020474:	f000 f8f5 	bl	8020662 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020478:	4a0a      	ldr	r2, [pc, #40]	@ (80204a4 <HAL_InitTick+0x74>)
 802047a:	687b      	ldr	r3, [r7, #4]
 802047c:	6013      	str	r3, [r2, #0]
 802047e:	e007      	b.n	8020490 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8020480:	2301      	movs	r3, #1
 8020482:	73fb      	strb	r3, [r7, #15]
 8020484:	e004      	b.n	8020490 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020486:	2301      	movs	r3, #1
 8020488:	73fb      	strb	r3, [r7, #15]
 802048a:	e001      	b.n	8020490 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 802048c:	2301      	movs	r3, #1
 802048e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8020490:	7bfb      	ldrb	r3, [r7, #15]
}
 8020492:	4618      	mov	r0, r3
 8020494:	3710      	adds	r7, #16
 8020496:	46bd      	mov	sp, r7
 8020498:	bd80      	pop	{r7, pc}
 802049a:	bf00      	nop
 802049c:	20000008 	.word	0x20000008
 80204a0:	20000000 	.word	0x20000000
 80204a4:	20000004 	.word	0x20000004

080204a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80204a8:	b480      	push	{r7}
 80204aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80204ac:	4b06      	ldr	r3, [pc, #24]	@ (80204c8 <HAL_IncTick+0x20>)
 80204ae:	781b      	ldrb	r3, [r3, #0]
 80204b0:	461a      	mov	r2, r3
 80204b2:	4b06      	ldr	r3, [pc, #24]	@ (80204cc <HAL_IncTick+0x24>)
 80204b4:	681b      	ldr	r3, [r3, #0]
 80204b6:	4413      	add	r3, r2
 80204b8:	4a04      	ldr	r2, [pc, #16]	@ (80204cc <HAL_IncTick+0x24>)
 80204ba:	6013      	str	r3, [r2, #0]
}
 80204bc:	bf00      	nop
 80204be:	46bd      	mov	sp, r7
 80204c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c4:	4770      	bx	lr
 80204c6:	bf00      	nop
 80204c8:	20000008 	.word	0x20000008
 80204cc:	2000007c 	.word	0x2000007c

080204d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80204d0:	b480      	push	{r7}
 80204d2:	af00      	add	r7, sp, #0
  return uwTick;
 80204d4:	4b03      	ldr	r3, [pc, #12]	@ (80204e4 <HAL_GetTick+0x14>)
 80204d6:	681b      	ldr	r3, [r3, #0]
}
 80204d8:	4618      	mov	r0, r3
 80204da:	46bd      	mov	sp, r7
 80204dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204e0:	4770      	bx	lr
 80204e2:	bf00      	nop
 80204e4:	2000007c 	.word	0x2000007c

080204e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80204e8:	b480      	push	{r7}
 80204ea:	b085      	sub	sp, #20
 80204ec:	af00      	add	r7, sp, #0
 80204ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	f003 0307 	and.w	r3, r3, #7
 80204f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80204f8:	4b0c      	ldr	r3, [pc, #48]	@ (802052c <__NVIC_SetPriorityGrouping+0x44>)
 80204fa:	68db      	ldr	r3, [r3, #12]
 80204fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80204fe:	68ba      	ldr	r2, [r7, #8]
 8020500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020504:	4013      	ands	r3, r2
 8020506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020508:	68fb      	ldr	r3, [r7, #12]
 802050a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802050c:	68bb      	ldr	r3, [r7, #8]
 802050e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802051a:	4a04      	ldr	r2, [pc, #16]	@ (802052c <__NVIC_SetPriorityGrouping+0x44>)
 802051c:	68bb      	ldr	r3, [r7, #8]
 802051e:	60d3      	str	r3, [r2, #12]
}
 8020520:	bf00      	nop
 8020522:	3714      	adds	r7, #20
 8020524:	46bd      	mov	sp, r7
 8020526:	f85d 7b04 	ldr.w	r7, [sp], #4
 802052a:	4770      	bx	lr
 802052c:	e000ed00 	.word	0xe000ed00

08020530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020530:	b480      	push	{r7}
 8020532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020534:	4b04      	ldr	r3, [pc, #16]	@ (8020548 <__NVIC_GetPriorityGrouping+0x18>)
 8020536:	68db      	ldr	r3, [r3, #12]
 8020538:	0a1b      	lsrs	r3, r3, #8
 802053a:	f003 0307 	and.w	r3, r3, #7
}
 802053e:	4618      	mov	r0, r3
 8020540:	46bd      	mov	sp, r7
 8020542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020546:	4770      	bx	lr
 8020548:	e000ed00 	.word	0xe000ed00

0802054c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802054c:	b480      	push	{r7}
 802054e:	b083      	sub	sp, #12
 8020550:	af00      	add	r7, sp, #0
 8020552:	4603      	mov	r3, r0
 8020554:	6039      	str	r1, [r7, #0]
 8020556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802055c:	2b00      	cmp	r3, #0
 802055e:	db0a      	blt.n	8020576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020560:	683b      	ldr	r3, [r7, #0]
 8020562:	b2da      	uxtb	r2, r3
 8020564:	490c      	ldr	r1, [pc, #48]	@ (8020598 <__NVIC_SetPriority+0x4c>)
 8020566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802056a:	0112      	lsls	r2, r2, #4
 802056c:	b2d2      	uxtb	r2, r2
 802056e:	440b      	add	r3, r1
 8020570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020574:	e00a      	b.n	802058c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020576:	683b      	ldr	r3, [r7, #0]
 8020578:	b2da      	uxtb	r2, r3
 802057a:	4908      	ldr	r1, [pc, #32]	@ (802059c <__NVIC_SetPriority+0x50>)
 802057c:	79fb      	ldrb	r3, [r7, #7]
 802057e:	f003 030f 	and.w	r3, r3, #15
 8020582:	3b04      	subs	r3, #4
 8020584:	0112      	lsls	r2, r2, #4
 8020586:	b2d2      	uxtb	r2, r2
 8020588:	440b      	add	r3, r1
 802058a:	761a      	strb	r2, [r3, #24]
}
 802058c:	bf00      	nop
 802058e:	370c      	adds	r7, #12
 8020590:	46bd      	mov	sp, r7
 8020592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020596:	4770      	bx	lr
 8020598:	e000e100 	.word	0xe000e100
 802059c:	e000ed00 	.word	0xe000ed00

080205a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80205a0:	b480      	push	{r7}
 80205a2:	b089      	sub	sp, #36	@ 0x24
 80205a4:	af00      	add	r7, sp, #0
 80205a6:	60f8      	str	r0, [r7, #12]
 80205a8:	60b9      	str	r1, [r7, #8]
 80205aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80205ac:	68fb      	ldr	r3, [r7, #12]
 80205ae:	f003 0307 	and.w	r3, r3, #7
 80205b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80205b4:	69fb      	ldr	r3, [r7, #28]
 80205b6:	f1c3 0307 	rsb	r3, r3, #7
 80205ba:	2b04      	cmp	r3, #4
 80205bc:	bf28      	it	cs
 80205be:	2304      	movcs	r3, #4
 80205c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80205c2:	69fb      	ldr	r3, [r7, #28]
 80205c4:	3304      	adds	r3, #4
 80205c6:	2b06      	cmp	r3, #6
 80205c8:	d902      	bls.n	80205d0 <NVIC_EncodePriority+0x30>
 80205ca:	69fb      	ldr	r3, [r7, #28]
 80205cc:	3b03      	subs	r3, #3
 80205ce:	e000      	b.n	80205d2 <NVIC_EncodePriority+0x32>
 80205d0:	2300      	movs	r3, #0
 80205d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80205d4:	f04f 32ff 	mov.w	r2, #4294967295
 80205d8:	69bb      	ldr	r3, [r7, #24]
 80205da:	fa02 f303 	lsl.w	r3, r2, r3
 80205de:	43da      	mvns	r2, r3
 80205e0:	68bb      	ldr	r3, [r7, #8]
 80205e2:	401a      	ands	r2, r3
 80205e4:	697b      	ldr	r3, [r7, #20]
 80205e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80205e8:	f04f 31ff 	mov.w	r1, #4294967295
 80205ec:	697b      	ldr	r3, [r7, #20]
 80205ee:	fa01 f303 	lsl.w	r3, r1, r3
 80205f2:	43d9      	mvns	r1, r3
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80205f8:	4313      	orrs	r3, r2
         );
}
 80205fa:	4618      	mov	r0, r3
 80205fc:	3724      	adds	r7, #36	@ 0x24
 80205fe:	46bd      	mov	sp, r7
 8020600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020604:	4770      	bx	lr
	...

08020608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020608:	b580      	push	{r7, lr}
 802060a:	b082      	sub	sp, #8
 802060c:	af00      	add	r7, sp, #0
 802060e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020610:	687b      	ldr	r3, [r7, #4]
 8020612:	3b01      	subs	r3, #1
 8020614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020618:	d301      	bcc.n	802061e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802061a:	2301      	movs	r3, #1
 802061c:	e00f      	b.n	802063e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802061e:	4a0a      	ldr	r2, [pc, #40]	@ (8020648 <SysTick_Config+0x40>)
 8020620:	687b      	ldr	r3, [r7, #4]
 8020622:	3b01      	subs	r3, #1
 8020624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020626:	210f      	movs	r1, #15
 8020628:	f04f 30ff 	mov.w	r0, #4294967295
 802062c:	f7ff ff8e 	bl	802054c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020630:	4b05      	ldr	r3, [pc, #20]	@ (8020648 <SysTick_Config+0x40>)
 8020632:	2200      	movs	r2, #0
 8020634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020636:	4b04      	ldr	r3, [pc, #16]	@ (8020648 <SysTick_Config+0x40>)
 8020638:	2207      	movs	r2, #7
 802063a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802063c:	2300      	movs	r3, #0
}
 802063e:	4618      	mov	r0, r3
 8020640:	3708      	adds	r7, #8
 8020642:	46bd      	mov	sp, r7
 8020644:	bd80      	pop	{r7, pc}
 8020646:	bf00      	nop
 8020648:	e000e010 	.word	0xe000e010

0802064c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802064c:	b580      	push	{r7, lr}
 802064e:	b082      	sub	sp, #8
 8020650:	af00      	add	r7, sp, #0
 8020652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020654:	6878      	ldr	r0, [r7, #4]
 8020656:	f7ff ff47 	bl	80204e8 <__NVIC_SetPriorityGrouping>
}
 802065a:	bf00      	nop
 802065c:	3708      	adds	r7, #8
 802065e:	46bd      	mov	sp, r7
 8020660:	bd80      	pop	{r7, pc}

08020662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020662:	b580      	push	{r7, lr}
 8020664:	b086      	sub	sp, #24
 8020666:	af00      	add	r7, sp, #0
 8020668:	4603      	mov	r3, r0
 802066a:	60b9      	str	r1, [r7, #8]
 802066c:	607a      	str	r2, [r7, #4]
 802066e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8020670:	2300      	movs	r3, #0
 8020672:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020674:	f7ff ff5c 	bl	8020530 <__NVIC_GetPriorityGrouping>
 8020678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802067a:	687a      	ldr	r2, [r7, #4]
 802067c:	68b9      	ldr	r1, [r7, #8]
 802067e:	6978      	ldr	r0, [r7, #20]
 8020680:	f7ff ff8e 	bl	80205a0 <NVIC_EncodePriority>
 8020684:	4602      	mov	r2, r0
 8020686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802068a:	4611      	mov	r1, r2
 802068c:	4618      	mov	r0, r3
 802068e:	f7ff ff5d 	bl	802054c <__NVIC_SetPriority>
}
 8020692:	bf00      	nop
 8020694:	3718      	adds	r7, #24
 8020696:	46bd      	mov	sp, r7
 8020698:	bd80      	pop	{r7, pc}

0802069a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802069a:	b580      	push	{r7, lr}
 802069c:	b082      	sub	sp, #8
 802069e:	af00      	add	r7, sp, #0
 80206a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80206a2:	6878      	ldr	r0, [r7, #4]
 80206a4:	f7ff ffb0 	bl	8020608 <SysTick_Config>
 80206a8:	4603      	mov	r3, r0
}
 80206aa:	4618      	mov	r0, r3
 80206ac:	3708      	adds	r7, #8
 80206ae:	46bd      	mov	sp, r7
 80206b0:	bd80      	pop	{r7, pc}
	...

080206b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80206b4:	b480      	push	{r7}
 80206b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80206b8:	4b0d      	ldr	r3, [pc, #52]	@ (80206f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80206ba:	681b      	ldr	r3, [r3, #0]
 80206bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80206c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80206c4:	d102      	bne.n	80206cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80206c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80206ca:	e00b      	b.n	80206e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80206cc:	4b08      	ldr	r3, [pc, #32]	@ (80206f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80206ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80206d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80206d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80206da:	d102      	bne.n	80206e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80206dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80206e0:	e000      	b.n	80206e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80206e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80206e4:	4618      	mov	r0, r3
 80206e6:	46bd      	mov	sp, r7
 80206e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206ec:	4770      	bx	lr
 80206ee:	bf00      	nop
 80206f0:	40007000 	.word	0x40007000

080206f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80206f4:	b480      	push	{r7}
 80206f6:	b085      	sub	sp, #20
 80206f8:	af00      	add	r7, sp, #0
 80206fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	2b00      	cmp	r3, #0
 8020700:	d141      	bne.n	8020786 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020702:	4b4b      	ldr	r3, [pc, #300]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020704:	681b      	ldr	r3, [r3, #0]
 8020706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 802070a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802070e:	d131      	bne.n	8020774 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020710:	4b47      	ldr	r3, [pc, #284]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020716:	4a46      	ldr	r2, [pc, #280]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802071c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8020720:	4b43      	ldr	r3, [pc, #268]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020722:	681b      	ldr	r3, [r3, #0]
 8020724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020728:	4a41      	ldr	r2, [pc, #260]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802072a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802072e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8020730:	4b40      	ldr	r3, [pc, #256]	@ (8020834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	2232      	movs	r2, #50	@ 0x32
 8020736:	fb02 f303 	mul.w	r3, r2, r3
 802073a:	4a3f      	ldr	r2, [pc, #252]	@ (8020838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 802073c:	fba2 2303 	umull	r2, r3, r2, r3
 8020740:	0c9b      	lsrs	r3, r3, #18
 8020742:	3301      	adds	r3, #1
 8020744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020746:	e002      	b.n	802074e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	3b01      	subs	r3, #1
 802074c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 802074e:	4b38      	ldr	r3, [pc, #224]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020750:	695b      	ldr	r3, [r3, #20]
 8020752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802075a:	d102      	bne.n	8020762 <HAL_PWREx_ControlVoltageScaling+0x6e>
 802075c:	68fb      	ldr	r3, [r7, #12]
 802075e:	2b00      	cmp	r3, #0
 8020760:	d1f2      	bne.n	8020748 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8020762:	4b33      	ldr	r3, [pc, #204]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020764:	695b      	ldr	r3, [r3, #20]
 8020766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802076a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802076e:	d158      	bne.n	8020822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8020770:	2303      	movs	r3, #3
 8020772:	e057      	b.n	8020824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020774:	4b2e      	ldr	r3, [pc, #184]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802077a:	4a2d      	ldr	r2, [pc, #180]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802077c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020784:	e04d      	b.n	8020822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802078c:	d141      	bne.n	8020812 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 802078e:	4b28      	ldr	r3, [pc, #160]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020790:	681b      	ldr	r3, [r3, #0]
 8020792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802079a:	d131      	bne.n	8020800 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 802079c:	4b24      	ldr	r3, [pc, #144]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802079e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80207a2:	4a23      	ldr	r2, [pc, #140]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80207a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80207a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80207ac:	4b20      	ldr	r3, [pc, #128]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80207b4:	4a1e      	ldr	r2, [pc, #120]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80207b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80207ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80207bc:	4b1d      	ldr	r3, [pc, #116]	@ (8020834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	2232      	movs	r2, #50	@ 0x32
 80207c2:	fb02 f303 	mul.w	r3, r2, r3
 80207c6:	4a1c      	ldr	r2, [pc, #112]	@ (8020838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80207c8:	fba2 2303 	umull	r2, r3, r2, r3
 80207cc:	0c9b      	lsrs	r3, r3, #18
 80207ce:	3301      	adds	r3, #1
 80207d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80207d2:	e002      	b.n	80207da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	3b01      	subs	r3, #1
 80207d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80207da:	4b15      	ldr	r3, [pc, #84]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80207dc:	695b      	ldr	r3, [r3, #20]
 80207de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80207e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80207e6:	d102      	bne.n	80207ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80207e8:	68fb      	ldr	r3, [r7, #12]
 80207ea:	2b00      	cmp	r3, #0
 80207ec:	d1f2      	bne.n	80207d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80207ee:	4b10      	ldr	r3, [pc, #64]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80207f0:	695b      	ldr	r3, [r3, #20]
 80207f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80207f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80207fa:	d112      	bne.n	8020822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80207fc:	2303      	movs	r3, #3
 80207fe:	e011      	b.n	8020824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020800:	4b0b      	ldr	r3, [pc, #44]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020806:	4a0a      	ldr	r2, [pc, #40]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802080c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020810:	e007      	b.n	8020822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8020812:	4b07      	ldr	r3, [pc, #28]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020814:	681b      	ldr	r3, [r3, #0]
 8020816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 802081a:	4a05      	ldr	r2, [pc, #20]	@ (8020830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802081c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8020820:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8020822:	2300      	movs	r3, #0
}
 8020824:	4618      	mov	r0, r3
 8020826:	3714      	adds	r7, #20
 8020828:	46bd      	mov	sp, r7
 802082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802082e:	4770      	bx	lr
 8020830:	40007000 	.word	0x40007000
 8020834:	20000000 	.word	0x20000000
 8020838:	431bde83 	.word	0x431bde83

0802083c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802083c:	b580      	push	{r7, lr}
 802083e:	b088      	sub	sp, #32
 8020840:	af00      	add	r7, sp, #0
 8020842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020844:	687b      	ldr	r3, [r7, #4]
 8020846:	2b00      	cmp	r3, #0
 8020848:	d102      	bne.n	8020850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802084a:	2301      	movs	r3, #1
 802084c:	f000 bc08 	b.w	8021060 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8020850:	4b96      	ldr	r3, [pc, #600]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020852:	689b      	ldr	r3, [r3, #8]
 8020854:	f003 030c 	and.w	r3, r3, #12
 8020858:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 802085a:	4b94      	ldr	r3, [pc, #592]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 802085c:	68db      	ldr	r3, [r3, #12]
 802085e:	f003 0303 	and.w	r3, r3, #3
 8020862:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	681b      	ldr	r3, [r3, #0]
 8020868:	f003 0310 	and.w	r3, r3, #16
 802086c:	2b00      	cmp	r3, #0
 802086e:	f000 80e4 	beq.w	8020a3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8020872:	69bb      	ldr	r3, [r7, #24]
 8020874:	2b00      	cmp	r3, #0
 8020876:	d007      	beq.n	8020888 <HAL_RCC_OscConfig+0x4c>
 8020878:	69bb      	ldr	r3, [r7, #24]
 802087a:	2b0c      	cmp	r3, #12
 802087c:	f040 808b 	bne.w	8020996 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8020880:	697b      	ldr	r3, [r7, #20]
 8020882:	2b01      	cmp	r3, #1
 8020884:	f040 8087 	bne.w	8020996 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8020888:	4b88      	ldr	r3, [pc, #544]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 802088a:	681b      	ldr	r3, [r3, #0]
 802088c:	f003 0302 	and.w	r3, r3, #2
 8020890:	2b00      	cmp	r3, #0
 8020892:	d005      	beq.n	80208a0 <HAL_RCC_OscConfig+0x64>
 8020894:	687b      	ldr	r3, [r7, #4]
 8020896:	699b      	ldr	r3, [r3, #24]
 8020898:	2b00      	cmp	r3, #0
 802089a:	d101      	bne.n	80208a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 802089c:	2301      	movs	r3, #1
 802089e:	e3df      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	6a1a      	ldr	r2, [r3, #32]
 80208a4:	4b81      	ldr	r3, [pc, #516]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	f003 0308 	and.w	r3, r3, #8
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d004      	beq.n	80208ba <HAL_RCC_OscConfig+0x7e>
 80208b0:	4b7e      	ldr	r3, [pc, #504]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80208b8:	e005      	b.n	80208c6 <HAL_RCC_OscConfig+0x8a>
 80208ba:	4b7c      	ldr	r3, [pc, #496]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80208bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80208c0:	091b      	lsrs	r3, r3, #4
 80208c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80208c6:	4293      	cmp	r3, r2
 80208c8:	d223      	bcs.n	8020912 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80208ca:	687b      	ldr	r3, [r7, #4]
 80208cc:	6a1b      	ldr	r3, [r3, #32]
 80208ce:	4618      	mov	r0, r3
 80208d0:	f000 fd94 	bl	80213fc <RCC_SetFlashLatencyFromMSIRange>
 80208d4:	4603      	mov	r3, r0
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80208da:	2301      	movs	r3, #1
 80208dc:	e3c0      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80208de:	4b73      	ldr	r3, [pc, #460]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	4a72      	ldr	r2, [pc, #456]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80208e4:	f043 0308 	orr.w	r3, r3, #8
 80208e8:	6013      	str	r3, [r2, #0]
 80208ea:	4b70      	ldr	r3, [pc, #448]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80208ec:	681b      	ldr	r3, [r3, #0]
 80208ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80208f2:	687b      	ldr	r3, [r7, #4]
 80208f4:	6a1b      	ldr	r3, [r3, #32]
 80208f6:	496d      	ldr	r1, [pc, #436]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80208f8:	4313      	orrs	r3, r2
 80208fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80208fc:	4b6b      	ldr	r3, [pc, #428]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80208fe:	685b      	ldr	r3, [r3, #4]
 8020900:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	69db      	ldr	r3, [r3, #28]
 8020908:	021b      	lsls	r3, r3, #8
 802090a:	4968      	ldr	r1, [pc, #416]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 802090c:	4313      	orrs	r3, r2
 802090e:	604b      	str	r3, [r1, #4]
 8020910:	e025      	b.n	802095e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8020912:	4b66      	ldr	r3, [pc, #408]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	4a65      	ldr	r2, [pc, #404]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020918:	f043 0308 	orr.w	r3, r3, #8
 802091c:	6013      	str	r3, [r2, #0]
 802091e:	4b63      	ldr	r3, [pc, #396]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	6a1b      	ldr	r3, [r3, #32]
 802092a:	4960      	ldr	r1, [pc, #384]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 802092c:	4313      	orrs	r3, r2
 802092e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8020930:	4b5e      	ldr	r3, [pc, #376]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020932:	685b      	ldr	r3, [r3, #4]
 8020934:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020938:	687b      	ldr	r3, [r7, #4]
 802093a:	69db      	ldr	r3, [r3, #28]
 802093c:	021b      	lsls	r3, r3, #8
 802093e:	495b      	ldr	r1, [pc, #364]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020940:	4313      	orrs	r3, r2
 8020942:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8020944:	69bb      	ldr	r3, [r7, #24]
 8020946:	2b00      	cmp	r3, #0
 8020948:	d109      	bne.n	802095e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 802094a:	687b      	ldr	r3, [r7, #4]
 802094c:	6a1b      	ldr	r3, [r3, #32]
 802094e:	4618      	mov	r0, r3
 8020950:	f000 fd54 	bl	80213fc <RCC_SetFlashLatencyFromMSIRange>
 8020954:	4603      	mov	r3, r0
 8020956:	2b00      	cmp	r3, #0
 8020958:	d001      	beq.n	802095e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 802095a:	2301      	movs	r3, #1
 802095c:	e380      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 802095e:	f000 fcc1 	bl	80212e4 <HAL_RCC_GetSysClockFreq>
 8020962:	4602      	mov	r2, r0
 8020964:	4b51      	ldr	r3, [pc, #324]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020966:	689b      	ldr	r3, [r3, #8]
 8020968:	091b      	lsrs	r3, r3, #4
 802096a:	f003 030f 	and.w	r3, r3, #15
 802096e:	4950      	ldr	r1, [pc, #320]	@ (8020ab0 <HAL_RCC_OscConfig+0x274>)
 8020970:	5ccb      	ldrb	r3, [r1, r3]
 8020972:	f003 031f 	and.w	r3, r3, #31
 8020976:	fa22 f303 	lsr.w	r3, r2, r3
 802097a:	4a4e      	ldr	r2, [pc, #312]	@ (8020ab4 <HAL_RCC_OscConfig+0x278>)
 802097c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 802097e:	4b4e      	ldr	r3, [pc, #312]	@ (8020ab8 <HAL_RCC_OscConfig+0x27c>)
 8020980:	681b      	ldr	r3, [r3, #0]
 8020982:	4618      	mov	r0, r3
 8020984:	f7ff fd54 	bl	8020430 <HAL_InitTick>
 8020988:	4603      	mov	r3, r0
 802098a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 802098c:	7bfb      	ldrb	r3, [r7, #15]
 802098e:	2b00      	cmp	r3, #0
 8020990:	d052      	beq.n	8020a38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8020992:	7bfb      	ldrb	r3, [r7, #15]
 8020994:	e364      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8020996:	687b      	ldr	r3, [r7, #4]
 8020998:	699b      	ldr	r3, [r3, #24]
 802099a:	2b00      	cmp	r3, #0
 802099c:	d032      	beq.n	8020a04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 802099e:	4b43      	ldr	r3, [pc, #268]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	4a42      	ldr	r2, [pc, #264]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209a4:	f043 0301 	orr.w	r3, r3, #1
 80209a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80209aa:	f7ff fd91 	bl	80204d0 <HAL_GetTick>
 80209ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80209b0:	e008      	b.n	80209c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80209b2:	f7ff fd8d 	bl	80204d0 <HAL_GetTick>
 80209b6:	4602      	mov	r2, r0
 80209b8:	693b      	ldr	r3, [r7, #16]
 80209ba:	1ad3      	subs	r3, r2, r3
 80209bc:	2b02      	cmp	r3, #2
 80209be:	d901      	bls.n	80209c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80209c0:	2303      	movs	r3, #3
 80209c2:	e34d      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80209c4:	4b39      	ldr	r3, [pc, #228]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	f003 0302 	and.w	r3, r3, #2
 80209cc:	2b00      	cmp	r3, #0
 80209ce:	d0f0      	beq.n	80209b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80209d0:	4b36      	ldr	r3, [pc, #216]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209d2:	681b      	ldr	r3, [r3, #0]
 80209d4:	4a35      	ldr	r2, [pc, #212]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209d6:	f043 0308 	orr.w	r3, r3, #8
 80209da:	6013      	str	r3, [r2, #0]
 80209dc:	4b33      	ldr	r3, [pc, #204]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	6a1b      	ldr	r3, [r3, #32]
 80209e8:	4930      	ldr	r1, [pc, #192]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209ea:	4313      	orrs	r3, r2
 80209ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80209ee:	4b2f      	ldr	r3, [pc, #188]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209f0:	685b      	ldr	r3, [r3, #4]
 80209f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	69db      	ldr	r3, [r3, #28]
 80209fa:	021b      	lsls	r3, r3, #8
 80209fc:	492b      	ldr	r1, [pc, #172]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 80209fe:	4313      	orrs	r3, r2
 8020a00:	604b      	str	r3, [r1, #4]
 8020a02:	e01a      	b.n	8020a3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8020a04:	4b29      	ldr	r3, [pc, #164]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	4a28      	ldr	r2, [pc, #160]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020a0a:	f023 0301 	bic.w	r3, r3, #1
 8020a0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8020a10:	f7ff fd5e 	bl	80204d0 <HAL_GetTick>
 8020a14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8020a16:	e008      	b.n	8020a2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8020a18:	f7ff fd5a 	bl	80204d0 <HAL_GetTick>
 8020a1c:	4602      	mov	r2, r0
 8020a1e:	693b      	ldr	r3, [r7, #16]
 8020a20:	1ad3      	subs	r3, r2, r3
 8020a22:	2b02      	cmp	r3, #2
 8020a24:	d901      	bls.n	8020a2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8020a26:	2303      	movs	r3, #3
 8020a28:	e31a      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8020a2a:	4b20      	ldr	r3, [pc, #128]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020a2c:	681b      	ldr	r3, [r3, #0]
 8020a2e:	f003 0302 	and.w	r3, r3, #2
 8020a32:	2b00      	cmp	r3, #0
 8020a34:	d1f0      	bne.n	8020a18 <HAL_RCC_OscConfig+0x1dc>
 8020a36:	e000      	b.n	8020a3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8020a38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	f003 0301 	and.w	r3, r3, #1
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d073      	beq.n	8020b2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8020a46:	69bb      	ldr	r3, [r7, #24]
 8020a48:	2b08      	cmp	r3, #8
 8020a4a:	d005      	beq.n	8020a58 <HAL_RCC_OscConfig+0x21c>
 8020a4c:	69bb      	ldr	r3, [r7, #24]
 8020a4e:	2b0c      	cmp	r3, #12
 8020a50:	d10e      	bne.n	8020a70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8020a52:	697b      	ldr	r3, [r7, #20]
 8020a54:	2b03      	cmp	r3, #3
 8020a56:	d10b      	bne.n	8020a70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020a58:	4b14      	ldr	r3, [pc, #80]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	d063      	beq.n	8020b2c <HAL_RCC_OscConfig+0x2f0>
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	d15f      	bne.n	8020b2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8020a6c:	2301      	movs	r3, #1
 8020a6e:	e2f7      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	685b      	ldr	r3, [r3, #4]
 8020a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020a78:	d106      	bne.n	8020a88 <HAL_RCC_OscConfig+0x24c>
 8020a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020a7c:	681b      	ldr	r3, [r3, #0]
 8020a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020a84:	6013      	str	r3, [r2, #0]
 8020a86:	e025      	b.n	8020ad4 <HAL_RCC_OscConfig+0x298>
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	685b      	ldr	r3, [r3, #4]
 8020a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8020a90:	d114      	bne.n	8020abc <HAL_RCC_OscConfig+0x280>
 8020a92:	4b06      	ldr	r3, [pc, #24]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020a94:	681b      	ldr	r3, [r3, #0]
 8020a96:	4a05      	ldr	r2, [pc, #20]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8020a9c:	6013      	str	r3, [r2, #0]
 8020a9e:	4b03      	ldr	r3, [pc, #12]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	4a02      	ldr	r2, [pc, #8]	@ (8020aac <HAL_RCC_OscConfig+0x270>)
 8020aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020aa8:	6013      	str	r3, [r2, #0]
 8020aaa:	e013      	b.n	8020ad4 <HAL_RCC_OscConfig+0x298>
 8020aac:	40021000 	.word	0x40021000
 8020ab0:	08021788 	.word	0x08021788
 8020ab4:	20000000 	.word	0x20000000
 8020ab8:	20000004 	.word	0x20000004
 8020abc:	4ba0      	ldr	r3, [pc, #640]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020abe:	681b      	ldr	r3, [r3, #0]
 8020ac0:	4a9f      	ldr	r2, [pc, #636]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020ac6:	6013      	str	r3, [r2, #0]
 8020ac8:	4b9d      	ldr	r3, [pc, #628]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020aca:	681b      	ldr	r3, [r3, #0]
 8020acc:	4a9c      	ldr	r2, [pc, #624]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8020ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	685b      	ldr	r3, [r3, #4]
 8020ad8:	2b00      	cmp	r3, #0
 8020ada:	d013      	beq.n	8020b04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020adc:	f7ff fcf8 	bl	80204d0 <HAL_GetTick>
 8020ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8020ae2:	e008      	b.n	8020af6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8020ae4:	f7ff fcf4 	bl	80204d0 <HAL_GetTick>
 8020ae8:	4602      	mov	r2, r0
 8020aea:	693b      	ldr	r3, [r7, #16]
 8020aec:	1ad3      	subs	r3, r2, r3
 8020aee:	2b64      	cmp	r3, #100	@ 0x64
 8020af0:	d901      	bls.n	8020af6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8020af2:	2303      	movs	r3, #3
 8020af4:	e2b4      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8020af6:	4b92      	ldr	r3, [pc, #584]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	d0f0      	beq.n	8020ae4 <HAL_RCC_OscConfig+0x2a8>
 8020b02:	e014      	b.n	8020b2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020b04:	f7ff fce4 	bl	80204d0 <HAL_GetTick>
 8020b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8020b0a:	e008      	b.n	8020b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8020b0c:	f7ff fce0 	bl	80204d0 <HAL_GetTick>
 8020b10:	4602      	mov	r2, r0
 8020b12:	693b      	ldr	r3, [r7, #16]
 8020b14:	1ad3      	subs	r3, r2, r3
 8020b16:	2b64      	cmp	r3, #100	@ 0x64
 8020b18:	d901      	bls.n	8020b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8020b1a:	2303      	movs	r3, #3
 8020b1c:	e2a0      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8020b1e:	4b88      	ldr	r3, [pc, #544]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d1f0      	bne.n	8020b0c <HAL_RCC_OscConfig+0x2d0>
 8020b2a:	e000      	b.n	8020b2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8020b2e:	687b      	ldr	r3, [r7, #4]
 8020b30:	681b      	ldr	r3, [r3, #0]
 8020b32:	f003 0302 	and.w	r3, r3, #2
 8020b36:	2b00      	cmp	r3, #0
 8020b38:	d060      	beq.n	8020bfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8020b3a:	69bb      	ldr	r3, [r7, #24]
 8020b3c:	2b04      	cmp	r3, #4
 8020b3e:	d005      	beq.n	8020b4c <HAL_RCC_OscConfig+0x310>
 8020b40:	69bb      	ldr	r3, [r7, #24]
 8020b42:	2b0c      	cmp	r3, #12
 8020b44:	d119      	bne.n	8020b7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8020b46:	697b      	ldr	r3, [r7, #20]
 8020b48:	2b02      	cmp	r3, #2
 8020b4a:	d116      	bne.n	8020b7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8020b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020b4e:	681b      	ldr	r3, [r3, #0]
 8020b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d005      	beq.n	8020b64 <HAL_RCC_OscConfig+0x328>
 8020b58:	687b      	ldr	r3, [r7, #4]
 8020b5a:	68db      	ldr	r3, [r3, #12]
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	d101      	bne.n	8020b64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8020b60:	2301      	movs	r3, #1
 8020b62:	e27d      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020b64:	4b76      	ldr	r3, [pc, #472]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020b66:	685b      	ldr	r3, [r3, #4]
 8020b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	691b      	ldr	r3, [r3, #16]
 8020b70:	061b      	lsls	r3, r3, #24
 8020b72:	4973      	ldr	r1, [pc, #460]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020b74:	4313      	orrs	r3, r2
 8020b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8020b78:	e040      	b.n	8020bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8020b7a:	687b      	ldr	r3, [r7, #4]
 8020b7c:	68db      	ldr	r3, [r3, #12]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d023      	beq.n	8020bca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8020b82:	4b6f      	ldr	r3, [pc, #444]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	4a6e      	ldr	r2, [pc, #440]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020b8e:	f7ff fc9f 	bl	80204d0 <HAL_GetTick>
 8020b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8020b94:	e008      	b.n	8020ba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8020b96:	f7ff fc9b 	bl	80204d0 <HAL_GetTick>
 8020b9a:	4602      	mov	r2, r0
 8020b9c:	693b      	ldr	r3, [r7, #16]
 8020b9e:	1ad3      	subs	r3, r2, r3
 8020ba0:	2b02      	cmp	r3, #2
 8020ba2:	d901      	bls.n	8020ba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8020ba4:	2303      	movs	r3, #3
 8020ba6:	e25b      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8020ba8:	4b65      	ldr	r3, [pc, #404]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020baa:	681b      	ldr	r3, [r3, #0]
 8020bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	d0f0      	beq.n	8020b96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020bb4:	4b62      	ldr	r3, [pc, #392]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020bb6:	685b      	ldr	r3, [r3, #4]
 8020bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	691b      	ldr	r3, [r3, #16]
 8020bc0:	061b      	lsls	r3, r3, #24
 8020bc2:	495f      	ldr	r1, [pc, #380]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020bc4:	4313      	orrs	r3, r2
 8020bc6:	604b      	str	r3, [r1, #4]
 8020bc8:	e018      	b.n	8020bfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8020bca:	4b5d      	ldr	r3, [pc, #372]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	4a5c      	ldr	r2, [pc, #368]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020bd6:	f7ff fc7b 	bl	80204d0 <HAL_GetTick>
 8020bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8020bdc:	e008      	b.n	8020bf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8020bde:	f7ff fc77 	bl	80204d0 <HAL_GetTick>
 8020be2:	4602      	mov	r2, r0
 8020be4:	693b      	ldr	r3, [r7, #16]
 8020be6:	1ad3      	subs	r3, r2, r3
 8020be8:	2b02      	cmp	r3, #2
 8020bea:	d901      	bls.n	8020bf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8020bec:	2303      	movs	r3, #3
 8020bee:	e237      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8020bf0:	4b53      	ldr	r3, [pc, #332]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	d1f0      	bne.n	8020bde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	681b      	ldr	r3, [r3, #0]
 8020c00:	f003 0308 	and.w	r3, r3, #8
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	d03c      	beq.n	8020c82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	695b      	ldr	r3, [r3, #20]
 8020c0c:	2b00      	cmp	r3, #0
 8020c0e:	d01c      	beq.n	8020c4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8020c10:	4b4b      	ldr	r3, [pc, #300]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020c16:	4a4a      	ldr	r2, [pc, #296]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020c18:	f043 0301 	orr.w	r3, r3, #1
 8020c1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020c20:	f7ff fc56 	bl	80204d0 <HAL_GetTick>
 8020c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8020c26:	e008      	b.n	8020c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8020c28:	f7ff fc52 	bl	80204d0 <HAL_GetTick>
 8020c2c:	4602      	mov	r2, r0
 8020c2e:	693b      	ldr	r3, [r7, #16]
 8020c30:	1ad3      	subs	r3, r2, r3
 8020c32:	2b02      	cmp	r3, #2
 8020c34:	d901      	bls.n	8020c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8020c36:	2303      	movs	r3, #3
 8020c38:	e212      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8020c3a:	4b41      	ldr	r3, [pc, #260]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020c40:	f003 0302 	and.w	r3, r3, #2
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	d0ef      	beq.n	8020c28 <HAL_RCC_OscConfig+0x3ec>
 8020c48:	e01b      	b.n	8020c82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8020c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020c50:	4a3b      	ldr	r2, [pc, #236]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020c52:	f023 0301 	bic.w	r3, r3, #1
 8020c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020c5a:	f7ff fc39 	bl	80204d0 <HAL_GetTick>
 8020c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8020c60:	e008      	b.n	8020c74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8020c62:	f7ff fc35 	bl	80204d0 <HAL_GetTick>
 8020c66:	4602      	mov	r2, r0
 8020c68:	693b      	ldr	r3, [r7, #16]
 8020c6a:	1ad3      	subs	r3, r2, r3
 8020c6c:	2b02      	cmp	r3, #2
 8020c6e:	d901      	bls.n	8020c74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8020c70:	2303      	movs	r3, #3
 8020c72:	e1f5      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8020c74:	4b32      	ldr	r3, [pc, #200]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020c7a:	f003 0302 	and.w	r3, r3, #2
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d1ef      	bne.n	8020c62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8020c82:	687b      	ldr	r3, [r7, #4]
 8020c84:	681b      	ldr	r3, [r3, #0]
 8020c86:	f003 0304 	and.w	r3, r3, #4
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	f000 80a6 	beq.w	8020ddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8020c90:	2300      	movs	r3, #0
 8020c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8020c94:	4b2a      	ldr	r3, [pc, #168]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020c9c:	2b00      	cmp	r3, #0
 8020c9e:	d10d      	bne.n	8020cbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8020ca0:	4b27      	ldr	r3, [pc, #156]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020ca4:	4a26      	ldr	r2, [pc, #152]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8020cac:	4b24      	ldr	r3, [pc, #144]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020cb4:	60bb      	str	r3, [r7, #8]
 8020cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8020cb8:	2301      	movs	r3, #1
 8020cba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8020cbc:	4b21      	ldr	r3, [pc, #132]	@ (8020d44 <HAL_RCC_OscConfig+0x508>)
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	d118      	bne.n	8020cfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8020cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8020d44 <HAL_RCC_OscConfig+0x508>)
 8020cca:	681b      	ldr	r3, [r3, #0]
 8020ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8020d44 <HAL_RCC_OscConfig+0x508>)
 8020cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8020cd4:	f7ff fbfc 	bl	80204d0 <HAL_GetTick>
 8020cd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8020cda:	e008      	b.n	8020cee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8020cdc:	f7ff fbf8 	bl	80204d0 <HAL_GetTick>
 8020ce0:	4602      	mov	r2, r0
 8020ce2:	693b      	ldr	r3, [r7, #16]
 8020ce4:	1ad3      	subs	r3, r2, r3
 8020ce6:	2b02      	cmp	r3, #2
 8020ce8:	d901      	bls.n	8020cee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8020cea:	2303      	movs	r3, #3
 8020cec:	e1b8      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8020cee:	4b15      	ldr	r3, [pc, #84]	@ (8020d44 <HAL_RCC_OscConfig+0x508>)
 8020cf0:	681b      	ldr	r3, [r3, #0]
 8020cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	d0f0      	beq.n	8020cdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8020cfa:	687b      	ldr	r3, [r7, #4]
 8020cfc:	689b      	ldr	r3, [r3, #8]
 8020cfe:	2b01      	cmp	r3, #1
 8020d00:	d108      	bne.n	8020d14 <HAL_RCC_OscConfig+0x4d8>
 8020d02:	4b0f      	ldr	r3, [pc, #60]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020d08:	4a0d      	ldr	r2, [pc, #52]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020d0a:	f043 0301 	orr.w	r3, r3, #1
 8020d0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8020d12:	e029      	b.n	8020d68 <HAL_RCC_OscConfig+0x52c>
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	689b      	ldr	r3, [r3, #8]
 8020d18:	2b05      	cmp	r3, #5
 8020d1a:	d115      	bne.n	8020d48 <HAL_RCC_OscConfig+0x50c>
 8020d1c:	4b08      	ldr	r3, [pc, #32]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020d22:	4a07      	ldr	r2, [pc, #28]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020d24:	f043 0304 	orr.w	r3, r3, #4
 8020d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8020d2c:	4b04      	ldr	r3, [pc, #16]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020d32:	4a03      	ldr	r2, [pc, #12]	@ (8020d40 <HAL_RCC_OscConfig+0x504>)
 8020d34:	f043 0301 	orr.w	r3, r3, #1
 8020d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8020d3c:	e014      	b.n	8020d68 <HAL_RCC_OscConfig+0x52c>
 8020d3e:	bf00      	nop
 8020d40:	40021000 	.word	0x40021000
 8020d44:	40007000 	.word	0x40007000
 8020d48:	4b9d      	ldr	r3, [pc, #628]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020d4e:	4a9c      	ldr	r2, [pc, #624]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020d50:	f023 0301 	bic.w	r3, r3, #1
 8020d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8020d58:	4b99      	ldr	r3, [pc, #612]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020d5e:	4a98      	ldr	r2, [pc, #608]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020d60:	f023 0304 	bic.w	r3, r3, #4
 8020d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	689b      	ldr	r3, [r3, #8]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d016      	beq.n	8020d9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020d70:	f7ff fbae 	bl	80204d0 <HAL_GetTick>
 8020d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8020d76:	e00a      	b.n	8020d8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8020d78:	f7ff fbaa 	bl	80204d0 <HAL_GetTick>
 8020d7c:	4602      	mov	r2, r0
 8020d7e:	693b      	ldr	r3, [r7, #16]
 8020d80:	1ad3      	subs	r3, r2, r3
 8020d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020d86:	4293      	cmp	r3, r2
 8020d88:	d901      	bls.n	8020d8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8020d8a:	2303      	movs	r3, #3
 8020d8c:	e168      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8020d8e:	4b8c      	ldr	r3, [pc, #560]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020d94:	f003 0302 	and.w	r3, r3, #2
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d0ed      	beq.n	8020d78 <HAL_RCC_OscConfig+0x53c>
 8020d9c:	e015      	b.n	8020dca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020d9e:	f7ff fb97 	bl	80204d0 <HAL_GetTick>
 8020da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8020da4:	e00a      	b.n	8020dbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8020da6:	f7ff fb93 	bl	80204d0 <HAL_GetTick>
 8020daa:	4602      	mov	r2, r0
 8020dac:	693b      	ldr	r3, [r7, #16]
 8020dae:	1ad3      	subs	r3, r2, r3
 8020db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020db4:	4293      	cmp	r3, r2
 8020db6:	d901      	bls.n	8020dbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8020db8:	2303      	movs	r3, #3
 8020dba:	e151      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8020dbc:	4b80      	ldr	r3, [pc, #512]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020dc2:	f003 0302 	and.w	r3, r3, #2
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d1ed      	bne.n	8020da6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8020dca:	7ffb      	ldrb	r3, [r7, #31]
 8020dcc:	2b01      	cmp	r3, #1
 8020dce:	d105      	bne.n	8020ddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8020dd0:	4b7b      	ldr	r3, [pc, #492]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020dd4:	4a7a      	ldr	r2, [pc, #488]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8020dda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	681b      	ldr	r3, [r3, #0]
 8020de0:	f003 0320 	and.w	r3, r3, #32
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d03c      	beq.n	8020e62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d01c      	beq.n	8020e2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8020df0:	4b73      	ldr	r3, [pc, #460]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020df6:	4a72      	ldr	r2, [pc, #456]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020df8:	f043 0301 	orr.w	r3, r3, #1
 8020dfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020e00:	f7ff fb66 	bl	80204d0 <HAL_GetTick>
 8020e04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8020e06:	e008      	b.n	8020e1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8020e08:	f7ff fb62 	bl	80204d0 <HAL_GetTick>
 8020e0c:	4602      	mov	r2, r0
 8020e0e:	693b      	ldr	r3, [r7, #16]
 8020e10:	1ad3      	subs	r3, r2, r3
 8020e12:	2b02      	cmp	r3, #2
 8020e14:	d901      	bls.n	8020e1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8020e16:	2303      	movs	r3, #3
 8020e18:	e122      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8020e1a:	4b69      	ldr	r3, [pc, #420]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020e20:	f003 0302 	and.w	r3, r3, #2
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d0ef      	beq.n	8020e08 <HAL_RCC_OscConfig+0x5cc>
 8020e28:	e01b      	b.n	8020e62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8020e2a:	4b65      	ldr	r3, [pc, #404]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020e30:	4a63      	ldr	r2, [pc, #396]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020e32:	f023 0301 	bic.w	r3, r3, #1
 8020e36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020e3a:	f7ff fb49 	bl	80204d0 <HAL_GetTick>
 8020e3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8020e40:	e008      	b.n	8020e54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8020e42:	f7ff fb45 	bl	80204d0 <HAL_GetTick>
 8020e46:	4602      	mov	r2, r0
 8020e48:	693b      	ldr	r3, [r7, #16]
 8020e4a:	1ad3      	subs	r3, r2, r3
 8020e4c:	2b02      	cmp	r3, #2
 8020e4e:	d901      	bls.n	8020e54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8020e50:	2303      	movs	r3, #3
 8020e52:	e105      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8020e54:	4b5a      	ldr	r3, [pc, #360]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020e5a:	f003 0302 	and.w	r3, r3, #2
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d1ef      	bne.n	8020e42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8020e62:	687b      	ldr	r3, [r7, #4]
 8020e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	f000 80f9 	beq.w	802105e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8020e6c:	687b      	ldr	r3, [r7, #4]
 8020e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e70:	2b02      	cmp	r3, #2
 8020e72:	f040 80cf 	bne.w	8021014 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8020e76:	4b52      	ldr	r3, [pc, #328]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020e78:	68db      	ldr	r3, [r3, #12]
 8020e7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8020e7c:	697b      	ldr	r3, [r7, #20]
 8020e7e:	f003 0203 	and.w	r2, r3, #3
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020e86:	429a      	cmp	r2, r3
 8020e88:	d12c      	bne.n	8020ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8020e8a:	697b      	ldr	r3, [r7, #20]
 8020e8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020e94:	3b01      	subs	r3, #1
 8020e96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8020e98:	429a      	cmp	r2, r3
 8020e9a:	d123      	bne.n	8020ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8020e9c:	697b      	ldr	r3, [r7, #20]
 8020e9e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020ea6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8020ea8:	429a      	cmp	r2, r3
 8020eaa:	d11b      	bne.n	8020ee4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8020eac:	697b      	ldr	r3, [r7, #20]
 8020eae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020eb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8020eb8:	429a      	cmp	r2, r3
 8020eba:	d113      	bne.n	8020ee4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8020ebc:	697b      	ldr	r3, [r7, #20]
 8020ebe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8020ec2:	687b      	ldr	r3, [r7, #4]
 8020ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020ec6:	085b      	lsrs	r3, r3, #1
 8020ec8:	3b01      	subs	r3, #1
 8020eca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8020ecc:	429a      	cmp	r2, r3
 8020ece:	d109      	bne.n	8020ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8020ed0:	697b      	ldr	r3, [r7, #20]
 8020ed2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8020ed6:	687b      	ldr	r3, [r7, #4]
 8020ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020eda:	085b      	lsrs	r3, r3, #1
 8020edc:	3b01      	subs	r3, #1
 8020ede:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8020ee0:	429a      	cmp	r2, r3
 8020ee2:	d071      	beq.n	8020fc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8020ee4:	69bb      	ldr	r3, [r7, #24]
 8020ee6:	2b0c      	cmp	r3, #12
 8020ee8:	d068      	beq.n	8020fbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8020eea:	4b35      	ldr	r3, [pc, #212]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	d105      	bne.n	8020f02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8020ef6:	4b32      	ldr	r3, [pc, #200]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020ef8:	681b      	ldr	r3, [r3, #0]
 8020efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d001      	beq.n	8020f06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8020f02:	2301      	movs	r3, #1
 8020f04:	e0ac      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8020f06:	4b2e      	ldr	r3, [pc, #184]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f08:	681b      	ldr	r3, [r3, #0]
 8020f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8020f10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8020f12:	f7ff fadd 	bl	80204d0 <HAL_GetTick>
 8020f16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8020f18:	e008      	b.n	8020f2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8020f1a:	f7ff fad9 	bl	80204d0 <HAL_GetTick>
 8020f1e:	4602      	mov	r2, r0
 8020f20:	693b      	ldr	r3, [r7, #16]
 8020f22:	1ad3      	subs	r3, r2, r3
 8020f24:	2b02      	cmp	r3, #2
 8020f26:	d901      	bls.n	8020f2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8020f28:	2303      	movs	r3, #3
 8020f2a:	e099      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8020f2c:	4b24      	ldr	r3, [pc, #144]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d1f0      	bne.n	8020f1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8020f38:	4b21      	ldr	r3, [pc, #132]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f3a:	68da      	ldr	r2, [r3, #12]
 8020f3c:	4b21      	ldr	r3, [pc, #132]	@ (8020fc4 <HAL_RCC_OscConfig+0x788>)
 8020f3e:	4013      	ands	r3, r2
 8020f40:	687a      	ldr	r2, [r7, #4]
 8020f42:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8020f44:	687a      	ldr	r2, [r7, #4]
 8020f46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8020f48:	3a01      	subs	r2, #1
 8020f4a:	0112      	lsls	r2, r2, #4
 8020f4c:	4311      	orrs	r1, r2
 8020f4e:	687a      	ldr	r2, [r7, #4]
 8020f50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8020f52:	0212      	lsls	r2, r2, #8
 8020f54:	4311      	orrs	r1, r2
 8020f56:	687a      	ldr	r2, [r7, #4]
 8020f58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8020f5a:	0852      	lsrs	r2, r2, #1
 8020f5c:	3a01      	subs	r2, #1
 8020f5e:	0552      	lsls	r2, r2, #21
 8020f60:	4311      	orrs	r1, r2
 8020f62:	687a      	ldr	r2, [r7, #4]
 8020f64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8020f66:	0852      	lsrs	r2, r2, #1
 8020f68:	3a01      	subs	r2, #1
 8020f6a:	0652      	lsls	r2, r2, #25
 8020f6c:	4311      	orrs	r1, r2
 8020f6e:	687a      	ldr	r2, [r7, #4]
 8020f70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8020f72:	06d2      	lsls	r2, r2, #27
 8020f74:	430a      	orrs	r2, r1
 8020f76:	4912      	ldr	r1, [pc, #72]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f78:	4313      	orrs	r3, r2
 8020f7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8020f7c:	4b10      	ldr	r3, [pc, #64]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f7e:	681b      	ldr	r3, [r3, #0]
 8020f80:	4a0f      	ldr	r2, [pc, #60]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8020f88:	4b0d      	ldr	r3, [pc, #52]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f8a:	68db      	ldr	r3, [r3, #12]
 8020f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8020f94:	f7ff fa9c 	bl	80204d0 <HAL_GetTick>
 8020f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020f9a:	e008      	b.n	8020fae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8020f9c:	f7ff fa98 	bl	80204d0 <HAL_GetTick>
 8020fa0:	4602      	mov	r2, r0
 8020fa2:	693b      	ldr	r3, [r7, #16]
 8020fa4:	1ad3      	subs	r3, r2, r3
 8020fa6:	2b02      	cmp	r3, #2
 8020fa8:	d901      	bls.n	8020fae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8020faa:	2303      	movs	r3, #3
 8020fac:	e058      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020fae:	4b04      	ldr	r3, [pc, #16]	@ (8020fc0 <HAL_RCC_OscConfig+0x784>)
 8020fb0:	681b      	ldr	r3, [r3, #0]
 8020fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d0f0      	beq.n	8020f9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8020fba:	e050      	b.n	802105e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8020fbc:	2301      	movs	r3, #1
 8020fbe:	e04f      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
 8020fc0:	40021000 	.word	0x40021000
 8020fc4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020fc8:	4b27      	ldr	r3, [pc, #156]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8020fca:	681b      	ldr	r3, [r3, #0]
 8020fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	d144      	bne.n	802105e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8020fd4:	4b24      	ldr	r3, [pc, #144]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	4a23      	ldr	r2, [pc, #140]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8020fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020fde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8020fe0:	4b21      	ldr	r3, [pc, #132]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8020fe2:	68db      	ldr	r3, [r3, #12]
 8020fe4:	4a20      	ldr	r2, [pc, #128]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8020fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020fea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8020fec:	f7ff fa70 	bl	80204d0 <HAL_GetTick>
 8020ff0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020ff2:	e008      	b.n	8021006 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8020ff4:	f7ff fa6c 	bl	80204d0 <HAL_GetTick>
 8020ff8:	4602      	mov	r2, r0
 8020ffa:	693b      	ldr	r3, [r7, #16]
 8020ffc:	1ad3      	subs	r3, r2, r3
 8020ffe:	2b02      	cmp	r3, #2
 8021000:	d901      	bls.n	8021006 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8021002:	2303      	movs	r3, #3
 8021004:	e02c      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021006:	4b18      	ldr	r3, [pc, #96]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802100e:	2b00      	cmp	r3, #0
 8021010:	d0f0      	beq.n	8020ff4 <HAL_RCC_OscConfig+0x7b8>
 8021012:	e024      	b.n	802105e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8021014:	69bb      	ldr	r3, [r7, #24]
 8021016:	2b0c      	cmp	r3, #12
 8021018:	d01f      	beq.n	802105a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802101a:	4b13      	ldr	r3, [pc, #76]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 802101c:	681b      	ldr	r3, [r3, #0]
 802101e:	4a12      	ldr	r2, [pc, #72]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8021020:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8021024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021026:	f7ff fa53 	bl	80204d0 <HAL_GetTick>
 802102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 802102c:	e008      	b.n	8021040 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802102e:	f7ff fa4f 	bl	80204d0 <HAL_GetTick>
 8021032:	4602      	mov	r2, r0
 8021034:	693b      	ldr	r3, [r7, #16]
 8021036:	1ad3      	subs	r3, r2, r3
 8021038:	2b02      	cmp	r3, #2
 802103a:	d901      	bls.n	8021040 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 802103c:	2303      	movs	r3, #3
 802103e:	e00f      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021040:	4b09      	ldr	r3, [pc, #36]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021048:	2b00      	cmp	r3, #0
 802104a:	d1f0      	bne.n	802102e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 802104c:	4b06      	ldr	r3, [pc, #24]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 802104e:	68da      	ldr	r2, [r3, #12]
 8021050:	4905      	ldr	r1, [pc, #20]	@ (8021068 <HAL_RCC_OscConfig+0x82c>)
 8021052:	4b06      	ldr	r3, [pc, #24]	@ (802106c <HAL_RCC_OscConfig+0x830>)
 8021054:	4013      	ands	r3, r2
 8021056:	60cb      	str	r3, [r1, #12]
 8021058:	e001      	b.n	802105e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 802105a:	2301      	movs	r3, #1
 802105c:	e000      	b.n	8021060 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 802105e:	2300      	movs	r3, #0
}
 8021060:	4618      	mov	r0, r3
 8021062:	3720      	adds	r7, #32
 8021064:	46bd      	mov	sp, r7
 8021066:	bd80      	pop	{r7, pc}
 8021068:	40021000 	.word	0x40021000
 802106c:	feeefffc 	.word	0xfeeefffc

08021070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021070:	b580      	push	{r7, lr}
 8021072:	b086      	sub	sp, #24
 8021074:	af00      	add	r7, sp, #0
 8021076:	6078      	str	r0, [r7, #4]
 8021078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 802107a:	2300      	movs	r3, #0
 802107c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	2b00      	cmp	r3, #0
 8021082:	d101      	bne.n	8021088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8021084:	2301      	movs	r3, #1
 8021086:	e11d      	b.n	80212c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8021088:	4b90      	ldr	r3, [pc, #576]	@ (80212cc <HAL_RCC_ClockConfig+0x25c>)
 802108a:	681b      	ldr	r3, [r3, #0]
 802108c:	f003 030f 	and.w	r3, r3, #15
 8021090:	683a      	ldr	r2, [r7, #0]
 8021092:	429a      	cmp	r2, r3
 8021094:	d910      	bls.n	80210b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021096:	4b8d      	ldr	r3, [pc, #564]	@ (80212cc <HAL_RCC_ClockConfig+0x25c>)
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	f023 020f 	bic.w	r2, r3, #15
 802109e:	498b      	ldr	r1, [pc, #556]	@ (80212cc <HAL_RCC_ClockConfig+0x25c>)
 80210a0:	683b      	ldr	r3, [r7, #0]
 80210a2:	4313      	orrs	r3, r2
 80210a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80210a6:	4b89      	ldr	r3, [pc, #548]	@ (80212cc <HAL_RCC_ClockConfig+0x25c>)
 80210a8:	681b      	ldr	r3, [r3, #0]
 80210aa:	f003 030f 	and.w	r3, r3, #15
 80210ae:	683a      	ldr	r2, [r7, #0]
 80210b0:	429a      	cmp	r2, r3
 80210b2:	d001      	beq.n	80210b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80210b4:	2301      	movs	r3, #1
 80210b6:	e105      	b.n	80212c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	f003 0302 	and.w	r3, r3, #2
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	d010      	beq.n	80210e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80210c4:	687b      	ldr	r3, [r7, #4]
 80210c6:	689a      	ldr	r2, [r3, #8]
 80210c8:	4b81      	ldr	r3, [pc, #516]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80210ca:	689b      	ldr	r3, [r3, #8]
 80210cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80210d0:	429a      	cmp	r2, r3
 80210d2:	d908      	bls.n	80210e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80210d4:	4b7e      	ldr	r3, [pc, #504]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80210d6:	689b      	ldr	r3, [r3, #8]
 80210d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80210dc:	687b      	ldr	r3, [r7, #4]
 80210de:	689b      	ldr	r3, [r3, #8]
 80210e0:	497b      	ldr	r1, [pc, #492]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80210e2:	4313      	orrs	r3, r2
 80210e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	f003 0301 	and.w	r3, r3, #1
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	d079      	beq.n	80211e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	685b      	ldr	r3, [r3, #4]
 80210f6:	2b03      	cmp	r3, #3
 80210f8:	d11e      	bne.n	8021138 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80210fa:	4b75      	ldr	r3, [pc, #468]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80210fc:	681b      	ldr	r3, [r3, #0]
 80210fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021102:	2b00      	cmp	r3, #0
 8021104:	d101      	bne.n	802110a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8021106:	2301      	movs	r3, #1
 8021108:	e0dc      	b.n	80212c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 802110a:	f000 f9d1 	bl	80214b0 <RCC_GetSysClockFreqFromPLLSource>
 802110e:	4603      	mov	r3, r0
 8021110:	4a70      	ldr	r2, [pc, #448]	@ (80212d4 <HAL_RCC_ClockConfig+0x264>)
 8021112:	4293      	cmp	r3, r2
 8021114:	d946      	bls.n	80211a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8021116:	4b6e      	ldr	r3, [pc, #440]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021118:	689b      	ldr	r3, [r3, #8]
 802111a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802111e:	2b00      	cmp	r3, #0
 8021120:	d140      	bne.n	80211a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021122:	4b6b      	ldr	r3, [pc, #428]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021124:	689b      	ldr	r3, [r3, #8]
 8021126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802112a:	4a69      	ldr	r2, [pc, #420]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 802112c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021130:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021132:	2380      	movs	r3, #128	@ 0x80
 8021134:	617b      	str	r3, [r7, #20]
 8021136:	e035      	b.n	80211a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	685b      	ldr	r3, [r3, #4]
 802113c:	2b02      	cmp	r3, #2
 802113e:	d107      	bne.n	8021150 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021140:	4b63      	ldr	r3, [pc, #396]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021142:	681b      	ldr	r3, [r3, #0]
 8021144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021148:	2b00      	cmp	r3, #0
 802114a:	d115      	bne.n	8021178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 802114c:	2301      	movs	r3, #1
 802114e:	e0b9      	b.n	80212c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	685b      	ldr	r3, [r3, #4]
 8021154:	2b00      	cmp	r3, #0
 8021156:	d107      	bne.n	8021168 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021158:	4b5d      	ldr	r3, [pc, #372]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 802115a:	681b      	ldr	r3, [r3, #0]
 802115c:	f003 0302 	and.w	r3, r3, #2
 8021160:	2b00      	cmp	r3, #0
 8021162:	d109      	bne.n	8021178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8021164:	2301      	movs	r3, #1
 8021166:	e0ad      	b.n	80212c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021168:	4b59      	ldr	r3, [pc, #356]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 802116a:	681b      	ldr	r3, [r3, #0]
 802116c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021170:	2b00      	cmp	r3, #0
 8021172:	d101      	bne.n	8021178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8021174:	2301      	movs	r3, #1
 8021176:	e0a5      	b.n	80212c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8021178:	f000 f8b4 	bl	80212e4 <HAL_RCC_GetSysClockFreq>
 802117c:	4603      	mov	r3, r0
 802117e:	4a55      	ldr	r2, [pc, #340]	@ (80212d4 <HAL_RCC_ClockConfig+0x264>)
 8021180:	4293      	cmp	r3, r2
 8021182:	d90f      	bls.n	80211a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8021184:	4b52      	ldr	r3, [pc, #328]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021186:	689b      	ldr	r3, [r3, #8]
 8021188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802118c:	2b00      	cmp	r3, #0
 802118e:	d109      	bne.n	80211a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021190:	4b4f      	ldr	r3, [pc, #316]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021192:	689b      	ldr	r3, [r3, #8]
 8021194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8021198:	4a4d      	ldr	r2, [pc, #308]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 802119a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802119e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80211a0:	2380      	movs	r3, #128	@ 0x80
 80211a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80211a4:	4b4a      	ldr	r3, [pc, #296]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80211a6:	689b      	ldr	r3, [r3, #8]
 80211a8:	f023 0203 	bic.w	r2, r3, #3
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	685b      	ldr	r3, [r3, #4]
 80211b0:	4947      	ldr	r1, [pc, #284]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80211b2:	4313      	orrs	r3, r2
 80211b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80211b6:	f7ff f98b 	bl	80204d0 <HAL_GetTick>
 80211ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80211bc:	e00a      	b.n	80211d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80211be:	f7ff f987 	bl	80204d0 <HAL_GetTick>
 80211c2:	4602      	mov	r2, r0
 80211c4:	693b      	ldr	r3, [r7, #16]
 80211c6:	1ad3      	subs	r3, r2, r3
 80211c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80211cc:	4293      	cmp	r3, r2
 80211ce:	d901      	bls.n	80211d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80211d0:	2303      	movs	r3, #3
 80211d2:	e077      	b.n	80212c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80211d4:	4b3e      	ldr	r3, [pc, #248]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80211d6:	689b      	ldr	r3, [r3, #8]
 80211d8:	f003 020c 	and.w	r2, r3, #12
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	685b      	ldr	r3, [r3, #4]
 80211e0:	009b      	lsls	r3, r3, #2
 80211e2:	429a      	cmp	r2, r3
 80211e4:	d1eb      	bne.n	80211be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80211e6:	697b      	ldr	r3, [r7, #20]
 80211e8:	2b80      	cmp	r3, #128	@ 0x80
 80211ea:	d105      	bne.n	80211f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80211ec:	4b38      	ldr	r3, [pc, #224]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80211ee:	689b      	ldr	r3, [r3, #8]
 80211f0:	4a37      	ldr	r2, [pc, #220]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 80211f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80211f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	f003 0302 	and.w	r3, r3, #2
 8021200:	2b00      	cmp	r3, #0
 8021202:	d010      	beq.n	8021226 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	689a      	ldr	r2, [r3, #8]
 8021208:	4b31      	ldr	r3, [pc, #196]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 802120a:	689b      	ldr	r3, [r3, #8]
 802120c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021210:	429a      	cmp	r2, r3
 8021212:	d208      	bcs.n	8021226 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021214:	4b2e      	ldr	r3, [pc, #184]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021216:	689b      	ldr	r3, [r3, #8]
 8021218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 802121c:	687b      	ldr	r3, [r7, #4]
 802121e:	689b      	ldr	r3, [r3, #8]
 8021220:	492b      	ldr	r1, [pc, #172]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021222:	4313      	orrs	r3, r2
 8021224:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021226:	4b29      	ldr	r3, [pc, #164]	@ (80212cc <HAL_RCC_ClockConfig+0x25c>)
 8021228:	681b      	ldr	r3, [r3, #0]
 802122a:	f003 030f 	and.w	r3, r3, #15
 802122e:	683a      	ldr	r2, [r7, #0]
 8021230:	429a      	cmp	r2, r3
 8021232:	d210      	bcs.n	8021256 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021234:	4b25      	ldr	r3, [pc, #148]	@ (80212cc <HAL_RCC_ClockConfig+0x25c>)
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	f023 020f 	bic.w	r2, r3, #15
 802123c:	4923      	ldr	r1, [pc, #140]	@ (80212cc <HAL_RCC_ClockConfig+0x25c>)
 802123e:	683b      	ldr	r3, [r7, #0]
 8021240:	4313      	orrs	r3, r2
 8021242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021244:	4b21      	ldr	r3, [pc, #132]	@ (80212cc <HAL_RCC_ClockConfig+0x25c>)
 8021246:	681b      	ldr	r3, [r3, #0]
 8021248:	f003 030f 	and.w	r3, r3, #15
 802124c:	683a      	ldr	r2, [r7, #0]
 802124e:	429a      	cmp	r2, r3
 8021250:	d001      	beq.n	8021256 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8021252:	2301      	movs	r3, #1
 8021254:	e036      	b.n	80212c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	681b      	ldr	r3, [r3, #0]
 802125a:	f003 0304 	and.w	r3, r3, #4
 802125e:	2b00      	cmp	r3, #0
 8021260:	d008      	beq.n	8021274 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021262:	4b1b      	ldr	r3, [pc, #108]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021264:	689b      	ldr	r3, [r3, #8]
 8021266:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	68db      	ldr	r3, [r3, #12]
 802126e:	4918      	ldr	r1, [pc, #96]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021270:	4313      	orrs	r3, r2
 8021272:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	f003 0308 	and.w	r3, r3, #8
 802127c:	2b00      	cmp	r3, #0
 802127e:	d009      	beq.n	8021294 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021280:	4b13      	ldr	r3, [pc, #76]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021282:	689b      	ldr	r3, [r3, #8]
 8021284:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	691b      	ldr	r3, [r3, #16]
 802128c:	00db      	lsls	r3, r3, #3
 802128e:	4910      	ldr	r1, [pc, #64]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 8021290:	4313      	orrs	r3, r2
 8021292:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021294:	f000 f826 	bl	80212e4 <HAL_RCC_GetSysClockFreq>
 8021298:	4602      	mov	r2, r0
 802129a:	4b0d      	ldr	r3, [pc, #52]	@ (80212d0 <HAL_RCC_ClockConfig+0x260>)
 802129c:	689b      	ldr	r3, [r3, #8]
 802129e:	091b      	lsrs	r3, r3, #4
 80212a0:	f003 030f 	and.w	r3, r3, #15
 80212a4:	490c      	ldr	r1, [pc, #48]	@ (80212d8 <HAL_RCC_ClockConfig+0x268>)
 80212a6:	5ccb      	ldrb	r3, [r1, r3]
 80212a8:	f003 031f 	and.w	r3, r3, #31
 80212ac:	fa22 f303 	lsr.w	r3, r2, r3
 80212b0:	4a0a      	ldr	r2, [pc, #40]	@ (80212dc <HAL_RCC_ClockConfig+0x26c>)
 80212b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80212b4:	4b0a      	ldr	r3, [pc, #40]	@ (80212e0 <HAL_RCC_ClockConfig+0x270>)
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	4618      	mov	r0, r3
 80212ba:	f7ff f8b9 	bl	8020430 <HAL_InitTick>
 80212be:	4603      	mov	r3, r0
 80212c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80212c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80212c4:	4618      	mov	r0, r3
 80212c6:	3718      	adds	r7, #24
 80212c8:	46bd      	mov	sp, r7
 80212ca:	bd80      	pop	{r7, pc}
 80212cc:	40022000 	.word	0x40022000
 80212d0:	40021000 	.word	0x40021000
 80212d4:	04c4b400 	.word	0x04c4b400
 80212d8:	08021788 	.word	0x08021788
 80212dc:	20000000 	.word	0x20000000
 80212e0:	20000004 	.word	0x20000004

080212e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80212e4:	b480      	push	{r7}
 80212e6:	b089      	sub	sp, #36	@ 0x24
 80212e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80212ea:	2300      	movs	r3, #0
 80212ec:	61fb      	str	r3, [r7, #28]
 80212ee:	2300      	movs	r3, #0
 80212f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80212f2:	4b3e      	ldr	r3, [pc, #248]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 80212f4:	689b      	ldr	r3, [r3, #8]
 80212f6:	f003 030c 	and.w	r3, r3, #12
 80212fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80212fc:	4b3b      	ldr	r3, [pc, #236]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 80212fe:	68db      	ldr	r3, [r3, #12]
 8021300:	f003 0303 	and.w	r3, r3, #3
 8021304:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021306:	693b      	ldr	r3, [r7, #16]
 8021308:	2b00      	cmp	r3, #0
 802130a:	d005      	beq.n	8021318 <HAL_RCC_GetSysClockFreq+0x34>
 802130c:	693b      	ldr	r3, [r7, #16]
 802130e:	2b0c      	cmp	r3, #12
 8021310:	d121      	bne.n	8021356 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8021312:	68fb      	ldr	r3, [r7, #12]
 8021314:	2b01      	cmp	r3, #1
 8021316:	d11e      	bne.n	8021356 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021318:	4b34      	ldr	r3, [pc, #208]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 802131a:	681b      	ldr	r3, [r3, #0]
 802131c:	f003 0308 	and.w	r3, r3, #8
 8021320:	2b00      	cmp	r3, #0
 8021322:	d107      	bne.n	8021334 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021324:	4b31      	ldr	r3, [pc, #196]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 8021326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802132a:	0a1b      	lsrs	r3, r3, #8
 802132c:	f003 030f 	and.w	r3, r3, #15
 8021330:	61fb      	str	r3, [r7, #28]
 8021332:	e005      	b.n	8021340 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021334:	4b2d      	ldr	r3, [pc, #180]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	091b      	lsrs	r3, r3, #4
 802133a:	f003 030f 	and.w	r3, r3, #15
 802133e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8021340:	4a2b      	ldr	r2, [pc, #172]	@ (80213f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8021342:	69fb      	ldr	r3, [r7, #28]
 8021344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021348:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 802134a:	693b      	ldr	r3, [r7, #16]
 802134c:	2b00      	cmp	r3, #0
 802134e:	d10d      	bne.n	802136c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8021350:	69fb      	ldr	r3, [r7, #28]
 8021352:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021354:	e00a      	b.n	802136c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8021356:	693b      	ldr	r3, [r7, #16]
 8021358:	2b04      	cmp	r3, #4
 802135a:	d102      	bne.n	8021362 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 802135c:	4b25      	ldr	r3, [pc, #148]	@ (80213f4 <HAL_RCC_GetSysClockFreq+0x110>)
 802135e:	61bb      	str	r3, [r7, #24]
 8021360:	e004      	b.n	802136c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8021362:	693b      	ldr	r3, [r7, #16]
 8021364:	2b08      	cmp	r3, #8
 8021366:	d101      	bne.n	802136c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8021368:	4b23      	ldr	r3, [pc, #140]	@ (80213f8 <HAL_RCC_GetSysClockFreq+0x114>)
 802136a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 802136c:	693b      	ldr	r3, [r7, #16]
 802136e:	2b0c      	cmp	r3, #12
 8021370:	d134      	bne.n	80213dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021372:	4b1e      	ldr	r3, [pc, #120]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 8021374:	68db      	ldr	r3, [r3, #12]
 8021376:	f003 0303 	and.w	r3, r3, #3
 802137a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 802137c:	68bb      	ldr	r3, [r7, #8]
 802137e:	2b02      	cmp	r3, #2
 8021380:	d003      	beq.n	802138a <HAL_RCC_GetSysClockFreq+0xa6>
 8021382:	68bb      	ldr	r3, [r7, #8]
 8021384:	2b03      	cmp	r3, #3
 8021386:	d003      	beq.n	8021390 <HAL_RCC_GetSysClockFreq+0xac>
 8021388:	e005      	b.n	8021396 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 802138a:	4b1a      	ldr	r3, [pc, #104]	@ (80213f4 <HAL_RCC_GetSysClockFreq+0x110>)
 802138c:	617b      	str	r3, [r7, #20]
      break;
 802138e:	e005      	b.n	802139c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8021390:	4b19      	ldr	r3, [pc, #100]	@ (80213f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8021392:	617b      	str	r3, [r7, #20]
      break;
 8021394:	e002      	b.n	802139c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8021396:	69fb      	ldr	r3, [r7, #28]
 8021398:	617b      	str	r3, [r7, #20]
      break;
 802139a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802139c:	4b13      	ldr	r3, [pc, #76]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 802139e:	68db      	ldr	r3, [r3, #12]
 80213a0:	091b      	lsrs	r3, r3, #4
 80213a2:	f003 030f 	and.w	r3, r3, #15
 80213a6:	3301      	adds	r3, #1
 80213a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80213aa:	4b10      	ldr	r3, [pc, #64]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 80213ac:	68db      	ldr	r3, [r3, #12]
 80213ae:	0a1b      	lsrs	r3, r3, #8
 80213b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80213b4:	697a      	ldr	r2, [r7, #20]
 80213b6:	fb03 f202 	mul.w	r2, r3, r2
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80213c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80213c2:	4b0a      	ldr	r3, [pc, #40]	@ (80213ec <HAL_RCC_GetSysClockFreq+0x108>)
 80213c4:	68db      	ldr	r3, [r3, #12]
 80213c6:	0e5b      	lsrs	r3, r3, #25
 80213c8:	f003 0303 	and.w	r3, r3, #3
 80213cc:	3301      	adds	r3, #1
 80213ce:	005b      	lsls	r3, r3, #1
 80213d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80213d2:	697a      	ldr	r2, [r7, #20]
 80213d4:	683b      	ldr	r3, [r7, #0]
 80213d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80213da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80213dc:	69bb      	ldr	r3, [r7, #24]
}
 80213de:	4618      	mov	r0, r3
 80213e0:	3724      	adds	r7, #36	@ 0x24
 80213e2:	46bd      	mov	sp, r7
 80213e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213e8:	4770      	bx	lr
 80213ea:	bf00      	nop
 80213ec:	40021000 	.word	0x40021000
 80213f0:	08021798 	.word	0x08021798
 80213f4:	00f42400 	.word	0x00f42400
 80213f8:	007a1200 	.word	0x007a1200

080213fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80213fc:	b580      	push	{r7, lr}
 80213fe:	b086      	sub	sp, #24
 8021400:	af00      	add	r7, sp, #0
 8021402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8021404:	2300      	movs	r3, #0
 8021406:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021408:	4b27      	ldr	r3, [pc, #156]	@ (80214a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802140a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021410:	2b00      	cmp	r3, #0
 8021412:	d003      	beq.n	802141c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8021414:	f7ff f94e 	bl	80206b4 <HAL_PWREx_GetVoltageRange>
 8021418:	6178      	str	r0, [r7, #20]
 802141a:	e014      	b.n	8021446 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 802141c:	4b22      	ldr	r3, [pc, #136]	@ (80214a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021420:	4a21      	ldr	r2, [pc, #132]	@ (80214a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021426:	6593      	str	r3, [r2, #88]	@ 0x58
 8021428:	4b1f      	ldr	r3, [pc, #124]	@ (80214a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802142a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802142c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021430:	60fb      	str	r3, [r7, #12]
 8021432:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8021434:	f7ff f93e 	bl	80206b4 <HAL_PWREx_GetVoltageRange>
 8021438:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 802143a:	4b1b      	ldr	r3, [pc, #108]	@ (80214a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802143e:	4a1a      	ldr	r2, [pc, #104]	@ (80214a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021444:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021446:	697b      	ldr	r3, [r7, #20]
 8021448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802144c:	d10b      	bne.n	8021466 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 802144e:	687b      	ldr	r3, [r7, #4]
 8021450:	2b80      	cmp	r3, #128	@ 0x80
 8021452:	d913      	bls.n	802147c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	2ba0      	cmp	r3, #160	@ 0xa0
 8021458:	d902      	bls.n	8021460 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 802145a:	2302      	movs	r3, #2
 802145c:	613b      	str	r3, [r7, #16]
 802145e:	e00d      	b.n	802147c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021460:	2301      	movs	r3, #1
 8021462:	613b      	str	r3, [r7, #16]
 8021464:	e00a      	b.n	802147c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	2b7f      	cmp	r3, #127	@ 0x7f
 802146a:	d902      	bls.n	8021472 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 802146c:	2302      	movs	r3, #2
 802146e:	613b      	str	r3, [r7, #16]
 8021470:	e004      	b.n	802147c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	2b70      	cmp	r3, #112	@ 0x70
 8021476:	d101      	bne.n	802147c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021478:	2301      	movs	r3, #1
 802147a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 802147c:	4b0b      	ldr	r3, [pc, #44]	@ (80214ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	f023 020f 	bic.w	r2, r3, #15
 8021484:	4909      	ldr	r1, [pc, #36]	@ (80214ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8021486:	693b      	ldr	r3, [r7, #16]
 8021488:	4313      	orrs	r3, r2
 802148a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 802148c:	4b07      	ldr	r3, [pc, #28]	@ (80214ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802148e:	681b      	ldr	r3, [r3, #0]
 8021490:	f003 030f 	and.w	r3, r3, #15
 8021494:	693a      	ldr	r2, [r7, #16]
 8021496:	429a      	cmp	r2, r3
 8021498:	d001      	beq.n	802149e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 802149a:	2301      	movs	r3, #1
 802149c:	e000      	b.n	80214a0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 802149e:	2300      	movs	r3, #0
}
 80214a0:	4618      	mov	r0, r3
 80214a2:	3718      	adds	r7, #24
 80214a4:	46bd      	mov	sp, r7
 80214a6:	bd80      	pop	{r7, pc}
 80214a8:	40021000 	.word	0x40021000
 80214ac:	40022000 	.word	0x40022000

080214b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80214b0:	b480      	push	{r7}
 80214b2:	b087      	sub	sp, #28
 80214b4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80214b6:	4b2d      	ldr	r3, [pc, #180]	@ (802156c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80214b8:	68db      	ldr	r3, [r3, #12]
 80214ba:	f003 0303 	and.w	r3, r3, #3
 80214be:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80214c0:	68fb      	ldr	r3, [r7, #12]
 80214c2:	2b03      	cmp	r3, #3
 80214c4:	d00b      	beq.n	80214de <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80214c6:	68fb      	ldr	r3, [r7, #12]
 80214c8:	2b03      	cmp	r3, #3
 80214ca:	d825      	bhi.n	8021518 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80214cc:	68fb      	ldr	r3, [r7, #12]
 80214ce:	2b01      	cmp	r3, #1
 80214d0:	d008      	beq.n	80214e4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80214d2:	68fb      	ldr	r3, [r7, #12]
 80214d4:	2b02      	cmp	r3, #2
 80214d6:	d11f      	bne.n	8021518 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80214d8:	4b25      	ldr	r3, [pc, #148]	@ (8021570 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80214da:	613b      	str	r3, [r7, #16]
    break;
 80214dc:	e01f      	b.n	802151e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80214de:	4b25      	ldr	r3, [pc, #148]	@ (8021574 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80214e0:	613b      	str	r3, [r7, #16]
    break;
 80214e2:	e01c      	b.n	802151e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80214e4:	4b21      	ldr	r3, [pc, #132]	@ (802156c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80214e6:	681b      	ldr	r3, [r3, #0]
 80214e8:	f003 0308 	and.w	r3, r3, #8
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	d107      	bne.n	8021500 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80214f0:	4b1e      	ldr	r3, [pc, #120]	@ (802156c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80214f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80214f6:	0a1b      	lsrs	r3, r3, #8
 80214f8:	f003 030f 	and.w	r3, r3, #15
 80214fc:	617b      	str	r3, [r7, #20]
 80214fe:	e005      	b.n	802150c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021500:	4b1a      	ldr	r3, [pc, #104]	@ (802156c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021502:	681b      	ldr	r3, [r3, #0]
 8021504:	091b      	lsrs	r3, r3, #4
 8021506:	f003 030f 	and.w	r3, r3, #15
 802150a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 802150c:	4a1a      	ldr	r2, [pc, #104]	@ (8021578 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 802150e:	697b      	ldr	r3, [r7, #20]
 8021510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021514:	613b      	str	r3, [r7, #16]
    break;
 8021516:	e002      	b.n	802151e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8021518:	2300      	movs	r3, #0
 802151a:	613b      	str	r3, [r7, #16]
    break;
 802151c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802151e:	4b13      	ldr	r3, [pc, #76]	@ (802156c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021520:	68db      	ldr	r3, [r3, #12]
 8021522:	091b      	lsrs	r3, r3, #4
 8021524:	f003 030f 	and.w	r3, r3, #15
 8021528:	3301      	adds	r3, #1
 802152a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 802152c:	4b0f      	ldr	r3, [pc, #60]	@ (802156c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802152e:	68db      	ldr	r3, [r3, #12]
 8021530:	0a1b      	lsrs	r3, r3, #8
 8021532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021536:	693a      	ldr	r2, [r7, #16]
 8021538:	fb03 f202 	mul.w	r2, r3, r2
 802153c:	68bb      	ldr	r3, [r7, #8]
 802153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021542:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021544:	4b09      	ldr	r3, [pc, #36]	@ (802156c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021546:	68db      	ldr	r3, [r3, #12]
 8021548:	0e5b      	lsrs	r3, r3, #25
 802154a:	f003 0303 	and.w	r3, r3, #3
 802154e:	3301      	adds	r3, #1
 8021550:	005b      	lsls	r3, r3, #1
 8021552:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8021554:	693a      	ldr	r2, [r7, #16]
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	fbb2 f3f3 	udiv	r3, r2, r3
 802155c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 802155e:	683b      	ldr	r3, [r7, #0]
}
 8021560:	4618      	mov	r0, r3
 8021562:	371c      	adds	r7, #28
 8021564:	46bd      	mov	sp, r7
 8021566:	f85d 7b04 	ldr.w	r7, [sp], #4
 802156a:	4770      	bx	lr
 802156c:	40021000 	.word	0x40021000
 8021570:	00f42400 	.word	0x00f42400
 8021574:	007a1200 	.word	0x007a1200
 8021578:	08021798 	.word	0x08021798

0802157c <malloc>:
 802157c:	4b02      	ldr	r3, [pc, #8]	@ (8021588 <malloc+0xc>)
 802157e:	4601      	mov	r1, r0
 8021580:	6818      	ldr	r0, [r3, #0]
 8021582:	f000 b825 	b.w	80215d0 <_malloc_r>
 8021586:	bf00      	nop
 8021588:	2000000c 	.word	0x2000000c

0802158c <sbrk_aligned>:
 802158c:	b570      	push	{r4, r5, r6, lr}
 802158e:	4e0f      	ldr	r6, [pc, #60]	@ (80215cc <sbrk_aligned+0x40>)
 8021590:	460c      	mov	r4, r1
 8021592:	6831      	ldr	r1, [r6, #0]
 8021594:	4605      	mov	r5, r0
 8021596:	b911      	cbnz	r1, 802159e <sbrk_aligned+0x12>
 8021598:	f000 f8ae 	bl	80216f8 <_sbrk_r>
 802159c:	6030      	str	r0, [r6, #0]
 802159e:	4621      	mov	r1, r4
 80215a0:	4628      	mov	r0, r5
 80215a2:	f000 f8a9 	bl	80216f8 <_sbrk_r>
 80215a6:	1c43      	adds	r3, r0, #1
 80215a8:	d103      	bne.n	80215b2 <sbrk_aligned+0x26>
 80215aa:	f04f 34ff 	mov.w	r4, #4294967295
 80215ae:	4620      	mov	r0, r4
 80215b0:	bd70      	pop	{r4, r5, r6, pc}
 80215b2:	1cc4      	adds	r4, r0, #3
 80215b4:	f024 0403 	bic.w	r4, r4, #3
 80215b8:	42a0      	cmp	r0, r4
 80215ba:	d0f8      	beq.n	80215ae <sbrk_aligned+0x22>
 80215bc:	1a21      	subs	r1, r4, r0
 80215be:	4628      	mov	r0, r5
 80215c0:	f000 f89a 	bl	80216f8 <_sbrk_r>
 80215c4:	3001      	adds	r0, #1
 80215c6:	d1f2      	bne.n	80215ae <sbrk_aligned+0x22>
 80215c8:	e7ef      	b.n	80215aa <sbrk_aligned+0x1e>
 80215ca:	bf00      	nop
 80215cc:	20000080 	.word	0x20000080

080215d0 <_malloc_r>:
 80215d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80215d4:	1ccd      	adds	r5, r1, #3
 80215d6:	f025 0503 	bic.w	r5, r5, #3
 80215da:	3508      	adds	r5, #8
 80215dc:	2d0c      	cmp	r5, #12
 80215de:	bf38      	it	cc
 80215e0:	250c      	movcc	r5, #12
 80215e2:	2d00      	cmp	r5, #0
 80215e4:	4606      	mov	r6, r0
 80215e6:	db01      	blt.n	80215ec <_malloc_r+0x1c>
 80215e8:	42a9      	cmp	r1, r5
 80215ea:	d904      	bls.n	80215f6 <_malloc_r+0x26>
 80215ec:	230c      	movs	r3, #12
 80215ee:	6033      	str	r3, [r6, #0]
 80215f0:	2000      	movs	r0, #0
 80215f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80216cc <_malloc_r+0xfc>
 80215fa:	f000 f869 	bl	80216d0 <__malloc_lock>
 80215fe:	f8d8 3000 	ldr.w	r3, [r8]
 8021602:	461c      	mov	r4, r3
 8021604:	bb44      	cbnz	r4, 8021658 <_malloc_r+0x88>
 8021606:	4629      	mov	r1, r5
 8021608:	4630      	mov	r0, r6
 802160a:	f7ff ffbf 	bl	802158c <sbrk_aligned>
 802160e:	1c43      	adds	r3, r0, #1
 8021610:	4604      	mov	r4, r0
 8021612:	d158      	bne.n	80216c6 <_malloc_r+0xf6>
 8021614:	f8d8 4000 	ldr.w	r4, [r8]
 8021618:	4627      	mov	r7, r4
 802161a:	2f00      	cmp	r7, #0
 802161c:	d143      	bne.n	80216a6 <_malloc_r+0xd6>
 802161e:	2c00      	cmp	r4, #0
 8021620:	d04b      	beq.n	80216ba <_malloc_r+0xea>
 8021622:	6823      	ldr	r3, [r4, #0]
 8021624:	4639      	mov	r1, r7
 8021626:	4630      	mov	r0, r6
 8021628:	eb04 0903 	add.w	r9, r4, r3
 802162c:	f000 f864 	bl	80216f8 <_sbrk_r>
 8021630:	4581      	cmp	r9, r0
 8021632:	d142      	bne.n	80216ba <_malloc_r+0xea>
 8021634:	6821      	ldr	r1, [r4, #0]
 8021636:	1a6d      	subs	r5, r5, r1
 8021638:	4629      	mov	r1, r5
 802163a:	4630      	mov	r0, r6
 802163c:	f7ff ffa6 	bl	802158c <sbrk_aligned>
 8021640:	3001      	adds	r0, #1
 8021642:	d03a      	beq.n	80216ba <_malloc_r+0xea>
 8021644:	6823      	ldr	r3, [r4, #0]
 8021646:	442b      	add	r3, r5
 8021648:	6023      	str	r3, [r4, #0]
 802164a:	f8d8 3000 	ldr.w	r3, [r8]
 802164e:	685a      	ldr	r2, [r3, #4]
 8021650:	bb62      	cbnz	r2, 80216ac <_malloc_r+0xdc>
 8021652:	f8c8 7000 	str.w	r7, [r8]
 8021656:	e00f      	b.n	8021678 <_malloc_r+0xa8>
 8021658:	6822      	ldr	r2, [r4, #0]
 802165a:	1b52      	subs	r2, r2, r5
 802165c:	d420      	bmi.n	80216a0 <_malloc_r+0xd0>
 802165e:	2a0b      	cmp	r2, #11
 8021660:	d917      	bls.n	8021692 <_malloc_r+0xc2>
 8021662:	1961      	adds	r1, r4, r5
 8021664:	42a3      	cmp	r3, r4
 8021666:	6025      	str	r5, [r4, #0]
 8021668:	bf18      	it	ne
 802166a:	6059      	strne	r1, [r3, #4]
 802166c:	6863      	ldr	r3, [r4, #4]
 802166e:	bf08      	it	eq
 8021670:	f8c8 1000 	streq.w	r1, [r8]
 8021674:	5162      	str	r2, [r4, r5]
 8021676:	604b      	str	r3, [r1, #4]
 8021678:	4630      	mov	r0, r6
 802167a:	f000 f82f 	bl	80216dc <__malloc_unlock>
 802167e:	f104 000b 	add.w	r0, r4, #11
 8021682:	1d23      	adds	r3, r4, #4
 8021684:	f020 0007 	bic.w	r0, r0, #7
 8021688:	1ac2      	subs	r2, r0, r3
 802168a:	bf1c      	itt	ne
 802168c:	1a1b      	subne	r3, r3, r0
 802168e:	50a3      	strne	r3, [r4, r2]
 8021690:	e7af      	b.n	80215f2 <_malloc_r+0x22>
 8021692:	6862      	ldr	r2, [r4, #4]
 8021694:	42a3      	cmp	r3, r4
 8021696:	bf0c      	ite	eq
 8021698:	f8c8 2000 	streq.w	r2, [r8]
 802169c:	605a      	strne	r2, [r3, #4]
 802169e:	e7eb      	b.n	8021678 <_malloc_r+0xa8>
 80216a0:	4623      	mov	r3, r4
 80216a2:	6864      	ldr	r4, [r4, #4]
 80216a4:	e7ae      	b.n	8021604 <_malloc_r+0x34>
 80216a6:	463c      	mov	r4, r7
 80216a8:	687f      	ldr	r7, [r7, #4]
 80216aa:	e7b6      	b.n	802161a <_malloc_r+0x4a>
 80216ac:	461a      	mov	r2, r3
 80216ae:	685b      	ldr	r3, [r3, #4]
 80216b0:	42a3      	cmp	r3, r4
 80216b2:	d1fb      	bne.n	80216ac <_malloc_r+0xdc>
 80216b4:	2300      	movs	r3, #0
 80216b6:	6053      	str	r3, [r2, #4]
 80216b8:	e7de      	b.n	8021678 <_malloc_r+0xa8>
 80216ba:	230c      	movs	r3, #12
 80216bc:	6033      	str	r3, [r6, #0]
 80216be:	4630      	mov	r0, r6
 80216c0:	f000 f80c 	bl	80216dc <__malloc_unlock>
 80216c4:	e794      	b.n	80215f0 <_malloc_r+0x20>
 80216c6:	6005      	str	r5, [r0, #0]
 80216c8:	e7d6      	b.n	8021678 <_malloc_r+0xa8>
 80216ca:	bf00      	nop
 80216cc:	20000084 	.word	0x20000084

080216d0 <__malloc_lock>:
 80216d0:	4801      	ldr	r0, [pc, #4]	@ (80216d8 <__malloc_lock+0x8>)
 80216d2:	f000 b84b 	b.w	802176c <__retarget_lock_acquire_recursive>
 80216d6:	bf00      	nop
 80216d8:	200001c4 	.word	0x200001c4

080216dc <__malloc_unlock>:
 80216dc:	4801      	ldr	r0, [pc, #4]	@ (80216e4 <__malloc_unlock+0x8>)
 80216de:	f000 b846 	b.w	802176e <__retarget_lock_release_recursive>
 80216e2:	bf00      	nop
 80216e4:	200001c4 	.word	0x200001c4

080216e8 <memset>:
 80216e8:	4402      	add	r2, r0
 80216ea:	4603      	mov	r3, r0
 80216ec:	4293      	cmp	r3, r2
 80216ee:	d100      	bne.n	80216f2 <memset+0xa>
 80216f0:	4770      	bx	lr
 80216f2:	f803 1b01 	strb.w	r1, [r3], #1
 80216f6:	e7f9      	b.n	80216ec <memset+0x4>

080216f8 <_sbrk_r>:
 80216f8:	b538      	push	{r3, r4, r5, lr}
 80216fa:	4d06      	ldr	r5, [pc, #24]	@ (8021714 <_sbrk_r+0x1c>)
 80216fc:	2300      	movs	r3, #0
 80216fe:	4604      	mov	r4, r0
 8021700:	4608      	mov	r0, r1
 8021702:	602b      	str	r3, [r5, #0]
 8021704:	f7fe fe0a 	bl	802031c <_sbrk>
 8021708:	1c43      	adds	r3, r0, #1
 802170a:	d102      	bne.n	8021712 <_sbrk_r+0x1a>
 802170c:	682b      	ldr	r3, [r5, #0]
 802170e:	b103      	cbz	r3, 8021712 <_sbrk_r+0x1a>
 8021710:	6023      	str	r3, [r4, #0]
 8021712:	bd38      	pop	{r3, r4, r5, pc}
 8021714:	200001c0 	.word	0x200001c0

08021718 <__errno>:
 8021718:	4b01      	ldr	r3, [pc, #4]	@ (8021720 <__errno+0x8>)
 802171a:	6818      	ldr	r0, [r3, #0]
 802171c:	4770      	bx	lr
 802171e:	bf00      	nop
 8021720:	2000000c 	.word	0x2000000c

08021724 <__libc_init_array>:
 8021724:	b570      	push	{r4, r5, r6, lr}
 8021726:	4d0d      	ldr	r5, [pc, #52]	@ (802175c <__libc_init_array+0x38>)
 8021728:	4c0d      	ldr	r4, [pc, #52]	@ (8021760 <__libc_init_array+0x3c>)
 802172a:	1b64      	subs	r4, r4, r5
 802172c:	10a4      	asrs	r4, r4, #2
 802172e:	2600      	movs	r6, #0
 8021730:	42a6      	cmp	r6, r4
 8021732:	d109      	bne.n	8021748 <__libc_init_array+0x24>
 8021734:	4d0b      	ldr	r5, [pc, #44]	@ (8021764 <__libc_init_array+0x40>)
 8021736:	4c0c      	ldr	r4, [pc, #48]	@ (8021768 <__libc_init_array+0x44>)
 8021738:	f000 f81a 	bl	8021770 <_init>
 802173c:	1b64      	subs	r4, r4, r5
 802173e:	10a4      	asrs	r4, r4, #2
 8021740:	2600      	movs	r6, #0
 8021742:	42a6      	cmp	r6, r4
 8021744:	d105      	bne.n	8021752 <__libc_init_array+0x2e>
 8021746:	bd70      	pop	{r4, r5, r6, pc}
 8021748:	f855 3b04 	ldr.w	r3, [r5], #4
 802174c:	4798      	blx	r3
 802174e:	3601      	adds	r6, #1
 8021750:	e7ee      	b.n	8021730 <__libc_init_array+0xc>
 8021752:	f855 3b04 	ldr.w	r3, [r5], #4
 8021756:	4798      	blx	r3
 8021758:	3601      	adds	r6, #1
 802175a:	e7f2      	b.n	8021742 <__libc_init_array+0x1e>
 802175c:	080217c8 	.word	0x080217c8
 8021760:	080217c8 	.word	0x080217c8
 8021764:	080217c8 	.word	0x080217c8
 8021768:	080217cc 	.word	0x080217cc

0802176c <__retarget_lock_acquire_recursive>:
 802176c:	4770      	bx	lr

0802176e <__retarget_lock_release_recursive>:
 802176e:	4770      	bx	lr

08021770 <_init>:
 8021770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021772:	bf00      	nop
 8021774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021776:	bc08      	pop	{r3}
 8021778:	469e      	mov	lr, r3
 802177a:	4770      	bx	lr

0802177c <_fini>:
 802177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802177e:	bf00      	nop
 8021780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021782:	bc08      	pop	{r3}
 8021784:	469e      	mov	lr, r3
 8021786:	4770      	bx	lr
