
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b44  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08023b44  08023b44  00023b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023d50  08023d50  00024068  2**0
                  CONTENTS
  4 .ARM          00000008  08023d50  08023d50  00023d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023d58  08023d58  00024068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023d58  08023d58  00023d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023d5c  08023d5c  00023d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08023d60  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08023dc8  00024068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08023dc8  000241d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024068  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000928a  00000000  00000000  00024098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000072  00000000  00000000  0002d322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000b0b3  00000000  00000000  0002d394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000246c  00000000  00000000  00038447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007a8  00000000  00000000  0003a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fbf13  00000000  00000000  0003b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000004b8  00000000  00000000  00136f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028068  00000000  00000000  0013742b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  0015f493  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021e0  00000000  00000000  0015f54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000035f2  00000000  00000000  0016172c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000098  00000000  00000000  00164d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000068 	.word	0x20000068
 801001c:	00000000 	.word	0x00000000
 8010020:	08023b2c 	.word	0x08023b2c

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	2000006c 	.word	0x2000006c
 801003c:	08023b2c 	.word	0x08023b2c
	...

08020000 <kalman>:
* S0 = current measurement value
*/

kalman:
	//self->p = self->p + self->q:
	VLDR.f32 S1, [R0] //store self->p in floating point register S1
 8020000:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32 S2, [R0, #4] //store self->q in floating point register S2
 8020004:	ed90 1a01 	vldr	s2, [r0, #4]
	VADD.f32 S1, S1, S2 //self->p = self->p + self->q
 8020008:	ee70 0a81 	vadd.f32	s1, s1, s2

	//self->k = self->p / (self->p + self->r):
	VLDR.f32 S3, [R0, #8] //store self->r in floating point register S3
 802000c:	edd0 1a02 	vldr	s3, [r0, #8]
	VADD.f32 S10, S1, S3 //do (self->p + self->r) and store result in S10
 8020010:	ee30 5aa1 	vadd.f32	s10, s1, s3
	VDIV.f32 S4, S1, S10 //self->k = self->p / (self->p + self->r) with S4 storing self->k value
 8020014:	ee80 2a85 	vdiv.f32	s4, s1, s10
	VSTR.f32 S4, [R0, #16] //store self->k value in state variable
 8020018:	ed80 2a04 	vstr	s4, [r0, #16]

	//self->x = self->x + self->k*(measurement - self->x)
	VLDR.f32 S5, [R0, #12] //store self->x in floating point register S5
 802001c:	edd0 2a03 	vldr	s5, [r0, #12]
	VSUB.f32 S10, S0, S5 //do (measurement - self->x) and store result in S10
 8020020:	ee30 5a62 	vsub.f32	s10, s0, s5
	VMUL.f32 S10, S4, S10 //do self->k*(measurement - self->x) and store result in S10
 8020024:	ee22 5a05 	vmul.f32	s10, s4, s10
	VADD.f32 S5, S5, S10 //self->x = self->x + self->k*(measurement - self->x)
 8020028:	ee72 2a85 	vadd.f32	s5, s5, s10
	VSTR.f32 S5, [R0, #12] //store self->x value in state variable
 802002c:	edc0 2a03 	vstr	s5, [r0, #12]

	//self->p = (1 - self->k)*self->p
	//MOV R1, #0x3F800000 //hexadecimal representation of 1.0
	VMOV S9, #1.0 //store value of 1.0 in floating point register
 8020030:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
	VSUB.f32 S10, S9, S4 //do (1-self->k) and store result in S10
 8020034:	ee34 5ac2 	vsub.f32	s10, s9, s4
	VMUL.f32 S1, S10, S1 //S1 stores self->p value; do self->p=(1-self->k)*self->p
 8020038:	ee65 0a20 	vmul.f32	s1, s10, s1
	VSTR.f32 S1, [R0] //store self->p back in state variable
 802003c:	edc0 0a00 	vstr	s1, [r0]

	//check the FPSCR for errors
	VMRS R1, FPSCR //move the contents of FPSCR to R1
 8020040:	eef1 1a10 	vmrs	r1, fpscr
	TST R1, #8 //test if the overflow flag (bit 3) is set
 8020044:	f011 0f08 	tst.w	r1, #8
	BNE handle_error //branch if overflow occured
 8020048:	d10b      	bne.n	8020062 <handle_error>

	TST R1, #4 //test if the underflow flag (bit 2) is set
 802004a:	f011 0f04 	tst.w	r1, #4
    BNE handle_error //branch if underflow occured
 802004e:	d108      	bne.n	8020062 <handle_error>

    TST R1, #2 //test if the divide by zero flag (bit 1) is set
 8020050:	f011 0f02 	tst.w	r1, #2
    BNE handle_error //branch if divide by zero occured
 8020054:	d105      	bne.n	8020062 <handle_error>

    TST R1, #1 //test if the invalid operation flag (bit 0) is set
 8020056:	f011 0f01 	tst.w	r1, #1
    BNE handle_error //branch if invalid operation occured
 802005a:	d102      	bne.n	8020062 <handle_error>

	//return self->x
	VMOV S0, S5 //move self->x to S0
 802005c:	eeb0 0a62 	vmov.f32	s0, s5
	BX LR //return
 8020060:	4770      	bx	lr

08020062 <handle_error>:

handle_error:
	VMOV S0, #-1.0 //move value of -1.0 to register that will store the value to be returned
 8020062:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
	POP {R1}
 8020066:	bc02      	pop	{r1}
	BX LR //return
 8020068:	4770      	bx	lr
 802006a:	bf00      	nop
 802006c:	0000      	movs	r0, r0
	...

08020070 <memchr>:
 8020070:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020074:	2a10      	cmp	r2, #16
 8020076:	db2b      	blt.n	80200d0 <memchr+0x60>
 8020078:	f010 0f07 	tst.w	r0, #7
 802007c:	d008      	beq.n	8020090 <memchr+0x20>
 802007e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020082:	3a01      	subs	r2, #1
 8020084:	428b      	cmp	r3, r1
 8020086:	d02d      	beq.n	80200e4 <memchr+0x74>
 8020088:	f010 0f07 	tst.w	r0, #7
 802008c:	b342      	cbz	r2, 80200e0 <memchr+0x70>
 802008e:	d1f6      	bne.n	802007e <memchr+0xe>
 8020090:	b4f0      	push	{r4, r5, r6, r7}
 8020092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802009a:	f022 0407 	bic.w	r4, r2, #7
 802009e:	f07f 0700 	mvns.w	r7, #0
 80200a2:	2300      	movs	r3, #0
 80200a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80200a8:	3c08      	subs	r4, #8
 80200aa:	ea85 0501 	eor.w	r5, r5, r1
 80200ae:	ea86 0601 	eor.w	r6, r6, r1
 80200b2:	fa85 f547 	uadd8	r5, r5, r7
 80200b6:	faa3 f587 	sel	r5, r3, r7
 80200ba:	fa86 f647 	uadd8	r6, r6, r7
 80200be:	faa5 f687 	sel	r6, r5, r7
 80200c2:	b98e      	cbnz	r6, 80200e8 <memchr+0x78>
 80200c4:	d1ee      	bne.n	80200a4 <memchr+0x34>
 80200c6:	bcf0      	pop	{r4, r5, r6, r7}
 80200c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80200cc:	f002 0207 	and.w	r2, r2, #7
 80200d0:	b132      	cbz	r2, 80200e0 <memchr+0x70>
 80200d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200d6:	3a01      	subs	r2, #1
 80200d8:	ea83 0301 	eor.w	r3, r3, r1
 80200dc:	b113      	cbz	r3, 80200e4 <memchr+0x74>
 80200de:	d1f8      	bne.n	80200d2 <memchr+0x62>
 80200e0:	2000      	movs	r0, #0
 80200e2:	4770      	bx	lr
 80200e4:	3801      	subs	r0, #1
 80200e6:	4770      	bx	lr
 80200e8:	2d00      	cmp	r5, #0
 80200ea:	bf06      	itte	eq
 80200ec:	4635      	moveq	r5, r6
 80200ee:	3803      	subeq	r0, #3
 80200f0:	3807      	subne	r0, #7
 80200f2:	f015 0f01 	tst.w	r5, #1
 80200f6:	d107      	bne.n	8020108 <memchr+0x98>
 80200f8:	3001      	adds	r0, #1
 80200fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80200fe:	bf02      	ittt	eq
 8020100:	3001      	addeq	r0, #1
 8020102:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020106:	3001      	addeq	r0, #1
 8020108:	bcf0      	pop	{r4, r5, r6, r7}
 802010a:	3801      	subs	r0, #1
 802010c:	4770      	bx	lr
 802010e:	bf00      	nop

08020110 <KalmanFilter_init>:
#include <KalmanFilter_C.h>

void KalmanFilter_init(kalman_state *kf, float q, float r, float p, float initial_value) {
 8020110:	b480      	push	{r7}
 8020112:	b087      	sub	sp, #28
 8020114:	af00      	add	r7, sp, #0
 8020116:	6178      	str	r0, [r7, #20]
 8020118:	ed87 0a04 	vstr	s0, [r7, #16]
 802011c:	edc7 0a03 	vstr	s1, [r7, #12]
 8020120:	ed87 1a02 	vstr	s2, [r7, #8]
 8020124:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->q = q;
 8020128:	697b      	ldr	r3, [r7, #20]
 802012a:	693a      	ldr	r2, [r7, #16]
 802012c:	605a      	str	r2, [r3, #4]
    kf->r = r;
 802012e:	697b      	ldr	r3, [r7, #20]
 8020130:	68fa      	ldr	r2, [r7, #12]
 8020132:	609a      	str	r2, [r3, #8]
    kf->p = p;
 8020134:	697b      	ldr	r3, [r7, #20]
 8020136:	68ba      	ldr	r2, [r7, #8]
 8020138:	601a      	str	r2, [r3, #0]
    kf->x = initial_value;
 802013a:	697b      	ldr	r3, [r7, #20]
 802013c:	687a      	ldr	r2, [r7, #4]
 802013e:	60da      	str	r2, [r3, #12]
    kf->k = 0.0;
 8020140:	697b      	ldr	r3, [r7, #20]
 8020142:	f04f 0200 	mov.w	r2, #0
 8020146:	611a      	str	r2, [r3, #16]
}
 8020148:	bf00      	nop
 802014a:	371c      	adds	r7, #28
 802014c:	46bd      	mov	sp, r7
 802014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020152:	4770      	bx	lr

08020154 <kalmanFilter_C_update>:
//    kf->x = kf->x + kf->k * (measurement - kf->x);
//    kf->p = (1 - kf->k) * kf->p;
//
//    return kf->x;
//}
int kalmanFilter_C_update(float* InputArray, float* OutputArray, int Length, kalman_state* kf){
 8020154:	b480      	push	{r7}
 8020156:	b087      	sub	sp, #28
 8020158:	af00      	add	r7, sp, #0
 802015a:	60f8      	str	r0, [r7, #12]
 802015c:	60b9      	str	r1, [r7, #8]
 802015e:	607a      	str	r2, [r7, #4]
 8020160:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < Length; i++) {
 8020162:	2300      	movs	r3, #0
 8020164:	617b      	str	r3, [r7, #20]
 8020166:	e06d      	b.n	8020244 <kalmanFilter_C_update+0xf0>
		if (InputArray == 0 || OutputArray == 0 || kf == 0) {
 8020168:	68fb      	ldr	r3, [r7, #12]
 802016a:	2b00      	cmp	r3, #0
 802016c:	d005      	beq.n	802017a <kalmanFilter_C_update+0x26>
 802016e:	68bb      	ldr	r3, [r7, #8]
 8020170:	2b00      	cmp	r3, #0
 8020172:	d002      	beq.n	802017a <kalmanFilter_C_update+0x26>
 8020174:	683b      	ldr	r3, [r7, #0]
 8020176:	2b00      	cmp	r3, #0
 8020178:	d102      	bne.n	8020180 <kalmanFilter_C_update+0x2c>
			        return -1;
 802017a:	f04f 33ff 	mov.w	r3, #4294967295
 802017e:	e066      	b.n	802024e <kalmanFilter_C_update+0xfa>
			    }
	        kf->p += kf->q;
 8020180:	683b      	ldr	r3, [r7, #0]
 8020182:	ed93 7a00 	vldr	s14, [r3]
 8020186:	683b      	ldr	r3, [r7, #0]
 8020188:	edd3 7a01 	vldr	s15, [r3, #4]
 802018c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020190:	683b      	ldr	r3, [r7, #0]
 8020192:	edc3 7a00 	vstr	s15, [r3]
	        kf->k = kf->p / (kf->p + kf->r);
 8020196:	683b      	ldr	r3, [r7, #0]
 8020198:	edd3 6a00 	vldr	s13, [r3]
 802019c:	683b      	ldr	r3, [r7, #0]
 802019e:	ed93 7a00 	vldr	s14, [r3]
 80201a2:	683b      	ldr	r3, [r7, #0]
 80201a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80201a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80201ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80201b0:	683b      	ldr	r3, [r7, #0]
 80201b2:	edc3 7a04 	vstr	s15, [r3, #16]
	        //check division by 0
			if (isnan(kf->k)){
 80201b6:	683b      	ldr	r3, [r7, #0]
 80201b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80201bc:	eef4 7a67 	vcmp.f32	s15, s15
 80201c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201c4:	d702      	bvc.n	80201cc <kalmanFilter_C_update+0x78>
				return -2;
 80201c6:	f06f 0301 	mvn.w	r3, #1
 80201ca:	e040      	b.n	802024e <kalmanFilter_C_update+0xfa>
			}
	        kf->x += kf->k * (InputArray[i] - kf->x);
 80201cc:	683b      	ldr	r3, [r7, #0]
 80201ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80201d2:	683b      	ldr	r3, [r7, #0]
 80201d4:	edd3 6a04 	vldr	s13, [r3, #16]
 80201d8:	697b      	ldr	r3, [r7, #20]
 80201da:	009b      	lsls	r3, r3, #2
 80201dc:	68fa      	ldr	r2, [r7, #12]
 80201de:	4413      	add	r3, r2
 80201e0:	ed93 6a00 	vldr	s12, [r3]
 80201e4:	683b      	ldr	r3, [r7, #0]
 80201e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80201ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80201ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80201f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80201f6:	683b      	ldr	r3, [r7, #0]
 80201f8:	edc3 7a03 	vstr	s15, [r3, #12]
	        kf->p *= (1.0f - kf->k);
 80201fc:	683b      	ldr	r3, [r7, #0]
 80201fe:	ed93 7a00 	vldr	s14, [r3]
 8020202:	683b      	ldr	r3, [r7, #0]
 8020204:	edd3 7a04 	vldr	s15, [r3, #16]
 8020208:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802020c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8020210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020214:	683b      	ldr	r3, [r7, #0]
 8020216:	edc3 7a00 	vstr	s15, [r3]
	        //check output
			if (isnan(kf->x)){
 802021a:	683b      	ldr	r3, [r7, #0]
 802021c:	edd3 7a03 	vldr	s15, [r3, #12]
 8020220:	eef4 7a67 	vcmp.f32	s15, s15
 8020224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020228:	d702      	bvc.n	8020230 <kalmanFilter_C_update+0xdc>
				 return -3;
 802022a:	f06f 0302 	mvn.w	r3, #2
 802022e:	e00e      	b.n	802024e <kalmanFilter_C_update+0xfa>
			}
	        OutputArray[i] = kf->x;
 8020230:	697b      	ldr	r3, [r7, #20]
 8020232:	009b      	lsls	r3, r3, #2
 8020234:	68ba      	ldr	r2, [r7, #8]
 8020236:	4413      	add	r3, r2
 8020238:	683a      	ldr	r2, [r7, #0]
 802023a:	68d2      	ldr	r2, [r2, #12]
 802023c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Length; i++) {
 802023e:	697b      	ldr	r3, [r7, #20]
 8020240:	3301      	adds	r3, #1
 8020242:	617b      	str	r3, [r7, #20]
 8020244:	697a      	ldr	r2, [r7, #20]
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	429a      	cmp	r2, r3
 802024a:	db8d      	blt.n	8020168 <kalmanFilter_C_update+0x14>
	    }
	    return 0;
 802024c:	2300      	movs	r3, #0
}
 802024e:	4618      	mov	r0, r3
 8020250:	371c      	adds	r7, #28
 8020252:	46bd      	mov	sp, r7
 8020254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020258:	4770      	bx	lr

0802025a <kalmanFilter_CMSIS_update>:
#include <KalmanFilter_CMSIS.h>
#include "arm_math.h"

int kalmanFilter_CMSIS_update(float* InputArray, float* OutputArray, int Length, kalman_state* kf) {
 802025a:	b580      	push	{r7, lr}
 802025c:	b088      	sub	sp, #32
 802025e:	af00      	add	r7, sp, #0
 8020260:	60f8      	str	r0, [r7, #12]
 8020262:	60b9      	str	r1, [r7, #8]
 8020264:	607a      	str	r2, [r7, #4]
 8020266:	603b      	str	r3, [r7, #0]
	//Null input exception
	if (InputArray == 0 || OutputArray == 0  || kf == 0) {
 8020268:	68fb      	ldr	r3, [r7, #12]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d005      	beq.n	802027a <kalmanFilter_CMSIS_update+0x20>
 802026e:	68bb      	ldr	r3, [r7, #8]
 8020270:	2b00      	cmp	r3, #0
 8020272:	d002      	beq.n	802027a <kalmanFilter_CMSIS_update+0x20>
 8020274:	683b      	ldr	r3, [r7, #0]
 8020276:	2b00      	cmp	r3, #0
 8020278:	d102      	bne.n	8020280 <kalmanFilter_CMSIS_update+0x26>
	        return -1;
 802027a:	f04f 33ff 	mov.w	r3, #4294967295
 802027e:	e078      	b.n	8020372 <kalmanFilter_CMSIS_update+0x118>
	    }
    for (int i = 0; i < Length; i++) {
 8020280:	2300      	movs	r3, #0
 8020282:	61fb      	str	r3, [r7, #28]
 8020284:	e070      	b.n	8020368 <kalmanFilter_CMSIS_update+0x10e>
        arm_add_f32(&kf->p, &kf->q,&kf->p,1);
 8020286:	6838      	ldr	r0, [r7, #0]
 8020288:	683b      	ldr	r3, [r7, #0]
 802028a:	1d19      	adds	r1, r3, #4
 802028c:	683a      	ldr	r2, [r7, #0]
 802028e:	2301      	movs	r3, #1
 8020290:	f002 fc32 	bl	8022af8 <arm_add_f32>
        arm_add_f32(&kf->p, &kf->r,&kf->k,1);
 8020294:	6838      	ldr	r0, [r7, #0]
 8020296:	683b      	ldr	r3, [r7, #0]
 8020298:	f103 0108 	add.w	r1, r3, #8
 802029c:	683b      	ldr	r3, [r7, #0]
 802029e:	f103 0210 	add.w	r2, r3, #16
 80202a2:	2301      	movs	r3, #1
 80202a4:	f002 fc28 	bl	8022af8 <arm_add_f32>

        //check division by 0
        if (kf->k==0){
 80202a8:	683b      	ldr	r3, [r7, #0]
 80202aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80202ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80202b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202b6:	d102      	bne.n	80202be <kalmanFilter_CMSIS_update+0x64>
                	return -2;
 80202b8:	f06f 0301 	mvn.w	r3, #1
 80202bc:	e059      	b.n	8020372 <kalmanFilter_CMSIS_update+0x118>
                }
        kf->k = kf->p/kf->k;
 80202be:	683b      	ldr	r3, [r7, #0]
 80202c0:	edd3 6a00 	vldr	s13, [r3]
 80202c4:	683b      	ldr	r3, [r7, #0]
 80202c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80202ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80202ce:	683b      	ldr	r3, [r7, #0]
 80202d0:	edc3 7a04 	vstr	s15, [r3, #16]


        float32_t temp;
        arm_sub_f32(&InputArray[i], &kf->x, &temp, 1);
 80202d4:	69fb      	ldr	r3, [r7, #28]
 80202d6:	009b      	lsls	r3, r3, #2
 80202d8:	68fa      	ldr	r2, [r7, #12]
 80202da:	18d0      	adds	r0, r2, r3
 80202dc:	683b      	ldr	r3, [r7, #0]
 80202de:	f103 010c 	add.w	r1, r3, #12
 80202e2:	f107 0218 	add.w	r2, r7, #24
 80202e6:	2301      	movs	r3, #1
 80202e8:	f002 fb52 	bl	8022990 <arm_sub_f32>
        arm_mult_f32(&kf->k, &temp, &temp, 1);
 80202ec:	683b      	ldr	r3, [r7, #0]
 80202ee:	f103 0010 	add.w	r0, r3, #16
 80202f2:	f107 0218 	add.w	r2, r7, #24
 80202f6:	f107 0118 	add.w	r1, r7, #24
 80202fa:	2301      	movs	r3, #1
 80202fc:	f002 fba2 	bl	8022a44 <arm_mult_f32>
        arm_add_f32(&kf->x, &temp, &kf->x, 1);
 8020300:	683b      	ldr	r3, [r7, #0]
 8020302:	f103 000c 	add.w	r0, r3, #12
 8020306:	683b      	ldr	r3, [r7, #0]
 8020308:	f103 020c 	add.w	r2, r3, #12
 802030c:	f107 0118 	add.w	r1, r7, #24
 8020310:	2301      	movs	r3, #1
 8020312:	f002 fbf1 	bl	8022af8 <arm_add_f32>
        float one = 1.0;
 8020316:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 802031a:	617b      	str	r3, [r7, #20]
        arm_sub_f32(&one, &kf->k, &temp, 1);
 802031c:	683b      	ldr	r3, [r7, #0]
 802031e:	f103 0110 	add.w	r1, r3, #16
 8020322:	f107 0218 	add.w	r2, r7, #24
 8020326:	f107 0014 	add.w	r0, r7, #20
 802032a:	2301      	movs	r3, #1
 802032c:	f002 fb30 	bl	8022990 <arm_sub_f32>
        arm_mult_f32(&kf->p, &temp, &kf->p, 1);
 8020330:	6838      	ldr	r0, [r7, #0]
 8020332:	683a      	ldr	r2, [r7, #0]
 8020334:	f107 0118 	add.w	r1, r7, #24
 8020338:	2301      	movs	r3, #1
 802033a:	f002 fb83 	bl	8022a44 <arm_mult_f32>
        //check output
        if (isnan(kf->x)){
 802033e:	683b      	ldr	r3, [r7, #0]
 8020340:	edd3 7a03 	vldr	s15, [r3, #12]
 8020344:	eef4 7a67 	vcmp.f32	s15, s15
 8020348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802034c:	d702      	bvc.n	8020354 <kalmanFilter_CMSIS_update+0xfa>
             return -3;
 802034e:	f06f 0302 	mvn.w	r3, #2
 8020352:	e00e      	b.n	8020372 <kalmanFilter_CMSIS_update+0x118>
        }
        OutputArray[i] = kf->x;
 8020354:	69fb      	ldr	r3, [r7, #28]
 8020356:	009b      	lsls	r3, r3, #2
 8020358:	68ba      	ldr	r2, [r7, #8]
 802035a:	4413      	add	r3, r2
 802035c:	683a      	ldr	r2, [r7, #0]
 802035e:	68d2      	ldr	r2, [r2, #12]
 8020360:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < Length; i++) {
 8020362:	69fb      	ldr	r3, [r7, #28]
 8020364:	3301      	adds	r3, #1
 8020366:	61fb      	str	r3, [r7, #28]
 8020368:	69fa      	ldr	r2, [r7, #28]
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	429a      	cmp	r2, r3
 802036e:	db8a      	blt.n	8020286 <kalmanFilter_CMSIS_update+0x2c>
    }
    return 0;
 8020370:	2300      	movs	r3, #0
}
 8020372:	4618      	mov	r0, r3
 8020374:	3720      	adds	r7, #32
 8020376:	46bd      	mov	sp, r7
 8020378:	bd80      	pop	{r7, pc}

0802037a <Processing>:
void Processing(float* InputArray, float* OutputArray, float* diff, float* stdv, float* avg, float* corrl, float* conv, int length){
 802037a:	b580      	push	{r7, lr}
 802037c:	b086      	sub	sp, #24
 802037e:	af02      	add	r7, sp, #8
 8020380:	60f8      	str	r0, [r7, #12]
 8020382:	60b9      	str	r1, [r7, #8]
 8020384:	607a      	str	r2, [r7, #4]
 8020386:	603b      	str	r3, [r7, #0]
	arm_sub_f32(InputArray, OutputArray, diff, length);
 8020388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802038a:	687a      	ldr	r2, [r7, #4]
 802038c:	68b9      	ldr	r1, [r7, #8]
 802038e:	68f8      	ldr	r0, [r7, #12]
 8020390:	f002 fafe 	bl	8022990 <arm_sub_f32>
	arm_abs_f32(diff, diff, length);
 8020394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020396:	461a      	mov	r2, r3
 8020398:	6879      	ldr	r1, [r7, #4]
 802039a:	6878      	ldr	r0, [r7, #4]
 802039c:	f002 fc06 	bl	8022bac <arm_abs_f32>
	arm_mean_f32(diff, length, avg);
 80203a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203a2:	69ba      	ldr	r2, [r7, #24]
 80203a4:	4619      	mov	r1, r3
 80203a6:	6878      	ldr	r0, [r7, #4]
 80203a8:	f001 fd64 	bl	8021e74 <arm_mean_f32>
	arm_std_f32(diff, length, stdv);
 80203ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203ae:	683a      	ldr	r2, [r7, #0]
 80203b0:	4619      	mov	r1, r3
 80203b2:	6878      	ldr	r0, [r7, #4]
 80203b4:	f001 fcd4 	bl	8021d60 <arm_std_f32>
	arm_correlate_f32(InputArray,length,OutputArray, length, corrl);
 80203b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80203ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80203bc:	69fb      	ldr	r3, [r7, #28]
 80203be:	9300      	str	r3, [sp, #0]
 80203c0:	4613      	mov	r3, r2
 80203c2:	68ba      	ldr	r2, [r7, #8]
 80203c4:	68f8      	ldr	r0, [r7, #12]
 80203c6:	f001 fd93 	bl	8021ef0 <arm_correlate_f32>
	arm_conv_f32(InputArray,length,OutputArray, length, conv);
 80203ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80203cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80203ce:	6a3b      	ldr	r3, [r7, #32]
 80203d0:	9300      	str	r3, [sp, #0]
 80203d2:	4613      	mov	r3, r2
 80203d4:	68ba      	ldr	r2, [r7, #8]
 80203d6:	68f8      	ldr	r0, [r7, #12]
 80203d8:	f002 f840 	bl	802245c <arm_conv_f32>
//	arm_mean_f32(Y2,length,&Ey2);
//	float EX2 = Ex * Ex;
//	float EY2 = Ey * Ey;
//	&corrl = (Exy-Ex*Ey)/(sqrt(Ex2-EX2)*sqrt(Ey2-EY2));

}
 80203dc:	bf00      	nop
 80203de:	3710      	adds	r7, #16
 80203e0:	46bd      	mov	sp, r7
 80203e2:	bd80      	pop	{r7, pc}

080203e4 <kalmanFilter_ARM_update>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int kalmanFilter_ARM_update(float* inputArray, float* outputArray, int length, struct kalman_state* kstate){
 80203e4:	b590      	push	{r4, r7, lr}
 80203e6:	b087      	sub	sp, #28
 80203e8:	af00      	add	r7, sp, #0
 80203ea:	60f8      	str	r0, [r7, #12]
 80203ec:	60b9      	str	r1, [r7, #8]
 80203ee:	607a      	str	r2, [r7, #4]
 80203f0:	603b      	str	r3, [r7, #0]
for(int i=0; i<length; i++){
 80203f2:	2300      	movs	r3, #0
 80203f4:	617b      	str	r3, [r7, #20]
 80203f6:	e023      	b.n	8020440 <kalmanFilter_ARM_update+0x5c>
	  outputArray[i] = kalman(kstate, inputArray[i]);
 80203f8:	697b      	ldr	r3, [r7, #20]
 80203fa:	009b      	lsls	r3, r3, #2
 80203fc:	68fa      	ldr	r2, [r7, #12]
 80203fe:	4413      	add	r3, r2
 8020400:	edd3 7a00 	vldr	s15, [r3]
 8020404:	697b      	ldr	r3, [r7, #20]
 8020406:	009b      	lsls	r3, r3, #2
 8020408:	68ba      	ldr	r2, [r7, #8]
 802040a:	18d4      	adds	r4, r2, r3
 802040c:	eeb0 0a67 	vmov.f32	s0, s15
 8020410:	6838      	ldr	r0, [r7, #0]
 8020412:	f7ff fdf5 	bl	8020000 <kalman>
 8020416:	eef0 7a40 	vmov.f32	s15, s0
 802041a:	edc4 7a00 	vstr	s15, [r4]

	  if (isnan(outputArray[i])){
 802041e:	697b      	ldr	r3, [r7, #20]
 8020420:	009b      	lsls	r3, r3, #2
 8020422:	68ba      	ldr	r2, [r7, #8]
 8020424:	4413      	add	r3, r2
 8020426:	edd3 7a00 	vldr	s15, [r3]
 802042a:	eef4 7a67 	vcmp.f32	s15, s15
 802042e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020432:	d702      	bvc.n	802043a <kalmanFilter_ARM_update+0x56>
		  return -1;
 8020434:	f04f 33ff 	mov.w	r3, #4294967295
 8020438:	e007      	b.n	802044a <kalmanFilter_ARM_update+0x66>
for(int i=0; i<length; i++){
 802043a:	697b      	ldr	r3, [r7, #20]
 802043c:	3301      	adds	r3, #1
 802043e:	617b      	str	r3, [r7, #20]
 8020440:	697a      	ldr	r2, [r7, #20]
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	429a      	cmp	r2, r3
 8020446:	dbd7      	blt.n	80203f8 <kalmanFilter_ARM_update+0x14>
	  }
  }
return 0;
 8020448:	2300      	movs	r3, #0
}
 802044a:	4618      	mov	r0, r3
 802044c:	371c      	adds	r7, #28
 802044e:	46bd      	mov	sp, r7
 8020450:	bd90      	pop	{r4, r7, pc}
	...

08020454 <main>:
int main(void)
{
 8020454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020458:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 802045c:	af04      	add	r7, sp, #16
  HAL_Init();
 802045e:	f000 fb9c 	bl	8020b9a <HAL_Init>
  SystemClock_Config();
 8020462:	f000 f9e9 	bl	8020838 <SystemClock_Config>

  //to test results from Table 1 in lab doc:
  float inarray[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 8020466:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 802046a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 802046e:	4ae0      	ldr	r2, [pc, #896]	@ (80207f0 <main+0x39c>)
 8020470:	4618      	mov	r0, r3
 8020472:	4611      	mov	r1, r2
 8020474:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8020478:	461a      	mov	r2, r3
 802047a:	f002 fef4 	bl	8023266 <memcpy>
      9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
      10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991,
      9.5799256668};


  int len = sizeof(inarray) / sizeof(inarray[0]);
 802047e:	2365      	movs	r3, #101	@ 0x65
 8020480:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  //arm prep
  float arm_outarray[len];
 8020484:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8020488:	1e4b      	subs	r3, r1, #1
 802048a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 802048e:	460a      	mov	r2, r1
 8020490:	2300      	movs	r3, #0
 8020492:	4614      	mov	r4, r2
 8020494:	461d      	mov	r5, r3
 8020496:	f04f 0200 	mov.w	r2, #0
 802049a:	f04f 0300 	mov.w	r3, #0
 802049e:	016b      	lsls	r3, r5, #5
 80204a0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80204a4:	0162      	lsls	r2, r4, #5
 80204a6:	460a      	mov	r2, r1
 80204a8:	2300      	movs	r3, #0
 80204aa:	4690      	mov	r8, r2
 80204ac:	4699      	mov	r9, r3
 80204ae:	f04f 0200 	mov.w	r2, #0
 80204b2:	f04f 0300 	mov.w	r3, #0
 80204b6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80204ba:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80204be:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80204c2:	460b      	mov	r3, r1
 80204c4:	009b      	lsls	r3, r3, #2
 80204c6:	3307      	adds	r3, #7
 80204c8:	08db      	lsrs	r3, r3, #3
 80204ca:	00db      	lsls	r3, r3, #3
 80204cc:	ebad 0d03 	sub.w	sp, sp, r3
 80204d0:	ab04      	add	r3, sp, #16
 80204d2:	3303      	adds	r3, #3
 80204d4:	089b      	lsrs	r3, r3, #2
 80204d6:	009b      	lsls	r3, r3, #2
 80204d8:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
  kalman_state *kf = malloc(sizeof(kalman_state));
 80204dc:	2014      	movs	r0, #20
 80204de:	f002 fba9 	bl	8022c34 <malloc>
 80204e2:	4603      	mov	r3, r0
 80204e4:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
  KalmanFilter_init(kf, 0.1, 0.1, 0.1, 5);
 80204e8:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80204ec:	ed9f 1ac1 	vldr	s2, [pc, #772]	@ 80207f4 <main+0x3a0>
 80204f0:	eddf 0ac0 	vldr	s1, [pc, #768]	@ 80207f4 <main+0x3a0>
 80204f4:	ed9f 0abf 	vldr	s0, [pc, #764]	@ 80207f4 <main+0x3a0>
 80204f8:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 80204fc:	f7ff fe08 	bl	8020110 <KalmanFilter_init>
  //C prep
  float outarray[len];
 8020500:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8020504:	1e4b      	subs	r3, r1, #1
 8020506:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 802050a:	460a      	mov	r2, r1
 802050c:	2300      	movs	r3, #0
 802050e:	4692      	mov	sl, r2
 8020510:	469b      	mov	fp, r3
 8020512:	f04f 0200 	mov.w	r2, #0
 8020516:	f04f 0300 	mov.w	r3, #0
 802051a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 802051e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8020522:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8020526:	460a      	mov	r2, r1
 8020528:	2300      	movs	r3, #0
 802052a:	643a      	str	r2, [r7, #64]	@ 0x40
 802052c:	647b      	str	r3, [r7, #68]	@ 0x44
 802052e:	f04f 0200 	mov.w	r2, #0
 8020532:	f04f 0300 	mov.w	r3, #0
 8020536:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 802053a:	4628      	mov	r0, r5
 802053c:	0143      	lsls	r3, r0, #5
 802053e:	4620      	mov	r0, r4
 8020540:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8020544:	4620      	mov	r0, r4
 8020546:	0142      	lsls	r2, r0, #5
 8020548:	460b      	mov	r3, r1
 802054a:	009b      	lsls	r3, r3, #2
 802054c:	3307      	adds	r3, #7
 802054e:	08db      	lsrs	r3, r3, #3
 8020550:	00db      	lsls	r3, r3, #3
 8020552:	ebad 0d03 	sub.w	sp, sp, r3
 8020556:	ab04      	add	r3, sp, #16
 8020558:	3303      	adds	r3, #3
 802055a:	089b      	lsrs	r3, r3, #2
 802055c:	009b      	lsls	r3, r3, #2
 802055e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  kalman_state *kfc = malloc(sizeof(kalman_state));
 8020562:	2014      	movs	r0, #20
 8020564:	f002 fb66 	bl	8022c34 <malloc>
 8020568:	4603      	mov	r3, r0
 802056a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  KalmanFilter_init(kfc, 0.1, 0.1, 0.1, 5);
 802056e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8020572:	ed9f 1aa0 	vldr	s2, [pc, #640]	@ 80207f4 <main+0x3a0>
 8020576:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 80207f4 <main+0x3a0>
 802057a:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 80207f4 <main+0x3a0>
 802057e:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 8020582:	f7ff fdc5 	bl	8020110 <KalmanFilter_init>
  //CMSIS prep
  float CMSISoutarray[len];
 8020586:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 802058a:	1e4b      	subs	r3, r1, #1
 802058c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8020590:	460a      	mov	r2, r1
 8020592:	2300      	movs	r3, #0
 8020594:	63ba      	str	r2, [r7, #56]	@ 0x38
 8020596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020598:	f04f 0200 	mov.w	r2, #0
 802059c:	f04f 0300 	mov.w	r3, #0
 80205a0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80205a4:	4628      	mov	r0, r5
 80205a6:	0143      	lsls	r3, r0, #5
 80205a8:	4620      	mov	r0, r4
 80205aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80205ae:	4620      	mov	r0, r4
 80205b0:	0142      	lsls	r2, r0, #5
 80205b2:	460a      	mov	r2, r1
 80205b4:	2300      	movs	r3, #0
 80205b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80205b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80205ba:	f04f 0200 	mov.w	r2, #0
 80205be:	f04f 0300 	mov.w	r3, #0
 80205c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80205c6:	4628      	mov	r0, r5
 80205c8:	0143      	lsls	r3, r0, #5
 80205ca:	4620      	mov	r0, r4
 80205cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80205d0:	4620      	mov	r0, r4
 80205d2:	0142      	lsls	r2, r0, #5
 80205d4:	460b      	mov	r3, r1
 80205d6:	009b      	lsls	r3, r3, #2
 80205d8:	3307      	adds	r3, #7
 80205da:	08db      	lsrs	r3, r3, #3
 80205dc:	00db      	lsls	r3, r3, #3
 80205de:	ebad 0d03 	sub.w	sp, sp, r3
 80205e2:	ab04      	add	r3, sp, #16
 80205e4:	3303      	adds	r3, #3
 80205e6:	089b      	lsrs	r3, r3, #2
 80205e8:	009b      	lsls	r3, r3, #2
 80205ea:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  kalman_state *CMSISkfc = malloc(sizeof(kalman_state));
 80205ee:	2014      	movs	r0, #20
 80205f0:	f002 fb20 	bl	8022c34 <malloc>
 80205f4:	4603      	mov	r3, r0
 80205f6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  KalmanFilter_init(CMSISkfc, 0.1, 0.1, 0.1, 5);
 80205fa:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80205fe:	ed9f 1a7d 	vldr	s2, [pc, #500]	@ 80207f4 <main+0x3a0>
 8020602:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 80207f4 <main+0x3a0>
 8020606:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 80207f4 <main+0x3a0>
 802060a:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 802060e:	f7ff fd7f 	bl	8020110 <KalmanFilter_init>



  ITM_Port32(31) = 3;
 8020612:	4b79      	ldr	r3, [pc, #484]	@ (80207f8 <main+0x3a4>)
 8020614:	2203      	movs	r2, #3
 8020616:	601a      	str	r2, [r3, #0]
  // arm subroutine test

  ITM_Port32(31) = 1;
 8020618:	4b77      	ldr	r3, [pc, #476]	@ (80207f8 <main+0x3a4>)
 802061a:	2201      	movs	r2, #1
 802061c:	601a      	str	r2, [r3, #0]

  int arm_state = kalmanFilter_ARM_update(inarray,arm_outarray, len,kf);
 802061e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8020622:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8020626:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 802062a:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 802062e:	f7ff fed9 	bl	80203e4 <kalmanFilter_ARM_update>
 8020632:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
  //C Version test

  ITM_Port32(31) = 2;
 8020636:	4b70      	ldr	r3, [pc, #448]	@ (80207f8 <main+0x3a4>)
 8020638:	2202      	movs	r2, #2
 802063a:	601a      	str	r2, [r3, #0]
  int c_state = kalmanFilter_C_update( inarray, outarray,len, kfc);
 802063c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8020640:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8020644:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8020648:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 802064c:	f7ff fd82 	bl	8020154 <kalmanFilter_C_update>
 8020650:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204

  //CMSIS-DSP C version test

  ITM_Port32(31) = 3;
 8020654:	4b68      	ldr	r3, [pc, #416]	@ (80207f8 <main+0x3a4>)
 8020656:	2203      	movs	r2, #3
 8020658:	601a      	str	r2, [r3, #0]
  int CMSIS_state = kalmanFilter_CMSIS_update( inarray, CMSISoutarray,len, CMSISkfc);
 802065a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 802065e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020662:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8020666:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 802066a:	f7ff fdf6 	bl	802025a <kalmanFilter_CMSIS_update>
 802066e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
  ITM_Port32(31) = 4;
 8020672:	4b61      	ldr	r3, [pc, #388]	@ (80207f8 <main+0x3a4>)
 8020674:	2204      	movs	r2, #4
 8020676:	601a      	str	r2, [r3, #0]

  //KalmanFilter_update(kalmanFilterObject, 0);
  float diff[len];
 8020678:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 802067c:	1e4b      	subs	r3, r1, #1
 802067e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8020682:	460a      	mov	r2, r1
 8020684:	2300      	movs	r3, #0
 8020686:	62ba      	str	r2, [r7, #40]	@ 0x28
 8020688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802068a:	f04f 0200 	mov.w	r2, #0
 802068e:	f04f 0300 	mov.w	r3, #0
 8020692:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8020696:	4628      	mov	r0, r5
 8020698:	0143      	lsls	r3, r0, #5
 802069a:	4620      	mov	r0, r4
 802069c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80206a0:	4620      	mov	r0, r4
 80206a2:	0142      	lsls	r2, r0, #5
 80206a4:	460a      	mov	r2, r1
 80206a6:	2300      	movs	r3, #0
 80206a8:	623a      	str	r2, [r7, #32]
 80206aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80206ac:	f04f 0200 	mov.w	r2, #0
 80206b0:	f04f 0300 	mov.w	r3, #0
 80206b4:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80206b8:	4628      	mov	r0, r5
 80206ba:	0143      	lsls	r3, r0, #5
 80206bc:	4620      	mov	r0, r4
 80206be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80206c2:	4620      	mov	r0, r4
 80206c4:	0142      	lsls	r2, r0, #5
 80206c6:	460b      	mov	r3, r1
 80206c8:	009b      	lsls	r3, r3, #2
 80206ca:	3307      	adds	r3, #7
 80206cc:	08db      	lsrs	r3, r3, #3
 80206ce:	00db      	lsls	r3, r3, #3
 80206d0:	ebad 0d03 	sub.w	sp, sp, r3
 80206d4:	ab04      	add	r3, sp, #16
 80206d6:	3303      	adds	r3, #3
 80206d8:	089b      	lsrs	r3, r3, #2
 80206da:	009b      	lsls	r3, r3, #2
 80206dc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  float stdv;
  float avg;
  float corl[2*len-1];
 80206e0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80206e4:	005b      	lsls	r3, r3, #1
 80206e6:	1e59      	subs	r1, r3, #1
 80206e8:	1e4b      	subs	r3, r1, #1
 80206ea:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80206ee:	460a      	mov	r2, r1
 80206f0:	2300      	movs	r3, #0
 80206f2:	61ba      	str	r2, [r7, #24]
 80206f4:	61fb      	str	r3, [r7, #28]
 80206f6:	f04f 0200 	mov.w	r2, #0
 80206fa:	f04f 0300 	mov.w	r3, #0
 80206fe:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8020702:	4628      	mov	r0, r5
 8020704:	0143      	lsls	r3, r0, #5
 8020706:	4620      	mov	r0, r4
 8020708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802070c:	4620      	mov	r0, r4
 802070e:	0142      	lsls	r2, r0, #5
 8020710:	460a      	mov	r2, r1
 8020712:	2300      	movs	r3, #0
 8020714:	613a      	str	r2, [r7, #16]
 8020716:	617b      	str	r3, [r7, #20]
 8020718:	f04f 0200 	mov.w	r2, #0
 802071c:	f04f 0300 	mov.w	r3, #0
 8020720:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8020724:	4628      	mov	r0, r5
 8020726:	0143      	lsls	r3, r0, #5
 8020728:	4620      	mov	r0, r4
 802072a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802072e:	4620      	mov	r0, r4
 8020730:	0142      	lsls	r2, r0, #5
 8020732:	460b      	mov	r3, r1
 8020734:	009b      	lsls	r3, r3, #2
 8020736:	3307      	adds	r3, #7
 8020738:	08db      	lsrs	r3, r3, #3
 802073a:	00db      	lsls	r3, r3, #3
 802073c:	ebad 0d03 	sub.w	sp, sp, r3
 8020740:	ab04      	add	r3, sp, #16
 8020742:	3303      	adds	r3, #3
 8020744:	089b      	lsrs	r3, r3, #2
 8020746:	009b      	lsls	r3, r3, #2
 8020748:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  float conv[2*len-1];
 802074c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8020750:	005b      	lsls	r3, r3, #1
 8020752:	1e59      	subs	r1, r3, #1
 8020754:	1e4b      	subs	r3, r1, #1
 8020756:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 802075a:	460a      	mov	r2, r1
 802075c:	2300      	movs	r3, #0
 802075e:	60ba      	str	r2, [r7, #8]
 8020760:	60fb      	str	r3, [r7, #12]
 8020762:	f04f 0200 	mov.w	r2, #0
 8020766:	f04f 0300 	mov.w	r3, #0
 802076a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 802076e:	4628      	mov	r0, r5
 8020770:	0143      	lsls	r3, r0, #5
 8020772:	4620      	mov	r0, r4
 8020774:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8020778:	4620      	mov	r0, r4
 802077a:	0142      	lsls	r2, r0, #5
 802077c:	460a      	mov	r2, r1
 802077e:	2300      	movs	r3, #0
 8020780:	603a      	str	r2, [r7, #0]
 8020782:	607b      	str	r3, [r7, #4]
 8020784:	f04f 0200 	mov.w	r2, #0
 8020788:	f04f 0300 	mov.w	r3, #0
 802078c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8020790:	4628      	mov	r0, r5
 8020792:	0143      	lsls	r3, r0, #5
 8020794:	4620      	mov	r0, r4
 8020796:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802079a:	4620      	mov	r0, r4
 802079c:	0142      	lsls	r2, r0, #5
 802079e:	460b      	mov	r3, r1
 80207a0:	009b      	lsls	r3, r3, #2
 80207a2:	3307      	adds	r3, #7
 80207a4:	08db      	lsrs	r3, r3, #3
 80207a6:	00db      	lsls	r3, r3, #3
 80207a8:	ebad 0d03 	sub.w	sp, sp, r3
 80207ac:	ab04      	add	r3, sp, #16
 80207ae:	3303      	adds	r3, #3
 80207b0:	089b      	lsrs	r3, r3, #2
 80207b2:	009b      	lsls	r3, r3, #2
 80207b4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
  Processing(inarray,CMSISoutarray,diff,&stdv,&avg,corl,conv,len);
 80207b8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80207bc:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80207c0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80207c4:	9303      	str	r3, [sp, #12]
 80207c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80207ca:	9302      	str	r3, [sp, #8]
 80207cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80207d0:	9301      	str	r3, [sp, #4]
 80207d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80207d6:	9300      	str	r3, [sp, #0]
 80207d8:	4613      	mov	r3, r2
 80207da:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 80207de:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 80207e2:	f7ff fdca 	bl	802037a <Processing>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0; i<5; i++){
 80207e6:	2300      	movs	r3, #0
 80207e8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 80207ec:	e01a      	b.n	8020824 <main+0x3d0>
 80207ee:	bf00      	nop
 80207f0:	08023b48 	.word	0x08023b48
 80207f4:	3dcccccd 	.word	0x3dcccccd
 80207f8:	e000007c 	.word	0xe000007c
	 	  printf("%d",i);
 80207fc:	f8d7 1234 	ldr.w	r1, [r7, #564]	@ 0x234
 8020800:	480b      	ldr	r0, [pc, #44]	@ (8020830 <main+0x3dc>)
 8020802:	f002 fc4f 	bl	80230a4 <iprintf>
	 	  fflush(stdout);
 8020806:	4b0b      	ldr	r3, [pc, #44]	@ (8020834 <main+0x3e0>)
 8020808:	681b      	ldr	r3, [r3, #0]
 802080a:	689b      	ldr	r3, [r3, #8]
 802080c:	4618      	mov	r0, r3
 802080e:	f002 fb73 	bl	8022ef8 <fflush>
	 	  HAL_Delay(1000);
 8020812:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8020816:	f000 fa35 	bl	8020c84 <HAL_Delay>
	  for(int i=0; i<5; i++){
 802081a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 802081e:	3301      	adds	r3, #1
 8020820:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8020824:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8020828:	2b04      	cmp	r3, #4
 802082a:	dde7      	ble.n	80207fc <main+0x3a8>
 802082c:	e7db      	b.n	80207e6 <main+0x392>
 802082e:	bf00      	nop
 8020830:	08023b44 	.word	0x08023b44
 8020834:	20000018 	.word	0x20000018

08020838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020838:	b580      	push	{r7, lr}
 802083a:	b096      	sub	sp, #88	@ 0x58
 802083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802083e:	f107 0314 	add.w	r3, r7, #20
 8020842:	2244      	movs	r2, #68	@ 0x44
 8020844:	2100      	movs	r1, #0
 8020846:	4618      	mov	r0, r3
 8020848:	f002 fc81 	bl	802314e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802084c:	463b      	mov	r3, r7
 802084e:	2200      	movs	r2, #0
 8020850:	601a      	str	r2, [r3, #0]
 8020852:	605a      	str	r2, [r3, #4]
 8020854:	609a      	str	r2, [r3, #8]
 8020856:	60da      	str	r2, [r3, #12]
 8020858:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 802085a:	2000      	movs	r0, #0
 802085c:	f000 fb3c 	bl	8020ed8 <HAL_PWREx_ControlVoltageScaling>
 8020860:	4603      	mov	r3, r0
 8020862:	2b00      	cmp	r3, #0
 8020864:	d001      	beq.n	802086a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8020866:	f000 f838 	bl	80208da <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 802086a:	2310      	movs	r3, #16
 802086c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 802086e:	2301      	movs	r3, #1
 8020870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8020872:	2300      	movs	r3, #0
 8020874:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8020876:	2360      	movs	r3, #96	@ 0x60
 8020878:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802087a:	2302      	movs	r3, #2
 802087c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 802087e:	2301      	movs	r3, #1
 8020880:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8020882:	2301      	movs	r3, #1
 8020884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8020886:	233c      	movs	r3, #60	@ 0x3c
 8020888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802088a:	2302      	movs	r3, #2
 802088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 802088e:	2302      	movs	r3, #2
 8020890:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8020892:	2302      	movs	r3, #2
 8020894:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020896:	f107 0314 	add.w	r3, r7, #20
 802089a:	4618      	mov	r0, r3
 802089c:	f000 fbc0 	bl	8021020 <HAL_RCC_OscConfig>
 80208a0:	4603      	mov	r3, r0
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d001      	beq.n	80208aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80208a6:	f000 f818 	bl	80208da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80208aa:	230f      	movs	r3, #15
 80208ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80208ae:	2303      	movs	r3, #3
 80208b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80208b2:	2300      	movs	r3, #0
 80208b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80208b6:	2300      	movs	r3, #0
 80208b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80208ba:	2300      	movs	r3, #0
 80208bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80208be:	463b      	mov	r3, r7
 80208c0:	2105      	movs	r1, #5
 80208c2:	4618      	mov	r0, r3
 80208c4:	f000 ffc6 	bl	8021854 <HAL_RCC_ClockConfig>
 80208c8:	4603      	mov	r3, r0
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d001      	beq.n	80208d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80208ce:	f000 f804 	bl	80208da <Error_Handler>
  }
}
 80208d2:	bf00      	nop
 80208d4:	3758      	adds	r7, #88	@ 0x58
 80208d6:	46bd      	mov	sp, r7
 80208d8:	bd80      	pop	{r7, pc}

080208da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80208da:	b480      	push	{r7}
 80208dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80208de:	b672      	cpsid	i
}
 80208e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80208e2:	bf00      	nop
 80208e4:	e7fd      	b.n	80208e2 <Error_Handler+0x8>
	...

080208e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80208e8:	b480      	push	{r7}
 80208ea:	b083      	sub	sp, #12
 80208ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80208ee:	4b0f      	ldr	r3, [pc, #60]	@ (802092c <HAL_MspInit+0x44>)
 80208f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80208f2:	4a0e      	ldr	r2, [pc, #56]	@ (802092c <HAL_MspInit+0x44>)
 80208f4:	f043 0301 	orr.w	r3, r3, #1
 80208f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80208fa:	4b0c      	ldr	r3, [pc, #48]	@ (802092c <HAL_MspInit+0x44>)
 80208fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80208fe:	f003 0301 	and.w	r3, r3, #1
 8020902:	607b      	str	r3, [r7, #4]
 8020904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020906:	4b09      	ldr	r3, [pc, #36]	@ (802092c <HAL_MspInit+0x44>)
 8020908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802090a:	4a08      	ldr	r2, [pc, #32]	@ (802092c <HAL_MspInit+0x44>)
 802090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020910:	6593      	str	r3, [r2, #88]	@ 0x58
 8020912:	4b06      	ldr	r3, [pc, #24]	@ (802092c <HAL_MspInit+0x44>)
 8020914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802091a:	603b      	str	r3, [r7, #0]
 802091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802091e:	bf00      	nop
 8020920:	370c      	adds	r7, #12
 8020922:	46bd      	mov	sp, r7
 8020924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020928:	4770      	bx	lr
 802092a:	bf00      	nop
 802092c:	40021000 	.word	0x40021000

08020930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020930:	b480      	push	{r7}
 8020932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8020934:	bf00      	nop
 8020936:	e7fd      	b.n	8020934 <NMI_Handler+0x4>

08020938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020938:	b480      	push	{r7}
 802093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802093c:	bf00      	nop
 802093e:	e7fd      	b.n	802093c <HardFault_Handler+0x4>

08020940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020940:	b480      	push	{r7}
 8020942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020944:	bf00      	nop
 8020946:	e7fd      	b.n	8020944 <MemManage_Handler+0x4>

08020948 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020948:	b480      	push	{r7}
 802094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802094c:	bf00      	nop
 802094e:	e7fd      	b.n	802094c <BusFault_Handler+0x4>

08020950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020950:	b480      	push	{r7}
 8020952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020954:	bf00      	nop
 8020956:	e7fd      	b.n	8020954 <UsageFault_Handler+0x4>

08020958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020958:	b480      	push	{r7}
 802095a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802095c:	bf00      	nop
 802095e:	46bd      	mov	sp, r7
 8020960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020964:	4770      	bx	lr

08020966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020966:	b480      	push	{r7}
 8020968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802096a:	bf00      	nop
 802096c:	46bd      	mov	sp, r7
 802096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020972:	4770      	bx	lr

08020974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020974:	b480      	push	{r7}
 8020976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020978:	bf00      	nop
 802097a:	46bd      	mov	sp, r7
 802097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020980:	4770      	bx	lr

08020982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020982:	b580      	push	{r7, lr}
 8020984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020986:	f000 f95d 	bl	8020c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802098a:	bf00      	nop
 802098c:	bd80      	pop	{r7, pc}
	...

08020990 <ITM_SendChar>:

#define ITM_STIMULUS_PORT0					*((volatile uint32_t*) 0xE00000000)

#define ITM_TRACE_EN					*((volatile uint32_t*) 0xE00000E00)

void ITM_SendChar(uint8_t ch){
 8020990:	b480      	push	{r7}
 8020992:	b083      	sub	sp, #12
 8020994:	af00      	add	r7, sp, #0
 8020996:	4603      	mov	r3, r0
 8020998:	71fb      	strb	r3, [r7, #7]

	DEMCR |= (1<<24);
 802099a:	4b0f      	ldr	r3, [pc, #60]	@ (80209d8 <ITM_SendChar+0x48>)
 802099c:	681b      	ldr	r3, [r3, #0]
 802099e:	4a0e      	ldr	r2, [pc, #56]	@ (80209d8 <ITM_SendChar+0x48>)
 80209a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80209a4:	6013      	str	r3, [r2, #0]
	ITM_TRACE_EN |= (1<<0);
 80209a6:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 80209b0:	f043 0301 	orr.w	r3, r3, #1
 80209b4:	6013      	str	r3, [r2, #0]

	while(!(ITM_STIMULUS_PORT0 & 1));
 80209b6:	bf00      	nop
 80209b8:	2300      	movs	r3, #0
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	f003 0301 	and.w	r3, r3, #1
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d0f9      	beq.n	80209b8 <ITM_SendChar+0x28>

	ITM_STIMULUS_PORT0 = ch;
 80209c4:	2200      	movs	r2, #0
 80209c6:	79fb      	ldrb	r3, [r7, #7]
 80209c8:	6013      	str	r3, [r2, #0]


}
 80209ca:	bf00      	nop
 80209cc:	370c      	adds	r7, #12
 80209ce:	46bd      	mov	sp, r7
 80209d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209d4:	4770      	bx	lr
 80209d6:	bf00      	nop
 80209d8:	e000edfc 	.word	0xe000edfc

080209dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80209dc:	b580      	push	{r7, lr}
 80209de:	b086      	sub	sp, #24
 80209e0:	af00      	add	r7, sp, #0
 80209e2:	60f8      	str	r0, [r7, #12]
 80209e4:	60b9      	str	r1, [r7, #8]
 80209e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80209e8:	2300      	movs	r3, #0
 80209ea:	617b      	str	r3, [r7, #20]
 80209ec:	e00a      	b.n	8020a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80209ee:	f3af 8000 	nop.w
 80209f2:	4601      	mov	r1, r0
 80209f4:	68bb      	ldr	r3, [r7, #8]
 80209f6:	1c5a      	adds	r2, r3, #1
 80209f8:	60ba      	str	r2, [r7, #8]
 80209fa:	b2ca      	uxtb	r2, r1
 80209fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80209fe:	697b      	ldr	r3, [r7, #20]
 8020a00:	3301      	adds	r3, #1
 8020a02:	617b      	str	r3, [r7, #20]
 8020a04:	697a      	ldr	r2, [r7, #20]
 8020a06:	687b      	ldr	r3, [r7, #4]
 8020a08:	429a      	cmp	r2, r3
 8020a0a:	dbf0      	blt.n	80209ee <_read+0x12>
  }

  return len;
 8020a0c:	687b      	ldr	r3, [r7, #4]
}
 8020a0e:	4618      	mov	r0, r3
 8020a10:	3718      	adds	r7, #24
 8020a12:	46bd      	mov	sp, r7
 8020a14:	bd80      	pop	{r7, pc}

08020a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8020a16:	b580      	push	{r7, lr}
 8020a18:	b086      	sub	sp, #24
 8020a1a:	af00      	add	r7, sp, #0
 8020a1c:	60f8      	str	r0, [r7, #12]
 8020a1e:	60b9      	str	r1, [r7, #8]
 8020a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020a22:	2300      	movs	r3, #0
 8020a24:	617b      	str	r3, [r7, #20]
 8020a26:	e009      	b.n	8020a3c <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8020a28:	68bb      	ldr	r3, [r7, #8]
 8020a2a:	1c5a      	adds	r2, r3, #1
 8020a2c:	60ba      	str	r2, [r7, #8]
 8020a2e:	781b      	ldrb	r3, [r3, #0]
 8020a30:	4618      	mov	r0, r3
 8020a32:	f7ff ffad 	bl	8020990 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020a36:	697b      	ldr	r3, [r7, #20]
 8020a38:	3301      	adds	r3, #1
 8020a3a:	617b      	str	r3, [r7, #20]
 8020a3c:	697a      	ldr	r2, [r7, #20]
 8020a3e:	687b      	ldr	r3, [r7, #4]
 8020a40:	429a      	cmp	r2, r3
 8020a42:	dbf1      	blt.n	8020a28 <_write+0x12>
  }
  return len;
 8020a44:	687b      	ldr	r3, [r7, #4]
}
 8020a46:	4618      	mov	r0, r3
 8020a48:	3718      	adds	r7, #24
 8020a4a:	46bd      	mov	sp, r7
 8020a4c:	bd80      	pop	{r7, pc}

08020a4e <_close>:

int _close(int file)
{
 8020a4e:	b480      	push	{r7}
 8020a50:	b083      	sub	sp, #12
 8020a52:	af00      	add	r7, sp, #0
 8020a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8020a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020a5a:	4618      	mov	r0, r3
 8020a5c:	370c      	adds	r7, #12
 8020a5e:	46bd      	mov	sp, r7
 8020a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a64:	4770      	bx	lr

08020a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8020a66:	b480      	push	{r7}
 8020a68:	b083      	sub	sp, #12
 8020a6a:	af00      	add	r7, sp, #0
 8020a6c:	6078      	str	r0, [r7, #4]
 8020a6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8020a70:	683b      	ldr	r3, [r7, #0]
 8020a72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8020a76:	605a      	str	r2, [r3, #4]
  return 0;
 8020a78:	2300      	movs	r3, #0
}
 8020a7a:	4618      	mov	r0, r3
 8020a7c:	370c      	adds	r7, #12
 8020a7e:	46bd      	mov	sp, r7
 8020a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a84:	4770      	bx	lr

08020a86 <_isatty>:

int _isatty(int file)
{
 8020a86:	b480      	push	{r7}
 8020a88:	b083      	sub	sp, #12
 8020a8a:	af00      	add	r7, sp, #0
 8020a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8020a8e:	2301      	movs	r3, #1
}
 8020a90:	4618      	mov	r0, r3
 8020a92:	370c      	adds	r7, #12
 8020a94:	46bd      	mov	sp, r7
 8020a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a9a:	4770      	bx	lr

08020a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8020a9c:	b480      	push	{r7}
 8020a9e:	b085      	sub	sp, #20
 8020aa0:	af00      	add	r7, sp, #0
 8020aa2:	60f8      	str	r0, [r7, #12]
 8020aa4:	60b9      	str	r1, [r7, #8]
 8020aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8020aa8:	2300      	movs	r3, #0
}
 8020aaa:	4618      	mov	r0, r3
 8020aac:	3714      	adds	r7, #20
 8020aae:	46bd      	mov	sp, r7
 8020ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ab4:	4770      	bx	lr
	...

08020ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020ab8:	b580      	push	{r7, lr}
 8020aba:	b086      	sub	sp, #24
 8020abc:	af00      	add	r7, sp, #0
 8020abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020ac0:	4a14      	ldr	r2, [pc, #80]	@ (8020b14 <_sbrk+0x5c>)
 8020ac2:	4b15      	ldr	r3, [pc, #84]	@ (8020b18 <_sbrk+0x60>)
 8020ac4:	1ad3      	subs	r3, r2, r3
 8020ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020ac8:	697b      	ldr	r3, [r7, #20]
 8020aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020acc:	4b13      	ldr	r3, [pc, #76]	@ (8020b1c <_sbrk+0x64>)
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d102      	bne.n	8020ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020ad4:	4b11      	ldr	r3, [pc, #68]	@ (8020b1c <_sbrk+0x64>)
 8020ad6:	4a12      	ldr	r2, [pc, #72]	@ (8020b20 <_sbrk+0x68>)
 8020ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8020ada:	4b10      	ldr	r3, [pc, #64]	@ (8020b1c <_sbrk+0x64>)
 8020adc:	681a      	ldr	r2, [r3, #0]
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	4413      	add	r3, r2
 8020ae2:	693a      	ldr	r2, [r7, #16]
 8020ae4:	429a      	cmp	r2, r3
 8020ae6:	d207      	bcs.n	8020af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8020ae8:	f002 fb90 	bl	802320c <__errno>
 8020aec:	4603      	mov	r3, r0
 8020aee:	220c      	movs	r2, #12
 8020af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020af2:	f04f 33ff 	mov.w	r3, #4294967295
 8020af6:	e009      	b.n	8020b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8020af8:	4b08      	ldr	r3, [pc, #32]	@ (8020b1c <_sbrk+0x64>)
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020afe:	4b07      	ldr	r3, [pc, #28]	@ (8020b1c <_sbrk+0x64>)
 8020b00:	681a      	ldr	r2, [r3, #0]
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	4413      	add	r3, r2
 8020b06:	4a05      	ldr	r2, [pc, #20]	@ (8020b1c <_sbrk+0x64>)
 8020b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8020b0a:	68fb      	ldr	r3, [r7, #12]
}
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	3718      	adds	r7, #24
 8020b10:	46bd      	mov	sp, r7
 8020b12:	bd80      	pop	{r7, pc}
 8020b14:	200a0000 	.word	0x200a0000
 8020b18:	00000400 	.word	0x00000400
 8020b1c:	20000084 	.word	0x20000084
 8020b20:	200001d8 	.word	0x200001d8

08020b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8020b24:	b480      	push	{r7}
 8020b26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8020b28:	4b06      	ldr	r3, [pc, #24]	@ (8020b44 <SystemInit+0x20>)
 8020b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020b2e:	4a05      	ldr	r2, [pc, #20]	@ (8020b44 <SystemInit+0x20>)
 8020b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8020b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8020b38:	bf00      	nop
 8020b3a:	46bd      	mov	sp, r7
 8020b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b40:	4770      	bx	lr
 8020b42:	bf00      	nop
 8020b44:	e000ed00 	.word	0xe000ed00

08020b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8020b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8020b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8020b4c:	f7ff ffea 	bl	8020b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8020b50:	480c      	ldr	r0, [pc, #48]	@ (8020b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8020b52:	490d      	ldr	r1, [pc, #52]	@ (8020b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8020b54:	4a0d      	ldr	r2, [pc, #52]	@ (8020b8c <LoopForever+0xe>)
  movs r3, #0
 8020b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020b58:	e002      	b.n	8020b60 <LoopCopyDataInit>

08020b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020b5e:	3304      	adds	r3, #4

08020b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020b64:	d3f9      	bcc.n	8020b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020b66:	4a0a      	ldr	r2, [pc, #40]	@ (8020b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8020b68:	4c0a      	ldr	r4, [pc, #40]	@ (8020b94 <LoopForever+0x16>)
  movs r3, #0
 8020b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020b6c:	e001      	b.n	8020b72 <LoopFillZerobss>

08020b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020b70:	3204      	adds	r2, #4

08020b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020b74:	d3fb      	bcc.n	8020b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8020b76:	f002 fb4f 	bl	8023218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8020b7a:	f7ff fc6b 	bl	8020454 <main>

08020b7e <LoopForever>:

LoopForever:
    b LoopForever
 8020b7e:	e7fe      	b.n	8020b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8020b80:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8020b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020b88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8020b8c:	08023d60 	.word	0x08023d60
  ldr r2, =_sbss
 8020b90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8020b94:	200001d8 	.word	0x200001d8

08020b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020b98:	e7fe      	b.n	8020b98 <ADC1_IRQHandler>

08020b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020b9a:	b580      	push	{r7, lr}
 8020b9c:	b082      	sub	sp, #8
 8020b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8020ba0:	2300      	movs	r3, #0
 8020ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020ba4:	2003      	movs	r0, #3
 8020ba6:	f000 f943 	bl	8020e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8020baa:	2000      	movs	r0, #0
 8020bac:	f000 f80e 	bl	8020bcc <HAL_InitTick>
 8020bb0:	4603      	mov	r3, r0
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	d002      	beq.n	8020bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8020bb6:	2301      	movs	r3, #1
 8020bb8:	71fb      	strb	r3, [r7, #7]
 8020bba:	e001      	b.n	8020bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020bbc:	f7ff fe94 	bl	80208e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8020bc2:	4618      	mov	r0, r3
 8020bc4:	3708      	adds	r7, #8
 8020bc6:	46bd      	mov	sp, r7
 8020bc8:	bd80      	pop	{r7, pc}
	...

08020bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020bcc:	b580      	push	{r7, lr}
 8020bce:	b084      	sub	sp, #16
 8020bd0:	af00      	add	r7, sp, #0
 8020bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020bd4:	2300      	movs	r3, #0
 8020bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020bd8:	4b17      	ldr	r3, [pc, #92]	@ (8020c38 <HAL_InitTick+0x6c>)
 8020bda:	781b      	ldrb	r3, [r3, #0]
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	d023      	beq.n	8020c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020be0:	4b16      	ldr	r3, [pc, #88]	@ (8020c3c <HAL_InitTick+0x70>)
 8020be2:	681a      	ldr	r2, [r3, #0]
 8020be4:	4b14      	ldr	r3, [pc, #80]	@ (8020c38 <HAL_InitTick+0x6c>)
 8020be6:	781b      	ldrb	r3, [r3, #0]
 8020be8:	4619      	mov	r1, r3
 8020bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8020bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8020bf6:	4618      	mov	r0, r3
 8020bf8:	f000 f941 	bl	8020e7e <HAL_SYSTICK_Config>
 8020bfc:	4603      	mov	r3, r0
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	d10f      	bne.n	8020c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020c02:	687b      	ldr	r3, [r7, #4]
 8020c04:	2b0f      	cmp	r3, #15
 8020c06:	d809      	bhi.n	8020c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020c08:	2200      	movs	r2, #0
 8020c0a:	6879      	ldr	r1, [r7, #4]
 8020c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8020c10:	f000 f919 	bl	8020e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020c14:	4a0a      	ldr	r2, [pc, #40]	@ (8020c40 <HAL_InitTick+0x74>)
 8020c16:	687b      	ldr	r3, [r7, #4]
 8020c18:	6013      	str	r3, [r2, #0]
 8020c1a:	e007      	b.n	8020c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8020c1c:	2301      	movs	r3, #1
 8020c1e:	73fb      	strb	r3, [r7, #15]
 8020c20:	e004      	b.n	8020c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020c22:	2301      	movs	r3, #1
 8020c24:	73fb      	strb	r3, [r7, #15]
 8020c26:	e001      	b.n	8020c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8020c28:	2301      	movs	r3, #1
 8020c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8020c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8020c2e:	4618      	mov	r0, r3
 8020c30:	3710      	adds	r7, #16
 8020c32:	46bd      	mov	sp, r7
 8020c34:	bd80      	pop	{r7, pc}
 8020c36:	bf00      	nop
 8020c38:	20000008 	.word	0x20000008
 8020c3c:	20000000 	.word	0x20000000
 8020c40:	20000004 	.word	0x20000004

08020c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020c44:	b480      	push	{r7}
 8020c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8020c48:	4b06      	ldr	r3, [pc, #24]	@ (8020c64 <HAL_IncTick+0x20>)
 8020c4a:	781b      	ldrb	r3, [r3, #0]
 8020c4c:	461a      	mov	r2, r3
 8020c4e:	4b06      	ldr	r3, [pc, #24]	@ (8020c68 <HAL_IncTick+0x24>)
 8020c50:	681b      	ldr	r3, [r3, #0]
 8020c52:	4413      	add	r3, r2
 8020c54:	4a04      	ldr	r2, [pc, #16]	@ (8020c68 <HAL_IncTick+0x24>)
 8020c56:	6013      	str	r3, [r2, #0]
}
 8020c58:	bf00      	nop
 8020c5a:	46bd      	mov	sp, r7
 8020c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c60:	4770      	bx	lr
 8020c62:	bf00      	nop
 8020c64:	20000008 	.word	0x20000008
 8020c68:	20000088 	.word	0x20000088

08020c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020c6c:	b480      	push	{r7}
 8020c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8020c70:	4b03      	ldr	r3, [pc, #12]	@ (8020c80 <HAL_GetTick+0x14>)
 8020c72:	681b      	ldr	r3, [r3, #0]
}
 8020c74:	4618      	mov	r0, r3
 8020c76:	46bd      	mov	sp, r7
 8020c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c7c:	4770      	bx	lr
 8020c7e:	bf00      	nop
 8020c80:	20000088 	.word	0x20000088

08020c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020c84:	b580      	push	{r7, lr}
 8020c86:	b084      	sub	sp, #16
 8020c88:	af00      	add	r7, sp, #0
 8020c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020c8c:	f7ff ffee 	bl	8020c6c <HAL_GetTick>
 8020c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020c96:	68fb      	ldr	r3, [r7, #12]
 8020c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020c9c:	d005      	beq.n	8020caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8020c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8020cc8 <HAL_Delay+0x44>)
 8020ca0:	781b      	ldrb	r3, [r3, #0]
 8020ca2:	461a      	mov	r2, r3
 8020ca4:	68fb      	ldr	r3, [r7, #12]
 8020ca6:	4413      	add	r3, r2
 8020ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8020caa:	bf00      	nop
 8020cac:	f7ff ffde 	bl	8020c6c <HAL_GetTick>
 8020cb0:	4602      	mov	r2, r0
 8020cb2:	68bb      	ldr	r3, [r7, #8]
 8020cb4:	1ad3      	subs	r3, r2, r3
 8020cb6:	68fa      	ldr	r2, [r7, #12]
 8020cb8:	429a      	cmp	r2, r3
 8020cba:	d8f7      	bhi.n	8020cac <HAL_Delay+0x28>
  {
  }
}
 8020cbc:	bf00      	nop
 8020cbe:	bf00      	nop
 8020cc0:	3710      	adds	r7, #16
 8020cc2:	46bd      	mov	sp, r7
 8020cc4:	bd80      	pop	{r7, pc}
 8020cc6:	bf00      	nop
 8020cc8:	20000008 	.word	0x20000008

08020ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020ccc:	b480      	push	{r7}
 8020cce:	b085      	sub	sp, #20
 8020cd0:	af00      	add	r7, sp, #0
 8020cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	f003 0307 	and.w	r3, r3, #7
 8020cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8020d10 <__NVIC_SetPriorityGrouping+0x44>)
 8020cde:	68db      	ldr	r3, [r3, #12]
 8020ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020ce2:	68ba      	ldr	r2, [r7, #8]
 8020ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020ce8:	4013      	ands	r3, r2
 8020cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020cec:	68fb      	ldr	r3, [r7, #12]
 8020cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020cf0:	68bb      	ldr	r3, [r7, #8]
 8020cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020cfe:	4a04      	ldr	r2, [pc, #16]	@ (8020d10 <__NVIC_SetPriorityGrouping+0x44>)
 8020d00:	68bb      	ldr	r3, [r7, #8]
 8020d02:	60d3      	str	r3, [r2, #12]
}
 8020d04:	bf00      	nop
 8020d06:	3714      	adds	r7, #20
 8020d08:	46bd      	mov	sp, r7
 8020d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d0e:	4770      	bx	lr
 8020d10:	e000ed00 	.word	0xe000ed00

08020d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020d14:	b480      	push	{r7}
 8020d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020d18:	4b04      	ldr	r3, [pc, #16]	@ (8020d2c <__NVIC_GetPriorityGrouping+0x18>)
 8020d1a:	68db      	ldr	r3, [r3, #12]
 8020d1c:	0a1b      	lsrs	r3, r3, #8
 8020d1e:	f003 0307 	and.w	r3, r3, #7
}
 8020d22:	4618      	mov	r0, r3
 8020d24:	46bd      	mov	sp, r7
 8020d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d2a:	4770      	bx	lr
 8020d2c:	e000ed00 	.word	0xe000ed00

08020d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020d30:	b480      	push	{r7}
 8020d32:	b083      	sub	sp, #12
 8020d34:	af00      	add	r7, sp, #0
 8020d36:	4603      	mov	r3, r0
 8020d38:	6039      	str	r1, [r7, #0]
 8020d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	db0a      	blt.n	8020d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020d44:	683b      	ldr	r3, [r7, #0]
 8020d46:	b2da      	uxtb	r2, r3
 8020d48:	490c      	ldr	r1, [pc, #48]	@ (8020d7c <__NVIC_SetPriority+0x4c>)
 8020d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d4e:	0112      	lsls	r2, r2, #4
 8020d50:	b2d2      	uxtb	r2, r2
 8020d52:	440b      	add	r3, r1
 8020d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020d58:	e00a      	b.n	8020d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020d5a:	683b      	ldr	r3, [r7, #0]
 8020d5c:	b2da      	uxtb	r2, r3
 8020d5e:	4908      	ldr	r1, [pc, #32]	@ (8020d80 <__NVIC_SetPriority+0x50>)
 8020d60:	79fb      	ldrb	r3, [r7, #7]
 8020d62:	f003 030f 	and.w	r3, r3, #15
 8020d66:	3b04      	subs	r3, #4
 8020d68:	0112      	lsls	r2, r2, #4
 8020d6a:	b2d2      	uxtb	r2, r2
 8020d6c:	440b      	add	r3, r1
 8020d6e:	761a      	strb	r2, [r3, #24]
}
 8020d70:	bf00      	nop
 8020d72:	370c      	adds	r7, #12
 8020d74:	46bd      	mov	sp, r7
 8020d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d7a:	4770      	bx	lr
 8020d7c:	e000e100 	.word	0xe000e100
 8020d80:	e000ed00 	.word	0xe000ed00

08020d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020d84:	b480      	push	{r7}
 8020d86:	b089      	sub	sp, #36	@ 0x24
 8020d88:	af00      	add	r7, sp, #0
 8020d8a:	60f8      	str	r0, [r7, #12]
 8020d8c:	60b9      	str	r1, [r7, #8]
 8020d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020d90:	68fb      	ldr	r3, [r7, #12]
 8020d92:	f003 0307 	and.w	r3, r3, #7
 8020d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020d98:	69fb      	ldr	r3, [r7, #28]
 8020d9a:	f1c3 0307 	rsb	r3, r3, #7
 8020d9e:	2b04      	cmp	r3, #4
 8020da0:	bf28      	it	cs
 8020da2:	2304      	movcs	r3, #4
 8020da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020da6:	69fb      	ldr	r3, [r7, #28]
 8020da8:	3304      	adds	r3, #4
 8020daa:	2b06      	cmp	r3, #6
 8020dac:	d902      	bls.n	8020db4 <NVIC_EncodePriority+0x30>
 8020dae:	69fb      	ldr	r3, [r7, #28]
 8020db0:	3b03      	subs	r3, #3
 8020db2:	e000      	b.n	8020db6 <NVIC_EncodePriority+0x32>
 8020db4:	2300      	movs	r3, #0
 8020db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020db8:	f04f 32ff 	mov.w	r2, #4294967295
 8020dbc:	69bb      	ldr	r3, [r7, #24]
 8020dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8020dc2:	43da      	mvns	r2, r3
 8020dc4:	68bb      	ldr	r3, [r7, #8]
 8020dc6:	401a      	ands	r2, r3
 8020dc8:	697b      	ldr	r3, [r7, #20]
 8020dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8020dd0:	697b      	ldr	r3, [r7, #20]
 8020dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8020dd6:	43d9      	mvns	r1, r3
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020ddc:	4313      	orrs	r3, r2
         );
}
 8020dde:	4618      	mov	r0, r3
 8020de0:	3724      	adds	r7, #36	@ 0x24
 8020de2:	46bd      	mov	sp, r7
 8020de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de8:	4770      	bx	lr
	...

08020dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020dec:	b580      	push	{r7, lr}
 8020dee:	b082      	sub	sp, #8
 8020df0:	af00      	add	r7, sp, #0
 8020df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	3b01      	subs	r3, #1
 8020df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020dfc:	d301      	bcc.n	8020e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020dfe:	2301      	movs	r3, #1
 8020e00:	e00f      	b.n	8020e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020e02:	4a0a      	ldr	r2, [pc, #40]	@ (8020e2c <SysTick_Config+0x40>)
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	3b01      	subs	r3, #1
 8020e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020e0a:	210f      	movs	r1, #15
 8020e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8020e10:	f7ff ff8e 	bl	8020d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020e14:	4b05      	ldr	r3, [pc, #20]	@ (8020e2c <SysTick_Config+0x40>)
 8020e16:	2200      	movs	r2, #0
 8020e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020e1a:	4b04      	ldr	r3, [pc, #16]	@ (8020e2c <SysTick_Config+0x40>)
 8020e1c:	2207      	movs	r2, #7
 8020e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020e20:	2300      	movs	r3, #0
}
 8020e22:	4618      	mov	r0, r3
 8020e24:	3708      	adds	r7, #8
 8020e26:	46bd      	mov	sp, r7
 8020e28:	bd80      	pop	{r7, pc}
 8020e2a:	bf00      	nop
 8020e2c:	e000e010 	.word	0xe000e010

08020e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020e30:	b580      	push	{r7, lr}
 8020e32:	b082      	sub	sp, #8
 8020e34:	af00      	add	r7, sp, #0
 8020e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020e38:	6878      	ldr	r0, [r7, #4]
 8020e3a:	f7ff ff47 	bl	8020ccc <__NVIC_SetPriorityGrouping>
}
 8020e3e:	bf00      	nop
 8020e40:	3708      	adds	r7, #8
 8020e42:	46bd      	mov	sp, r7
 8020e44:	bd80      	pop	{r7, pc}

08020e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020e46:	b580      	push	{r7, lr}
 8020e48:	b086      	sub	sp, #24
 8020e4a:	af00      	add	r7, sp, #0
 8020e4c:	4603      	mov	r3, r0
 8020e4e:	60b9      	str	r1, [r7, #8]
 8020e50:	607a      	str	r2, [r7, #4]
 8020e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8020e54:	2300      	movs	r3, #0
 8020e56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020e58:	f7ff ff5c 	bl	8020d14 <__NVIC_GetPriorityGrouping>
 8020e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020e5e:	687a      	ldr	r2, [r7, #4]
 8020e60:	68b9      	ldr	r1, [r7, #8]
 8020e62:	6978      	ldr	r0, [r7, #20]
 8020e64:	f7ff ff8e 	bl	8020d84 <NVIC_EncodePriority>
 8020e68:	4602      	mov	r2, r0
 8020e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020e6e:	4611      	mov	r1, r2
 8020e70:	4618      	mov	r0, r3
 8020e72:	f7ff ff5d 	bl	8020d30 <__NVIC_SetPriority>
}
 8020e76:	bf00      	nop
 8020e78:	3718      	adds	r7, #24
 8020e7a:	46bd      	mov	sp, r7
 8020e7c:	bd80      	pop	{r7, pc}

08020e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020e7e:	b580      	push	{r7, lr}
 8020e80:	b082      	sub	sp, #8
 8020e82:	af00      	add	r7, sp, #0
 8020e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020e86:	6878      	ldr	r0, [r7, #4]
 8020e88:	f7ff ffb0 	bl	8020dec <SysTick_Config>
 8020e8c:	4603      	mov	r3, r0
}
 8020e8e:	4618      	mov	r0, r3
 8020e90:	3708      	adds	r7, #8
 8020e92:	46bd      	mov	sp, r7
 8020e94:	bd80      	pop	{r7, pc}
	...

08020e98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8020e98:	b480      	push	{r7}
 8020e9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8020ed4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8020e9e:	681b      	ldr	r3, [r3, #0]
 8020ea0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020ea8:	d102      	bne.n	8020eb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8020eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020eae:	e00b      	b.n	8020ec8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8020eb0:	4b08      	ldr	r3, [pc, #32]	@ (8020ed4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8020eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020ebe:	d102      	bne.n	8020ec6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8020ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8020ec4:	e000      	b.n	8020ec8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8020ec6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8020ec8:	4618      	mov	r0, r3
 8020eca:	46bd      	mov	sp, r7
 8020ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ed0:	4770      	bx	lr
 8020ed2:	bf00      	nop
 8020ed4:	40007000 	.word	0x40007000

08020ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8020ed8:	b480      	push	{r7}
 8020eda:	b085      	sub	sp, #20
 8020edc:	af00      	add	r7, sp, #0
 8020ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d141      	bne.n	8020f6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020ee8:	681b      	ldr	r3, [r3, #0]
 8020eea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020ef2:	d131      	bne.n	8020f58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020ef4:	4b47      	ldr	r3, [pc, #284]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020efa:	4a46      	ldr	r2, [pc, #280]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020f00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8020f04:	4b43      	ldr	r3, [pc, #268]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f06:	681b      	ldr	r3, [r3, #0]
 8020f08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020f0c:	4a41      	ldr	r2, [pc, #260]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8020f14:	4b40      	ldr	r3, [pc, #256]	@ (8021018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	2232      	movs	r2, #50	@ 0x32
 8020f1a:	fb02 f303 	mul.w	r3, r2, r3
 8020f1e:	4a3f      	ldr	r2, [pc, #252]	@ (802101c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8020f20:	fba2 2303 	umull	r2, r3, r2, r3
 8020f24:	0c9b      	lsrs	r3, r3, #18
 8020f26:	3301      	adds	r3, #1
 8020f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020f2a:	e002      	b.n	8020f32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8020f2c:	68fb      	ldr	r3, [r7, #12]
 8020f2e:	3b01      	subs	r3, #1
 8020f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020f32:	4b38      	ldr	r3, [pc, #224]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f34:	695b      	ldr	r3, [r3, #20]
 8020f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020f3e:	d102      	bne.n	8020f46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8020f40:	68fb      	ldr	r3, [r7, #12]
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d1f2      	bne.n	8020f2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8020f46:	4b33      	ldr	r3, [pc, #204]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f48:	695b      	ldr	r3, [r3, #20]
 8020f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020f52:	d158      	bne.n	8021006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8020f54:	2303      	movs	r3, #3
 8020f56:	e057      	b.n	8021008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020f58:	4b2e      	ldr	r3, [pc, #184]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020f64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020f68:	e04d      	b.n	8021006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8020f6a:	687b      	ldr	r3, [r7, #4]
 8020f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020f70:	d141      	bne.n	8020ff6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020f72:	4b28      	ldr	r3, [pc, #160]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f74:	681b      	ldr	r3, [r3, #0]
 8020f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020f7e:	d131      	bne.n	8020fe4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020f80:	4b24      	ldr	r3, [pc, #144]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020f86:	4a23      	ldr	r2, [pc, #140]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020f8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8020f90:	4b20      	ldr	r3, [pc, #128]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020f98:	4a1e      	ldr	r2, [pc, #120]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8020fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8021018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8020fa2:	681b      	ldr	r3, [r3, #0]
 8020fa4:	2232      	movs	r2, #50	@ 0x32
 8020fa6:	fb02 f303 	mul.w	r3, r2, r3
 8020faa:	4a1c      	ldr	r2, [pc, #112]	@ (802101c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8020fac:	fba2 2303 	umull	r2, r3, r2, r3
 8020fb0:	0c9b      	lsrs	r3, r3, #18
 8020fb2:	3301      	adds	r3, #1
 8020fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020fb6:	e002      	b.n	8020fbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8020fb8:	68fb      	ldr	r3, [r7, #12]
 8020fba:	3b01      	subs	r3, #1
 8020fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020fbe:	4b15      	ldr	r3, [pc, #84]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020fc0:	695b      	ldr	r3, [r3, #20]
 8020fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020fca:	d102      	bne.n	8020fd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8020fcc:	68fb      	ldr	r3, [r7, #12]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d1f2      	bne.n	8020fb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8020fd2:	4b10      	ldr	r3, [pc, #64]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020fd4:	695b      	ldr	r3, [r3, #20]
 8020fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020fde:	d112      	bne.n	8021006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8020fe0:	2303      	movs	r3, #3
 8020fe2:	e011      	b.n	8021008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020fea:	4a0a      	ldr	r2, [pc, #40]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020ff4:	e007      	b.n	8021006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8020ff6:	4b07      	ldr	r3, [pc, #28]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020ff8:	681b      	ldr	r3, [r3, #0]
 8020ffa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020ffe:	4a05      	ldr	r2, [pc, #20]	@ (8021014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021000:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8021004:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8021006:	2300      	movs	r3, #0
}
 8021008:	4618      	mov	r0, r3
 802100a:	3714      	adds	r7, #20
 802100c:	46bd      	mov	sp, r7
 802100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021012:	4770      	bx	lr
 8021014:	40007000 	.word	0x40007000
 8021018:	20000000 	.word	0x20000000
 802101c:	431bde83 	.word	0x431bde83

08021020 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021020:	b580      	push	{r7, lr}
 8021022:	b088      	sub	sp, #32
 8021024:	af00      	add	r7, sp, #0
 8021026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	2b00      	cmp	r3, #0
 802102c:	d102      	bne.n	8021034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802102e:	2301      	movs	r3, #1
 8021030:	f000 bc08 	b.w	8021844 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021034:	4b96      	ldr	r3, [pc, #600]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021036:	689b      	ldr	r3, [r3, #8]
 8021038:	f003 030c 	and.w	r3, r3, #12
 802103c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 802103e:	4b94      	ldr	r3, [pc, #592]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021040:	68db      	ldr	r3, [r3, #12]
 8021042:	f003 0303 	and.w	r3, r3, #3
 8021046:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	681b      	ldr	r3, [r3, #0]
 802104c:	f003 0310 	and.w	r3, r3, #16
 8021050:	2b00      	cmp	r3, #0
 8021052:	f000 80e4 	beq.w	802121e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021056:	69bb      	ldr	r3, [r7, #24]
 8021058:	2b00      	cmp	r3, #0
 802105a:	d007      	beq.n	802106c <HAL_RCC_OscConfig+0x4c>
 802105c:	69bb      	ldr	r3, [r7, #24]
 802105e:	2b0c      	cmp	r3, #12
 8021060:	f040 808b 	bne.w	802117a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8021064:	697b      	ldr	r3, [r7, #20]
 8021066:	2b01      	cmp	r3, #1
 8021068:	f040 8087 	bne.w	802117a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 802106c:	4b88      	ldr	r3, [pc, #544]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 802106e:	681b      	ldr	r3, [r3, #0]
 8021070:	f003 0302 	and.w	r3, r3, #2
 8021074:	2b00      	cmp	r3, #0
 8021076:	d005      	beq.n	8021084 <HAL_RCC_OscConfig+0x64>
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	699b      	ldr	r3, [r3, #24]
 802107c:	2b00      	cmp	r3, #0
 802107e:	d101      	bne.n	8021084 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8021080:	2301      	movs	r3, #1
 8021082:	e3df      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021084:	687b      	ldr	r3, [r7, #4]
 8021086:	6a1a      	ldr	r2, [r3, #32]
 8021088:	4b81      	ldr	r3, [pc, #516]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 802108a:	681b      	ldr	r3, [r3, #0]
 802108c:	f003 0308 	and.w	r3, r3, #8
 8021090:	2b00      	cmp	r3, #0
 8021092:	d004      	beq.n	802109e <HAL_RCC_OscConfig+0x7e>
 8021094:	4b7e      	ldr	r3, [pc, #504]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021096:	681b      	ldr	r3, [r3, #0]
 8021098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802109c:	e005      	b.n	80210aa <HAL_RCC_OscConfig+0x8a>
 802109e:	4b7c      	ldr	r3, [pc, #496]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80210a4:	091b      	lsrs	r3, r3, #4
 80210a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80210aa:	4293      	cmp	r3, r2
 80210ac:	d223      	bcs.n	80210f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80210ae:	687b      	ldr	r3, [r7, #4]
 80210b0:	6a1b      	ldr	r3, [r3, #32]
 80210b2:	4618      	mov	r0, r3
 80210b4:	f000 fd94 	bl	8021be0 <RCC_SetFlashLatencyFromMSIRange>
 80210b8:	4603      	mov	r3, r0
 80210ba:	2b00      	cmp	r3, #0
 80210bc:	d001      	beq.n	80210c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80210be:	2301      	movs	r3, #1
 80210c0:	e3c0      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80210c2:	4b73      	ldr	r3, [pc, #460]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210c4:	681b      	ldr	r3, [r3, #0]
 80210c6:	4a72      	ldr	r2, [pc, #456]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210c8:	f043 0308 	orr.w	r3, r3, #8
 80210cc:	6013      	str	r3, [r2, #0]
 80210ce:	4b70      	ldr	r3, [pc, #448]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210d0:	681b      	ldr	r3, [r3, #0]
 80210d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80210d6:	687b      	ldr	r3, [r7, #4]
 80210d8:	6a1b      	ldr	r3, [r3, #32]
 80210da:	496d      	ldr	r1, [pc, #436]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210dc:	4313      	orrs	r3, r2
 80210de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80210e0:	4b6b      	ldr	r3, [pc, #428]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210e2:	685b      	ldr	r3, [r3, #4]
 80210e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	69db      	ldr	r3, [r3, #28]
 80210ec:	021b      	lsls	r3, r3, #8
 80210ee:	4968      	ldr	r1, [pc, #416]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210f0:	4313      	orrs	r3, r2
 80210f2:	604b      	str	r3, [r1, #4]
 80210f4:	e025      	b.n	8021142 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80210f6:	4b66      	ldr	r3, [pc, #408]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210f8:	681b      	ldr	r3, [r3, #0]
 80210fa:	4a65      	ldr	r2, [pc, #404]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80210fc:	f043 0308 	orr.w	r3, r3, #8
 8021100:	6013      	str	r3, [r2, #0]
 8021102:	4b63      	ldr	r3, [pc, #396]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	6a1b      	ldr	r3, [r3, #32]
 802110e:	4960      	ldr	r1, [pc, #384]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021110:	4313      	orrs	r3, r2
 8021112:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021114:	4b5e      	ldr	r3, [pc, #376]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021116:	685b      	ldr	r3, [r3, #4]
 8021118:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	69db      	ldr	r3, [r3, #28]
 8021120:	021b      	lsls	r3, r3, #8
 8021122:	495b      	ldr	r1, [pc, #364]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021124:	4313      	orrs	r3, r2
 8021126:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021128:	69bb      	ldr	r3, [r7, #24]
 802112a:	2b00      	cmp	r3, #0
 802112c:	d109      	bne.n	8021142 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	6a1b      	ldr	r3, [r3, #32]
 8021132:	4618      	mov	r0, r3
 8021134:	f000 fd54 	bl	8021be0 <RCC_SetFlashLatencyFromMSIRange>
 8021138:	4603      	mov	r3, r0
 802113a:	2b00      	cmp	r3, #0
 802113c:	d001      	beq.n	8021142 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 802113e:	2301      	movs	r3, #1
 8021140:	e380      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021142:	f000 fcc1 	bl	8021ac8 <HAL_RCC_GetSysClockFreq>
 8021146:	4602      	mov	r2, r0
 8021148:	4b51      	ldr	r3, [pc, #324]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 802114a:	689b      	ldr	r3, [r3, #8]
 802114c:	091b      	lsrs	r3, r3, #4
 802114e:	f003 030f 	and.w	r3, r3, #15
 8021152:	4950      	ldr	r1, [pc, #320]	@ (8021294 <HAL_RCC_OscConfig+0x274>)
 8021154:	5ccb      	ldrb	r3, [r1, r3]
 8021156:	f003 031f 	and.w	r3, r3, #31
 802115a:	fa22 f303 	lsr.w	r3, r2, r3
 802115e:	4a4e      	ldr	r2, [pc, #312]	@ (8021298 <HAL_RCC_OscConfig+0x278>)
 8021160:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8021162:	4b4e      	ldr	r3, [pc, #312]	@ (802129c <HAL_RCC_OscConfig+0x27c>)
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	4618      	mov	r0, r3
 8021168:	f7ff fd30 	bl	8020bcc <HAL_InitTick>
 802116c:	4603      	mov	r3, r0
 802116e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8021170:	7bfb      	ldrb	r3, [r7, #15]
 8021172:	2b00      	cmp	r3, #0
 8021174:	d052      	beq.n	802121c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8021176:	7bfb      	ldrb	r3, [r7, #15]
 8021178:	e364      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	699b      	ldr	r3, [r3, #24]
 802117e:	2b00      	cmp	r3, #0
 8021180:	d032      	beq.n	80211e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8021182:	4b43      	ldr	r3, [pc, #268]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	4a42      	ldr	r2, [pc, #264]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021188:	f043 0301 	orr.w	r3, r3, #1
 802118c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 802118e:	f7ff fd6d 	bl	8020c6c <HAL_GetTick>
 8021192:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021194:	e008      	b.n	80211a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021196:	f7ff fd69 	bl	8020c6c <HAL_GetTick>
 802119a:	4602      	mov	r2, r0
 802119c:	693b      	ldr	r3, [r7, #16]
 802119e:	1ad3      	subs	r3, r2, r3
 80211a0:	2b02      	cmp	r3, #2
 80211a2:	d901      	bls.n	80211a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80211a4:	2303      	movs	r3, #3
 80211a6:	e34d      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80211a8:	4b39      	ldr	r3, [pc, #228]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	f003 0302 	and.w	r3, r3, #2
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	d0f0      	beq.n	8021196 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80211b4:	4b36      	ldr	r3, [pc, #216]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	4a35      	ldr	r2, [pc, #212]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211ba:	f043 0308 	orr.w	r3, r3, #8
 80211be:	6013      	str	r3, [r2, #0]
 80211c0:	4b33      	ldr	r3, [pc, #204]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	6a1b      	ldr	r3, [r3, #32]
 80211cc:	4930      	ldr	r1, [pc, #192]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211ce:	4313      	orrs	r3, r2
 80211d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80211d2:	4b2f      	ldr	r3, [pc, #188]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211d4:	685b      	ldr	r3, [r3, #4]
 80211d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	69db      	ldr	r3, [r3, #28]
 80211de:	021b      	lsls	r3, r3, #8
 80211e0:	492b      	ldr	r1, [pc, #172]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211e2:	4313      	orrs	r3, r2
 80211e4:	604b      	str	r3, [r1, #4]
 80211e6:	e01a      	b.n	802121e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80211e8:	4b29      	ldr	r3, [pc, #164]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	4a28      	ldr	r2, [pc, #160]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 80211ee:	f023 0301 	bic.w	r3, r3, #1
 80211f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80211f4:	f7ff fd3a 	bl	8020c6c <HAL_GetTick>
 80211f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80211fa:	e008      	b.n	802120e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80211fc:	f7ff fd36 	bl	8020c6c <HAL_GetTick>
 8021200:	4602      	mov	r2, r0
 8021202:	693b      	ldr	r3, [r7, #16]
 8021204:	1ad3      	subs	r3, r2, r3
 8021206:	2b02      	cmp	r3, #2
 8021208:	d901      	bls.n	802120e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 802120a:	2303      	movs	r3, #3
 802120c:	e31a      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 802120e:	4b20      	ldr	r3, [pc, #128]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021210:	681b      	ldr	r3, [r3, #0]
 8021212:	f003 0302 	and.w	r3, r3, #2
 8021216:	2b00      	cmp	r3, #0
 8021218:	d1f0      	bne.n	80211fc <HAL_RCC_OscConfig+0x1dc>
 802121a:	e000      	b.n	802121e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 802121c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	681b      	ldr	r3, [r3, #0]
 8021222:	f003 0301 	and.w	r3, r3, #1
 8021226:	2b00      	cmp	r3, #0
 8021228:	d073      	beq.n	8021312 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 802122a:	69bb      	ldr	r3, [r7, #24]
 802122c:	2b08      	cmp	r3, #8
 802122e:	d005      	beq.n	802123c <HAL_RCC_OscConfig+0x21c>
 8021230:	69bb      	ldr	r3, [r7, #24]
 8021232:	2b0c      	cmp	r3, #12
 8021234:	d10e      	bne.n	8021254 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021236:	697b      	ldr	r3, [r7, #20]
 8021238:	2b03      	cmp	r3, #3
 802123a:	d10b      	bne.n	8021254 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802123c:	4b14      	ldr	r3, [pc, #80]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021244:	2b00      	cmp	r3, #0
 8021246:	d063      	beq.n	8021310 <HAL_RCC_OscConfig+0x2f0>
 8021248:	687b      	ldr	r3, [r7, #4]
 802124a:	685b      	ldr	r3, [r3, #4]
 802124c:	2b00      	cmp	r3, #0
 802124e:	d15f      	bne.n	8021310 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8021250:	2301      	movs	r3, #1
 8021252:	e2f7      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021254:	687b      	ldr	r3, [r7, #4]
 8021256:	685b      	ldr	r3, [r3, #4]
 8021258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802125c:	d106      	bne.n	802126c <HAL_RCC_OscConfig+0x24c>
 802125e:	4b0c      	ldr	r3, [pc, #48]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021260:	681b      	ldr	r3, [r3, #0]
 8021262:	4a0b      	ldr	r2, [pc, #44]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021268:	6013      	str	r3, [r2, #0]
 802126a:	e025      	b.n	80212b8 <HAL_RCC_OscConfig+0x298>
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	685b      	ldr	r3, [r3, #4]
 8021270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021274:	d114      	bne.n	80212a0 <HAL_RCC_OscConfig+0x280>
 8021276:	4b06      	ldr	r3, [pc, #24]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021278:	681b      	ldr	r3, [r3, #0]
 802127a:	4a05      	ldr	r2, [pc, #20]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 802127c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8021280:	6013      	str	r3, [r2, #0]
 8021282:	4b03      	ldr	r3, [pc, #12]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021284:	681b      	ldr	r3, [r3, #0]
 8021286:	4a02      	ldr	r2, [pc, #8]	@ (8021290 <HAL_RCC_OscConfig+0x270>)
 8021288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802128c:	6013      	str	r3, [r2, #0]
 802128e:	e013      	b.n	80212b8 <HAL_RCC_OscConfig+0x298>
 8021290:	40021000 	.word	0x40021000
 8021294:	08023cdc 	.word	0x08023cdc
 8021298:	20000000 	.word	0x20000000
 802129c:	20000004 	.word	0x20000004
 80212a0:	4ba0      	ldr	r3, [pc, #640]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4a9f      	ldr	r2, [pc, #636]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80212a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80212aa:	6013      	str	r3, [r2, #0]
 80212ac:	4b9d      	ldr	r3, [pc, #628]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	4a9c      	ldr	r2, [pc, #624]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80212b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80212b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	685b      	ldr	r3, [r3, #4]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d013      	beq.n	80212e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80212c0:	f7ff fcd4 	bl	8020c6c <HAL_GetTick>
 80212c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80212c6:	e008      	b.n	80212da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80212c8:	f7ff fcd0 	bl	8020c6c <HAL_GetTick>
 80212cc:	4602      	mov	r2, r0
 80212ce:	693b      	ldr	r3, [r7, #16]
 80212d0:	1ad3      	subs	r3, r2, r3
 80212d2:	2b64      	cmp	r3, #100	@ 0x64
 80212d4:	d901      	bls.n	80212da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80212d6:	2303      	movs	r3, #3
 80212d8:	e2b4      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80212da:	4b92      	ldr	r3, [pc, #584]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80212dc:	681b      	ldr	r3, [r3, #0]
 80212de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	d0f0      	beq.n	80212c8 <HAL_RCC_OscConfig+0x2a8>
 80212e6:	e014      	b.n	8021312 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80212e8:	f7ff fcc0 	bl	8020c6c <HAL_GetTick>
 80212ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80212ee:	e008      	b.n	8021302 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80212f0:	f7ff fcbc 	bl	8020c6c <HAL_GetTick>
 80212f4:	4602      	mov	r2, r0
 80212f6:	693b      	ldr	r3, [r7, #16]
 80212f8:	1ad3      	subs	r3, r2, r3
 80212fa:	2b64      	cmp	r3, #100	@ 0x64
 80212fc:	d901      	bls.n	8021302 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80212fe:	2303      	movs	r3, #3
 8021300:	e2a0      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021302:	4b88      	ldr	r3, [pc, #544]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021304:	681b      	ldr	r3, [r3, #0]
 8021306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802130a:	2b00      	cmp	r3, #0
 802130c:	d1f0      	bne.n	80212f0 <HAL_RCC_OscConfig+0x2d0>
 802130e:	e000      	b.n	8021312 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021312:	687b      	ldr	r3, [r7, #4]
 8021314:	681b      	ldr	r3, [r3, #0]
 8021316:	f003 0302 	and.w	r3, r3, #2
 802131a:	2b00      	cmp	r3, #0
 802131c:	d060      	beq.n	80213e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 802131e:	69bb      	ldr	r3, [r7, #24]
 8021320:	2b04      	cmp	r3, #4
 8021322:	d005      	beq.n	8021330 <HAL_RCC_OscConfig+0x310>
 8021324:	69bb      	ldr	r3, [r7, #24]
 8021326:	2b0c      	cmp	r3, #12
 8021328:	d119      	bne.n	802135e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 802132a:	697b      	ldr	r3, [r7, #20]
 802132c:	2b02      	cmp	r3, #2
 802132e:	d116      	bne.n	802135e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021330:	4b7c      	ldr	r3, [pc, #496]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021332:	681b      	ldr	r3, [r3, #0]
 8021334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021338:	2b00      	cmp	r3, #0
 802133a:	d005      	beq.n	8021348 <HAL_RCC_OscConfig+0x328>
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	68db      	ldr	r3, [r3, #12]
 8021340:	2b00      	cmp	r3, #0
 8021342:	d101      	bne.n	8021348 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8021344:	2301      	movs	r3, #1
 8021346:	e27d      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021348:	4b76      	ldr	r3, [pc, #472]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 802134a:	685b      	ldr	r3, [r3, #4]
 802134c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	691b      	ldr	r3, [r3, #16]
 8021354:	061b      	lsls	r3, r3, #24
 8021356:	4973      	ldr	r1, [pc, #460]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021358:	4313      	orrs	r3, r2
 802135a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802135c:	e040      	b.n	80213e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	68db      	ldr	r3, [r3, #12]
 8021362:	2b00      	cmp	r3, #0
 8021364:	d023      	beq.n	80213ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021366:	4b6f      	ldr	r3, [pc, #444]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021368:	681b      	ldr	r3, [r3, #0]
 802136a:	4a6e      	ldr	r2, [pc, #440]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 802136c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021372:	f7ff fc7b 	bl	8020c6c <HAL_GetTick>
 8021376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021378:	e008      	b.n	802138c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802137a:	f7ff fc77 	bl	8020c6c <HAL_GetTick>
 802137e:	4602      	mov	r2, r0
 8021380:	693b      	ldr	r3, [r7, #16]
 8021382:	1ad3      	subs	r3, r2, r3
 8021384:	2b02      	cmp	r3, #2
 8021386:	d901      	bls.n	802138c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8021388:	2303      	movs	r3, #3
 802138a:	e25b      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802138c:	4b65      	ldr	r3, [pc, #404]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 802138e:	681b      	ldr	r3, [r3, #0]
 8021390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021394:	2b00      	cmp	r3, #0
 8021396:	d0f0      	beq.n	802137a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021398:	4b62      	ldr	r3, [pc, #392]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 802139a:	685b      	ldr	r3, [r3, #4]
 802139c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80213a0:	687b      	ldr	r3, [r7, #4]
 80213a2:	691b      	ldr	r3, [r3, #16]
 80213a4:	061b      	lsls	r3, r3, #24
 80213a6:	495f      	ldr	r1, [pc, #380]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80213a8:	4313      	orrs	r3, r2
 80213aa:	604b      	str	r3, [r1, #4]
 80213ac:	e018      	b.n	80213e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80213ae:	4b5d      	ldr	r3, [pc, #372]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80213b0:	681b      	ldr	r3, [r3, #0]
 80213b2:	4a5c      	ldr	r2, [pc, #368]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80213b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80213b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80213ba:	f7ff fc57 	bl	8020c6c <HAL_GetTick>
 80213be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80213c0:	e008      	b.n	80213d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80213c2:	f7ff fc53 	bl	8020c6c <HAL_GetTick>
 80213c6:	4602      	mov	r2, r0
 80213c8:	693b      	ldr	r3, [r7, #16]
 80213ca:	1ad3      	subs	r3, r2, r3
 80213cc:	2b02      	cmp	r3, #2
 80213ce:	d901      	bls.n	80213d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80213d0:	2303      	movs	r3, #3
 80213d2:	e237      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80213d4:	4b53      	ldr	r3, [pc, #332]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d1f0      	bne.n	80213c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	f003 0308 	and.w	r3, r3, #8
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d03c      	beq.n	8021466 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	695b      	ldr	r3, [r3, #20]
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d01c      	beq.n	802142e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80213f4:	4b4b      	ldr	r3, [pc, #300]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80213f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80213fa:	4a4a      	ldr	r2, [pc, #296]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80213fc:	f043 0301 	orr.w	r3, r3, #1
 8021400:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021404:	f7ff fc32 	bl	8020c6c <HAL_GetTick>
 8021408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 802140a:	e008      	b.n	802141e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802140c:	f7ff fc2e 	bl	8020c6c <HAL_GetTick>
 8021410:	4602      	mov	r2, r0
 8021412:	693b      	ldr	r3, [r7, #16]
 8021414:	1ad3      	subs	r3, r2, r3
 8021416:	2b02      	cmp	r3, #2
 8021418:	d901      	bls.n	802141e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 802141a:	2303      	movs	r3, #3
 802141c:	e212      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 802141e:	4b41      	ldr	r3, [pc, #260]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021424:	f003 0302 	and.w	r3, r3, #2
 8021428:	2b00      	cmp	r3, #0
 802142a:	d0ef      	beq.n	802140c <HAL_RCC_OscConfig+0x3ec>
 802142c:	e01b      	b.n	8021466 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802142e:	4b3d      	ldr	r3, [pc, #244]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021434:	4a3b      	ldr	r2, [pc, #236]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021436:	f023 0301 	bic.w	r3, r3, #1
 802143a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802143e:	f7ff fc15 	bl	8020c6c <HAL_GetTick>
 8021442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021444:	e008      	b.n	8021458 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021446:	f7ff fc11 	bl	8020c6c <HAL_GetTick>
 802144a:	4602      	mov	r2, r0
 802144c:	693b      	ldr	r3, [r7, #16]
 802144e:	1ad3      	subs	r3, r2, r3
 8021450:	2b02      	cmp	r3, #2
 8021452:	d901      	bls.n	8021458 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8021454:	2303      	movs	r3, #3
 8021456:	e1f5      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021458:	4b32      	ldr	r3, [pc, #200]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 802145a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802145e:	f003 0302 	and.w	r3, r3, #2
 8021462:	2b00      	cmp	r3, #0
 8021464:	d1ef      	bne.n	8021446 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	f003 0304 	and.w	r3, r3, #4
 802146e:	2b00      	cmp	r3, #0
 8021470:	f000 80a6 	beq.w	80215c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021474:	2300      	movs	r3, #0
 8021476:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8021478:	4b2a      	ldr	r3, [pc, #168]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 802147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802147c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021480:	2b00      	cmp	r3, #0
 8021482:	d10d      	bne.n	80214a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021484:	4b27      	ldr	r3, [pc, #156]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021488:	4a26      	ldr	r2, [pc, #152]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 802148a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802148e:	6593      	str	r3, [r2, #88]	@ 0x58
 8021490:	4b24      	ldr	r3, [pc, #144]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021498:	60bb      	str	r3, [r7, #8]
 802149a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802149c:	2301      	movs	r3, #1
 802149e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80214a0:	4b21      	ldr	r3, [pc, #132]	@ (8021528 <HAL_RCC_OscConfig+0x508>)
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d118      	bne.n	80214de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80214ac:	4b1e      	ldr	r3, [pc, #120]	@ (8021528 <HAL_RCC_OscConfig+0x508>)
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	4a1d      	ldr	r2, [pc, #116]	@ (8021528 <HAL_RCC_OscConfig+0x508>)
 80214b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80214b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80214b8:	f7ff fbd8 	bl	8020c6c <HAL_GetTick>
 80214bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80214be:	e008      	b.n	80214d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80214c0:	f7ff fbd4 	bl	8020c6c <HAL_GetTick>
 80214c4:	4602      	mov	r2, r0
 80214c6:	693b      	ldr	r3, [r7, #16]
 80214c8:	1ad3      	subs	r3, r2, r3
 80214ca:	2b02      	cmp	r3, #2
 80214cc:	d901      	bls.n	80214d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80214ce:	2303      	movs	r3, #3
 80214d0:	e1b8      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80214d2:	4b15      	ldr	r3, [pc, #84]	@ (8021528 <HAL_RCC_OscConfig+0x508>)
 80214d4:	681b      	ldr	r3, [r3, #0]
 80214d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80214da:	2b00      	cmp	r3, #0
 80214dc:	d0f0      	beq.n	80214c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	689b      	ldr	r3, [r3, #8]
 80214e2:	2b01      	cmp	r3, #1
 80214e4:	d108      	bne.n	80214f8 <HAL_RCC_OscConfig+0x4d8>
 80214e6:	4b0f      	ldr	r3, [pc, #60]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80214e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80214ec:	4a0d      	ldr	r2, [pc, #52]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 80214ee:	f043 0301 	orr.w	r3, r3, #1
 80214f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80214f6:	e029      	b.n	802154c <HAL_RCC_OscConfig+0x52c>
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	689b      	ldr	r3, [r3, #8]
 80214fc:	2b05      	cmp	r3, #5
 80214fe:	d115      	bne.n	802152c <HAL_RCC_OscConfig+0x50c>
 8021500:	4b08      	ldr	r3, [pc, #32]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021506:	4a07      	ldr	r2, [pc, #28]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021508:	f043 0304 	orr.w	r3, r3, #4
 802150c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021510:	4b04      	ldr	r3, [pc, #16]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021516:	4a03      	ldr	r2, [pc, #12]	@ (8021524 <HAL_RCC_OscConfig+0x504>)
 8021518:	f043 0301 	orr.w	r3, r3, #1
 802151c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021520:	e014      	b.n	802154c <HAL_RCC_OscConfig+0x52c>
 8021522:	bf00      	nop
 8021524:	40021000 	.word	0x40021000
 8021528:	40007000 	.word	0x40007000
 802152c:	4b9d      	ldr	r3, [pc, #628]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 802152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021532:	4a9c      	ldr	r2, [pc, #624]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021534:	f023 0301 	bic.w	r3, r3, #1
 8021538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 802153c:	4b99      	ldr	r3, [pc, #612]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 802153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021542:	4a98      	ldr	r2, [pc, #608]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021544:	f023 0304 	bic.w	r3, r3, #4
 8021548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 802154c:	687b      	ldr	r3, [r7, #4]
 802154e:	689b      	ldr	r3, [r3, #8]
 8021550:	2b00      	cmp	r3, #0
 8021552:	d016      	beq.n	8021582 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021554:	f7ff fb8a 	bl	8020c6c <HAL_GetTick>
 8021558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 802155a:	e00a      	b.n	8021572 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802155c:	f7ff fb86 	bl	8020c6c <HAL_GetTick>
 8021560:	4602      	mov	r2, r0
 8021562:	693b      	ldr	r3, [r7, #16]
 8021564:	1ad3      	subs	r3, r2, r3
 8021566:	f241 3288 	movw	r2, #5000	@ 0x1388
 802156a:	4293      	cmp	r3, r2
 802156c:	d901      	bls.n	8021572 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 802156e:	2303      	movs	r3, #3
 8021570:	e168      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8021572:	4b8c      	ldr	r3, [pc, #560]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021578:	f003 0302 	and.w	r3, r3, #2
 802157c:	2b00      	cmp	r3, #0
 802157e:	d0ed      	beq.n	802155c <HAL_RCC_OscConfig+0x53c>
 8021580:	e015      	b.n	80215ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021582:	f7ff fb73 	bl	8020c6c <HAL_GetTick>
 8021586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021588:	e00a      	b.n	80215a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802158a:	f7ff fb6f 	bl	8020c6c <HAL_GetTick>
 802158e:	4602      	mov	r2, r0
 8021590:	693b      	ldr	r3, [r7, #16]
 8021592:	1ad3      	subs	r3, r2, r3
 8021594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021598:	4293      	cmp	r3, r2
 802159a:	d901      	bls.n	80215a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 802159c:	2303      	movs	r3, #3
 802159e:	e151      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80215a0:	4b80      	ldr	r3, [pc, #512]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80215a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80215a6:	f003 0302 	and.w	r3, r3, #2
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d1ed      	bne.n	802158a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80215ae:	7ffb      	ldrb	r3, [r7, #31]
 80215b0:	2b01      	cmp	r3, #1
 80215b2:	d105      	bne.n	80215c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80215b4:	4b7b      	ldr	r3, [pc, #492]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80215b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80215b8:	4a7a      	ldr	r2, [pc, #488]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80215ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80215be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	681b      	ldr	r3, [r3, #0]
 80215c4:	f003 0320 	and.w	r3, r3, #32
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	d03c      	beq.n	8021646 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d01c      	beq.n	802160e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80215d4:	4b73      	ldr	r3, [pc, #460]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80215d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80215da:	4a72      	ldr	r2, [pc, #456]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80215dc:	f043 0301 	orr.w	r3, r3, #1
 80215e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80215e4:	f7ff fb42 	bl	8020c6c <HAL_GetTick>
 80215e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80215ea:	e008      	b.n	80215fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80215ec:	f7ff fb3e 	bl	8020c6c <HAL_GetTick>
 80215f0:	4602      	mov	r2, r0
 80215f2:	693b      	ldr	r3, [r7, #16]
 80215f4:	1ad3      	subs	r3, r2, r3
 80215f6:	2b02      	cmp	r3, #2
 80215f8:	d901      	bls.n	80215fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80215fa:	2303      	movs	r3, #3
 80215fc:	e122      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80215fe:	4b69      	ldr	r3, [pc, #420]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021600:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021604:	f003 0302 	and.w	r3, r3, #2
 8021608:	2b00      	cmp	r3, #0
 802160a:	d0ef      	beq.n	80215ec <HAL_RCC_OscConfig+0x5cc>
 802160c:	e01b      	b.n	8021646 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 802160e:	4b65      	ldr	r3, [pc, #404]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021614:	4a63      	ldr	r2, [pc, #396]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021616:	f023 0301 	bic.w	r3, r3, #1
 802161a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802161e:	f7ff fb25 	bl	8020c6c <HAL_GetTick>
 8021622:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8021624:	e008      	b.n	8021638 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8021626:	f7ff fb21 	bl	8020c6c <HAL_GetTick>
 802162a:	4602      	mov	r2, r0
 802162c:	693b      	ldr	r3, [r7, #16]
 802162e:	1ad3      	subs	r3, r2, r3
 8021630:	2b02      	cmp	r3, #2
 8021632:	d901      	bls.n	8021638 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8021634:	2303      	movs	r3, #3
 8021636:	e105      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8021638:	4b5a      	ldr	r3, [pc, #360]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 802163a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 802163e:	f003 0302 	and.w	r3, r3, #2
 8021642:	2b00      	cmp	r3, #0
 8021644:	d1ef      	bne.n	8021626 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802164a:	2b00      	cmp	r3, #0
 802164c:	f000 80f9 	beq.w	8021842 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021654:	2b02      	cmp	r3, #2
 8021656:	f040 80cf 	bne.w	80217f8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 802165a:	4b52      	ldr	r3, [pc, #328]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 802165c:	68db      	ldr	r3, [r3, #12]
 802165e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021660:	697b      	ldr	r3, [r7, #20]
 8021662:	f003 0203 	and.w	r2, r3, #3
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802166a:	429a      	cmp	r2, r3
 802166c:	d12c      	bne.n	80216c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 802166e:	697b      	ldr	r3, [r7, #20]
 8021670:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021678:	3b01      	subs	r3, #1
 802167a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 802167c:	429a      	cmp	r2, r3
 802167e:	d123      	bne.n	80216c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021680:	697b      	ldr	r3, [r7, #20]
 8021682:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802168a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 802168c:	429a      	cmp	r2, r3
 802168e:	d11b      	bne.n	80216c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021690:	697b      	ldr	r3, [r7, #20]
 8021692:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802169a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802169c:	429a      	cmp	r2, r3
 802169e:	d113      	bne.n	80216c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80216a0:	697b      	ldr	r3, [r7, #20]
 80216a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80216a6:	687b      	ldr	r3, [r7, #4]
 80216a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80216aa:	085b      	lsrs	r3, r3, #1
 80216ac:	3b01      	subs	r3, #1
 80216ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80216b0:	429a      	cmp	r2, r3
 80216b2:	d109      	bne.n	80216c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80216b4:	697b      	ldr	r3, [r7, #20]
 80216b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80216be:	085b      	lsrs	r3, r3, #1
 80216c0:	3b01      	subs	r3, #1
 80216c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80216c4:	429a      	cmp	r2, r3
 80216c6:	d071      	beq.n	80217ac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80216c8:	69bb      	ldr	r3, [r7, #24]
 80216ca:	2b0c      	cmp	r3, #12
 80216cc:	d068      	beq.n	80217a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80216ce:	4b35      	ldr	r3, [pc, #212]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80216d0:	681b      	ldr	r3, [r3, #0]
 80216d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	d105      	bne.n	80216e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80216da:	4b32      	ldr	r3, [pc, #200]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d001      	beq.n	80216ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80216e6:	2301      	movs	r3, #1
 80216e8:	e0ac      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80216ea:	4b2e      	ldr	r3, [pc, #184]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80216ec:	681b      	ldr	r3, [r3, #0]
 80216ee:	4a2d      	ldr	r2, [pc, #180]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 80216f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80216f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80216f6:	f7ff fab9 	bl	8020c6c <HAL_GetTick>
 80216fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80216fc:	e008      	b.n	8021710 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80216fe:	f7ff fab5 	bl	8020c6c <HAL_GetTick>
 8021702:	4602      	mov	r2, r0
 8021704:	693b      	ldr	r3, [r7, #16]
 8021706:	1ad3      	subs	r3, r2, r3
 8021708:	2b02      	cmp	r3, #2
 802170a:	d901      	bls.n	8021710 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 802170c:	2303      	movs	r3, #3
 802170e:	e099      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021710:	4b24      	ldr	r3, [pc, #144]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021718:	2b00      	cmp	r3, #0
 802171a:	d1f0      	bne.n	80216fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802171c:	4b21      	ldr	r3, [pc, #132]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 802171e:	68da      	ldr	r2, [r3, #12]
 8021720:	4b21      	ldr	r3, [pc, #132]	@ (80217a8 <HAL_RCC_OscConfig+0x788>)
 8021722:	4013      	ands	r3, r2
 8021724:	687a      	ldr	r2, [r7, #4]
 8021726:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8021728:	687a      	ldr	r2, [r7, #4]
 802172a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802172c:	3a01      	subs	r2, #1
 802172e:	0112      	lsls	r2, r2, #4
 8021730:	4311      	orrs	r1, r2
 8021732:	687a      	ldr	r2, [r7, #4]
 8021734:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8021736:	0212      	lsls	r2, r2, #8
 8021738:	4311      	orrs	r1, r2
 802173a:	687a      	ldr	r2, [r7, #4]
 802173c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 802173e:	0852      	lsrs	r2, r2, #1
 8021740:	3a01      	subs	r2, #1
 8021742:	0552      	lsls	r2, r2, #21
 8021744:	4311      	orrs	r1, r2
 8021746:	687a      	ldr	r2, [r7, #4]
 8021748:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 802174a:	0852      	lsrs	r2, r2, #1
 802174c:	3a01      	subs	r2, #1
 802174e:	0652      	lsls	r2, r2, #25
 8021750:	4311      	orrs	r1, r2
 8021752:	687a      	ldr	r2, [r7, #4]
 8021754:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8021756:	06d2      	lsls	r2, r2, #27
 8021758:	430a      	orrs	r2, r1
 802175a:	4912      	ldr	r1, [pc, #72]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 802175c:	4313      	orrs	r3, r2
 802175e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8021760:	4b10      	ldr	r3, [pc, #64]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	4a0f      	ldr	r2, [pc, #60]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 802176a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 802176c:	4b0d      	ldr	r3, [pc, #52]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 802176e:	68db      	ldr	r3, [r3, #12]
 8021770:	4a0c      	ldr	r2, [pc, #48]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8021776:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8021778:	f7ff fa78 	bl	8020c6c <HAL_GetTick>
 802177c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802177e:	e008      	b.n	8021792 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021780:	f7ff fa74 	bl	8020c6c <HAL_GetTick>
 8021784:	4602      	mov	r2, r0
 8021786:	693b      	ldr	r3, [r7, #16]
 8021788:	1ad3      	subs	r3, r2, r3
 802178a:	2b02      	cmp	r3, #2
 802178c:	d901      	bls.n	8021792 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 802178e:	2303      	movs	r3, #3
 8021790:	e058      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021792:	4b04      	ldr	r3, [pc, #16]	@ (80217a4 <HAL_RCC_OscConfig+0x784>)
 8021794:	681b      	ldr	r3, [r3, #0]
 8021796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802179a:	2b00      	cmp	r3, #0
 802179c:	d0f0      	beq.n	8021780 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 802179e:	e050      	b.n	8021842 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80217a0:	2301      	movs	r3, #1
 80217a2:	e04f      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
 80217a4:	40021000 	.word	0x40021000
 80217a8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80217ac:	4b27      	ldr	r3, [pc, #156]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 80217ae:	681b      	ldr	r3, [r3, #0]
 80217b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d144      	bne.n	8021842 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80217b8:	4b24      	ldr	r3, [pc, #144]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 80217ba:	681b      	ldr	r3, [r3, #0]
 80217bc:	4a23      	ldr	r2, [pc, #140]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 80217be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80217c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80217c4:	4b21      	ldr	r3, [pc, #132]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 80217c6:	68db      	ldr	r3, [r3, #12]
 80217c8:	4a20      	ldr	r2, [pc, #128]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 80217ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80217ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80217d0:	f7ff fa4c 	bl	8020c6c <HAL_GetTick>
 80217d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80217d6:	e008      	b.n	80217ea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80217d8:	f7ff fa48 	bl	8020c6c <HAL_GetTick>
 80217dc:	4602      	mov	r2, r0
 80217de:	693b      	ldr	r3, [r7, #16]
 80217e0:	1ad3      	subs	r3, r2, r3
 80217e2:	2b02      	cmp	r3, #2
 80217e4:	d901      	bls.n	80217ea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80217e6:	2303      	movs	r3, #3
 80217e8:	e02c      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80217ea:	4b18      	ldr	r3, [pc, #96]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 80217ec:	681b      	ldr	r3, [r3, #0]
 80217ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	d0f0      	beq.n	80217d8 <HAL_RCC_OscConfig+0x7b8>
 80217f6:	e024      	b.n	8021842 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80217f8:	69bb      	ldr	r3, [r7, #24]
 80217fa:	2b0c      	cmp	r3, #12
 80217fc:	d01f      	beq.n	802183e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80217fe:	4b13      	ldr	r3, [pc, #76]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 8021800:	681b      	ldr	r3, [r3, #0]
 8021802:	4a12      	ldr	r2, [pc, #72]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 8021804:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8021808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802180a:	f7ff fa2f 	bl	8020c6c <HAL_GetTick>
 802180e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021810:	e008      	b.n	8021824 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021812:	f7ff fa2b 	bl	8020c6c <HAL_GetTick>
 8021816:	4602      	mov	r2, r0
 8021818:	693b      	ldr	r3, [r7, #16]
 802181a:	1ad3      	subs	r3, r2, r3
 802181c:	2b02      	cmp	r3, #2
 802181e:	d901      	bls.n	8021824 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8021820:	2303      	movs	r3, #3
 8021822:	e00f      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021824:	4b09      	ldr	r3, [pc, #36]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 8021826:	681b      	ldr	r3, [r3, #0]
 8021828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802182c:	2b00      	cmp	r3, #0
 802182e:	d1f0      	bne.n	8021812 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8021830:	4b06      	ldr	r3, [pc, #24]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 8021832:	68da      	ldr	r2, [r3, #12]
 8021834:	4905      	ldr	r1, [pc, #20]	@ (802184c <HAL_RCC_OscConfig+0x82c>)
 8021836:	4b06      	ldr	r3, [pc, #24]	@ (8021850 <HAL_RCC_OscConfig+0x830>)
 8021838:	4013      	ands	r3, r2
 802183a:	60cb      	str	r3, [r1, #12]
 802183c:	e001      	b.n	8021842 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 802183e:	2301      	movs	r3, #1
 8021840:	e000      	b.n	8021844 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8021842:	2300      	movs	r3, #0
}
 8021844:	4618      	mov	r0, r3
 8021846:	3720      	adds	r7, #32
 8021848:	46bd      	mov	sp, r7
 802184a:	bd80      	pop	{r7, pc}
 802184c:	40021000 	.word	0x40021000
 8021850:	feeefffc 	.word	0xfeeefffc

08021854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021854:	b580      	push	{r7, lr}
 8021856:	b086      	sub	sp, #24
 8021858:	af00      	add	r7, sp, #0
 802185a:	6078      	str	r0, [r7, #4]
 802185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 802185e:	2300      	movs	r3, #0
 8021860:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8021862:	687b      	ldr	r3, [r7, #4]
 8021864:	2b00      	cmp	r3, #0
 8021866:	d101      	bne.n	802186c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8021868:	2301      	movs	r3, #1
 802186a:	e11d      	b.n	8021aa8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802186c:	4b90      	ldr	r3, [pc, #576]	@ (8021ab0 <HAL_RCC_ClockConfig+0x25c>)
 802186e:	681b      	ldr	r3, [r3, #0]
 8021870:	f003 030f 	and.w	r3, r3, #15
 8021874:	683a      	ldr	r2, [r7, #0]
 8021876:	429a      	cmp	r2, r3
 8021878:	d910      	bls.n	802189c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802187a:	4b8d      	ldr	r3, [pc, #564]	@ (8021ab0 <HAL_RCC_ClockConfig+0x25c>)
 802187c:	681b      	ldr	r3, [r3, #0]
 802187e:	f023 020f 	bic.w	r2, r3, #15
 8021882:	498b      	ldr	r1, [pc, #556]	@ (8021ab0 <HAL_RCC_ClockConfig+0x25c>)
 8021884:	683b      	ldr	r3, [r7, #0]
 8021886:	4313      	orrs	r3, r2
 8021888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802188a:	4b89      	ldr	r3, [pc, #548]	@ (8021ab0 <HAL_RCC_ClockConfig+0x25c>)
 802188c:	681b      	ldr	r3, [r3, #0]
 802188e:	f003 030f 	and.w	r3, r3, #15
 8021892:	683a      	ldr	r2, [r7, #0]
 8021894:	429a      	cmp	r2, r3
 8021896:	d001      	beq.n	802189c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8021898:	2301      	movs	r3, #1
 802189a:	e105      	b.n	8021aa8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802189c:	687b      	ldr	r3, [r7, #4]
 802189e:	681b      	ldr	r3, [r3, #0]
 80218a0:	f003 0302 	and.w	r3, r3, #2
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d010      	beq.n	80218ca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	689a      	ldr	r2, [r3, #8]
 80218ac:	4b81      	ldr	r3, [pc, #516]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80218ae:	689b      	ldr	r3, [r3, #8]
 80218b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80218b4:	429a      	cmp	r2, r3
 80218b6:	d908      	bls.n	80218ca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80218b8:	4b7e      	ldr	r3, [pc, #504]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80218ba:	689b      	ldr	r3, [r3, #8]
 80218bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	689b      	ldr	r3, [r3, #8]
 80218c4:	497b      	ldr	r1, [pc, #492]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80218c6:	4313      	orrs	r3, r2
 80218c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	f003 0301 	and.w	r3, r3, #1
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	d079      	beq.n	80219ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80218d6:	687b      	ldr	r3, [r7, #4]
 80218d8:	685b      	ldr	r3, [r3, #4]
 80218da:	2b03      	cmp	r3, #3
 80218dc:	d11e      	bne.n	802191c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80218de:	4b75      	ldr	r3, [pc, #468]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80218e0:	681b      	ldr	r3, [r3, #0]
 80218e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d101      	bne.n	80218ee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80218ea:	2301      	movs	r3, #1
 80218ec:	e0dc      	b.n	8021aa8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80218ee:	f000 f9d1 	bl	8021c94 <RCC_GetSysClockFreqFromPLLSource>
 80218f2:	4603      	mov	r3, r0
 80218f4:	4a70      	ldr	r2, [pc, #448]	@ (8021ab8 <HAL_RCC_ClockConfig+0x264>)
 80218f6:	4293      	cmp	r3, r2
 80218f8:	d946      	bls.n	8021988 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80218fa:	4b6e      	ldr	r3, [pc, #440]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80218fc:	689b      	ldr	r3, [r3, #8]
 80218fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021902:	2b00      	cmp	r3, #0
 8021904:	d140      	bne.n	8021988 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021906:	4b6b      	ldr	r3, [pc, #428]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021908:	689b      	ldr	r3, [r3, #8]
 802190a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802190e:	4a69      	ldr	r2, [pc, #420]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021914:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021916:	2380      	movs	r3, #128	@ 0x80
 8021918:	617b      	str	r3, [r7, #20]
 802191a:	e035      	b.n	8021988 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	685b      	ldr	r3, [r3, #4]
 8021920:	2b02      	cmp	r3, #2
 8021922:	d107      	bne.n	8021934 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021924:	4b63      	ldr	r3, [pc, #396]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802192c:	2b00      	cmp	r3, #0
 802192e:	d115      	bne.n	802195c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8021930:	2301      	movs	r3, #1
 8021932:	e0b9      	b.n	8021aa8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8021934:	687b      	ldr	r3, [r7, #4]
 8021936:	685b      	ldr	r3, [r3, #4]
 8021938:	2b00      	cmp	r3, #0
 802193a:	d107      	bne.n	802194c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 802193c:	4b5d      	ldr	r3, [pc, #372]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	f003 0302 	and.w	r3, r3, #2
 8021944:	2b00      	cmp	r3, #0
 8021946:	d109      	bne.n	802195c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8021948:	2301      	movs	r3, #1
 802194a:	e0ad      	b.n	8021aa8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802194c:	4b59      	ldr	r3, [pc, #356]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 802194e:	681b      	ldr	r3, [r3, #0]
 8021950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021954:	2b00      	cmp	r3, #0
 8021956:	d101      	bne.n	802195c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8021958:	2301      	movs	r3, #1
 802195a:	e0a5      	b.n	8021aa8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 802195c:	f000 f8b4 	bl	8021ac8 <HAL_RCC_GetSysClockFreq>
 8021960:	4603      	mov	r3, r0
 8021962:	4a55      	ldr	r2, [pc, #340]	@ (8021ab8 <HAL_RCC_ClockConfig+0x264>)
 8021964:	4293      	cmp	r3, r2
 8021966:	d90f      	bls.n	8021988 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8021968:	4b52      	ldr	r3, [pc, #328]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 802196a:	689b      	ldr	r3, [r3, #8]
 802196c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021970:	2b00      	cmp	r3, #0
 8021972:	d109      	bne.n	8021988 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021974:	4b4f      	ldr	r3, [pc, #316]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021976:	689b      	ldr	r3, [r3, #8]
 8021978:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802197c:	4a4d      	ldr	r2, [pc, #308]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 802197e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021982:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021984:	2380      	movs	r3, #128	@ 0x80
 8021986:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8021988:	4b4a      	ldr	r3, [pc, #296]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 802198a:	689b      	ldr	r3, [r3, #8]
 802198c:	f023 0203 	bic.w	r2, r3, #3
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	685b      	ldr	r3, [r3, #4]
 8021994:	4947      	ldr	r1, [pc, #284]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021996:	4313      	orrs	r3, r2
 8021998:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802199a:	f7ff f967 	bl	8020c6c <HAL_GetTick>
 802199e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80219a0:	e00a      	b.n	80219b8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80219a2:	f7ff f963 	bl	8020c6c <HAL_GetTick>
 80219a6:	4602      	mov	r2, r0
 80219a8:	693b      	ldr	r3, [r7, #16]
 80219aa:	1ad3      	subs	r3, r2, r3
 80219ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80219b0:	4293      	cmp	r3, r2
 80219b2:	d901      	bls.n	80219b8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80219b4:	2303      	movs	r3, #3
 80219b6:	e077      	b.n	8021aa8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80219b8:	4b3e      	ldr	r3, [pc, #248]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80219ba:	689b      	ldr	r3, [r3, #8]
 80219bc:	f003 020c 	and.w	r2, r3, #12
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	685b      	ldr	r3, [r3, #4]
 80219c4:	009b      	lsls	r3, r3, #2
 80219c6:	429a      	cmp	r2, r3
 80219c8:	d1eb      	bne.n	80219a2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80219ca:	697b      	ldr	r3, [r7, #20]
 80219cc:	2b80      	cmp	r3, #128	@ 0x80
 80219ce:	d105      	bne.n	80219dc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80219d0:	4b38      	ldr	r3, [pc, #224]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80219d2:	689b      	ldr	r3, [r3, #8]
 80219d4:	4a37      	ldr	r2, [pc, #220]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80219d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80219da:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	f003 0302 	and.w	r3, r3, #2
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d010      	beq.n	8021a0a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80219e8:	687b      	ldr	r3, [r7, #4]
 80219ea:	689a      	ldr	r2, [r3, #8]
 80219ec:	4b31      	ldr	r3, [pc, #196]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80219ee:	689b      	ldr	r3, [r3, #8]
 80219f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80219f4:	429a      	cmp	r2, r3
 80219f6:	d208      	bcs.n	8021a0a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80219f8:	4b2e      	ldr	r3, [pc, #184]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 80219fa:	689b      	ldr	r3, [r3, #8]
 80219fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021a00:	687b      	ldr	r3, [r7, #4]
 8021a02:	689b      	ldr	r3, [r3, #8]
 8021a04:	492b      	ldr	r1, [pc, #172]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021a06:	4313      	orrs	r3, r2
 8021a08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021a0a:	4b29      	ldr	r3, [pc, #164]	@ (8021ab0 <HAL_RCC_ClockConfig+0x25c>)
 8021a0c:	681b      	ldr	r3, [r3, #0]
 8021a0e:	f003 030f 	and.w	r3, r3, #15
 8021a12:	683a      	ldr	r2, [r7, #0]
 8021a14:	429a      	cmp	r2, r3
 8021a16:	d210      	bcs.n	8021a3a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021a18:	4b25      	ldr	r3, [pc, #148]	@ (8021ab0 <HAL_RCC_ClockConfig+0x25c>)
 8021a1a:	681b      	ldr	r3, [r3, #0]
 8021a1c:	f023 020f 	bic.w	r2, r3, #15
 8021a20:	4923      	ldr	r1, [pc, #140]	@ (8021ab0 <HAL_RCC_ClockConfig+0x25c>)
 8021a22:	683b      	ldr	r3, [r7, #0]
 8021a24:	4313      	orrs	r3, r2
 8021a26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021a28:	4b21      	ldr	r3, [pc, #132]	@ (8021ab0 <HAL_RCC_ClockConfig+0x25c>)
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	f003 030f 	and.w	r3, r3, #15
 8021a30:	683a      	ldr	r2, [r7, #0]
 8021a32:	429a      	cmp	r2, r3
 8021a34:	d001      	beq.n	8021a3a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8021a36:	2301      	movs	r3, #1
 8021a38:	e036      	b.n	8021aa8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	681b      	ldr	r3, [r3, #0]
 8021a3e:	f003 0304 	and.w	r3, r3, #4
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d008      	beq.n	8021a58 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021a46:	4b1b      	ldr	r3, [pc, #108]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021a48:	689b      	ldr	r3, [r3, #8]
 8021a4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	68db      	ldr	r3, [r3, #12]
 8021a52:	4918      	ldr	r1, [pc, #96]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021a54:	4313      	orrs	r3, r2
 8021a56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021a58:	687b      	ldr	r3, [r7, #4]
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	f003 0308 	and.w	r3, r3, #8
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d009      	beq.n	8021a78 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021a64:	4b13      	ldr	r3, [pc, #76]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021a66:	689b      	ldr	r3, [r3, #8]
 8021a68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	691b      	ldr	r3, [r3, #16]
 8021a70:	00db      	lsls	r3, r3, #3
 8021a72:	4910      	ldr	r1, [pc, #64]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021a74:	4313      	orrs	r3, r2
 8021a76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021a78:	f000 f826 	bl	8021ac8 <HAL_RCC_GetSysClockFreq>
 8021a7c:	4602      	mov	r2, r0
 8021a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8021ab4 <HAL_RCC_ClockConfig+0x260>)
 8021a80:	689b      	ldr	r3, [r3, #8]
 8021a82:	091b      	lsrs	r3, r3, #4
 8021a84:	f003 030f 	and.w	r3, r3, #15
 8021a88:	490c      	ldr	r1, [pc, #48]	@ (8021abc <HAL_RCC_ClockConfig+0x268>)
 8021a8a:	5ccb      	ldrb	r3, [r1, r3]
 8021a8c:	f003 031f 	and.w	r3, r3, #31
 8021a90:	fa22 f303 	lsr.w	r3, r2, r3
 8021a94:	4a0a      	ldr	r2, [pc, #40]	@ (8021ac0 <HAL_RCC_ClockConfig+0x26c>)
 8021a96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8021a98:	4b0a      	ldr	r3, [pc, #40]	@ (8021ac4 <HAL_RCC_ClockConfig+0x270>)
 8021a9a:	681b      	ldr	r3, [r3, #0]
 8021a9c:	4618      	mov	r0, r3
 8021a9e:	f7ff f895 	bl	8020bcc <HAL_InitTick>
 8021aa2:	4603      	mov	r3, r0
 8021aa4:	73fb      	strb	r3, [r7, #15]

  return status;
 8021aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8021aa8:	4618      	mov	r0, r3
 8021aaa:	3718      	adds	r7, #24
 8021aac:	46bd      	mov	sp, r7
 8021aae:	bd80      	pop	{r7, pc}
 8021ab0:	40022000 	.word	0x40022000
 8021ab4:	40021000 	.word	0x40021000
 8021ab8:	04c4b400 	.word	0x04c4b400
 8021abc:	08023cdc 	.word	0x08023cdc
 8021ac0:	20000000 	.word	0x20000000
 8021ac4:	20000004 	.word	0x20000004

08021ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021ac8:	b480      	push	{r7}
 8021aca:	b089      	sub	sp, #36	@ 0x24
 8021acc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8021ace:	2300      	movs	r3, #0
 8021ad0:	61fb      	str	r3, [r7, #28]
 8021ad2:	2300      	movs	r3, #0
 8021ad4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021ad8:	689b      	ldr	r3, [r3, #8]
 8021ada:	f003 030c 	and.w	r3, r3, #12
 8021ade:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021ae2:	68db      	ldr	r3, [r3, #12]
 8021ae4:	f003 0303 	and.w	r3, r3, #3
 8021ae8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021aea:	693b      	ldr	r3, [r7, #16]
 8021aec:	2b00      	cmp	r3, #0
 8021aee:	d005      	beq.n	8021afc <HAL_RCC_GetSysClockFreq+0x34>
 8021af0:	693b      	ldr	r3, [r7, #16]
 8021af2:	2b0c      	cmp	r3, #12
 8021af4:	d121      	bne.n	8021b3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8021af6:	68fb      	ldr	r3, [r7, #12]
 8021af8:	2b01      	cmp	r3, #1
 8021afa:	d11e      	bne.n	8021b3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021afc:	4b34      	ldr	r3, [pc, #208]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021afe:	681b      	ldr	r3, [r3, #0]
 8021b00:	f003 0308 	and.w	r3, r3, #8
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d107      	bne.n	8021b18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021b08:	4b31      	ldr	r3, [pc, #196]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021b0e:	0a1b      	lsrs	r3, r3, #8
 8021b10:	f003 030f 	and.w	r3, r3, #15
 8021b14:	61fb      	str	r3, [r7, #28]
 8021b16:	e005      	b.n	8021b24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021b18:	4b2d      	ldr	r3, [pc, #180]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021b1a:	681b      	ldr	r3, [r3, #0]
 8021b1c:	091b      	lsrs	r3, r3, #4
 8021b1e:	f003 030f 	and.w	r3, r3, #15
 8021b22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8021b24:	4a2b      	ldr	r2, [pc, #172]	@ (8021bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8021b26:	69fb      	ldr	r3, [r7, #28]
 8021b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021b2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021b2e:	693b      	ldr	r3, [r7, #16]
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	d10d      	bne.n	8021b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8021b34:	69fb      	ldr	r3, [r7, #28]
 8021b36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021b38:	e00a      	b.n	8021b50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8021b3a:	693b      	ldr	r3, [r7, #16]
 8021b3c:	2b04      	cmp	r3, #4
 8021b3e:	d102      	bne.n	8021b46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8021b40:	4b25      	ldr	r3, [pc, #148]	@ (8021bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8021b42:	61bb      	str	r3, [r7, #24]
 8021b44:	e004      	b.n	8021b50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8021b46:	693b      	ldr	r3, [r7, #16]
 8021b48:	2b08      	cmp	r3, #8
 8021b4a:	d101      	bne.n	8021b50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8021b4c:	4b23      	ldr	r3, [pc, #140]	@ (8021bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8021b4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8021b50:	693b      	ldr	r3, [r7, #16]
 8021b52:	2b0c      	cmp	r3, #12
 8021b54:	d134      	bne.n	8021bc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021b56:	4b1e      	ldr	r3, [pc, #120]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021b58:	68db      	ldr	r3, [r3, #12]
 8021b5a:	f003 0303 	and.w	r3, r3, #3
 8021b5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8021b60:	68bb      	ldr	r3, [r7, #8]
 8021b62:	2b02      	cmp	r3, #2
 8021b64:	d003      	beq.n	8021b6e <HAL_RCC_GetSysClockFreq+0xa6>
 8021b66:	68bb      	ldr	r3, [r7, #8]
 8021b68:	2b03      	cmp	r3, #3
 8021b6a:	d003      	beq.n	8021b74 <HAL_RCC_GetSysClockFreq+0xac>
 8021b6c:	e005      	b.n	8021b7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8021b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8021bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8021b70:	617b      	str	r3, [r7, #20]
      break;
 8021b72:	e005      	b.n	8021b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8021b74:	4b19      	ldr	r3, [pc, #100]	@ (8021bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8021b76:	617b      	str	r3, [r7, #20]
      break;
 8021b78:	e002      	b.n	8021b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8021b7a:	69fb      	ldr	r3, [r7, #28]
 8021b7c:	617b      	str	r3, [r7, #20]
      break;
 8021b7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021b80:	4b13      	ldr	r3, [pc, #76]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021b82:	68db      	ldr	r3, [r3, #12]
 8021b84:	091b      	lsrs	r3, r3, #4
 8021b86:	f003 030f 	and.w	r3, r3, #15
 8021b8a:	3301      	adds	r3, #1
 8021b8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021b8e:	4b10      	ldr	r3, [pc, #64]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021b90:	68db      	ldr	r3, [r3, #12]
 8021b92:	0a1b      	lsrs	r3, r3, #8
 8021b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021b98:	697a      	ldr	r2, [r7, #20]
 8021b9a:	fb03 f202 	mul.w	r2, r3, r2
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ba4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8021bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8021ba8:	68db      	ldr	r3, [r3, #12]
 8021baa:	0e5b      	lsrs	r3, r3, #25
 8021bac:	f003 0303 	and.w	r3, r3, #3
 8021bb0:	3301      	adds	r3, #1
 8021bb2:	005b      	lsls	r3, r3, #1
 8021bb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8021bb6:	697a      	ldr	r2, [r7, #20]
 8021bb8:	683b      	ldr	r3, [r7, #0]
 8021bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8021bbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8021bc0:	69bb      	ldr	r3, [r7, #24]
}
 8021bc2:	4618      	mov	r0, r3
 8021bc4:	3724      	adds	r7, #36	@ 0x24
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bcc:	4770      	bx	lr
 8021bce:	bf00      	nop
 8021bd0:	40021000 	.word	0x40021000
 8021bd4:	08023cec 	.word	0x08023cec
 8021bd8:	00f42400 	.word	0x00f42400
 8021bdc:	007a1200 	.word	0x007a1200

08021be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8021be0:	b580      	push	{r7, lr}
 8021be2:	b086      	sub	sp, #24
 8021be4:	af00      	add	r7, sp, #0
 8021be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8021be8:	2300      	movs	r3, #0
 8021bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021bec:	4b27      	ldr	r3, [pc, #156]	@ (8021c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d003      	beq.n	8021c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8021bf8:	f7ff f94e 	bl	8020e98 <HAL_PWREx_GetVoltageRange>
 8021bfc:	6178      	str	r0, [r7, #20]
 8021bfe:	e014      	b.n	8021c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8021c00:	4b22      	ldr	r3, [pc, #136]	@ (8021c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021c04:	4a21      	ldr	r2, [pc, #132]	@ (8021c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8021c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8021c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021c14:	60fb      	str	r3, [r7, #12]
 8021c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8021c18:	f7ff f93e 	bl	8020e98 <HAL_PWREx_GetVoltageRange>
 8021c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8021c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8021c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021c22:	4a1a      	ldr	r2, [pc, #104]	@ (8021c8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021c28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021c2a:	697b      	ldr	r3, [r7, #20]
 8021c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021c30:	d10b      	bne.n	8021c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	2b80      	cmp	r3, #128	@ 0x80
 8021c36:	d913      	bls.n	8021c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8021c3c:	d902      	bls.n	8021c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8021c3e:	2302      	movs	r3, #2
 8021c40:	613b      	str	r3, [r7, #16]
 8021c42:	e00d      	b.n	8021c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021c44:	2301      	movs	r3, #1
 8021c46:	613b      	str	r3, [r7, #16]
 8021c48:	e00a      	b.n	8021c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8021c4a:	687b      	ldr	r3, [r7, #4]
 8021c4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8021c4e:	d902      	bls.n	8021c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8021c50:	2302      	movs	r3, #2
 8021c52:	613b      	str	r3, [r7, #16]
 8021c54:	e004      	b.n	8021c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	2b70      	cmp	r3, #112	@ 0x70
 8021c5a:	d101      	bne.n	8021c60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021c5c:	2301      	movs	r3, #1
 8021c5e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8021c60:	4b0b      	ldr	r3, [pc, #44]	@ (8021c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8021c62:	681b      	ldr	r3, [r3, #0]
 8021c64:	f023 020f 	bic.w	r2, r3, #15
 8021c68:	4909      	ldr	r1, [pc, #36]	@ (8021c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8021c6a:	693b      	ldr	r3, [r7, #16]
 8021c6c:	4313      	orrs	r3, r2
 8021c6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8021c70:	4b07      	ldr	r3, [pc, #28]	@ (8021c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	f003 030f 	and.w	r3, r3, #15
 8021c78:	693a      	ldr	r2, [r7, #16]
 8021c7a:	429a      	cmp	r2, r3
 8021c7c:	d001      	beq.n	8021c82 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8021c7e:	2301      	movs	r3, #1
 8021c80:	e000      	b.n	8021c84 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8021c82:	2300      	movs	r3, #0
}
 8021c84:	4618      	mov	r0, r3
 8021c86:	3718      	adds	r7, #24
 8021c88:	46bd      	mov	sp, r7
 8021c8a:	bd80      	pop	{r7, pc}
 8021c8c:	40021000 	.word	0x40021000
 8021c90:	40022000 	.word	0x40022000

08021c94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8021c94:	b480      	push	{r7}
 8021c96:	b087      	sub	sp, #28
 8021c98:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8021d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021c9c:	68db      	ldr	r3, [r3, #12]
 8021c9e:	f003 0303 	and.w	r3, r3, #3
 8021ca2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8021ca4:	68fb      	ldr	r3, [r7, #12]
 8021ca6:	2b03      	cmp	r3, #3
 8021ca8:	d00b      	beq.n	8021cc2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8021caa:	68fb      	ldr	r3, [r7, #12]
 8021cac:	2b03      	cmp	r3, #3
 8021cae:	d825      	bhi.n	8021cfc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8021cb0:	68fb      	ldr	r3, [r7, #12]
 8021cb2:	2b01      	cmp	r3, #1
 8021cb4:	d008      	beq.n	8021cc8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8021cb6:	68fb      	ldr	r3, [r7, #12]
 8021cb8:	2b02      	cmp	r3, #2
 8021cba:	d11f      	bne.n	8021cfc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8021cbc:	4b25      	ldr	r3, [pc, #148]	@ (8021d54 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8021cbe:	613b      	str	r3, [r7, #16]
    break;
 8021cc0:	e01f      	b.n	8021d02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8021cc2:	4b25      	ldr	r3, [pc, #148]	@ (8021d58 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8021cc4:	613b      	str	r3, [r7, #16]
    break;
 8021cc6:	e01c      	b.n	8021d02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021cc8:	4b21      	ldr	r3, [pc, #132]	@ (8021d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021cca:	681b      	ldr	r3, [r3, #0]
 8021ccc:	f003 0308 	and.w	r3, r3, #8
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d107      	bne.n	8021ce4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8021d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021cda:	0a1b      	lsrs	r3, r3, #8
 8021cdc:	f003 030f 	and.w	r3, r3, #15
 8021ce0:	617b      	str	r3, [r7, #20]
 8021ce2:	e005      	b.n	8021cf0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8021d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021ce6:	681b      	ldr	r3, [r3, #0]
 8021ce8:	091b      	lsrs	r3, r3, #4
 8021cea:	f003 030f 	and.w	r3, r3, #15
 8021cee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8021cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8021d5c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8021cf2:	697b      	ldr	r3, [r7, #20]
 8021cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021cf8:	613b      	str	r3, [r7, #16]
    break;
 8021cfa:	e002      	b.n	8021d02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8021cfc:	2300      	movs	r3, #0
 8021cfe:	613b      	str	r3, [r7, #16]
    break;
 8021d00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021d02:	4b13      	ldr	r3, [pc, #76]	@ (8021d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021d04:	68db      	ldr	r3, [r3, #12]
 8021d06:	091b      	lsrs	r3, r3, #4
 8021d08:	f003 030f 	and.w	r3, r3, #15
 8021d0c:	3301      	adds	r3, #1
 8021d0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021d10:	4b0f      	ldr	r3, [pc, #60]	@ (8021d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021d12:	68db      	ldr	r3, [r3, #12]
 8021d14:	0a1b      	lsrs	r3, r3, #8
 8021d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021d1a:	693a      	ldr	r2, [r7, #16]
 8021d1c:	fb03 f202 	mul.w	r2, r3, r2
 8021d20:	68bb      	ldr	r3, [r7, #8]
 8021d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8021d26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021d28:	4b09      	ldr	r3, [pc, #36]	@ (8021d50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021d2a:	68db      	ldr	r3, [r3, #12]
 8021d2c:	0e5b      	lsrs	r3, r3, #25
 8021d2e:	f003 0303 	and.w	r3, r3, #3
 8021d32:	3301      	adds	r3, #1
 8021d34:	005b      	lsls	r3, r3, #1
 8021d36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8021d38:	693a      	ldr	r2, [r7, #16]
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8021d40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8021d42:	683b      	ldr	r3, [r7, #0]
}
 8021d44:	4618      	mov	r0, r3
 8021d46:	371c      	adds	r7, #28
 8021d48:	46bd      	mov	sp, r7
 8021d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d4e:	4770      	bx	lr
 8021d50:	40021000 	.word	0x40021000
 8021d54:	00f42400 	.word	0x00f42400
 8021d58:	007a1200 	.word	0x007a1200
 8021d5c:	08023cec 	.word	0x08023cec

08021d60 <arm_std_f32>:
 8021d60:	2901      	cmp	r1, #1
 8021d62:	d97d      	bls.n	8021e60 <arm_std_f32+0x100>
 8021d64:	b530      	push	{r4, r5, lr}
 8021d66:	ed2d 8b02 	vpush	{d8}
 8021d6a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8021e70 <arm_std_f32+0x110>
 8021d6e:	088d      	lsrs	r5, r1, #2
 8021d70:	b083      	sub	sp, #12
 8021d72:	eef0 4a47 	vmov.f32	s9, s14
 8021d76:	d028      	beq.n	8021dca <arm_std_f32+0x6a>
 8021d78:	f100 0310 	add.w	r3, r0, #16
 8021d7c:	462c      	mov	r4, r5
 8021d7e:	ed53 7a04 	vldr	s15, [r3, #-16]
 8021d82:	ed13 5a03 	vldr	s10, [r3, #-12]
 8021d86:	ed53 5a02 	vldr	s11, [r3, #-8]
 8021d8a:	ed13 6a01 	vldr	s12, [r3, #-4]
 8021d8e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8021d92:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8021d96:	ee36 7a87 	vadd.f32	s14, s13, s14
 8021d9a:	ee65 6a05 	vmul.f32	s13, s10, s10
 8021d9e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8021da2:	ee76 6a87 	vadd.f32	s13, s13, s14
 8021da6:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8021daa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8021dae:	ee77 6a26 	vadd.f32	s13, s14, s13
 8021db2:	ee26 7a06 	vmul.f32	s14, s12, s12
 8021db6:	3c01      	subs	r4, #1
 8021db8:	ee77 4a86 	vadd.f32	s9, s15, s12
 8021dbc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8021dc0:	f103 0310 	add.w	r3, r3, #16
 8021dc4:	d1db      	bne.n	8021d7e <arm_std_f32+0x1e>
 8021dc6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8021dca:	f011 0303 	ands.w	r3, r1, #3
 8021dce:	d01b      	beq.n	8021e08 <arm_std_f32+0xa8>
 8021dd0:	edd0 7a00 	vldr	s15, [r0]
 8021dd4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8021dd8:	3b01      	subs	r3, #1
 8021dda:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8021dde:	ee37 7a26 	vadd.f32	s14, s14, s13
 8021de2:	d011      	beq.n	8021e08 <arm_std_f32+0xa8>
 8021de4:	edd0 7a01 	vldr	s15, [r0, #4]
 8021de8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8021dec:	2b01      	cmp	r3, #1
 8021dee:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8021df2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8021df6:	d007      	beq.n	8021e08 <arm_std_f32+0xa8>
 8021df8:	edd0 7a02 	vldr	s15, [r0, #8]
 8021dfc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8021e00:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8021e04:	ee37 7a26 	vadd.f32	s14, s14, s13
 8021e08:	ee07 1a90 	vmov	s15, r1
 8021e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e10:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8021e14:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8021e18:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8021e1c:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8021e20:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8021e24:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8021e28:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8021e2c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8021e30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e38:	db0c      	blt.n	8021e54 <arm_std_f32+0xf4>
 8021e3a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8021e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e42:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8021e46:	d40e      	bmi.n	8021e66 <arm_std_f32+0x106>
 8021e48:	ed82 8a00 	vstr	s16, [r2]
 8021e4c:	b003      	add	sp, #12
 8021e4e:	ecbd 8b02 	vpop	{d8}
 8021e52:	bd30      	pop	{r4, r5, pc}
 8021e54:	2300      	movs	r3, #0
 8021e56:	6013      	str	r3, [r2, #0]
 8021e58:	b003      	add	sp, #12
 8021e5a:	ecbd 8b02 	vpop	{d8}
 8021e5e:	bd30      	pop	{r4, r5, pc}
 8021e60:	2300      	movs	r3, #0
 8021e62:	6013      	str	r3, [r2, #0]
 8021e64:	4770      	bx	lr
 8021e66:	9201      	str	r2, [sp, #4]
 8021e68:	f001 fe3e 	bl	8023ae8 <sqrtf>
 8021e6c:	9a01      	ldr	r2, [sp, #4]
 8021e6e:	e7eb      	b.n	8021e48 <arm_std_f32+0xe8>
 8021e70:	00000000 	.word	0x00000000

08021e74 <arm_mean_f32>:
 8021e74:	b430      	push	{r4, r5}
 8021e76:	088d      	lsrs	r5, r1, #2
 8021e78:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8021eec <arm_mean_f32+0x78>
 8021e7c:	d018      	beq.n	8021eb0 <arm_mean_f32+0x3c>
 8021e7e:	f100 0310 	add.w	r3, r0, #16
 8021e82:	462c      	mov	r4, r5
 8021e84:	ed53 5a04 	vldr	s11, [r3, #-16]
 8021e88:	ed13 6a03 	vldr	s12, [r3, #-12]
 8021e8c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8021e90:	ed13 7a01 	vldr	s14, [r3, #-4]
 8021e94:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8021e98:	3c01      	subs	r4, #1
 8021e9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8021e9e:	f103 0310 	add.w	r3, r3, #16
 8021ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021eaa:	d1eb      	bne.n	8021e84 <arm_mean_f32+0x10>
 8021eac:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8021eb0:	f011 0303 	ands.w	r3, r1, #3
 8021eb4:	d00f      	beq.n	8021ed6 <arm_mean_f32+0x62>
 8021eb6:	ed90 7a00 	vldr	s14, [r0]
 8021eba:	3b01      	subs	r3, #1
 8021ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021ec0:	d009      	beq.n	8021ed6 <arm_mean_f32+0x62>
 8021ec2:	ed90 7a01 	vldr	s14, [r0, #4]
 8021ec6:	2b01      	cmp	r3, #1
 8021ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021ecc:	bf1c      	itt	ne
 8021ece:	ed90 7a02 	vldrne	s14, [r0, #8]
 8021ed2:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8021ed6:	ee07 1a10 	vmov	s14, r1
 8021eda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8021ede:	bc30      	pop	{r4, r5}
 8021ee0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8021ee4:	edc2 6a00 	vstr	s13, [r2]
 8021ee8:	4770      	bx	lr
 8021eea:	bf00      	nop
 8021eec:	00000000 	.word	0x00000000

08021ef0 <arm_correlate_f32>:
 8021ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ef4:	4299      	cmp	r1, r3
 8021ef6:	b08d      	sub	sp, #52	@ 0x34
 8021ef8:	f0c0 824c 	bcc.w	8022394 <arm_correlate_f32+0x4a4>
 8021efc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021efe:	eba1 0c03 	sub.w	ip, r1, r3
 8021f02:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8021f06:	f04f 0e04 	mov.w	lr, #4
 8021f0a:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 8021f0e:	3101      	adds	r1, #1
 8021f10:	1ac9      	subs	r1, r1, r3
 8021f12:	3c01      	subs	r4, #1
 8021f14:	1e5e      	subs	r6, r3, #1
 8021f16:	9102      	str	r1, [sp, #8]
 8021f18:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8021f1c:	f000 8294 	beq.w	8022448 <arm_correlate_f32+0x558>
 8021f20:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8022070 <arm_correlate_f32+0x180>
 8021f24:	f1a1 0804 	sub.w	r8, r1, #4
 8021f28:	46e1      	mov	r9, ip
 8021f2a:	4605      	mov	r5, r0
 8021f2c:	2401      	movs	r4, #1
 8021f2e:	f014 0703 	ands.w	r7, r4, #3
 8021f32:	d01b      	beq.n	8021f6c <arm_correlate_f32+0x7c>
 8021f34:	ed91 7a00 	vldr	s14, [r1]
 8021f38:	edd5 6a00 	vldr	s13, [r5]
 8021f3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021f40:	3f01      	subs	r7, #1
 8021f42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021f46:	d011      	beq.n	8021f6c <arm_correlate_f32+0x7c>
 8021f48:	ed91 7a01 	vldr	s14, [r1, #4]
 8021f4c:	edd5 6a01 	vldr	s13, [r5, #4]
 8021f50:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021f54:	2f01      	cmp	r7, #1
 8021f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021f5a:	d007      	beq.n	8021f6c <arm_correlate_f32+0x7c>
 8021f5c:	ed95 7a02 	vldr	s14, [r5, #8]
 8021f60:	edd1 6a02 	vldr	s13, [r1, #8]
 8021f64:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021f68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021f6c:	1c67      	adds	r7, r4, #1
 8021f6e:	42bb      	cmp	r3, r7
 8021f70:	edc9 7a00 	vstr	s15, [r9]
 8021f74:	4641      	mov	r1, r8
 8021f76:	44f1      	add	r9, lr
 8021f78:	d03a      	beq.n	8021ff0 <arm_correlate_f32+0x100>
 8021f7a:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8021f7e:	f000 8267 	beq.w	8022450 <arm_correlate_f32+0x560>
 8021f82:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8021f86:	f100 0110 	add.w	r1, r0, #16
 8021f8a:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8022070 <arm_correlate_f32+0x180>
 8021f8e:	eb01 050a 	add.w	r5, r1, sl
 8021f92:	f108 0410 	add.w	r4, r8, #16
 8021f96:	ed11 7a04 	vldr	s14, [r1, #-16]
 8021f9a:	ed54 3a04 	vldr	s7, [r4, #-16]
 8021f9e:	ed11 6a03 	vldr	s12, [r1, #-12]
 8021fa2:	ed14 4a03 	vldr	s8, [r4, #-12]
 8021fa6:	ed51 6a02 	vldr	s13, [r1, #-8]
 8021faa:	ed54 4a02 	vldr	s9, [r4, #-8]
 8021fae:	ed51 5a01 	vldr	s11, [r1, #-4]
 8021fb2:	ed14 5a01 	vldr	s10, [r4, #-4]
 8021fb6:	ee27 7a23 	vmul.f32	s14, s14, s7
 8021fba:	ee26 6a04 	vmul.f32	s12, s12, s8
 8021fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021fc2:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8021fc6:	ee76 7a27 	vadd.f32	s15, s12, s15
 8021fca:	ee65 6a85 	vmul.f32	s13, s11, s10
 8021fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021fd2:	3110      	adds	r1, #16
 8021fd4:	428d      	cmp	r5, r1
 8021fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021fda:	f104 0410 	add.w	r4, r4, #16
 8021fde:	d1da      	bne.n	8021f96 <arm_correlate_f32+0xa6>
 8021fe0:	eb00 050a 	add.w	r5, r0, sl
 8021fe4:	eb08 010a 	add.w	r1, r8, sl
 8021fe8:	f1a8 0804 	sub.w	r8, r8, #4
 8021fec:	463c      	mov	r4, r7
 8021fee:	e79e      	b.n	8021f2e <arm_correlate_f32+0x3e>
 8021ff0:	2b03      	cmp	r3, #3
 8021ff2:	fb0e cc04 	mla	ip, lr, r4, ip
 8021ff6:	f240 81dd 	bls.w	80223b4 <arm_correlate_f32+0x4c4>
 8021ffa:	9b02      	ldr	r3, [sp, #8]
 8021ffc:	0899      	lsrs	r1, r3, #2
 8021ffe:	9103      	str	r1, [sp, #12]
 8022000:	f000 8220 	beq.w	8022444 <arm_correlate_f32+0x554>
 8022004:	08bb      	lsrs	r3, r7, #2
 8022006:	f007 0403 	and.w	r4, r7, #3
 802200a:	9300      	str	r3, [sp, #0]
 802200c:	011b      	lsls	r3, r3, #4
 802200e:	f103 0b0c 	add.w	fp, r3, #12
 8022012:	18d5      	adds	r5, r2, r3
 8022014:	1e63      	subs	r3, r4, #1
 8022016:	0109      	lsls	r1, r1, #4
 8022018:	9306      	str	r3, [sp, #24]
 802201a:	f100 080c 	add.w	r8, r0, #12
 802201e:	9401      	str	r4, [sp, #4]
 8022020:	9104      	str	r1, [sp, #16]
 8022022:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8022026:	4441      	add	r1, r8
 8022028:	f102 0310 	add.w	r3, r2, #16
 802202c:	e9cd 6009 	strd	r6, r0, [sp, #36]	@ 0x24
 8022030:	9e06      	ldr	r6, [sp, #24]
 8022032:	9405      	str	r4, [sp, #20]
 8022034:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8022038:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 802203c:	46e1      	mov	r9, ip
 802203e:	4483      	add	fp, r0
 8022040:	460f      	mov	r7, r1
 8022042:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022044:	469c      	mov	ip, r3
 8022046:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8022070 <arm_correlate_f32+0x180>
 802204a:	ed58 1a03 	vldr	s3, [r8, #-12]
 802204e:	ed18 2a02 	vldr	s4, [r8, #-8]
 8022052:	ed58 2a01 	vldr	s5, [r8, #-4]
 8022056:	ed98 0a00 	vldr	s0, [r8]
 802205a:	9900      	ldr	r1, [sp, #0]
 802205c:	eef0 5a46 	vmov.f32	s11, s12
 8022060:	eeb0 5a46 	vmov.f32	s10, s12
 8022064:	eef0 4a46 	vmov.f32	s9, s12
 8022068:	4663      	mov	r3, ip
 802206a:	4642      	mov	r2, r8
 802206c:	e005      	b.n	802207a <arm_correlate_f32+0x18a>
 802206e:	bf00      	nop
 8022070:	00000000 	.word	0x00000000
 8022074:	ed90 0a04 	vldr	s0, [r0, #16]
 8022078:	3210      	adds	r2, #16
 802207a:	ed53 6a04 	vldr	s13, [r3, #-16]
 802207e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8022082:	ed53 7a02 	vldr	s15, [r3, #-8]
 8022086:	ed13 1a01 	vldr	s2, [r3, #-4]
 802208a:	ee62 3a26 	vmul.f32	s7, s4, s13
 802208e:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8022092:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8022096:	edd2 1a01 	vldr	s3, [r2, #4]
 802209a:	ee66 6a80 	vmul.f32	s13, s13, s0
 802209e:	ee22 3a07 	vmul.f32	s6, s4, s14
 80220a2:	ee33 5a85 	vadd.f32	s10, s7, s10
 80220a6:	ee74 5a25 	vadd.f32	s11, s8, s11
 80220aa:	ee62 3a87 	vmul.f32	s7, s5, s14
 80220ae:	ee20 4a07 	vmul.f32	s8, s0, s14
 80220b2:	ee70 4aa4 	vadd.f32	s9, s1, s9
 80220b6:	ee36 6a86 	vadd.f32	s12, s13, s12
 80220ba:	ed92 2a02 	vldr	s4, [r2, #8]
 80220be:	ee27 7a21 	vmul.f32	s14, s14, s3
 80220c2:	ee73 3a85 	vadd.f32	s7, s7, s10
 80220c6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80220ca:	ee20 5a27 	vmul.f32	s10, s0, s15
 80220ce:	ee33 3a24 	vadd.f32	s6, s6, s9
 80220d2:	ee34 4a25 	vadd.f32	s8, s8, s11
 80220d6:	ee62 4aa7 	vmul.f32	s9, s5, s15
 80220da:	ee61 5aa7 	vmul.f32	s11, s3, s15
 80220de:	edd2 2a03 	vldr	s5, [r2, #12]
 80220e2:	ee67 7a82 	vmul.f32	s15, s15, s4
 80220e6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80220ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80220ee:	ee74 4a83 	vadd.f32	s9, s9, s6
 80220f2:	ee20 0a01 	vmul.f32	s0, s0, s2
 80220f6:	ee61 3a81 	vmul.f32	s7, s3, s2
 80220fa:	ee75 5a84 	vadd.f32	s11, s11, s8
 80220fe:	ee22 7a01 	vmul.f32	s14, s4, s2
 8022102:	ee21 6a22 	vmul.f32	s12, s2, s5
 8022106:	3901      	subs	r1, #1
 8022108:	f103 0310 	add.w	r3, r3, #16
 802210c:	ee70 4a24 	vadd.f32	s9, s0, s9
 8022110:	ee33 5a85 	vadd.f32	s10, s7, s10
 8022114:	ee77 5a25 	vadd.f32	s11, s14, s11
 8022118:	ee36 6a27 	vadd.f32	s12, s12, s15
 802211c:	4610      	mov	r0, r2
 802211e:	d1a9      	bne.n	8022074 <arm_correlate_f32+0x184>
 8022120:	9b01      	ldr	r3, [sp, #4]
 8022122:	b3f3      	cbz	r3, 80221a2 <arm_correlate_f32+0x2b2>
 8022124:	edd5 7a00 	vldr	s15, [r5]
 8022128:	ed9b 4a00 	vldr	s8, [fp]
 802212c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8022130:	ee62 3a27 	vmul.f32	s7, s4, s15
 8022134:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8022138:	ee64 7a27 	vmul.f32	s15, s8, s15
 802213c:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8022140:	ee35 5a23 	vadd.f32	s10, s10, s7
 8022144:	ee75 5a87 	vadd.f32	s11, s11, s14
 8022148:	ee36 6a27 	vadd.f32	s12, s12, s15
 802214c:	b34e      	cbz	r6, 80221a2 <arm_correlate_f32+0x2b2>
 802214e:	edd5 7a01 	vldr	s15, [r5, #4]
 8022152:	eddb 6a01 	vldr	s13, [fp, #4]
 8022156:	ee22 7a27 	vmul.f32	s14, s4, s15
 802215a:	ee22 3aa7 	vmul.f32	s6, s5, s15
 802215e:	ee67 3a84 	vmul.f32	s7, s15, s8
 8022162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022166:	2e01      	cmp	r6, #1
 8022168:	ee74 4a87 	vadd.f32	s9, s9, s14
 802216c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8022170:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8022174:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022178:	d013      	beq.n	80221a2 <arm_correlate_f32+0x2b2>
 802217a:	ed95 7a02 	vldr	s14, [r5, #8]
 802217e:	eddb 3a02 	vldr	s7, [fp, #8]
 8022182:	ee62 7a87 	vmul.f32	s15, s5, s14
 8022186:	ee27 4a04 	vmul.f32	s8, s14, s8
 802218a:	ee67 6a26 	vmul.f32	s13, s14, s13
 802218e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022192:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022196:	ee35 5a04 	vadd.f32	s10, s10, s8
 802219a:	ee75 5aa6 	vadd.f32	s11, s11, s13
 802219e:	ee36 6a07 	vadd.f32	s12, s12, s14
 80221a2:	f108 0810 	add.w	r8, r8, #16
 80221a6:	eb09 020e 	add.w	r2, r9, lr
 80221aa:	eb0a 030e 	add.w	r3, sl, lr
 80221ae:	4547      	cmp	r7, r8
 80221b0:	edc9 4a00 	vstr	s9, [r9]
 80221b4:	f10b 0b10 	add.w	fp, fp, #16
 80221b8:	ed82 5a00 	vstr	s10, [r2]
 80221bc:	44a1      	add	r9, r4
 80221be:	edca 5a00 	vstr	s11, [sl]
 80221c2:	ed83 6a00 	vstr	s12, [r3]
 80221c6:	44a2      	add	sl, r4
 80221c8:	f47f af3d 	bne.w	8022046 <arm_correlate_f32+0x156>
 80221cc:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 80221d0:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	@ 0x24
 80221d4:	9b03      	ldr	r3, [sp, #12]
 80221d6:	9c05      	ldr	r4, [sp, #20]
 80221d8:	9904      	ldr	r1, [sp, #16]
 80221da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80221dc:	fb04 cc03 	mla	ip, r4, r3, ip
 80221e0:	4401      	add	r1, r0
 80221e2:	009b      	lsls	r3, r3, #2
 80221e4:	460d      	mov	r5, r1
 80221e6:	9303      	str	r3, [sp, #12]
 80221e8:	9b02      	ldr	r3, [sp, #8]
 80221ea:	f013 0303 	ands.w	r3, r3, #3
 80221ee:	9301      	str	r3, [sp, #4]
 80221f0:	d071      	beq.n	80222d6 <arm_correlate_f32+0x3e6>
 80221f2:	9903      	ldr	r1, [sp, #12]
 80221f4:	9205      	str	r2, [sp, #20]
 80221f6:	f007 0403 	and.w	r4, r7, #3
 80221fa:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 80221fe:	1c4f      	adds	r7, r1, #1
 8022200:	1859      	adds	r1, r3, r1
 8022202:	1d03      	adds	r3, r0, #4
 8022204:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022208:	9400      	str	r4, [sp, #0]
 802220a:	f102 0110 	add.w	r1, r2, #16
 802220e:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8022212:	3c01      	subs	r4, #1
 8022214:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8022218:	eb02 090a 	add.w	r9, r2, sl
 802221c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8022220:	46e0      	mov	r8, ip
 8022222:	4618      	mov	r0, r3
 8022224:	460e      	mov	r6, r1
 8022226:	4622      	mov	r2, r4
 8022228:	ed5f 7a6f 	vldr	s15, [pc, #-444]	@ 8022070 <arm_correlate_f32+0x180>
 802222c:	f105 0110 	add.w	r1, r5, #16
 8022230:	4633      	mov	r3, r6
 8022232:	465c      	mov	r4, fp
 8022234:	ed11 7a04 	vldr	s14, [r1, #-16]
 8022238:	ed53 3a04 	vldr	s7, [r3, #-16]
 802223c:	ed11 6a03 	vldr	s12, [r1, #-12]
 8022240:	ed13 4a03 	vldr	s8, [r3, #-12]
 8022244:	ed51 6a02 	vldr	s13, [r1, #-8]
 8022248:	ed53 4a02 	vldr	s9, [r3, #-8]
 802224c:	ed51 5a01 	vldr	s11, [r1, #-4]
 8022250:	ed13 5a01 	vldr	s10, [r3, #-4]
 8022254:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022258:	ee26 6a04 	vmul.f32	s12, s12, s8
 802225c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022260:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022264:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022268:	ee65 6a85 	vmul.f32	s13, s11, s10
 802226c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022270:	3c01      	subs	r4, #1
 8022272:	f101 0110 	add.w	r1, r1, #16
 8022276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802227a:	f103 0310 	add.w	r3, r3, #16
 802227e:	d1d9      	bne.n	8022234 <arm_correlate_f32+0x344>
 8022280:	9b00      	ldr	r3, [sp, #0]
 8022282:	4455      	add	r5, sl
 8022284:	b1d3      	cbz	r3, 80222bc <arm_correlate_f32+0x3cc>
 8022286:	ed99 7a00 	vldr	s14, [r9]
 802228a:	edd5 6a00 	vldr	s13, [r5]
 802228e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022292:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022296:	b18a      	cbz	r2, 80222bc <arm_correlate_f32+0x3cc>
 8022298:	ed99 7a01 	vldr	s14, [r9, #4]
 802229c:	edd5 6a01 	vldr	s13, [r5, #4]
 80222a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80222a4:	2a01      	cmp	r2, #1
 80222a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80222aa:	d007      	beq.n	80222bc <arm_correlate_f32+0x3cc>
 80222ac:	ed95 7a02 	vldr	s14, [r5, #8]
 80222b0:	edd9 6a02 	vldr	s13, [r9, #8]
 80222b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80222b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80222bc:	463d      	mov	r5, r7
 80222be:	3704      	adds	r7, #4
 80222c0:	42b8      	cmp	r0, r7
 80222c2:	edc8 7a00 	vstr	s15, [r8]
 80222c6:	44f0      	add	r8, lr
 80222c8:	d1ae      	bne.n	8022228 <arm_correlate_f32+0x338>
 80222ca:	9b01      	ldr	r3, [sp, #4]
 80222cc:	9a05      	ldr	r2, [sp, #20]
 80222ce:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 80222d2:	fb0e cc03 	mla	ip, lr, r3, ip
 80222d6:	9b02      	ldr	r3, [sp, #8]
 80222d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80222dc:	08b5      	lsrs	r5, r6, #2
 80222de:	ed5f 5a9c 	vldr	s11, [pc, #-624]	@ 8022070 <arm_correlate_f32+0x180>
 80222e2:	f000 80ac 	beq.w	802243e <arm_correlate_f32+0x54e>
 80222e6:	f100 0110 	add.w	r1, r0, #16
 80222ea:	f102 0310 	add.w	r3, r2, #16
 80222ee:	462c      	mov	r4, r5
 80222f0:	ed51 6a04 	vldr	s13, [r1, #-16]
 80222f4:	ed53 3a04 	vldr	s7, [r3, #-16]
 80222f8:	ed11 7a03 	vldr	s14, [r1, #-12]
 80222fc:	ed13 4a03 	vldr	s8, [r3, #-12]
 8022300:	ed51 7a02 	vldr	s15, [r1, #-8]
 8022304:	ed53 4a02 	vldr	s9, [r3, #-8]
 8022308:	ed11 6a01 	vldr	s12, [r1, #-4]
 802230c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8022310:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8022314:	ee27 7a04 	vmul.f32	s14, s14, s8
 8022318:	ee76 6aa5 	vadd.f32	s13, s13, s11
 802231c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8022320:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022324:	ee66 6a05 	vmul.f32	s13, s12, s10
 8022328:	ee77 7a87 	vadd.f32	s15, s15, s14
 802232c:	3c01      	subs	r4, #1
 802232e:	f101 0110 	add.w	r1, r1, #16
 8022332:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8022336:	f103 0310 	add.w	r3, r3, #16
 802233a:	d1d9      	bne.n	80222f0 <arm_correlate_f32+0x400>
 802233c:	012d      	lsls	r5, r5, #4
 802233e:	1941      	adds	r1, r0, r5
 8022340:	4415      	add	r5, r2
 8022342:	f016 0303 	ands.w	r3, r6, #3
 8022346:	d01b      	beq.n	8022380 <arm_correlate_f32+0x490>
 8022348:	edd5 7a00 	vldr	s15, [r5]
 802234c:	ed91 7a00 	vldr	s14, [r1]
 8022350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022354:	3b01      	subs	r3, #1
 8022356:	ee75 5aa7 	vadd.f32	s11, s11, s15
 802235a:	d011      	beq.n	8022380 <arm_correlate_f32+0x490>
 802235c:	edd5 7a01 	vldr	s15, [r5, #4]
 8022360:	ed91 7a01 	vldr	s14, [r1, #4]
 8022364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022368:	2b01      	cmp	r3, #1
 802236a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 802236e:	d007      	beq.n	8022380 <arm_correlate_f32+0x490>
 8022370:	edd1 7a02 	vldr	s15, [r1, #8]
 8022374:	ed95 7a02 	vldr	s14, [r5, #8]
 8022378:	ee67 7a87 	vmul.f32	s15, s15, s14
 802237c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022380:	3e01      	subs	r6, #1
 8022382:	edcc 5a00 	vstr	s11, [ip]
 8022386:	f100 0004 	add.w	r0, r0, #4
 802238a:	44f4      	add	ip, lr
 802238c:	d1a6      	bne.n	80222dc <arm_correlate_f32+0x3ec>
 802238e:	b00d      	add	sp, #52	@ 0x34
 8022390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022394:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 8022398:	4606      	mov	r6, r0
 802239a:	3c02      	subs	r4, #2
 802239c:	4610      	mov	r0, r2
 802239e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80223a0:	440c      	add	r4, r1
 80223a2:	460d      	mov	r5, r1
 80223a4:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 80223a8:	4619      	mov	r1, r3
 80223aa:	4632      	mov	r2, r6
 80223ac:	f06f 0e03 	mvn.w	lr, #3
 80223b0:	462b      	mov	r3, r5
 80223b2:	e5aa      	b.n	8021f0a <arm_correlate_f32+0x1a>
 80223b4:	9902      	ldr	r1, [sp, #8]
 80223b6:	2900      	cmp	r1, #0
 80223b8:	d090      	beq.n	80222dc <arm_correlate_f32+0x3ec>
 80223ba:	9902      	ldr	r1, [sp, #8]
 80223bc:	ed1f 6ad4 	vldr	s12, [pc, #-848]	@ 8022070 <arm_correlate_f32+0x180>
 80223c0:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80223c4:	eb00 0708 	add.w	r7, r0, r8
 80223c8:	4601      	mov	r1, r0
 80223ca:	4665      	mov	r5, ip
 80223cc:	e020      	b.n	8022410 <arm_correlate_f32+0x520>
 80223ce:	edd2 7a00 	vldr	s15, [r2]
 80223d2:	ecb4 7a01 	vldmia	r4!, {s14}
 80223d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80223da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80223de:	b18e      	cbz	r6, 8022404 <arm_correlate_f32+0x514>
 80223e0:	ed92 7a01 	vldr	s14, [r2, #4]
 80223e4:	edd1 6a01 	vldr	s13, [r1, #4]
 80223e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80223ec:	2b02      	cmp	r3, #2
 80223ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80223f2:	d007      	beq.n	8022404 <arm_correlate_f32+0x514>
 80223f4:	ed91 7a02 	vldr	s14, [r1, #8]
 80223f8:	edd2 6a02 	vldr	s13, [r2, #8]
 80223fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022404:	42bc      	cmp	r4, r7
 8022406:	edc5 7a00 	vstr	s15, [r5]
 802240a:	4621      	mov	r1, r4
 802240c:	4475      	add	r5, lr
 802240e:	d00b      	beq.n	8022428 <arm_correlate_f32+0x538>
 8022410:	460c      	mov	r4, r1
 8022412:	2b00      	cmp	r3, #0
 8022414:	d1db      	bne.n	80223ce <arm_correlate_f32+0x4de>
 8022416:	1d0c      	adds	r4, r1, #4
 8022418:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8022458 <arm_correlate_f32+0x568>
 802241c:	42bc      	cmp	r4, r7
 802241e:	edc5 7a00 	vstr	s15, [r5]
 8022422:	4621      	mov	r1, r4
 8022424:	4475      	add	r5, lr
 8022426:	d1f3      	bne.n	8022410 <arm_correlate_f32+0x520>
 8022428:	9b02      	ldr	r3, [sp, #8]
 802242a:	4440      	add	r0, r8
 802242c:	fb0e cc03 	mla	ip, lr, r3, ip
 8022430:	2e00      	cmp	r6, #0
 8022432:	d0ac      	beq.n	802238e <arm_correlate_f32+0x49e>
 8022434:	08b5      	lsrs	r5, r6, #2
 8022436:	eddf 5a08 	vldr	s11, [pc, #32]	@ 8022458 <arm_correlate_f32+0x568>
 802243a:	f47f af54 	bne.w	80222e6 <arm_correlate_f32+0x3f6>
 802243e:	4615      	mov	r5, r2
 8022440:	4601      	mov	r1, r0
 8022442:	e77e      	b.n	8022342 <arm_correlate_f32+0x452>
 8022444:	4605      	mov	r5, r0
 8022446:	e6cf      	b.n	80221e8 <arm_correlate_f32+0x2f8>
 8022448:	9902      	ldr	r1, [sp, #8]
 802244a:	2900      	cmp	r1, #0
 802244c:	d1b5      	bne.n	80223ba <arm_correlate_f32+0x4ca>
 802244e:	e79e      	b.n	802238e <arm_correlate_f32+0x49e>
 8022450:	eddf 7a01 	vldr	s15, [pc, #4]	@ 8022458 <arm_correlate_f32+0x568>
 8022454:	4605      	mov	r5, r0
 8022456:	e5c7      	b.n	8021fe8 <arm_correlate_f32+0xf8>
 8022458:	00000000 	.word	0x00000000

0802245c <arm_conv_f32>:
 802245c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022460:	b08b      	sub	sp, #44	@ 0x2c
 8022462:	4299      	cmp	r1, r3
 8022464:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8022466:	d205      	bcs.n	8022474 <arm_conv_f32+0x18>
 8022468:	4606      	mov	r6, r0
 802246a:	460c      	mov	r4, r1
 802246c:	4610      	mov	r0, r2
 802246e:	4619      	mov	r1, r3
 8022470:	4632      	mov	r2, r6
 8022472:	4623      	mov	r3, r4
 8022474:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 8022478:	3101      	adds	r1, #1
 802247a:	1ac9      	subs	r1, r1, r3
 802247c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022480:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8022484:	9101      	str	r1, [sp, #4]
 8022486:	1e59      	subs	r1, r3, #1
 8022488:	eb02 070b 	add.w	r7, r2, fp
 802248c:	f000 8277 	beq.w	802297e <arm_conv_f32+0x522>
 8022490:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 8022750 <arm_conv_f32+0x2f4>
 8022494:	f102 0904 	add.w	r9, r2, #4
 8022498:	46aa      	mov	sl, r5
 802249a:	4680      	mov	r8, r0
 802249c:	2401      	movs	r4, #1
 802249e:	f014 0603 	ands.w	r6, r4, #3
 80224a2:	d01b      	beq.n	80224dc <arm_conv_f32+0x80>
 80224a4:	ed92 7a00 	vldr	s14, [r2]
 80224a8:	edd8 6a00 	vldr	s13, [r8]
 80224ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80224b0:	3e01      	subs	r6, #1
 80224b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80224b6:	d011      	beq.n	80224dc <arm_conv_f32+0x80>
 80224b8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80224bc:	edd8 6a01 	vldr	s13, [r8, #4]
 80224c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80224c4:	2e01      	cmp	r6, #1
 80224c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80224ca:	d007      	beq.n	80224dc <arm_conv_f32+0x80>
 80224cc:	ed98 7a02 	vldr	s14, [r8, #8]
 80224d0:	ed52 6a02 	vldr	s13, [r2, #-8]
 80224d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80224d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80224dc:	3401      	adds	r4, #1
 80224de:	42a3      	cmp	r3, r4
 80224e0:	ecea 7a01 	vstmia	sl!, {s15}
 80224e4:	464a      	mov	r2, r9
 80224e6:	d03a      	beq.n	802255e <arm_conv_f32+0x102>
 80224e8:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 80224ec:	f000 824c 	beq.w	8022988 <arm_conv_f32+0x52c>
 80224f0:	f100 0210 	add.w	r2, r0, #16
 80224f4:	ea4f 180e 	mov.w	r8, lr, lsl #4
 80224f8:	eddf 7a95 	vldr	s15, [pc, #596]	@ 8022750 <arm_conv_f32+0x2f4>
 80224fc:	eb02 0c08 	add.w	ip, r2, r8
 8022500:	f1a9 0610 	sub.w	r6, r9, #16
 8022504:	ed12 7a04 	vldr	s14, [r2, #-16]
 8022508:	edd6 3a04 	vldr	s7, [r6, #16]
 802250c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8022510:	ed96 4a03 	vldr	s8, [r6, #12]
 8022514:	ed52 6a02 	vldr	s13, [r2, #-8]
 8022518:	edd6 4a02 	vldr	s9, [r6, #8]
 802251c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8022520:	ed96 5a01 	vldr	s10, [r6, #4]
 8022524:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022528:	ee26 6a04 	vmul.f32	s12, s12, s8
 802252c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022530:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022534:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022538:	ee65 6a85 	vmul.f32	s13, s11, s10
 802253c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022540:	3210      	adds	r2, #16
 8022542:	4594      	cmp	ip, r2
 8022544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022548:	f1a6 0610 	sub.w	r6, r6, #16
 802254c:	d1da      	bne.n	8022504 <arm_conv_f32+0xa8>
 802254e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8022552:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8022556:	4480      	add	r8, r0
 8022558:	f109 0904 	add.w	r9, r9, #4
 802255c:	e79f      	b.n	802249e <arm_conv_f32+0x42>
 802255e:	2b03      	cmp	r3, #3
 8022560:	445d      	add	r5, fp
 8022562:	f240 80e9 	bls.w	8022738 <arm_conv_f32+0x2dc>
 8022566:	9b01      	ldr	r3, [sp, #4]
 8022568:	089a      	lsrs	r2, r3, #2
 802256a:	9202      	str	r2, [sp, #8]
 802256c:	f000 8203 	beq.w	8022976 <arm_conv_f32+0x51a>
 8022570:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8022574:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8022578:	0112      	lsls	r2, r2, #4
 802257a:	f004 0603 	and.w	r6, r4, #3
 802257e:	9203      	str	r2, [sp, #12]
 8022580:	f1a3 0a10 	sub.w	sl, r3, #16
 8022584:	f1a3 020c 	sub.w	r2, r3, #12
 8022588:	3b08      	subs	r3, #8
 802258a:	9204      	str	r2, [sp, #16]
 802258c:	9305      	str	r3, [sp, #20]
 802258e:	f106 39ff 	add.w	r9, r6, #4294967295
 8022592:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8022596:	9a03      	ldr	r2, [sp, #12]
 8022598:	f100 0c1c 	add.w	ip, r0, #28
 802259c:	e9cd 4106 	strd	r4, r1, [sp, #24]
 80225a0:	464c      	mov	r4, r9
 80225a2:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 80225a6:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 80225aa:	f1a7 0310 	sub.w	r3, r7, #16
 80225ae:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80225b2:	eb05 0b02 	add.w	fp, r5, r2
 80225b6:	461f      	mov	r7, r3
 80225b8:	3510      	adds	r5, #16
 80225ba:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8022750 <arm_conv_f32+0x2f4>
 80225be:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 80225c2:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 80225c6:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 80225ca:	eeb0 5a46 	vmov.f32	s10, s12
 80225ce:	eef0 4a46 	vmov.f32	s9, s12
 80225d2:	eef0 5a46 	vmov.f32	s11, s12
 80225d6:	463a      	mov	r2, r7
 80225d8:	4663      	mov	r3, ip
 80225da:	4641      	mov	r1, r8
 80225dc:	edd2 6a04 	vldr	s13, [r2, #16]
 80225e0:	ed13 0a04 	vldr	s0, [r3, #-16]
 80225e4:	ed92 7a03 	vldr	s14, [r2, #12]
 80225e8:	edd2 7a02 	vldr	s15, [r2, #8]
 80225ec:	edd2 0a01 	vldr	s1, [r2, #4]
 80225f0:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80225f4:	ee62 3a26 	vmul.f32	s7, s4, s13
 80225f8:	ee61 2a26 	vmul.f32	s5, s2, s13
 80225fc:	ed13 1a03 	vldr	s2, [r3, #-12]
 8022600:	ee66 6a80 	vmul.f32	s13, s13, s0
 8022604:	ee21 4a87 	vmul.f32	s8, s3, s14
 8022608:	ee73 4a24 	vadd.f32	s9, s6, s9
 802260c:	ee33 5a85 	vadd.f32	s10, s7, s10
 8022610:	ee22 3a07 	vmul.f32	s6, s4, s14
 8022614:	ed53 1a02 	vldr	s3, [r3, #-8]
 8022618:	ee72 2aa5 	vadd.f32	s5, s5, s11
 802261c:	ee36 6a86 	vadd.f32	s12, s13, s12
 8022620:	ee60 3a07 	vmul.f32	s7, s0, s14
 8022624:	ee27 7a01 	vmul.f32	s14, s14, s2
 8022628:	ee33 3a24 	vadd.f32	s6, s6, s9
 802262c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8022630:	ee74 2a22 	vadd.f32	s5, s8, s5
 8022634:	ee60 4a27 	vmul.f32	s9, s0, s15
 8022638:	ee22 4a27 	vmul.f32	s8, s4, s15
 802263c:	ee73 3a85 	vadd.f32	s7, s7, s10
 8022640:	ed13 2a01 	vldr	s4, [r3, #-4]
 8022644:	ee21 5a27 	vmul.f32	s10, s2, s15
 8022648:	ee67 7aa1 	vmul.f32	s15, s15, s3
 802264c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8022650:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022654:	ee34 4a22 	vadd.f32	s8, s8, s5
 8022658:	ee60 5a20 	vmul.f32	s11, s0, s1
 802265c:	ee21 3a20 	vmul.f32	s6, s2, s1
 8022660:	ee35 5a23 	vadd.f32	s10, s10, s7
 8022664:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8022668:	ee20 6a82 	vmul.f32	s12, s1, s4
 802266c:	3901      	subs	r1, #1
 802266e:	f1a2 0210 	sub.w	r2, r2, #16
 8022672:	ee75 5a84 	vadd.f32	s11, s11, s8
 8022676:	ee73 4a24 	vadd.f32	s9, s6, s9
 802267a:	ee37 5a05 	vadd.f32	s10, s14, s10
 802267e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022682:	f103 0310 	add.w	r3, r3, #16
 8022686:	d1a9      	bne.n	80225dc <arm_conv_f32+0x180>
 8022688:	eb0a 030c 	add.w	r3, sl, ip
 802268c:	2e00      	cmp	r6, #0
 802268e:	d042      	beq.n	8022716 <arm_conv_f32+0x2ba>
 8022690:	edde 7a00 	vldr	s15, [lr]
 8022694:	ed93 4a00 	vldr	s8, [r3]
 8022698:	ee61 6a27 	vmul.f32	s13, s2, s15
 802269c:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80226a0:	ee22 7a27 	vmul.f32	s14, s4, s15
 80226a4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80226a8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80226ac:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80226b0:	ee35 5a07 	vadd.f32	s10, s10, s14
 80226b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80226b8:	eb09 030c 	add.w	r3, r9, ip
 80226bc:	b35c      	cbz	r4, 8022716 <arm_conv_f32+0x2ba>
 80226be:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80226c2:	edd3 6a00 	vldr	s13, [r3]
 80226c6:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80226ca:	ee22 3a27 	vmul.f32	s6, s4, s15
 80226ce:	ee67 3a84 	vmul.f32	s7, s15, s8
 80226d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80226d6:	2c01      	cmp	r4, #1
 80226d8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80226dc:	ee74 4a83 	vadd.f32	s9, s9, s6
 80226e0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80226e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80226e8:	eb00 030c 	add.w	r3, r0, ip
 80226ec:	d013      	beq.n	8022716 <arm_conv_f32+0x2ba>
 80226ee:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80226f2:	edd3 3a00 	vldr	s7, [r3]
 80226f6:	ee62 7a07 	vmul.f32	s15, s4, s14
 80226fa:	ee27 4a04 	vmul.f32	s8, s14, s8
 80226fe:	ee67 6a26 	vmul.f32	s13, s14, s13
 8022702:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022706:	ee75 5aa7 	vadd.f32	s11, s11, s15
 802270a:	ee74 4a84 	vadd.f32	s9, s9, s8
 802270e:	ee35 5a26 	vadd.f32	s10, s10, s13
 8022712:	ee36 6a07 	vadd.f32	s12, s12, s14
 8022716:	45ab      	cmp	fp, r5
 8022718:	ed45 5a04 	vstr	s11, [r5, #-16]
 802271c:	ed45 4a03 	vstr	s9, [r5, #-12]
 8022720:	ed05 5a02 	vstr	s10, [r5, #-8]
 8022724:	ed05 6a01 	vstr	s12, [r5, #-4]
 8022728:	f10c 0c10 	add.w	ip, ip, #16
 802272c:	f105 0310 	add.w	r3, r5, #16
 8022730:	f000 809e 	beq.w	8022870 <arm_conv_f32+0x414>
 8022734:	461d      	mov	r5, r3
 8022736:	e740      	b.n	80225ba <arm_conv_f32+0x15e>
 8022738:	9a01      	ldr	r2, [sp, #4]
 802273a:	46ac      	mov	ip, r5
 802273c:	2a00      	cmp	r2, #0
 802273e:	d037      	beq.n	80227b0 <arm_conv_f32+0x354>
 8022740:	9a01      	ldr	r2, [sp, #4]
 8022742:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 8022750 <arm_conv_f32+0x2f4>
 8022746:	0096      	lsls	r6, r2, #2
 8022748:	eb05 0c06 	add.w	ip, r5, r6
 802274c:	4604      	mov	r4, r0
 802274e:	e021      	b.n	8022794 <arm_conv_f32+0x338>
 8022750:	00000000 	.word	0x00000000
 8022754:	edd7 7a00 	vldr	s15, [r7]
 8022758:	ecb2 7a01 	vldmia	r2!, {s14}
 802275c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022760:	ee77 7a86 	vadd.f32	s15, s15, s12
 8022764:	b189      	cbz	r1, 802278a <arm_conv_f32+0x32e>
 8022766:	ed17 7a01 	vldr	s14, [r7, #-4]
 802276a:	edd4 6a01 	vldr	s13, [r4, #4]
 802276e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022772:	2b02      	cmp	r3, #2
 8022774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022778:	d007      	beq.n	802278a <arm_conv_f32+0x32e>
 802277a:	ed94 7a02 	vldr	s14, [r4, #8]
 802277e:	ed57 6a02 	vldr	s13, [r7, #-8]
 8022782:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022786:	ee77 7a87 	vadd.f32	s15, s15, s14
 802278a:	ece5 7a01 	vstmia	r5!, {s15}
 802278e:	4565      	cmp	r5, ip
 8022790:	4614      	mov	r4, r2
 8022792:	d00a      	beq.n	80227aa <arm_conv_f32+0x34e>
 8022794:	4622      	mov	r2, r4
 8022796:	2b00      	cmp	r3, #0
 8022798:	d1dc      	bne.n	8022754 <arm_conv_f32+0x2f8>
 802279a:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8022750 <arm_conv_f32+0x2f4>
 802279e:	ece5 7a01 	vstmia	r5!, {s15}
 80227a2:	1d22      	adds	r2, r4, #4
 80227a4:	4565      	cmp	r5, ip
 80227a6:	4614      	mov	r4, r2
 80227a8:	d1f4      	bne.n	8022794 <arm_conv_f32+0x338>
 80227aa:	4430      	add	r0, r6
 80227ac:	2900      	cmp	r1, #0
 80227ae:	d059      	beq.n	8022864 <arm_conv_f32+0x408>
 80227b0:	088d      	lsrs	r5, r1, #2
 80227b2:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 8022750 <arm_conv_f32+0x2f4>
 80227b6:	d058      	beq.n	802286a <arm_conv_f32+0x40e>
 80227b8:	f100 0210 	add.w	r2, r0, #16
 80227bc:	f1a7 0310 	sub.w	r3, r7, #16
 80227c0:	462c      	mov	r4, r5
 80227c2:	ed52 6a04 	vldr	s13, [r2, #-16]
 80227c6:	edd3 3a04 	vldr	s7, [r3, #16]
 80227ca:	ed12 7a03 	vldr	s14, [r2, #-12]
 80227ce:	ed93 4a03 	vldr	s8, [r3, #12]
 80227d2:	ed52 7a02 	vldr	s15, [r2, #-8]
 80227d6:	edd3 4a02 	vldr	s9, [r3, #8]
 80227da:	ed12 6a01 	vldr	s12, [r2, #-4]
 80227de:	ed93 5a01 	vldr	s10, [r3, #4]
 80227e2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80227e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80227ea:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80227ee:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80227f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80227f6:	ee66 6a05 	vmul.f32	s13, s12, s10
 80227fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80227fe:	3c01      	subs	r4, #1
 8022800:	f102 0210 	add.w	r2, r2, #16
 8022804:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8022808:	f1a3 0310 	sub.w	r3, r3, #16
 802280c:	d1d9      	bne.n	80227c2 <arm_conv_f32+0x366>
 802280e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8022812:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8022816:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 802281a:	f011 0203 	ands.w	r2, r1, #3
 802281e:	d01b      	beq.n	8022858 <arm_conv_f32+0x3fc>
 8022820:	edd3 7a00 	vldr	s15, [r3]
 8022824:	ed95 7a00 	vldr	s14, [r5]
 8022828:	ee67 7a87 	vmul.f32	s15, s15, s14
 802282c:	3a01      	subs	r2, #1
 802282e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022832:	d011      	beq.n	8022858 <arm_conv_f32+0x3fc>
 8022834:	ed53 7a01 	vldr	s15, [r3, #-4]
 8022838:	ed95 7a01 	vldr	s14, [r5, #4]
 802283c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022840:	2a01      	cmp	r2, #1
 8022842:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022846:	d007      	beq.n	8022858 <arm_conv_f32+0x3fc>
 8022848:	edd5 7a02 	vldr	s15, [r5, #8]
 802284c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8022850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022854:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022858:	3901      	subs	r1, #1
 802285a:	ecec 5a01 	vstmia	ip!, {s11}
 802285e:	f100 0004 	add.w	r0, r0, #4
 8022862:	d1a5      	bne.n	80227b0 <arm_conv_f32+0x354>
 8022864:	b00b      	add	sp, #44	@ 0x2c
 8022866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802286a:	463b      	mov	r3, r7
 802286c:	4605      	mov	r5, r0
 802286e:	e7d4      	b.n	802281a <arm_conv_f32+0x3be>
 8022870:	9b02      	ldr	r3, [sp, #8]
 8022872:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8022876:	009b      	lsls	r3, r3, #2
 8022878:	9302      	str	r3, [sp, #8]
 802287a:	9b03      	ldr	r3, [sp, #12]
 802287c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8022880:	4403      	add	r3, r0
 8022882:	465d      	mov	r5, fp
 8022884:	469e      	mov	lr, r3
 8022886:	9b01      	ldr	r3, [sp, #4]
 8022888:	f013 0c03 	ands.w	ip, r3, #3
 802288c:	d075      	beq.n	802297a <arm_conv_f32+0x51e>
 802288e:	9b02      	ldr	r3, [sp, #8]
 8022890:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8022894:	f004 0403 	and.w	r4, r4, #3
 8022898:	f104 3bff 	add.w	fp, r4, #4294967295
 802289c:	f103 0801 	add.w	r8, r3, #1
 80228a0:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80228a4:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80228a8:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80228ac:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80228b0:	f1a7 0210 	sub.w	r2, r7, #16
 80228b4:	4618      	mov	r0, r3
 80228b6:	465b      	mov	r3, fp
 80228b8:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80228bc:	468b      	mov	fp, r1
 80228be:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80228c2:	4621      	mov	r1, r4
 80228c4:	4617      	mov	r7, r2
 80228c6:	461c      	mov	r4, r3
 80228c8:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 8022750 <arm_conv_f32+0x2f4>
 80228cc:	f10e 0210 	add.w	r2, lr, #16
 80228d0:	463b      	mov	r3, r7
 80228d2:	4656      	mov	r6, sl
 80228d4:	ed12 7a04 	vldr	s14, [r2, #-16]
 80228d8:	edd3 3a04 	vldr	s7, [r3, #16]
 80228dc:	ed12 6a03 	vldr	s12, [r2, #-12]
 80228e0:	ed93 4a03 	vldr	s8, [r3, #12]
 80228e4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80228e8:	edd3 4a02 	vldr	s9, [r3, #8]
 80228ec:	ed52 5a01 	vldr	s11, [r2, #-4]
 80228f0:	ed93 5a01 	vldr	s10, [r3, #4]
 80228f4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80228f8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80228fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022900:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022904:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022908:	ee65 6a85 	vmul.f32	s13, s11, s10
 802290c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022910:	3e01      	subs	r6, #1
 8022912:	f102 0210 	add.w	r2, r2, #16
 8022916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802291a:	f1a3 0310 	sub.w	r3, r3, #16
 802291e:	d1d9      	bne.n	80228d4 <arm_conv_f32+0x478>
 8022920:	4486      	add	lr, r0
 8022922:	b1d1      	cbz	r1, 802295a <arm_conv_f32+0x4fe>
 8022924:	ed99 7a00 	vldr	s14, [r9]
 8022928:	edde 6a00 	vldr	s13, [lr]
 802292c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022930:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022934:	b18c      	cbz	r4, 802295a <arm_conv_f32+0x4fe>
 8022936:	ed19 7a01 	vldr	s14, [r9, #-4]
 802293a:	edde 6a01 	vldr	s13, [lr, #4]
 802293e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022942:	2c01      	cmp	r4, #1
 8022944:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022948:	d007      	beq.n	802295a <arm_conv_f32+0x4fe>
 802294a:	ed9e 7a02 	vldr	s14, [lr, #8]
 802294e:	ed59 6a02 	vldr	s13, [r9, #-8]
 8022952:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022956:	ee77 7a87 	vadd.f32	s15, s15, s14
 802295a:	ece5 7a01 	vstmia	r5!, {s15}
 802295e:	4565      	cmp	r5, ip
 8022960:	46c6      	mov	lr, r8
 8022962:	f108 0804 	add.w	r8, r8, #4
 8022966:	d1af      	bne.n	80228c8 <arm_conv_f32+0x46c>
 8022968:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 802296c:	4659      	mov	r1, fp
 802296e:	9b01      	ldr	r3, [sp, #4]
 8022970:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8022974:	e71c      	b.n	80227b0 <arm_conv_f32+0x354>
 8022976:	4686      	mov	lr, r0
 8022978:	e785      	b.n	8022886 <arm_conv_f32+0x42a>
 802297a:	46ac      	mov	ip, r5
 802297c:	e7f7      	b.n	802296e <arm_conv_f32+0x512>
 802297e:	9a01      	ldr	r2, [sp, #4]
 8022980:	2a00      	cmp	r2, #0
 8022982:	f47f aedd 	bne.w	8022740 <arm_conv_f32+0x2e4>
 8022986:	e76d      	b.n	8022864 <arm_conv_f32+0x408>
 8022988:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 8022750 <arm_conv_f32+0x2f4>
 802298c:	4680      	mov	r8, r0
 802298e:	e5e3      	b.n	8022558 <arm_conv_f32+0xfc>

08022990 <arm_sub_f32>:
 8022990:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8022994:	b4f0      	push	{r4, r5, r6, r7}
 8022996:	d033      	beq.n	8022a00 <arm_sub_f32+0x70>
 8022998:	f100 0610 	add.w	r6, r0, #16
 802299c:	f101 0510 	add.w	r5, r1, #16
 80229a0:	f102 0410 	add.w	r4, r2, #16
 80229a4:	4667      	mov	r7, ip
 80229a6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80229aa:	ed56 7a04 	vldr	s15, [r6, #-16]
 80229ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80229b2:	3f01      	subs	r7, #1
 80229b4:	ed44 7a04 	vstr	s15, [r4, #-16]
 80229b8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80229bc:	ed56 7a03 	vldr	s15, [r6, #-12]
 80229c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80229c4:	f106 0610 	add.w	r6, r6, #16
 80229c8:	ed44 7a03 	vstr	s15, [r4, #-12]
 80229cc:	ed15 7a02 	vldr	s14, [r5, #-8]
 80229d0:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 80229d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80229d8:	f105 0510 	add.w	r5, r5, #16
 80229dc:	ed44 7a02 	vstr	s15, [r4, #-8]
 80229e0:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80229e4:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 80229e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80229ec:	f104 0410 	add.w	r4, r4, #16
 80229f0:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80229f4:	d1d7      	bne.n	80229a6 <arm_sub_f32+0x16>
 80229f6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80229fa:	4420      	add	r0, r4
 80229fc:	4421      	add	r1, r4
 80229fe:	4422      	add	r2, r4
 8022a00:	f013 0303 	ands.w	r3, r3, #3
 8022a04:	d01b      	beq.n	8022a3e <arm_sub_f32+0xae>
 8022a06:	edd0 7a00 	vldr	s15, [r0]
 8022a0a:	ed91 7a00 	vldr	s14, [r1]
 8022a0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022a12:	3b01      	subs	r3, #1
 8022a14:	edc2 7a00 	vstr	s15, [r2]
 8022a18:	d011      	beq.n	8022a3e <arm_sub_f32+0xae>
 8022a1a:	edd0 7a01 	vldr	s15, [r0, #4]
 8022a1e:	ed91 7a01 	vldr	s14, [r1, #4]
 8022a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022a26:	2b01      	cmp	r3, #1
 8022a28:	edc2 7a01 	vstr	s15, [r2, #4]
 8022a2c:	d007      	beq.n	8022a3e <arm_sub_f32+0xae>
 8022a2e:	edd0 7a02 	vldr	s15, [r0, #8]
 8022a32:	ed91 7a02 	vldr	s14, [r1, #8]
 8022a36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022a3a:	edc2 7a02 	vstr	s15, [r2, #8]
 8022a3e:	bcf0      	pop	{r4, r5, r6, r7}
 8022a40:	4770      	bx	lr
 8022a42:	bf00      	nop

08022a44 <arm_mult_f32>:
 8022a44:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8022a48:	b4f0      	push	{r4, r5, r6, r7}
 8022a4a:	d033      	beq.n	8022ab4 <arm_mult_f32+0x70>
 8022a4c:	f100 0610 	add.w	r6, r0, #16
 8022a50:	f101 0510 	add.w	r5, r1, #16
 8022a54:	f102 0410 	add.w	r4, r2, #16
 8022a58:	4667      	mov	r7, ip
 8022a5a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8022a5e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8022a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022a66:	3f01      	subs	r7, #1
 8022a68:	ed44 7a04 	vstr	s15, [r4, #-16]
 8022a6c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8022a70:	ed56 7a03 	vldr	s15, [r6, #-12]
 8022a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022a78:	f106 0610 	add.w	r6, r6, #16
 8022a7c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8022a80:	ed15 7a02 	vldr	s14, [r5, #-8]
 8022a84:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8022a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022a8c:	f105 0510 	add.w	r5, r5, #16
 8022a90:	ed44 7a02 	vstr	s15, [r4, #-8]
 8022a94:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8022a98:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8022a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022aa0:	f104 0410 	add.w	r4, r4, #16
 8022aa4:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8022aa8:	d1d7      	bne.n	8022a5a <arm_mult_f32+0x16>
 8022aaa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8022aae:	4420      	add	r0, r4
 8022ab0:	4421      	add	r1, r4
 8022ab2:	4422      	add	r2, r4
 8022ab4:	f013 0303 	ands.w	r3, r3, #3
 8022ab8:	d01b      	beq.n	8022af2 <arm_mult_f32+0xae>
 8022aba:	edd1 7a00 	vldr	s15, [r1]
 8022abe:	ed90 7a00 	vldr	s14, [r0]
 8022ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022ac6:	3b01      	subs	r3, #1
 8022ac8:	edc2 7a00 	vstr	s15, [r2]
 8022acc:	d011      	beq.n	8022af2 <arm_mult_f32+0xae>
 8022ace:	edd0 7a01 	vldr	s15, [r0, #4]
 8022ad2:	ed91 7a01 	vldr	s14, [r1, #4]
 8022ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022ada:	2b01      	cmp	r3, #1
 8022adc:	edc2 7a01 	vstr	s15, [r2, #4]
 8022ae0:	d007      	beq.n	8022af2 <arm_mult_f32+0xae>
 8022ae2:	edd0 7a02 	vldr	s15, [r0, #8]
 8022ae6:	ed91 7a02 	vldr	s14, [r1, #8]
 8022aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022aee:	edc2 7a02 	vstr	s15, [r2, #8]
 8022af2:	bcf0      	pop	{r4, r5, r6, r7}
 8022af4:	4770      	bx	lr
 8022af6:	bf00      	nop

08022af8 <arm_add_f32>:
 8022af8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8022afc:	b4f0      	push	{r4, r5, r6, r7}
 8022afe:	d033      	beq.n	8022b68 <arm_add_f32+0x70>
 8022b00:	f100 0610 	add.w	r6, r0, #16
 8022b04:	f101 0510 	add.w	r5, r1, #16
 8022b08:	f102 0410 	add.w	r4, r2, #16
 8022b0c:	4667      	mov	r7, ip
 8022b0e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8022b12:	ed56 7a04 	vldr	s15, [r6, #-16]
 8022b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b1a:	3f01      	subs	r7, #1
 8022b1c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8022b20:	ed15 7a03 	vldr	s14, [r5, #-12]
 8022b24:	ed56 7a03 	vldr	s15, [r6, #-12]
 8022b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b2c:	f106 0610 	add.w	r6, r6, #16
 8022b30:	ed44 7a03 	vstr	s15, [r4, #-12]
 8022b34:	ed15 7a02 	vldr	s14, [r5, #-8]
 8022b38:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8022b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b40:	f105 0510 	add.w	r5, r5, #16
 8022b44:	ed44 7a02 	vstr	s15, [r4, #-8]
 8022b48:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8022b4c:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8022b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b54:	f104 0410 	add.w	r4, r4, #16
 8022b58:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8022b5c:	d1d7      	bne.n	8022b0e <arm_add_f32+0x16>
 8022b5e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8022b62:	4420      	add	r0, r4
 8022b64:	4421      	add	r1, r4
 8022b66:	4422      	add	r2, r4
 8022b68:	f013 0303 	ands.w	r3, r3, #3
 8022b6c:	d01b      	beq.n	8022ba6 <arm_add_f32+0xae>
 8022b6e:	edd1 7a00 	vldr	s15, [r1]
 8022b72:	ed90 7a00 	vldr	s14, [r0]
 8022b76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b7a:	3b01      	subs	r3, #1
 8022b7c:	edc2 7a00 	vstr	s15, [r2]
 8022b80:	d011      	beq.n	8022ba6 <arm_add_f32+0xae>
 8022b82:	edd0 7a01 	vldr	s15, [r0, #4]
 8022b86:	ed91 7a01 	vldr	s14, [r1, #4]
 8022b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b8e:	2b01      	cmp	r3, #1
 8022b90:	edc2 7a01 	vstr	s15, [r2, #4]
 8022b94:	d007      	beq.n	8022ba6 <arm_add_f32+0xae>
 8022b96:	edd0 7a02 	vldr	s15, [r0, #8]
 8022b9a:	ed91 7a02 	vldr	s14, [r1, #8]
 8022b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022ba2:	edc2 7a02 	vstr	s15, [r2, #8]
 8022ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8022ba8:	4770      	bx	lr
 8022baa:	bf00      	nop

08022bac <arm_abs_f32>:
 8022bac:	b470      	push	{r4, r5, r6}
 8022bae:	0896      	lsrs	r6, r2, #2
 8022bb0:	d025      	beq.n	8022bfe <arm_abs_f32+0x52>
 8022bb2:	f100 0410 	add.w	r4, r0, #16
 8022bb6:	f101 0310 	add.w	r3, r1, #16
 8022bba:	4635      	mov	r5, r6
 8022bbc:	ed54 7a04 	vldr	s15, [r4, #-16]
 8022bc0:	eef0 7ae7 	vabs.f32	s15, s15
 8022bc4:	ed43 7a04 	vstr	s15, [r3, #-16]
 8022bc8:	ed54 7a03 	vldr	s15, [r4, #-12]
 8022bcc:	eef0 7ae7 	vabs.f32	s15, s15
 8022bd0:	ed43 7a03 	vstr	s15, [r3, #-12]
 8022bd4:	ed54 7a02 	vldr	s15, [r4, #-8]
 8022bd8:	eef0 7ae7 	vabs.f32	s15, s15
 8022bdc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8022be0:	ed54 7a01 	vldr	s15, [r4, #-4]
 8022be4:	3d01      	subs	r5, #1
 8022be6:	eef0 7ae7 	vabs.f32	s15, s15
 8022bea:	ed43 7a01 	vstr	s15, [r3, #-4]
 8022bee:	f104 0410 	add.w	r4, r4, #16
 8022bf2:	f103 0310 	add.w	r3, r3, #16
 8022bf6:	d1e1      	bne.n	8022bbc <arm_abs_f32+0x10>
 8022bf8:	0136      	lsls	r6, r6, #4
 8022bfa:	4430      	add	r0, r6
 8022bfc:	4431      	add	r1, r6
 8022bfe:	f012 0203 	ands.w	r2, r2, #3
 8022c02:	d015      	beq.n	8022c30 <arm_abs_f32+0x84>
 8022c04:	edd0 7a00 	vldr	s15, [r0]
 8022c08:	3a01      	subs	r2, #1
 8022c0a:	eef0 7ae7 	vabs.f32	s15, s15
 8022c0e:	edc1 7a00 	vstr	s15, [r1]
 8022c12:	d00d      	beq.n	8022c30 <arm_abs_f32+0x84>
 8022c14:	edd0 7a01 	vldr	s15, [r0, #4]
 8022c18:	2a01      	cmp	r2, #1
 8022c1a:	eef0 7ae7 	vabs.f32	s15, s15
 8022c1e:	edc1 7a01 	vstr	s15, [r1, #4]
 8022c22:	d005      	beq.n	8022c30 <arm_abs_f32+0x84>
 8022c24:	edd0 7a02 	vldr	s15, [r0, #8]
 8022c28:	eef0 7ae7 	vabs.f32	s15, s15
 8022c2c:	edc1 7a02 	vstr	s15, [r1, #8]
 8022c30:	bc70      	pop	{r4, r5, r6}
 8022c32:	4770      	bx	lr

08022c34 <malloc>:
 8022c34:	4b02      	ldr	r3, [pc, #8]	@ (8022c40 <malloc+0xc>)
 8022c36:	4601      	mov	r1, r0
 8022c38:	6818      	ldr	r0, [r3, #0]
 8022c3a:	f000 b825 	b.w	8022c88 <_malloc_r>
 8022c3e:	bf00      	nop
 8022c40:	20000018 	.word	0x20000018

08022c44 <sbrk_aligned>:
 8022c44:	b570      	push	{r4, r5, r6, lr}
 8022c46:	4e0f      	ldr	r6, [pc, #60]	@ (8022c84 <sbrk_aligned+0x40>)
 8022c48:	460c      	mov	r4, r1
 8022c4a:	6831      	ldr	r1, [r6, #0]
 8022c4c:	4605      	mov	r5, r0
 8022c4e:	b911      	cbnz	r1, 8022c56 <sbrk_aligned+0x12>
 8022c50:	f000 faba 	bl	80231c8 <_sbrk_r>
 8022c54:	6030      	str	r0, [r6, #0]
 8022c56:	4621      	mov	r1, r4
 8022c58:	4628      	mov	r0, r5
 8022c5a:	f000 fab5 	bl	80231c8 <_sbrk_r>
 8022c5e:	1c43      	adds	r3, r0, #1
 8022c60:	d103      	bne.n	8022c6a <sbrk_aligned+0x26>
 8022c62:	f04f 34ff 	mov.w	r4, #4294967295
 8022c66:	4620      	mov	r0, r4
 8022c68:	bd70      	pop	{r4, r5, r6, pc}
 8022c6a:	1cc4      	adds	r4, r0, #3
 8022c6c:	f024 0403 	bic.w	r4, r4, #3
 8022c70:	42a0      	cmp	r0, r4
 8022c72:	d0f8      	beq.n	8022c66 <sbrk_aligned+0x22>
 8022c74:	1a21      	subs	r1, r4, r0
 8022c76:	4628      	mov	r0, r5
 8022c78:	f000 faa6 	bl	80231c8 <_sbrk_r>
 8022c7c:	3001      	adds	r0, #1
 8022c7e:	d1f2      	bne.n	8022c66 <sbrk_aligned+0x22>
 8022c80:	e7ef      	b.n	8022c62 <sbrk_aligned+0x1e>
 8022c82:	bf00      	nop
 8022c84:	2000008c 	.word	0x2000008c

08022c88 <_malloc_r>:
 8022c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022c8c:	1ccd      	adds	r5, r1, #3
 8022c8e:	f025 0503 	bic.w	r5, r5, #3
 8022c92:	3508      	adds	r5, #8
 8022c94:	2d0c      	cmp	r5, #12
 8022c96:	bf38      	it	cc
 8022c98:	250c      	movcc	r5, #12
 8022c9a:	2d00      	cmp	r5, #0
 8022c9c:	4606      	mov	r6, r0
 8022c9e:	db01      	blt.n	8022ca4 <_malloc_r+0x1c>
 8022ca0:	42a9      	cmp	r1, r5
 8022ca2:	d904      	bls.n	8022cae <_malloc_r+0x26>
 8022ca4:	230c      	movs	r3, #12
 8022ca6:	6033      	str	r3, [r6, #0]
 8022ca8:	2000      	movs	r0, #0
 8022caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022d84 <_malloc_r+0xfc>
 8022cb2:	f000 f869 	bl	8022d88 <__malloc_lock>
 8022cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8022cba:	461c      	mov	r4, r3
 8022cbc:	bb44      	cbnz	r4, 8022d10 <_malloc_r+0x88>
 8022cbe:	4629      	mov	r1, r5
 8022cc0:	4630      	mov	r0, r6
 8022cc2:	f7ff ffbf 	bl	8022c44 <sbrk_aligned>
 8022cc6:	1c43      	adds	r3, r0, #1
 8022cc8:	4604      	mov	r4, r0
 8022cca:	d158      	bne.n	8022d7e <_malloc_r+0xf6>
 8022ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8022cd0:	4627      	mov	r7, r4
 8022cd2:	2f00      	cmp	r7, #0
 8022cd4:	d143      	bne.n	8022d5e <_malloc_r+0xd6>
 8022cd6:	2c00      	cmp	r4, #0
 8022cd8:	d04b      	beq.n	8022d72 <_malloc_r+0xea>
 8022cda:	6823      	ldr	r3, [r4, #0]
 8022cdc:	4639      	mov	r1, r7
 8022cde:	4630      	mov	r0, r6
 8022ce0:	eb04 0903 	add.w	r9, r4, r3
 8022ce4:	f000 fa70 	bl	80231c8 <_sbrk_r>
 8022ce8:	4581      	cmp	r9, r0
 8022cea:	d142      	bne.n	8022d72 <_malloc_r+0xea>
 8022cec:	6821      	ldr	r1, [r4, #0]
 8022cee:	1a6d      	subs	r5, r5, r1
 8022cf0:	4629      	mov	r1, r5
 8022cf2:	4630      	mov	r0, r6
 8022cf4:	f7ff ffa6 	bl	8022c44 <sbrk_aligned>
 8022cf8:	3001      	adds	r0, #1
 8022cfa:	d03a      	beq.n	8022d72 <_malloc_r+0xea>
 8022cfc:	6823      	ldr	r3, [r4, #0]
 8022cfe:	442b      	add	r3, r5
 8022d00:	6023      	str	r3, [r4, #0]
 8022d02:	f8d8 3000 	ldr.w	r3, [r8]
 8022d06:	685a      	ldr	r2, [r3, #4]
 8022d08:	bb62      	cbnz	r2, 8022d64 <_malloc_r+0xdc>
 8022d0a:	f8c8 7000 	str.w	r7, [r8]
 8022d0e:	e00f      	b.n	8022d30 <_malloc_r+0xa8>
 8022d10:	6822      	ldr	r2, [r4, #0]
 8022d12:	1b52      	subs	r2, r2, r5
 8022d14:	d420      	bmi.n	8022d58 <_malloc_r+0xd0>
 8022d16:	2a0b      	cmp	r2, #11
 8022d18:	d917      	bls.n	8022d4a <_malloc_r+0xc2>
 8022d1a:	1961      	adds	r1, r4, r5
 8022d1c:	42a3      	cmp	r3, r4
 8022d1e:	6025      	str	r5, [r4, #0]
 8022d20:	bf18      	it	ne
 8022d22:	6059      	strne	r1, [r3, #4]
 8022d24:	6863      	ldr	r3, [r4, #4]
 8022d26:	bf08      	it	eq
 8022d28:	f8c8 1000 	streq.w	r1, [r8]
 8022d2c:	5162      	str	r2, [r4, r5]
 8022d2e:	604b      	str	r3, [r1, #4]
 8022d30:	4630      	mov	r0, r6
 8022d32:	f000 f82f 	bl	8022d94 <__malloc_unlock>
 8022d36:	f104 000b 	add.w	r0, r4, #11
 8022d3a:	1d23      	adds	r3, r4, #4
 8022d3c:	f020 0007 	bic.w	r0, r0, #7
 8022d40:	1ac2      	subs	r2, r0, r3
 8022d42:	bf1c      	itt	ne
 8022d44:	1a1b      	subne	r3, r3, r0
 8022d46:	50a3      	strne	r3, [r4, r2]
 8022d48:	e7af      	b.n	8022caa <_malloc_r+0x22>
 8022d4a:	6862      	ldr	r2, [r4, #4]
 8022d4c:	42a3      	cmp	r3, r4
 8022d4e:	bf0c      	ite	eq
 8022d50:	f8c8 2000 	streq.w	r2, [r8]
 8022d54:	605a      	strne	r2, [r3, #4]
 8022d56:	e7eb      	b.n	8022d30 <_malloc_r+0xa8>
 8022d58:	4623      	mov	r3, r4
 8022d5a:	6864      	ldr	r4, [r4, #4]
 8022d5c:	e7ae      	b.n	8022cbc <_malloc_r+0x34>
 8022d5e:	463c      	mov	r4, r7
 8022d60:	687f      	ldr	r7, [r7, #4]
 8022d62:	e7b6      	b.n	8022cd2 <_malloc_r+0x4a>
 8022d64:	461a      	mov	r2, r3
 8022d66:	685b      	ldr	r3, [r3, #4]
 8022d68:	42a3      	cmp	r3, r4
 8022d6a:	d1fb      	bne.n	8022d64 <_malloc_r+0xdc>
 8022d6c:	2300      	movs	r3, #0
 8022d6e:	6053      	str	r3, [r2, #4]
 8022d70:	e7de      	b.n	8022d30 <_malloc_r+0xa8>
 8022d72:	230c      	movs	r3, #12
 8022d74:	6033      	str	r3, [r6, #0]
 8022d76:	4630      	mov	r0, r6
 8022d78:	f000 f80c 	bl	8022d94 <__malloc_unlock>
 8022d7c:	e794      	b.n	8022ca8 <_malloc_r+0x20>
 8022d7e:	6005      	str	r5, [r0, #0]
 8022d80:	e7d6      	b.n	8022d30 <_malloc_r+0xa8>
 8022d82:	bf00      	nop
 8022d84:	20000090 	.word	0x20000090

08022d88 <__malloc_lock>:
 8022d88:	4801      	ldr	r0, [pc, #4]	@ (8022d90 <__malloc_lock+0x8>)
 8022d8a:	f000 ba6a 	b.w	8023262 <__retarget_lock_acquire_recursive>
 8022d8e:	bf00      	nop
 8022d90:	200001d4 	.word	0x200001d4

08022d94 <__malloc_unlock>:
 8022d94:	4801      	ldr	r0, [pc, #4]	@ (8022d9c <__malloc_unlock+0x8>)
 8022d96:	f000 ba65 	b.w	8023264 <__retarget_lock_release_recursive>
 8022d9a:	bf00      	nop
 8022d9c:	200001d4 	.word	0x200001d4

08022da0 <__sflush_r>:
 8022da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022da8:	0716      	lsls	r6, r2, #28
 8022daa:	4605      	mov	r5, r0
 8022dac:	460c      	mov	r4, r1
 8022dae:	d454      	bmi.n	8022e5a <__sflush_r+0xba>
 8022db0:	684b      	ldr	r3, [r1, #4]
 8022db2:	2b00      	cmp	r3, #0
 8022db4:	dc02      	bgt.n	8022dbc <__sflush_r+0x1c>
 8022db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	dd48      	ble.n	8022e4e <__sflush_r+0xae>
 8022dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022dbe:	2e00      	cmp	r6, #0
 8022dc0:	d045      	beq.n	8022e4e <__sflush_r+0xae>
 8022dc2:	2300      	movs	r3, #0
 8022dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022dc8:	682f      	ldr	r7, [r5, #0]
 8022dca:	6a21      	ldr	r1, [r4, #32]
 8022dcc:	602b      	str	r3, [r5, #0]
 8022dce:	d030      	beq.n	8022e32 <__sflush_r+0x92>
 8022dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022dd2:	89a3      	ldrh	r3, [r4, #12]
 8022dd4:	0759      	lsls	r1, r3, #29
 8022dd6:	d505      	bpl.n	8022de4 <__sflush_r+0x44>
 8022dd8:	6863      	ldr	r3, [r4, #4]
 8022dda:	1ad2      	subs	r2, r2, r3
 8022ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022dde:	b10b      	cbz	r3, 8022de4 <__sflush_r+0x44>
 8022de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022de2:	1ad2      	subs	r2, r2, r3
 8022de4:	2300      	movs	r3, #0
 8022de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022de8:	6a21      	ldr	r1, [r4, #32]
 8022dea:	4628      	mov	r0, r5
 8022dec:	47b0      	blx	r6
 8022dee:	1c43      	adds	r3, r0, #1
 8022df0:	89a3      	ldrh	r3, [r4, #12]
 8022df2:	d106      	bne.n	8022e02 <__sflush_r+0x62>
 8022df4:	6829      	ldr	r1, [r5, #0]
 8022df6:	291d      	cmp	r1, #29
 8022df8:	d82b      	bhi.n	8022e52 <__sflush_r+0xb2>
 8022dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8022ea4 <__sflush_r+0x104>)
 8022dfc:	410a      	asrs	r2, r1
 8022dfe:	07d6      	lsls	r6, r2, #31
 8022e00:	d427      	bmi.n	8022e52 <__sflush_r+0xb2>
 8022e02:	2200      	movs	r2, #0
 8022e04:	6062      	str	r2, [r4, #4]
 8022e06:	04d9      	lsls	r1, r3, #19
 8022e08:	6922      	ldr	r2, [r4, #16]
 8022e0a:	6022      	str	r2, [r4, #0]
 8022e0c:	d504      	bpl.n	8022e18 <__sflush_r+0x78>
 8022e0e:	1c42      	adds	r2, r0, #1
 8022e10:	d101      	bne.n	8022e16 <__sflush_r+0x76>
 8022e12:	682b      	ldr	r3, [r5, #0]
 8022e14:	b903      	cbnz	r3, 8022e18 <__sflush_r+0x78>
 8022e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8022e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022e1a:	602f      	str	r7, [r5, #0]
 8022e1c:	b1b9      	cbz	r1, 8022e4e <__sflush_r+0xae>
 8022e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022e22:	4299      	cmp	r1, r3
 8022e24:	d002      	beq.n	8022e2c <__sflush_r+0x8c>
 8022e26:	4628      	mov	r0, r5
 8022e28:	f000 fa2c 	bl	8023284 <_free_r>
 8022e2c:	2300      	movs	r3, #0
 8022e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8022e30:	e00d      	b.n	8022e4e <__sflush_r+0xae>
 8022e32:	2301      	movs	r3, #1
 8022e34:	4628      	mov	r0, r5
 8022e36:	47b0      	blx	r6
 8022e38:	4602      	mov	r2, r0
 8022e3a:	1c50      	adds	r0, r2, #1
 8022e3c:	d1c9      	bne.n	8022dd2 <__sflush_r+0x32>
 8022e3e:	682b      	ldr	r3, [r5, #0]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	d0c6      	beq.n	8022dd2 <__sflush_r+0x32>
 8022e44:	2b1d      	cmp	r3, #29
 8022e46:	d001      	beq.n	8022e4c <__sflush_r+0xac>
 8022e48:	2b16      	cmp	r3, #22
 8022e4a:	d11e      	bne.n	8022e8a <__sflush_r+0xea>
 8022e4c:	602f      	str	r7, [r5, #0]
 8022e4e:	2000      	movs	r0, #0
 8022e50:	e022      	b.n	8022e98 <__sflush_r+0xf8>
 8022e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022e56:	b21b      	sxth	r3, r3
 8022e58:	e01b      	b.n	8022e92 <__sflush_r+0xf2>
 8022e5a:	690f      	ldr	r7, [r1, #16]
 8022e5c:	2f00      	cmp	r7, #0
 8022e5e:	d0f6      	beq.n	8022e4e <__sflush_r+0xae>
 8022e60:	0793      	lsls	r3, r2, #30
 8022e62:	680e      	ldr	r6, [r1, #0]
 8022e64:	bf08      	it	eq
 8022e66:	694b      	ldreq	r3, [r1, #20]
 8022e68:	600f      	str	r7, [r1, #0]
 8022e6a:	bf18      	it	ne
 8022e6c:	2300      	movne	r3, #0
 8022e6e:	eba6 0807 	sub.w	r8, r6, r7
 8022e72:	608b      	str	r3, [r1, #8]
 8022e74:	f1b8 0f00 	cmp.w	r8, #0
 8022e78:	dde9      	ble.n	8022e4e <__sflush_r+0xae>
 8022e7a:	6a21      	ldr	r1, [r4, #32]
 8022e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022e7e:	4643      	mov	r3, r8
 8022e80:	463a      	mov	r2, r7
 8022e82:	4628      	mov	r0, r5
 8022e84:	47b0      	blx	r6
 8022e86:	2800      	cmp	r0, #0
 8022e88:	dc08      	bgt.n	8022e9c <__sflush_r+0xfc>
 8022e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022e92:	81a3      	strh	r3, [r4, #12]
 8022e94:	f04f 30ff 	mov.w	r0, #4294967295
 8022e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e9c:	4407      	add	r7, r0
 8022e9e:	eba8 0800 	sub.w	r8, r8, r0
 8022ea2:	e7e7      	b.n	8022e74 <__sflush_r+0xd4>
 8022ea4:	dfbffffe 	.word	0xdfbffffe

08022ea8 <_fflush_r>:
 8022ea8:	b538      	push	{r3, r4, r5, lr}
 8022eaa:	690b      	ldr	r3, [r1, #16]
 8022eac:	4605      	mov	r5, r0
 8022eae:	460c      	mov	r4, r1
 8022eb0:	b913      	cbnz	r3, 8022eb8 <_fflush_r+0x10>
 8022eb2:	2500      	movs	r5, #0
 8022eb4:	4628      	mov	r0, r5
 8022eb6:	bd38      	pop	{r3, r4, r5, pc}
 8022eb8:	b118      	cbz	r0, 8022ec2 <_fflush_r+0x1a>
 8022eba:	6a03      	ldr	r3, [r0, #32]
 8022ebc:	b90b      	cbnz	r3, 8022ec2 <_fflush_r+0x1a>
 8022ebe:	f000 f8bb 	bl	8023038 <__sinit>
 8022ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022ec6:	2b00      	cmp	r3, #0
 8022ec8:	d0f3      	beq.n	8022eb2 <_fflush_r+0xa>
 8022eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022ecc:	07d0      	lsls	r0, r2, #31
 8022ece:	d404      	bmi.n	8022eda <_fflush_r+0x32>
 8022ed0:	0599      	lsls	r1, r3, #22
 8022ed2:	d402      	bmi.n	8022eda <_fflush_r+0x32>
 8022ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022ed6:	f000 f9c4 	bl	8023262 <__retarget_lock_acquire_recursive>
 8022eda:	4628      	mov	r0, r5
 8022edc:	4621      	mov	r1, r4
 8022ede:	f7ff ff5f 	bl	8022da0 <__sflush_r>
 8022ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022ee4:	07da      	lsls	r2, r3, #31
 8022ee6:	4605      	mov	r5, r0
 8022ee8:	d4e4      	bmi.n	8022eb4 <_fflush_r+0xc>
 8022eea:	89a3      	ldrh	r3, [r4, #12]
 8022eec:	059b      	lsls	r3, r3, #22
 8022eee:	d4e1      	bmi.n	8022eb4 <_fflush_r+0xc>
 8022ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022ef2:	f000 f9b7 	bl	8023264 <__retarget_lock_release_recursive>
 8022ef6:	e7dd      	b.n	8022eb4 <_fflush_r+0xc>

08022ef8 <fflush>:
 8022ef8:	4601      	mov	r1, r0
 8022efa:	b920      	cbnz	r0, 8022f06 <fflush+0xe>
 8022efc:	4a04      	ldr	r2, [pc, #16]	@ (8022f10 <fflush+0x18>)
 8022efe:	4905      	ldr	r1, [pc, #20]	@ (8022f14 <fflush+0x1c>)
 8022f00:	4805      	ldr	r0, [pc, #20]	@ (8022f18 <fflush+0x20>)
 8022f02:	f000 b8b1 	b.w	8023068 <_fwalk_sglue>
 8022f06:	4b05      	ldr	r3, [pc, #20]	@ (8022f1c <fflush+0x24>)
 8022f08:	6818      	ldr	r0, [r3, #0]
 8022f0a:	f7ff bfcd 	b.w	8022ea8 <_fflush_r>
 8022f0e:	bf00      	nop
 8022f10:	2000000c 	.word	0x2000000c
 8022f14:	08022ea9 	.word	0x08022ea9
 8022f18:	2000001c 	.word	0x2000001c
 8022f1c:	20000018 	.word	0x20000018

08022f20 <std>:
 8022f20:	2300      	movs	r3, #0
 8022f22:	b510      	push	{r4, lr}
 8022f24:	4604      	mov	r4, r0
 8022f26:	e9c0 3300 	strd	r3, r3, [r0]
 8022f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022f2e:	6083      	str	r3, [r0, #8]
 8022f30:	8181      	strh	r1, [r0, #12]
 8022f32:	6643      	str	r3, [r0, #100]	@ 0x64
 8022f34:	81c2      	strh	r2, [r0, #14]
 8022f36:	6183      	str	r3, [r0, #24]
 8022f38:	4619      	mov	r1, r3
 8022f3a:	2208      	movs	r2, #8
 8022f3c:	305c      	adds	r0, #92	@ 0x5c
 8022f3e:	f000 f906 	bl	802314e <memset>
 8022f42:	4b0d      	ldr	r3, [pc, #52]	@ (8022f78 <std+0x58>)
 8022f44:	6263      	str	r3, [r4, #36]	@ 0x24
 8022f46:	4b0d      	ldr	r3, [pc, #52]	@ (8022f7c <std+0x5c>)
 8022f48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8022f80 <std+0x60>)
 8022f4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8022f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8022f84 <std+0x64>)
 8022f50:	6323      	str	r3, [r4, #48]	@ 0x30
 8022f52:	4b0d      	ldr	r3, [pc, #52]	@ (8022f88 <std+0x68>)
 8022f54:	6224      	str	r4, [r4, #32]
 8022f56:	429c      	cmp	r4, r3
 8022f58:	d006      	beq.n	8022f68 <std+0x48>
 8022f5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022f5e:	4294      	cmp	r4, r2
 8022f60:	d002      	beq.n	8022f68 <std+0x48>
 8022f62:	33d0      	adds	r3, #208	@ 0xd0
 8022f64:	429c      	cmp	r4, r3
 8022f66:	d105      	bne.n	8022f74 <std+0x54>
 8022f68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f70:	f000 b976 	b.w	8023260 <__retarget_lock_init_recursive>
 8022f74:	bd10      	pop	{r4, pc}
 8022f76:	bf00      	nop
 8022f78:	080230c9 	.word	0x080230c9
 8022f7c:	080230eb 	.word	0x080230eb
 8022f80:	08023123 	.word	0x08023123
 8022f84:	08023147 	.word	0x08023147
 8022f88:	20000094 	.word	0x20000094

08022f8c <stdio_exit_handler>:
 8022f8c:	4a02      	ldr	r2, [pc, #8]	@ (8022f98 <stdio_exit_handler+0xc>)
 8022f8e:	4903      	ldr	r1, [pc, #12]	@ (8022f9c <stdio_exit_handler+0x10>)
 8022f90:	4803      	ldr	r0, [pc, #12]	@ (8022fa0 <stdio_exit_handler+0x14>)
 8022f92:	f000 b869 	b.w	8023068 <_fwalk_sglue>
 8022f96:	bf00      	nop
 8022f98:	2000000c 	.word	0x2000000c
 8022f9c:	08022ea9 	.word	0x08022ea9
 8022fa0:	2000001c 	.word	0x2000001c

08022fa4 <cleanup_stdio>:
 8022fa4:	6841      	ldr	r1, [r0, #4]
 8022fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8022fd8 <cleanup_stdio+0x34>)
 8022fa8:	4299      	cmp	r1, r3
 8022faa:	b510      	push	{r4, lr}
 8022fac:	4604      	mov	r4, r0
 8022fae:	d001      	beq.n	8022fb4 <cleanup_stdio+0x10>
 8022fb0:	f7ff ff7a 	bl	8022ea8 <_fflush_r>
 8022fb4:	68a1      	ldr	r1, [r4, #8]
 8022fb6:	4b09      	ldr	r3, [pc, #36]	@ (8022fdc <cleanup_stdio+0x38>)
 8022fb8:	4299      	cmp	r1, r3
 8022fba:	d002      	beq.n	8022fc2 <cleanup_stdio+0x1e>
 8022fbc:	4620      	mov	r0, r4
 8022fbe:	f7ff ff73 	bl	8022ea8 <_fflush_r>
 8022fc2:	68e1      	ldr	r1, [r4, #12]
 8022fc4:	4b06      	ldr	r3, [pc, #24]	@ (8022fe0 <cleanup_stdio+0x3c>)
 8022fc6:	4299      	cmp	r1, r3
 8022fc8:	d004      	beq.n	8022fd4 <cleanup_stdio+0x30>
 8022fca:	4620      	mov	r0, r4
 8022fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fd0:	f7ff bf6a 	b.w	8022ea8 <_fflush_r>
 8022fd4:	bd10      	pop	{r4, pc}
 8022fd6:	bf00      	nop
 8022fd8:	20000094 	.word	0x20000094
 8022fdc:	200000fc 	.word	0x200000fc
 8022fe0:	20000164 	.word	0x20000164

08022fe4 <global_stdio_init.part.0>:
 8022fe4:	b510      	push	{r4, lr}
 8022fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8023014 <global_stdio_init.part.0+0x30>)
 8022fe8:	4c0b      	ldr	r4, [pc, #44]	@ (8023018 <global_stdio_init.part.0+0x34>)
 8022fea:	4a0c      	ldr	r2, [pc, #48]	@ (802301c <global_stdio_init.part.0+0x38>)
 8022fec:	601a      	str	r2, [r3, #0]
 8022fee:	4620      	mov	r0, r4
 8022ff0:	2200      	movs	r2, #0
 8022ff2:	2104      	movs	r1, #4
 8022ff4:	f7ff ff94 	bl	8022f20 <std>
 8022ff8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022ffc:	2201      	movs	r2, #1
 8022ffe:	2109      	movs	r1, #9
 8023000:	f7ff ff8e 	bl	8022f20 <std>
 8023004:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023008:	2202      	movs	r2, #2
 802300a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802300e:	2112      	movs	r1, #18
 8023010:	f7ff bf86 	b.w	8022f20 <std>
 8023014:	200001cc 	.word	0x200001cc
 8023018:	20000094 	.word	0x20000094
 802301c:	08022f8d 	.word	0x08022f8d

08023020 <__sfp_lock_acquire>:
 8023020:	4801      	ldr	r0, [pc, #4]	@ (8023028 <__sfp_lock_acquire+0x8>)
 8023022:	f000 b91e 	b.w	8023262 <__retarget_lock_acquire_recursive>
 8023026:	bf00      	nop
 8023028:	200001d5 	.word	0x200001d5

0802302c <__sfp_lock_release>:
 802302c:	4801      	ldr	r0, [pc, #4]	@ (8023034 <__sfp_lock_release+0x8>)
 802302e:	f000 b919 	b.w	8023264 <__retarget_lock_release_recursive>
 8023032:	bf00      	nop
 8023034:	200001d5 	.word	0x200001d5

08023038 <__sinit>:
 8023038:	b510      	push	{r4, lr}
 802303a:	4604      	mov	r4, r0
 802303c:	f7ff fff0 	bl	8023020 <__sfp_lock_acquire>
 8023040:	6a23      	ldr	r3, [r4, #32]
 8023042:	b11b      	cbz	r3, 802304c <__sinit+0x14>
 8023044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023048:	f7ff bff0 	b.w	802302c <__sfp_lock_release>
 802304c:	4b04      	ldr	r3, [pc, #16]	@ (8023060 <__sinit+0x28>)
 802304e:	6223      	str	r3, [r4, #32]
 8023050:	4b04      	ldr	r3, [pc, #16]	@ (8023064 <__sinit+0x2c>)
 8023052:	681b      	ldr	r3, [r3, #0]
 8023054:	2b00      	cmp	r3, #0
 8023056:	d1f5      	bne.n	8023044 <__sinit+0xc>
 8023058:	f7ff ffc4 	bl	8022fe4 <global_stdio_init.part.0>
 802305c:	e7f2      	b.n	8023044 <__sinit+0xc>
 802305e:	bf00      	nop
 8023060:	08022fa5 	.word	0x08022fa5
 8023064:	200001cc 	.word	0x200001cc

08023068 <_fwalk_sglue>:
 8023068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802306c:	4607      	mov	r7, r0
 802306e:	4688      	mov	r8, r1
 8023070:	4614      	mov	r4, r2
 8023072:	2600      	movs	r6, #0
 8023074:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023078:	f1b9 0901 	subs.w	r9, r9, #1
 802307c:	d505      	bpl.n	802308a <_fwalk_sglue+0x22>
 802307e:	6824      	ldr	r4, [r4, #0]
 8023080:	2c00      	cmp	r4, #0
 8023082:	d1f7      	bne.n	8023074 <_fwalk_sglue+0xc>
 8023084:	4630      	mov	r0, r6
 8023086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802308a:	89ab      	ldrh	r3, [r5, #12]
 802308c:	2b01      	cmp	r3, #1
 802308e:	d907      	bls.n	80230a0 <_fwalk_sglue+0x38>
 8023090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023094:	3301      	adds	r3, #1
 8023096:	d003      	beq.n	80230a0 <_fwalk_sglue+0x38>
 8023098:	4629      	mov	r1, r5
 802309a:	4638      	mov	r0, r7
 802309c:	47c0      	blx	r8
 802309e:	4306      	orrs	r6, r0
 80230a0:	3568      	adds	r5, #104	@ 0x68
 80230a2:	e7e9      	b.n	8023078 <_fwalk_sglue+0x10>

080230a4 <iprintf>:
 80230a4:	b40f      	push	{r0, r1, r2, r3}
 80230a6:	b507      	push	{r0, r1, r2, lr}
 80230a8:	4906      	ldr	r1, [pc, #24]	@ (80230c4 <iprintf+0x20>)
 80230aa:	ab04      	add	r3, sp, #16
 80230ac:	6808      	ldr	r0, [r1, #0]
 80230ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80230b2:	6881      	ldr	r1, [r0, #8]
 80230b4:	9301      	str	r3, [sp, #4]
 80230b6:	f000 f959 	bl	802336c <_vfiprintf_r>
 80230ba:	b003      	add	sp, #12
 80230bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80230c0:	b004      	add	sp, #16
 80230c2:	4770      	bx	lr
 80230c4:	20000018 	.word	0x20000018

080230c8 <__sread>:
 80230c8:	b510      	push	{r4, lr}
 80230ca:	460c      	mov	r4, r1
 80230cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80230d0:	f000 f868 	bl	80231a4 <_read_r>
 80230d4:	2800      	cmp	r0, #0
 80230d6:	bfab      	itete	ge
 80230d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80230da:	89a3      	ldrhlt	r3, [r4, #12]
 80230dc:	181b      	addge	r3, r3, r0
 80230de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80230e2:	bfac      	ite	ge
 80230e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80230e6:	81a3      	strhlt	r3, [r4, #12]
 80230e8:	bd10      	pop	{r4, pc}

080230ea <__swrite>:
 80230ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230ee:	461f      	mov	r7, r3
 80230f0:	898b      	ldrh	r3, [r1, #12]
 80230f2:	05db      	lsls	r3, r3, #23
 80230f4:	4605      	mov	r5, r0
 80230f6:	460c      	mov	r4, r1
 80230f8:	4616      	mov	r6, r2
 80230fa:	d505      	bpl.n	8023108 <__swrite+0x1e>
 80230fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023100:	2302      	movs	r3, #2
 8023102:	2200      	movs	r2, #0
 8023104:	f000 f83c 	bl	8023180 <_lseek_r>
 8023108:	89a3      	ldrh	r3, [r4, #12]
 802310a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802310e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023112:	81a3      	strh	r3, [r4, #12]
 8023114:	4632      	mov	r2, r6
 8023116:	463b      	mov	r3, r7
 8023118:	4628      	mov	r0, r5
 802311a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802311e:	f000 b863 	b.w	80231e8 <_write_r>

08023122 <__sseek>:
 8023122:	b510      	push	{r4, lr}
 8023124:	460c      	mov	r4, r1
 8023126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802312a:	f000 f829 	bl	8023180 <_lseek_r>
 802312e:	1c43      	adds	r3, r0, #1
 8023130:	89a3      	ldrh	r3, [r4, #12]
 8023132:	bf15      	itete	ne
 8023134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802313a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802313e:	81a3      	strheq	r3, [r4, #12]
 8023140:	bf18      	it	ne
 8023142:	81a3      	strhne	r3, [r4, #12]
 8023144:	bd10      	pop	{r4, pc}

08023146 <__sclose>:
 8023146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802314a:	f000 b809 	b.w	8023160 <_close_r>

0802314e <memset>:
 802314e:	4402      	add	r2, r0
 8023150:	4603      	mov	r3, r0
 8023152:	4293      	cmp	r3, r2
 8023154:	d100      	bne.n	8023158 <memset+0xa>
 8023156:	4770      	bx	lr
 8023158:	f803 1b01 	strb.w	r1, [r3], #1
 802315c:	e7f9      	b.n	8023152 <memset+0x4>
	...

08023160 <_close_r>:
 8023160:	b538      	push	{r3, r4, r5, lr}
 8023162:	4d06      	ldr	r5, [pc, #24]	@ (802317c <_close_r+0x1c>)
 8023164:	2300      	movs	r3, #0
 8023166:	4604      	mov	r4, r0
 8023168:	4608      	mov	r0, r1
 802316a:	602b      	str	r3, [r5, #0]
 802316c:	f7fd fc6f 	bl	8020a4e <_close>
 8023170:	1c43      	adds	r3, r0, #1
 8023172:	d102      	bne.n	802317a <_close_r+0x1a>
 8023174:	682b      	ldr	r3, [r5, #0]
 8023176:	b103      	cbz	r3, 802317a <_close_r+0x1a>
 8023178:	6023      	str	r3, [r4, #0]
 802317a:	bd38      	pop	{r3, r4, r5, pc}
 802317c:	200001d0 	.word	0x200001d0

08023180 <_lseek_r>:
 8023180:	b538      	push	{r3, r4, r5, lr}
 8023182:	4d07      	ldr	r5, [pc, #28]	@ (80231a0 <_lseek_r+0x20>)
 8023184:	4604      	mov	r4, r0
 8023186:	4608      	mov	r0, r1
 8023188:	4611      	mov	r1, r2
 802318a:	2200      	movs	r2, #0
 802318c:	602a      	str	r2, [r5, #0]
 802318e:	461a      	mov	r2, r3
 8023190:	f7fd fc84 	bl	8020a9c <_lseek>
 8023194:	1c43      	adds	r3, r0, #1
 8023196:	d102      	bne.n	802319e <_lseek_r+0x1e>
 8023198:	682b      	ldr	r3, [r5, #0]
 802319a:	b103      	cbz	r3, 802319e <_lseek_r+0x1e>
 802319c:	6023      	str	r3, [r4, #0]
 802319e:	bd38      	pop	{r3, r4, r5, pc}
 80231a0:	200001d0 	.word	0x200001d0

080231a4 <_read_r>:
 80231a4:	b538      	push	{r3, r4, r5, lr}
 80231a6:	4d07      	ldr	r5, [pc, #28]	@ (80231c4 <_read_r+0x20>)
 80231a8:	4604      	mov	r4, r0
 80231aa:	4608      	mov	r0, r1
 80231ac:	4611      	mov	r1, r2
 80231ae:	2200      	movs	r2, #0
 80231b0:	602a      	str	r2, [r5, #0]
 80231b2:	461a      	mov	r2, r3
 80231b4:	f7fd fc12 	bl	80209dc <_read>
 80231b8:	1c43      	adds	r3, r0, #1
 80231ba:	d102      	bne.n	80231c2 <_read_r+0x1e>
 80231bc:	682b      	ldr	r3, [r5, #0]
 80231be:	b103      	cbz	r3, 80231c2 <_read_r+0x1e>
 80231c0:	6023      	str	r3, [r4, #0]
 80231c2:	bd38      	pop	{r3, r4, r5, pc}
 80231c4:	200001d0 	.word	0x200001d0

080231c8 <_sbrk_r>:
 80231c8:	b538      	push	{r3, r4, r5, lr}
 80231ca:	4d06      	ldr	r5, [pc, #24]	@ (80231e4 <_sbrk_r+0x1c>)
 80231cc:	2300      	movs	r3, #0
 80231ce:	4604      	mov	r4, r0
 80231d0:	4608      	mov	r0, r1
 80231d2:	602b      	str	r3, [r5, #0]
 80231d4:	f7fd fc70 	bl	8020ab8 <_sbrk>
 80231d8:	1c43      	adds	r3, r0, #1
 80231da:	d102      	bne.n	80231e2 <_sbrk_r+0x1a>
 80231dc:	682b      	ldr	r3, [r5, #0]
 80231de:	b103      	cbz	r3, 80231e2 <_sbrk_r+0x1a>
 80231e0:	6023      	str	r3, [r4, #0]
 80231e2:	bd38      	pop	{r3, r4, r5, pc}
 80231e4:	200001d0 	.word	0x200001d0

080231e8 <_write_r>:
 80231e8:	b538      	push	{r3, r4, r5, lr}
 80231ea:	4d07      	ldr	r5, [pc, #28]	@ (8023208 <_write_r+0x20>)
 80231ec:	4604      	mov	r4, r0
 80231ee:	4608      	mov	r0, r1
 80231f0:	4611      	mov	r1, r2
 80231f2:	2200      	movs	r2, #0
 80231f4:	602a      	str	r2, [r5, #0]
 80231f6:	461a      	mov	r2, r3
 80231f8:	f7fd fc0d 	bl	8020a16 <_write>
 80231fc:	1c43      	adds	r3, r0, #1
 80231fe:	d102      	bne.n	8023206 <_write_r+0x1e>
 8023200:	682b      	ldr	r3, [r5, #0]
 8023202:	b103      	cbz	r3, 8023206 <_write_r+0x1e>
 8023204:	6023      	str	r3, [r4, #0]
 8023206:	bd38      	pop	{r3, r4, r5, pc}
 8023208:	200001d0 	.word	0x200001d0

0802320c <__errno>:
 802320c:	4b01      	ldr	r3, [pc, #4]	@ (8023214 <__errno+0x8>)
 802320e:	6818      	ldr	r0, [r3, #0]
 8023210:	4770      	bx	lr
 8023212:	bf00      	nop
 8023214:	20000018 	.word	0x20000018

08023218 <__libc_init_array>:
 8023218:	b570      	push	{r4, r5, r6, lr}
 802321a:	4d0d      	ldr	r5, [pc, #52]	@ (8023250 <__libc_init_array+0x38>)
 802321c:	4c0d      	ldr	r4, [pc, #52]	@ (8023254 <__libc_init_array+0x3c>)
 802321e:	1b64      	subs	r4, r4, r5
 8023220:	10a4      	asrs	r4, r4, #2
 8023222:	2600      	movs	r6, #0
 8023224:	42a6      	cmp	r6, r4
 8023226:	d109      	bne.n	802323c <__libc_init_array+0x24>
 8023228:	4d0b      	ldr	r5, [pc, #44]	@ (8023258 <__libc_init_array+0x40>)
 802322a:	4c0c      	ldr	r4, [pc, #48]	@ (802325c <__libc_init_array+0x44>)
 802322c:	f000 fc7e 	bl	8023b2c <_init>
 8023230:	1b64      	subs	r4, r4, r5
 8023232:	10a4      	asrs	r4, r4, #2
 8023234:	2600      	movs	r6, #0
 8023236:	42a6      	cmp	r6, r4
 8023238:	d105      	bne.n	8023246 <__libc_init_array+0x2e>
 802323a:	bd70      	pop	{r4, r5, r6, pc}
 802323c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023240:	4798      	blx	r3
 8023242:	3601      	adds	r6, #1
 8023244:	e7ee      	b.n	8023224 <__libc_init_array+0xc>
 8023246:	f855 3b04 	ldr.w	r3, [r5], #4
 802324a:	4798      	blx	r3
 802324c:	3601      	adds	r6, #1
 802324e:	e7f2      	b.n	8023236 <__libc_init_array+0x1e>
 8023250:	08023d58 	.word	0x08023d58
 8023254:	08023d58 	.word	0x08023d58
 8023258:	08023d58 	.word	0x08023d58
 802325c:	08023d5c 	.word	0x08023d5c

08023260 <__retarget_lock_init_recursive>:
 8023260:	4770      	bx	lr

08023262 <__retarget_lock_acquire_recursive>:
 8023262:	4770      	bx	lr

08023264 <__retarget_lock_release_recursive>:
 8023264:	4770      	bx	lr

08023266 <memcpy>:
 8023266:	440a      	add	r2, r1
 8023268:	4291      	cmp	r1, r2
 802326a:	f100 33ff 	add.w	r3, r0, #4294967295
 802326e:	d100      	bne.n	8023272 <memcpy+0xc>
 8023270:	4770      	bx	lr
 8023272:	b510      	push	{r4, lr}
 8023274:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023278:	f803 4f01 	strb.w	r4, [r3, #1]!
 802327c:	4291      	cmp	r1, r2
 802327e:	d1f9      	bne.n	8023274 <memcpy+0xe>
 8023280:	bd10      	pop	{r4, pc}
	...

08023284 <_free_r>:
 8023284:	b538      	push	{r3, r4, r5, lr}
 8023286:	4605      	mov	r5, r0
 8023288:	2900      	cmp	r1, #0
 802328a:	d041      	beq.n	8023310 <_free_r+0x8c>
 802328c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023290:	1f0c      	subs	r4, r1, #4
 8023292:	2b00      	cmp	r3, #0
 8023294:	bfb8      	it	lt
 8023296:	18e4      	addlt	r4, r4, r3
 8023298:	f7ff fd76 	bl	8022d88 <__malloc_lock>
 802329c:	4a1d      	ldr	r2, [pc, #116]	@ (8023314 <_free_r+0x90>)
 802329e:	6813      	ldr	r3, [r2, #0]
 80232a0:	b933      	cbnz	r3, 80232b0 <_free_r+0x2c>
 80232a2:	6063      	str	r3, [r4, #4]
 80232a4:	6014      	str	r4, [r2, #0]
 80232a6:	4628      	mov	r0, r5
 80232a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80232ac:	f7ff bd72 	b.w	8022d94 <__malloc_unlock>
 80232b0:	42a3      	cmp	r3, r4
 80232b2:	d908      	bls.n	80232c6 <_free_r+0x42>
 80232b4:	6820      	ldr	r0, [r4, #0]
 80232b6:	1821      	adds	r1, r4, r0
 80232b8:	428b      	cmp	r3, r1
 80232ba:	bf01      	itttt	eq
 80232bc:	6819      	ldreq	r1, [r3, #0]
 80232be:	685b      	ldreq	r3, [r3, #4]
 80232c0:	1809      	addeq	r1, r1, r0
 80232c2:	6021      	streq	r1, [r4, #0]
 80232c4:	e7ed      	b.n	80232a2 <_free_r+0x1e>
 80232c6:	461a      	mov	r2, r3
 80232c8:	685b      	ldr	r3, [r3, #4]
 80232ca:	b10b      	cbz	r3, 80232d0 <_free_r+0x4c>
 80232cc:	42a3      	cmp	r3, r4
 80232ce:	d9fa      	bls.n	80232c6 <_free_r+0x42>
 80232d0:	6811      	ldr	r1, [r2, #0]
 80232d2:	1850      	adds	r0, r2, r1
 80232d4:	42a0      	cmp	r0, r4
 80232d6:	d10b      	bne.n	80232f0 <_free_r+0x6c>
 80232d8:	6820      	ldr	r0, [r4, #0]
 80232da:	4401      	add	r1, r0
 80232dc:	1850      	adds	r0, r2, r1
 80232de:	4283      	cmp	r3, r0
 80232e0:	6011      	str	r1, [r2, #0]
 80232e2:	d1e0      	bne.n	80232a6 <_free_r+0x22>
 80232e4:	6818      	ldr	r0, [r3, #0]
 80232e6:	685b      	ldr	r3, [r3, #4]
 80232e8:	6053      	str	r3, [r2, #4]
 80232ea:	4408      	add	r0, r1
 80232ec:	6010      	str	r0, [r2, #0]
 80232ee:	e7da      	b.n	80232a6 <_free_r+0x22>
 80232f0:	d902      	bls.n	80232f8 <_free_r+0x74>
 80232f2:	230c      	movs	r3, #12
 80232f4:	602b      	str	r3, [r5, #0]
 80232f6:	e7d6      	b.n	80232a6 <_free_r+0x22>
 80232f8:	6820      	ldr	r0, [r4, #0]
 80232fa:	1821      	adds	r1, r4, r0
 80232fc:	428b      	cmp	r3, r1
 80232fe:	bf04      	itt	eq
 8023300:	6819      	ldreq	r1, [r3, #0]
 8023302:	685b      	ldreq	r3, [r3, #4]
 8023304:	6063      	str	r3, [r4, #4]
 8023306:	bf04      	itt	eq
 8023308:	1809      	addeq	r1, r1, r0
 802330a:	6021      	streq	r1, [r4, #0]
 802330c:	6054      	str	r4, [r2, #4]
 802330e:	e7ca      	b.n	80232a6 <_free_r+0x22>
 8023310:	bd38      	pop	{r3, r4, r5, pc}
 8023312:	bf00      	nop
 8023314:	20000090 	.word	0x20000090

08023318 <__sfputc_r>:
 8023318:	6893      	ldr	r3, [r2, #8]
 802331a:	3b01      	subs	r3, #1
 802331c:	2b00      	cmp	r3, #0
 802331e:	b410      	push	{r4}
 8023320:	6093      	str	r3, [r2, #8]
 8023322:	da08      	bge.n	8023336 <__sfputc_r+0x1e>
 8023324:	6994      	ldr	r4, [r2, #24]
 8023326:	42a3      	cmp	r3, r4
 8023328:	db01      	blt.n	802332e <__sfputc_r+0x16>
 802332a:	290a      	cmp	r1, #10
 802332c:	d103      	bne.n	8023336 <__sfputc_r+0x1e>
 802332e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023332:	f000 bac1 	b.w	80238b8 <__swbuf_r>
 8023336:	6813      	ldr	r3, [r2, #0]
 8023338:	1c58      	adds	r0, r3, #1
 802333a:	6010      	str	r0, [r2, #0]
 802333c:	7019      	strb	r1, [r3, #0]
 802333e:	4608      	mov	r0, r1
 8023340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023344:	4770      	bx	lr

08023346 <__sfputs_r>:
 8023346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023348:	4606      	mov	r6, r0
 802334a:	460f      	mov	r7, r1
 802334c:	4614      	mov	r4, r2
 802334e:	18d5      	adds	r5, r2, r3
 8023350:	42ac      	cmp	r4, r5
 8023352:	d101      	bne.n	8023358 <__sfputs_r+0x12>
 8023354:	2000      	movs	r0, #0
 8023356:	e007      	b.n	8023368 <__sfputs_r+0x22>
 8023358:	f814 1b01 	ldrb.w	r1, [r4], #1
 802335c:	463a      	mov	r2, r7
 802335e:	4630      	mov	r0, r6
 8023360:	f7ff ffda 	bl	8023318 <__sfputc_r>
 8023364:	1c43      	adds	r3, r0, #1
 8023366:	d1f3      	bne.n	8023350 <__sfputs_r+0xa>
 8023368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802336c <_vfiprintf_r>:
 802336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023370:	460d      	mov	r5, r1
 8023372:	b09d      	sub	sp, #116	@ 0x74
 8023374:	4614      	mov	r4, r2
 8023376:	4698      	mov	r8, r3
 8023378:	4606      	mov	r6, r0
 802337a:	b118      	cbz	r0, 8023384 <_vfiprintf_r+0x18>
 802337c:	6a03      	ldr	r3, [r0, #32]
 802337e:	b90b      	cbnz	r3, 8023384 <_vfiprintf_r+0x18>
 8023380:	f7ff fe5a 	bl	8023038 <__sinit>
 8023384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023386:	07d9      	lsls	r1, r3, #31
 8023388:	d405      	bmi.n	8023396 <_vfiprintf_r+0x2a>
 802338a:	89ab      	ldrh	r3, [r5, #12]
 802338c:	059a      	lsls	r2, r3, #22
 802338e:	d402      	bmi.n	8023396 <_vfiprintf_r+0x2a>
 8023390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023392:	f7ff ff66 	bl	8023262 <__retarget_lock_acquire_recursive>
 8023396:	89ab      	ldrh	r3, [r5, #12]
 8023398:	071b      	lsls	r3, r3, #28
 802339a:	d501      	bpl.n	80233a0 <_vfiprintf_r+0x34>
 802339c:	692b      	ldr	r3, [r5, #16]
 802339e:	b99b      	cbnz	r3, 80233c8 <_vfiprintf_r+0x5c>
 80233a0:	4629      	mov	r1, r5
 80233a2:	4630      	mov	r0, r6
 80233a4:	f000 fac6 	bl	8023934 <__swsetup_r>
 80233a8:	b170      	cbz	r0, 80233c8 <_vfiprintf_r+0x5c>
 80233aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80233ac:	07dc      	lsls	r4, r3, #31
 80233ae:	d504      	bpl.n	80233ba <_vfiprintf_r+0x4e>
 80233b0:	f04f 30ff 	mov.w	r0, #4294967295
 80233b4:	b01d      	add	sp, #116	@ 0x74
 80233b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233ba:	89ab      	ldrh	r3, [r5, #12]
 80233bc:	0598      	lsls	r0, r3, #22
 80233be:	d4f7      	bmi.n	80233b0 <_vfiprintf_r+0x44>
 80233c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80233c2:	f7ff ff4f 	bl	8023264 <__retarget_lock_release_recursive>
 80233c6:	e7f3      	b.n	80233b0 <_vfiprintf_r+0x44>
 80233c8:	2300      	movs	r3, #0
 80233ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80233cc:	2320      	movs	r3, #32
 80233ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80233d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80233d6:	2330      	movs	r3, #48	@ 0x30
 80233d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023588 <_vfiprintf_r+0x21c>
 80233dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80233e0:	f04f 0901 	mov.w	r9, #1
 80233e4:	4623      	mov	r3, r4
 80233e6:	469a      	mov	sl, r3
 80233e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80233ec:	b10a      	cbz	r2, 80233f2 <_vfiprintf_r+0x86>
 80233ee:	2a25      	cmp	r2, #37	@ 0x25
 80233f0:	d1f9      	bne.n	80233e6 <_vfiprintf_r+0x7a>
 80233f2:	ebba 0b04 	subs.w	fp, sl, r4
 80233f6:	d00b      	beq.n	8023410 <_vfiprintf_r+0xa4>
 80233f8:	465b      	mov	r3, fp
 80233fa:	4622      	mov	r2, r4
 80233fc:	4629      	mov	r1, r5
 80233fe:	4630      	mov	r0, r6
 8023400:	f7ff ffa1 	bl	8023346 <__sfputs_r>
 8023404:	3001      	adds	r0, #1
 8023406:	f000 80a7 	beq.w	8023558 <_vfiprintf_r+0x1ec>
 802340a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802340c:	445a      	add	r2, fp
 802340e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023410:	f89a 3000 	ldrb.w	r3, [sl]
 8023414:	2b00      	cmp	r3, #0
 8023416:	f000 809f 	beq.w	8023558 <_vfiprintf_r+0x1ec>
 802341a:	2300      	movs	r3, #0
 802341c:	f04f 32ff 	mov.w	r2, #4294967295
 8023420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023424:	f10a 0a01 	add.w	sl, sl, #1
 8023428:	9304      	str	r3, [sp, #16]
 802342a:	9307      	str	r3, [sp, #28]
 802342c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023430:	931a      	str	r3, [sp, #104]	@ 0x68
 8023432:	4654      	mov	r4, sl
 8023434:	2205      	movs	r2, #5
 8023436:	f814 1b01 	ldrb.w	r1, [r4], #1
 802343a:	4853      	ldr	r0, [pc, #332]	@ (8023588 <_vfiprintf_r+0x21c>)
 802343c:	f7fc fe18 	bl	8020070 <memchr>
 8023440:	9a04      	ldr	r2, [sp, #16]
 8023442:	b9d8      	cbnz	r0, 802347c <_vfiprintf_r+0x110>
 8023444:	06d1      	lsls	r1, r2, #27
 8023446:	bf44      	itt	mi
 8023448:	2320      	movmi	r3, #32
 802344a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802344e:	0713      	lsls	r3, r2, #28
 8023450:	bf44      	itt	mi
 8023452:	232b      	movmi	r3, #43	@ 0x2b
 8023454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023458:	f89a 3000 	ldrb.w	r3, [sl]
 802345c:	2b2a      	cmp	r3, #42	@ 0x2a
 802345e:	d015      	beq.n	802348c <_vfiprintf_r+0x120>
 8023460:	9a07      	ldr	r2, [sp, #28]
 8023462:	4654      	mov	r4, sl
 8023464:	2000      	movs	r0, #0
 8023466:	f04f 0c0a 	mov.w	ip, #10
 802346a:	4621      	mov	r1, r4
 802346c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023470:	3b30      	subs	r3, #48	@ 0x30
 8023472:	2b09      	cmp	r3, #9
 8023474:	d94b      	bls.n	802350e <_vfiprintf_r+0x1a2>
 8023476:	b1b0      	cbz	r0, 80234a6 <_vfiprintf_r+0x13a>
 8023478:	9207      	str	r2, [sp, #28]
 802347a:	e014      	b.n	80234a6 <_vfiprintf_r+0x13a>
 802347c:	eba0 0308 	sub.w	r3, r0, r8
 8023480:	fa09 f303 	lsl.w	r3, r9, r3
 8023484:	4313      	orrs	r3, r2
 8023486:	9304      	str	r3, [sp, #16]
 8023488:	46a2      	mov	sl, r4
 802348a:	e7d2      	b.n	8023432 <_vfiprintf_r+0xc6>
 802348c:	9b03      	ldr	r3, [sp, #12]
 802348e:	1d19      	adds	r1, r3, #4
 8023490:	681b      	ldr	r3, [r3, #0]
 8023492:	9103      	str	r1, [sp, #12]
 8023494:	2b00      	cmp	r3, #0
 8023496:	bfbb      	ittet	lt
 8023498:	425b      	neglt	r3, r3
 802349a:	f042 0202 	orrlt.w	r2, r2, #2
 802349e:	9307      	strge	r3, [sp, #28]
 80234a0:	9307      	strlt	r3, [sp, #28]
 80234a2:	bfb8      	it	lt
 80234a4:	9204      	strlt	r2, [sp, #16]
 80234a6:	7823      	ldrb	r3, [r4, #0]
 80234a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80234aa:	d10a      	bne.n	80234c2 <_vfiprintf_r+0x156>
 80234ac:	7863      	ldrb	r3, [r4, #1]
 80234ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80234b0:	d132      	bne.n	8023518 <_vfiprintf_r+0x1ac>
 80234b2:	9b03      	ldr	r3, [sp, #12]
 80234b4:	1d1a      	adds	r2, r3, #4
 80234b6:	681b      	ldr	r3, [r3, #0]
 80234b8:	9203      	str	r2, [sp, #12]
 80234ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80234be:	3402      	adds	r4, #2
 80234c0:	9305      	str	r3, [sp, #20]
 80234c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023598 <_vfiprintf_r+0x22c>
 80234c6:	7821      	ldrb	r1, [r4, #0]
 80234c8:	2203      	movs	r2, #3
 80234ca:	4650      	mov	r0, sl
 80234cc:	f7fc fdd0 	bl	8020070 <memchr>
 80234d0:	b138      	cbz	r0, 80234e2 <_vfiprintf_r+0x176>
 80234d2:	9b04      	ldr	r3, [sp, #16]
 80234d4:	eba0 000a 	sub.w	r0, r0, sl
 80234d8:	2240      	movs	r2, #64	@ 0x40
 80234da:	4082      	lsls	r2, r0
 80234dc:	4313      	orrs	r3, r2
 80234de:	3401      	adds	r4, #1
 80234e0:	9304      	str	r3, [sp, #16]
 80234e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234e6:	4829      	ldr	r0, [pc, #164]	@ (802358c <_vfiprintf_r+0x220>)
 80234e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80234ec:	2206      	movs	r2, #6
 80234ee:	f7fc fdbf 	bl	8020070 <memchr>
 80234f2:	2800      	cmp	r0, #0
 80234f4:	d03f      	beq.n	8023576 <_vfiprintf_r+0x20a>
 80234f6:	4b26      	ldr	r3, [pc, #152]	@ (8023590 <_vfiprintf_r+0x224>)
 80234f8:	bb1b      	cbnz	r3, 8023542 <_vfiprintf_r+0x1d6>
 80234fa:	9b03      	ldr	r3, [sp, #12]
 80234fc:	3307      	adds	r3, #7
 80234fe:	f023 0307 	bic.w	r3, r3, #7
 8023502:	3308      	adds	r3, #8
 8023504:	9303      	str	r3, [sp, #12]
 8023506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023508:	443b      	add	r3, r7
 802350a:	9309      	str	r3, [sp, #36]	@ 0x24
 802350c:	e76a      	b.n	80233e4 <_vfiprintf_r+0x78>
 802350e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023512:	460c      	mov	r4, r1
 8023514:	2001      	movs	r0, #1
 8023516:	e7a8      	b.n	802346a <_vfiprintf_r+0xfe>
 8023518:	2300      	movs	r3, #0
 802351a:	3401      	adds	r4, #1
 802351c:	9305      	str	r3, [sp, #20]
 802351e:	4619      	mov	r1, r3
 8023520:	f04f 0c0a 	mov.w	ip, #10
 8023524:	4620      	mov	r0, r4
 8023526:	f810 2b01 	ldrb.w	r2, [r0], #1
 802352a:	3a30      	subs	r2, #48	@ 0x30
 802352c:	2a09      	cmp	r2, #9
 802352e:	d903      	bls.n	8023538 <_vfiprintf_r+0x1cc>
 8023530:	2b00      	cmp	r3, #0
 8023532:	d0c6      	beq.n	80234c2 <_vfiprintf_r+0x156>
 8023534:	9105      	str	r1, [sp, #20]
 8023536:	e7c4      	b.n	80234c2 <_vfiprintf_r+0x156>
 8023538:	fb0c 2101 	mla	r1, ip, r1, r2
 802353c:	4604      	mov	r4, r0
 802353e:	2301      	movs	r3, #1
 8023540:	e7f0      	b.n	8023524 <_vfiprintf_r+0x1b8>
 8023542:	ab03      	add	r3, sp, #12
 8023544:	9300      	str	r3, [sp, #0]
 8023546:	462a      	mov	r2, r5
 8023548:	4b12      	ldr	r3, [pc, #72]	@ (8023594 <_vfiprintf_r+0x228>)
 802354a:	a904      	add	r1, sp, #16
 802354c:	4630      	mov	r0, r6
 802354e:	f3af 8000 	nop.w
 8023552:	4607      	mov	r7, r0
 8023554:	1c78      	adds	r0, r7, #1
 8023556:	d1d6      	bne.n	8023506 <_vfiprintf_r+0x19a>
 8023558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802355a:	07d9      	lsls	r1, r3, #31
 802355c:	d405      	bmi.n	802356a <_vfiprintf_r+0x1fe>
 802355e:	89ab      	ldrh	r3, [r5, #12]
 8023560:	059a      	lsls	r2, r3, #22
 8023562:	d402      	bmi.n	802356a <_vfiprintf_r+0x1fe>
 8023564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023566:	f7ff fe7d 	bl	8023264 <__retarget_lock_release_recursive>
 802356a:	89ab      	ldrh	r3, [r5, #12]
 802356c:	065b      	lsls	r3, r3, #25
 802356e:	f53f af1f 	bmi.w	80233b0 <_vfiprintf_r+0x44>
 8023572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023574:	e71e      	b.n	80233b4 <_vfiprintf_r+0x48>
 8023576:	ab03      	add	r3, sp, #12
 8023578:	9300      	str	r3, [sp, #0]
 802357a:	462a      	mov	r2, r5
 802357c:	4b05      	ldr	r3, [pc, #20]	@ (8023594 <_vfiprintf_r+0x228>)
 802357e:	a904      	add	r1, sp, #16
 8023580:	4630      	mov	r0, r6
 8023582:	f000 f879 	bl	8023678 <_printf_i>
 8023586:	e7e4      	b.n	8023552 <_vfiprintf_r+0x1e6>
 8023588:	08023d1c 	.word	0x08023d1c
 802358c:	08023d26 	.word	0x08023d26
 8023590:	00000000 	.word	0x00000000
 8023594:	08023347 	.word	0x08023347
 8023598:	08023d22 	.word	0x08023d22

0802359c <_printf_common>:
 802359c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80235a0:	4616      	mov	r6, r2
 80235a2:	4698      	mov	r8, r3
 80235a4:	688a      	ldr	r2, [r1, #8]
 80235a6:	690b      	ldr	r3, [r1, #16]
 80235a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80235ac:	4293      	cmp	r3, r2
 80235ae:	bfb8      	it	lt
 80235b0:	4613      	movlt	r3, r2
 80235b2:	6033      	str	r3, [r6, #0]
 80235b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80235b8:	4607      	mov	r7, r0
 80235ba:	460c      	mov	r4, r1
 80235bc:	b10a      	cbz	r2, 80235c2 <_printf_common+0x26>
 80235be:	3301      	adds	r3, #1
 80235c0:	6033      	str	r3, [r6, #0]
 80235c2:	6823      	ldr	r3, [r4, #0]
 80235c4:	0699      	lsls	r1, r3, #26
 80235c6:	bf42      	ittt	mi
 80235c8:	6833      	ldrmi	r3, [r6, #0]
 80235ca:	3302      	addmi	r3, #2
 80235cc:	6033      	strmi	r3, [r6, #0]
 80235ce:	6825      	ldr	r5, [r4, #0]
 80235d0:	f015 0506 	ands.w	r5, r5, #6
 80235d4:	d106      	bne.n	80235e4 <_printf_common+0x48>
 80235d6:	f104 0a19 	add.w	sl, r4, #25
 80235da:	68e3      	ldr	r3, [r4, #12]
 80235dc:	6832      	ldr	r2, [r6, #0]
 80235de:	1a9b      	subs	r3, r3, r2
 80235e0:	42ab      	cmp	r3, r5
 80235e2:	dc26      	bgt.n	8023632 <_printf_common+0x96>
 80235e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80235e8:	6822      	ldr	r2, [r4, #0]
 80235ea:	3b00      	subs	r3, #0
 80235ec:	bf18      	it	ne
 80235ee:	2301      	movne	r3, #1
 80235f0:	0692      	lsls	r2, r2, #26
 80235f2:	d42b      	bmi.n	802364c <_printf_common+0xb0>
 80235f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80235f8:	4641      	mov	r1, r8
 80235fa:	4638      	mov	r0, r7
 80235fc:	47c8      	blx	r9
 80235fe:	3001      	adds	r0, #1
 8023600:	d01e      	beq.n	8023640 <_printf_common+0xa4>
 8023602:	6823      	ldr	r3, [r4, #0]
 8023604:	6922      	ldr	r2, [r4, #16]
 8023606:	f003 0306 	and.w	r3, r3, #6
 802360a:	2b04      	cmp	r3, #4
 802360c:	bf02      	ittt	eq
 802360e:	68e5      	ldreq	r5, [r4, #12]
 8023610:	6833      	ldreq	r3, [r6, #0]
 8023612:	1aed      	subeq	r5, r5, r3
 8023614:	68a3      	ldr	r3, [r4, #8]
 8023616:	bf0c      	ite	eq
 8023618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802361c:	2500      	movne	r5, #0
 802361e:	4293      	cmp	r3, r2
 8023620:	bfc4      	itt	gt
 8023622:	1a9b      	subgt	r3, r3, r2
 8023624:	18ed      	addgt	r5, r5, r3
 8023626:	2600      	movs	r6, #0
 8023628:	341a      	adds	r4, #26
 802362a:	42b5      	cmp	r5, r6
 802362c:	d11a      	bne.n	8023664 <_printf_common+0xc8>
 802362e:	2000      	movs	r0, #0
 8023630:	e008      	b.n	8023644 <_printf_common+0xa8>
 8023632:	2301      	movs	r3, #1
 8023634:	4652      	mov	r2, sl
 8023636:	4641      	mov	r1, r8
 8023638:	4638      	mov	r0, r7
 802363a:	47c8      	blx	r9
 802363c:	3001      	adds	r0, #1
 802363e:	d103      	bne.n	8023648 <_printf_common+0xac>
 8023640:	f04f 30ff 	mov.w	r0, #4294967295
 8023644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023648:	3501      	adds	r5, #1
 802364a:	e7c6      	b.n	80235da <_printf_common+0x3e>
 802364c:	18e1      	adds	r1, r4, r3
 802364e:	1c5a      	adds	r2, r3, #1
 8023650:	2030      	movs	r0, #48	@ 0x30
 8023652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023656:	4422      	add	r2, r4
 8023658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802365c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023660:	3302      	adds	r3, #2
 8023662:	e7c7      	b.n	80235f4 <_printf_common+0x58>
 8023664:	2301      	movs	r3, #1
 8023666:	4622      	mov	r2, r4
 8023668:	4641      	mov	r1, r8
 802366a:	4638      	mov	r0, r7
 802366c:	47c8      	blx	r9
 802366e:	3001      	adds	r0, #1
 8023670:	d0e6      	beq.n	8023640 <_printf_common+0xa4>
 8023672:	3601      	adds	r6, #1
 8023674:	e7d9      	b.n	802362a <_printf_common+0x8e>
	...

08023678 <_printf_i>:
 8023678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802367c:	7e0f      	ldrb	r7, [r1, #24]
 802367e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023680:	2f78      	cmp	r7, #120	@ 0x78
 8023682:	4691      	mov	r9, r2
 8023684:	4680      	mov	r8, r0
 8023686:	460c      	mov	r4, r1
 8023688:	469a      	mov	sl, r3
 802368a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802368e:	d807      	bhi.n	80236a0 <_printf_i+0x28>
 8023690:	2f62      	cmp	r7, #98	@ 0x62
 8023692:	d80a      	bhi.n	80236aa <_printf_i+0x32>
 8023694:	2f00      	cmp	r7, #0
 8023696:	f000 80d2 	beq.w	802383e <_printf_i+0x1c6>
 802369a:	2f58      	cmp	r7, #88	@ 0x58
 802369c:	f000 80b9 	beq.w	8023812 <_printf_i+0x19a>
 80236a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80236a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80236a8:	e03a      	b.n	8023720 <_printf_i+0xa8>
 80236aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80236ae:	2b15      	cmp	r3, #21
 80236b0:	d8f6      	bhi.n	80236a0 <_printf_i+0x28>
 80236b2:	a101      	add	r1, pc, #4	@ (adr r1, 80236b8 <_printf_i+0x40>)
 80236b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80236b8:	08023711 	.word	0x08023711
 80236bc:	08023725 	.word	0x08023725
 80236c0:	080236a1 	.word	0x080236a1
 80236c4:	080236a1 	.word	0x080236a1
 80236c8:	080236a1 	.word	0x080236a1
 80236cc:	080236a1 	.word	0x080236a1
 80236d0:	08023725 	.word	0x08023725
 80236d4:	080236a1 	.word	0x080236a1
 80236d8:	080236a1 	.word	0x080236a1
 80236dc:	080236a1 	.word	0x080236a1
 80236e0:	080236a1 	.word	0x080236a1
 80236e4:	08023825 	.word	0x08023825
 80236e8:	0802374f 	.word	0x0802374f
 80236ec:	080237df 	.word	0x080237df
 80236f0:	080236a1 	.word	0x080236a1
 80236f4:	080236a1 	.word	0x080236a1
 80236f8:	08023847 	.word	0x08023847
 80236fc:	080236a1 	.word	0x080236a1
 8023700:	0802374f 	.word	0x0802374f
 8023704:	080236a1 	.word	0x080236a1
 8023708:	080236a1 	.word	0x080236a1
 802370c:	080237e7 	.word	0x080237e7
 8023710:	6833      	ldr	r3, [r6, #0]
 8023712:	1d1a      	adds	r2, r3, #4
 8023714:	681b      	ldr	r3, [r3, #0]
 8023716:	6032      	str	r2, [r6, #0]
 8023718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802371c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023720:	2301      	movs	r3, #1
 8023722:	e09d      	b.n	8023860 <_printf_i+0x1e8>
 8023724:	6833      	ldr	r3, [r6, #0]
 8023726:	6820      	ldr	r0, [r4, #0]
 8023728:	1d19      	adds	r1, r3, #4
 802372a:	6031      	str	r1, [r6, #0]
 802372c:	0606      	lsls	r6, r0, #24
 802372e:	d501      	bpl.n	8023734 <_printf_i+0xbc>
 8023730:	681d      	ldr	r5, [r3, #0]
 8023732:	e003      	b.n	802373c <_printf_i+0xc4>
 8023734:	0645      	lsls	r5, r0, #25
 8023736:	d5fb      	bpl.n	8023730 <_printf_i+0xb8>
 8023738:	f9b3 5000 	ldrsh.w	r5, [r3]
 802373c:	2d00      	cmp	r5, #0
 802373e:	da03      	bge.n	8023748 <_printf_i+0xd0>
 8023740:	232d      	movs	r3, #45	@ 0x2d
 8023742:	426d      	negs	r5, r5
 8023744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023748:	4859      	ldr	r0, [pc, #356]	@ (80238b0 <_printf_i+0x238>)
 802374a:	230a      	movs	r3, #10
 802374c:	e011      	b.n	8023772 <_printf_i+0xfa>
 802374e:	6821      	ldr	r1, [r4, #0]
 8023750:	6833      	ldr	r3, [r6, #0]
 8023752:	0608      	lsls	r0, r1, #24
 8023754:	f853 5b04 	ldr.w	r5, [r3], #4
 8023758:	d402      	bmi.n	8023760 <_printf_i+0xe8>
 802375a:	0649      	lsls	r1, r1, #25
 802375c:	bf48      	it	mi
 802375e:	b2ad      	uxthmi	r5, r5
 8023760:	2f6f      	cmp	r7, #111	@ 0x6f
 8023762:	4853      	ldr	r0, [pc, #332]	@ (80238b0 <_printf_i+0x238>)
 8023764:	6033      	str	r3, [r6, #0]
 8023766:	bf14      	ite	ne
 8023768:	230a      	movne	r3, #10
 802376a:	2308      	moveq	r3, #8
 802376c:	2100      	movs	r1, #0
 802376e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023772:	6866      	ldr	r6, [r4, #4]
 8023774:	60a6      	str	r6, [r4, #8]
 8023776:	2e00      	cmp	r6, #0
 8023778:	bfa2      	ittt	ge
 802377a:	6821      	ldrge	r1, [r4, #0]
 802377c:	f021 0104 	bicge.w	r1, r1, #4
 8023780:	6021      	strge	r1, [r4, #0]
 8023782:	b90d      	cbnz	r5, 8023788 <_printf_i+0x110>
 8023784:	2e00      	cmp	r6, #0
 8023786:	d04b      	beq.n	8023820 <_printf_i+0x1a8>
 8023788:	4616      	mov	r6, r2
 802378a:	fbb5 f1f3 	udiv	r1, r5, r3
 802378e:	fb03 5711 	mls	r7, r3, r1, r5
 8023792:	5dc7      	ldrb	r7, [r0, r7]
 8023794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023798:	462f      	mov	r7, r5
 802379a:	42bb      	cmp	r3, r7
 802379c:	460d      	mov	r5, r1
 802379e:	d9f4      	bls.n	802378a <_printf_i+0x112>
 80237a0:	2b08      	cmp	r3, #8
 80237a2:	d10b      	bne.n	80237bc <_printf_i+0x144>
 80237a4:	6823      	ldr	r3, [r4, #0]
 80237a6:	07df      	lsls	r7, r3, #31
 80237a8:	d508      	bpl.n	80237bc <_printf_i+0x144>
 80237aa:	6923      	ldr	r3, [r4, #16]
 80237ac:	6861      	ldr	r1, [r4, #4]
 80237ae:	4299      	cmp	r1, r3
 80237b0:	bfde      	ittt	le
 80237b2:	2330      	movle	r3, #48	@ 0x30
 80237b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80237b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80237bc:	1b92      	subs	r2, r2, r6
 80237be:	6122      	str	r2, [r4, #16]
 80237c0:	f8cd a000 	str.w	sl, [sp]
 80237c4:	464b      	mov	r3, r9
 80237c6:	aa03      	add	r2, sp, #12
 80237c8:	4621      	mov	r1, r4
 80237ca:	4640      	mov	r0, r8
 80237cc:	f7ff fee6 	bl	802359c <_printf_common>
 80237d0:	3001      	adds	r0, #1
 80237d2:	d14a      	bne.n	802386a <_printf_i+0x1f2>
 80237d4:	f04f 30ff 	mov.w	r0, #4294967295
 80237d8:	b004      	add	sp, #16
 80237da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237de:	6823      	ldr	r3, [r4, #0]
 80237e0:	f043 0320 	orr.w	r3, r3, #32
 80237e4:	6023      	str	r3, [r4, #0]
 80237e6:	4833      	ldr	r0, [pc, #204]	@ (80238b4 <_printf_i+0x23c>)
 80237e8:	2778      	movs	r7, #120	@ 0x78
 80237ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80237ee:	6823      	ldr	r3, [r4, #0]
 80237f0:	6831      	ldr	r1, [r6, #0]
 80237f2:	061f      	lsls	r7, r3, #24
 80237f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80237f8:	d402      	bmi.n	8023800 <_printf_i+0x188>
 80237fa:	065f      	lsls	r7, r3, #25
 80237fc:	bf48      	it	mi
 80237fe:	b2ad      	uxthmi	r5, r5
 8023800:	6031      	str	r1, [r6, #0]
 8023802:	07d9      	lsls	r1, r3, #31
 8023804:	bf44      	itt	mi
 8023806:	f043 0320 	orrmi.w	r3, r3, #32
 802380a:	6023      	strmi	r3, [r4, #0]
 802380c:	b11d      	cbz	r5, 8023816 <_printf_i+0x19e>
 802380e:	2310      	movs	r3, #16
 8023810:	e7ac      	b.n	802376c <_printf_i+0xf4>
 8023812:	4827      	ldr	r0, [pc, #156]	@ (80238b0 <_printf_i+0x238>)
 8023814:	e7e9      	b.n	80237ea <_printf_i+0x172>
 8023816:	6823      	ldr	r3, [r4, #0]
 8023818:	f023 0320 	bic.w	r3, r3, #32
 802381c:	6023      	str	r3, [r4, #0]
 802381e:	e7f6      	b.n	802380e <_printf_i+0x196>
 8023820:	4616      	mov	r6, r2
 8023822:	e7bd      	b.n	80237a0 <_printf_i+0x128>
 8023824:	6833      	ldr	r3, [r6, #0]
 8023826:	6825      	ldr	r5, [r4, #0]
 8023828:	6961      	ldr	r1, [r4, #20]
 802382a:	1d18      	adds	r0, r3, #4
 802382c:	6030      	str	r0, [r6, #0]
 802382e:	062e      	lsls	r6, r5, #24
 8023830:	681b      	ldr	r3, [r3, #0]
 8023832:	d501      	bpl.n	8023838 <_printf_i+0x1c0>
 8023834:	6019      	str	r1, [r3, #0]
 8023836:	e002      	b.n	802383e <_printf_i+0x1c6>
 8023838:	0668      	lsls	r0, r5, #25
 802383a:	d5fb      	bpl.n	8023834 <_printf_i+0x1bc>
 802383c:	8019      	strh	r1, [r3, #0]
 802383e:	2300      	movs	r3, #0
 8023840:	6123      	str	r3, [r4, #16]
 8023842:	4616      	mov	r6, r2
 8023844:	e7bc      	b.n	80237c0 <_printf_i+0x148>
 8023846:	6833      	ldr	r3, [r6, #0]
 8023848:	1d1a      	adds	r2, r3, #4
 802384a:	6032      	str	r2, [r6, #0]
 802384c:	681e      	ldr	r6, [r3, #0]
 802384e:	6862      	ldr	r2, [r4, #4]
 8023850:	2100      	movs	r1, #0
 8023852:	4630      	mov	r0, r6
 8023854:	f7fc fc0c 	bl	8020070 <memchr>
 8023858:	b108      	cbz	r0, 802385e <_printf_i+0x1e6>
 802385a:	1b80      	subs	r0, r0, r6
 802385c:	6060      	str	r0, [r4, #4]
 802385e:	6863      	ldr	r3, [r4, #4]
 8023860:	6123      	str	r3, [r4, #16]
 8023862:	2300      	movs	r3, #0
 8023864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023868:	e7aa      	b.n	80237c0 <_printf_i+0x148>
 802386a:	6923      	ldr	r3, [r4, #16]
 802386c:	4632      	mov	r2, r6
 802386e:	4649      	mov	r1, r9
 8023870:	4640      	mov	r0, r8
 8023872:	47d0      	blx	sl
 8023874:	3001      	adds	r0, #1
 8023876:	d0ad      	beq.n	80237d4 <_printf_i+0x15c>
 8023878:	6823      	ldr	r3, [r4, #0]
 802387a:	079b      	lsls	r3, r3, #30
 802387c:	d413      	bmi.n	80238a6 <_printf_i+0x22e>
 802387e:	68e0      	ldr	r0, [r4, #12]
 8023880:	9b03      	ldr	r3, [sp, #12]
 8023882:	4298      	cmp	r0, r3
 8023884:	bfb8      	it	lt
 8023886:	4618      	movlt	r0, r3
 8023888:	e7a6      	b.n	80237d8 <_printf_i+0x160>
 802388a:	2301      	movs	r3, #1
 802388c:	4632      	mov	r2, r6
 802388e:	4649      	mov	r1, r9
 8023890:	4640      	mov	r0, r8
 8023892:	47d0      	blx	sl
 8023894:	3001      	adds	r0, #1
 8023896:	d09d      	beq.n	80237d4 <_printf_i+0x15c>
 8023898:	3501      	adds	r5, #1
 802389a:	68e3      	ldr	r3, [r4, #12]
 802389c:	9903      	ldr	r1, [sp, #12]
 802389e:	1a5b      	subs	r3, r3, r1
 80238a0:	42ab      	cmp	r3, r5
 80238a2:	dcf2      	bgt.n	802388a <_printf_i+0x212>
 80238a4:	e7eb      	b.n	802387e <_printf_i+0x206>
 80238a6:	2500      	movs	r5, #0
 80238a8:	f104 0619 	add.w	r6, r4, #25
 80238ac:	e7f5      	b.n	802389a <_printf_i+0x222>
 80238ae:	bf00      	nop
 80238b0:	08023d2d 	.word	0x08023d2d
 80238b4:	08023d3e 	.word	0x08023d3e

080238b8 <__swbuf_r>:
 80238b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238ba:	460e      	mov	r6, r1
 80238bc:	4614      	mov	r4, r2
 80238be:	4605      	mov	r5, r0
 80238c0:	b118      	cbz	r0, 80238ca <__swbuf_r+0x12>
 80238c2:	6a03      	ldr	r3, [r0, #32]
 80238c4:	b90b      	cbnz	r3, 80238ca <__swbuf_r+0x12>
 80238c6:	f7ff fbb7 	bl	8023038 <__sinit>
 80238ca:	69a3      	ldr	r3, [r4, #24]
 80238cc:	60a3      	str	r3, [r4, #8]
 80238ce:	89a3      	ldrh	r3, [r4, #12]
 80238d0:	071a      	lsls	r2, r3, #28
 80238d2:	d501      	bpl.n	80238d8 <__swbuf_r+0x20>
 80238d4:	6923      	ldr	r3, [r4, #16]
 80238d6:	b943      	cbnz	r3, 80238ea <__swbuf_r+0x32>
 80238d8:	4621      	mov	r1, r4
 80238da:	4628      	mov	r0, r5
 80238dc:	f000 f82a 	bl	8023934 <__swsetup_r>
 80238e0:	b118      	cbz	r0, 80238ea <__swbuf_r+0x32>
 80238e2:	f04f 37ff 	mov.w	r7, #4294967295
 80238e6:	4638      	mov	r0, r7
 80238e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80238ea:	6823      	ldr	r3, [r4, #0]
 80238ec:	6922      	ldr	r2, [r4, #16]
 80238ee:	1a98      	subs	r0, r3, r2
 80238f0:	6963      	ldr	r3, [r4, #20]
 80238f2:	b2f6      	uxtb	r6, r6
 80238f4:	4283      	cmp	r3, r0
 80238f6:	4637      	mov	r7, r6
 80238f8:	dc05      	bgt.n	8023906 <__swbuf_r+0x4e>
 80238fa:	4621      	mov	r1, r4
 80238fc:	4628      	mov	r0, r5
 80238fe:	f7ff fad3 	bl	8022ea8 <_fflush_r>
 8023902:	2800      	cmp	r0, #0
 8023904:	d1ed      	bne.n	80238e2 <__swbuf_r+0x2a>
 8023906:	68a3      	ldr	r3, [r4, #8]
 8023908:	3b01      	subs	r3, #1
 802390a:	60a3      	str	r3, [r4, #8]
 802390c:	6823      	ldr	r3, [r4, #0]
 802390e:	1c5a      	adds	r2, r3, #1
 8023910:	6022      	str	r2, [r4, #0]
 8023912:	701e      	strb	r6, [r3, #0]
 8023914:	6962      	ldr	r2, [r4, #20]
 8023916:	1c43      	adds	r3, r0, #1
 8023918:	429a      	cmp	r2, r3
 802391a:	d004      	beq.n	8023926 <__swbuf_r+0x6e>
 802391c:	89a3      	ldrh	r3, [r4, #12]
 802391e:	07db      	lsls	r3, r3, #31
 8023920:	d5e1      	bpl.n	80238e6 <__swbuf_r+0x2e>
 8023922:	2e0a      	cmp	r6, #10
 8023924:	d1df      	bne.n	80238e6 <__swbuf_r+0x2e>
 8023926:	4621      	mov	r1, r4
 8023928:	4628      	mov	r0, r5
 802392a:	f7ff fabd 	bl	8022ea8 <_fflush_r>
 802392e:	2800      	cmp	r0, #0
 8023930:	d0d9      	beq.n	80238e6 <__swbuf_r+0x2e>
 8023932:	e7d6      	b.n	80238e2 <__swbuf_r+0x2a>

08023934 <__swsetup_r>:
 8023934:	b538      	push	{r3, r4, r5, lr}
 8023936:	4b29      	ldr	r3, [pc, #164]	@ (80239dc <__swsetup_r+0xa8>)
 8023938:	4605      	mov	r5, r0
 802393a:	6818      	ldr	r0, [r3, #0]
 802393c:	460c      	mov	r4, r1
 802393e:	b118      	cbz	r0, 8023948 <__swsetup_r+0x14>
 8023940:	6a03      	ldr	r3, [r0, #32]
 8023942:	b90b      	cbnz	r3, 8023948 <__swsetup_r+0x14>
 8023944:	f7ff fb78 	bl	8023038 <__sinit>
 8023948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802394c:	0719      	lsls	r1, r3, #28
 802394e:	d422      	bmi.n	8023996 <__swsetup_r+0x62>
 8023950:	06da      	lsls	r2, r3, #27
 8023952:	d407      	bmi.n	8023964 <__swsetup_r+0x30>
 8023954:	2209      	movs	r2, #9
 8023956:	602a      	str	r2, [r5, #0]
 8023958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802395c:	81a3      	strh	r3, [r4, #12]
 802395e:	f04f 30ff 	mov.w	r0, #4294967295
 8023962:	e033      	b.n	80239cc <__swsetup_r+0x98>
 8023964:	0758      	lsls	r0, r3, #29
 8023966:	d512      	bpl.n	802398e <__swsetup_r+0x5a>
 8023968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802396a:	b141      	cbz	r1, 802397e <__swsetup_r+0x4a>
 802396c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023970:	4299      	cmp	r1, r3
 8023972:	d002      	beq.n	802397a <__swsetup_r+0x46>
 8023974:	4628      	mov	r0, r5
 8023976:	f7ff fc85 	bl	8023284 <_free_r>
 802397a:	2300      	movs	r3, #0
 802397c:	6363      	str	r3, [r4, #52]	@ 0x34
 802397e:	89a3      	ldrh	r3, [r4, #12]
 8023980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023984:	81a3      	strh	r3, [r4, #12]
 8023986:	2300      	movs	r3, #0
 8023988:	6063      	str	r3, [r4, #4]
 802398a:	6923      	ldr	r3, [r4, #16]
 802398c:	6023      	str	r3, [r4, #0]
 802398e:	89a3      	ldrh	r3, [r4, #12]
 8023990:	f043 0308 	orr.w	r3, r3, #8
 8023994:	81a3      	strh	r3, [r4, #12]
 8023996:	6923      	ldr	r3, [r4, #16]
 8023998:	b94b      	cbnz	r3, 80239ae <__swsetup_r+0x7a>
 802399a:	89a3      	ldrh	r3, [r4, #12]
 802399c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80239a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80239a4:	d003      	beq.n	80239ae <__swsetup_r+0x7a>
 80239a6:	4621      	mov	r1, r4
 80239a8:	4628      	mov	r0, r5
 80239aa:	f000 f83f 	bl	8023a2c <__smakebuf_r>
 80239ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80239b2:	f013 0201 	ands.w	r2, r3, #1
 80239b6:	d00a      	beq.n	80239ce <__swsetup_r+0x9a>
 80239b8:	2200      	movs	r2, #0
 80239ba:	60a2      	str	r2, [r4, #8]
 80239bc:	6962      	ldr	r2, [r4, #20]
 80239be:	4252      	negs	r2, r2
 80239c0:	61a2      	str	r2, [r4, #24]
 80239c2:	6922      	ldr	r2, [r4, #16]
 80239c4:	b942      	cbnz	r2, 80239d8 <__swsetup_r+0xa4>
 80239c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80239ca:	d1c5      	bne.n	8023958 <__swsetup_r+0x24>
 80239cc:	bd38      	pop	{r3, r4, r5, pc}
 80239ce:	0799      	lsls	r1, r3, #30
 80239d0:	bf58      	it	pl
 80239d2:	6962      	ldrpl	r2, [r4, #20]
 80239d4:	60a2      	str	r2, [r4, #8]
 80239d6:	e7f4      	b.n	80239c2 <__swsetup_r+0x8e>
 80239d8:	2000      	movs	r0, #0
 80239da:	e7f7      	b.n	80239cc <__swsetup_r+0x98>
 80239dc:	20000018 	.word	0x20000018

080239e0 <__swhatbuf_r>:
 80239e0:	b570      	push	{r4, r5, r6, lr}
 80239e2:	460c      	mov	r4, r1
 80239e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239e8:	2900      	cmp	r1, #0
 80239ea:	b096      	sub	sp, #88	@ 0x58
 80239ec:	4615      	mov	r5, r2
 80239ee:	461e      	mov	r6, r3
 80239f0:	da0d      	bge.n	8023a0e <__swhatbuf_r+0x2e>
 80239f2:	89a3      	ldrh	r3, [r4, #12]
 80239f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80239f8:	f04f 0100 	mov.w	r1, #0
 80239fc:	bf14      	ite	ne
 80239fe:	2340      	movne	r3, #64	@ 0x40
 8023a00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023a04:	2000      	movs	r0, #0
 8023a06:	6031      	str	r1, [r6, #0]
 8023a08:	602b      	str	r3, [r5, #0]
 8023a0a:	b016      	add	sp, #88	@ 0x58
 8023a0c:	bd70      	pop	{r4, r5, r6, pc}
 8023a0e:	466a      	mov	r2, sp
 8023a10:	f000 f848 	bl	8023aa4 <_fstat_r>
 8023a14:	2800      	cmp	r0, #0
 8023a16:	dbec      	blt.n	80239f2 <__swhatbuf_r+0x12>
 8023a18:	9901      	ldr	r1, [sp, #4]
 8023a1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023a1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023a22:	4259      	negs	r1, r3
 8023a24:	4159      	adcs	r1, r3
 8023a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023a2a:	e7eb      	b.n	8023a04 <__swhatbuf_r+0x24>

08023a2c <__smakebuf_r>:
 8023a2c:	898b      	ldrh	r3, [r1, #12]
 8023a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023a30:	079d      	lsls	r5, r3, #30
 8023a32:	4606      	mov	r6, r0
 8023a34:	460c      	mov	r4, r1
 8023a36:	d507      	bpl.n	8023a48 <__smakebuf_r+0x1c>
 8023a38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023a3c:	6023      	str	r3, [r4, #0]
 8023a3e:	6123      	str	r3, [r4, #16]
 8023a40:	2301      	movs	r3, #1
 8023a42:	6163      	str	r3, [r4, #20]
 8023a44:	b003      	add	sp, #12
 8023a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a48:	ab01      	add	r3, sp, #4
 8023a4a:	466a      	mov	r2, sp
 8023a4c:	f7ff ffc8 	bl	80239e0 <__swhatbuf_r>
 8023a50:	9f00      	ldr	r7, [sp, #0]
 8023a52:	4605      	mov	r5, r0
 8023a54:	4639      	mov	r1, r7
 8023a56:	4630      	mov	r0, r6
 8023a58:	f7ff f916 	bl	8022c88 <_malloc_r>
 8023a5c:	b948      	cbnz	r0, 8023a72 <__smakebuf_r+0x46>
 8023a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a62:	059a      	lsls	r2, r3, #22
 8023a64:	d4ee      	bmi.n	8023a44 <__smakebuf_r+0x18>
 8023a66:	f023 0303 	bic.w	r3, r3, #3
 8023a6a:	f043 0302 	orr.w	r3, r3, #2
 8023a6e:	81a3      	strh	r3, [r4, #12]
 8023a70:	e7e2      	b.n	8023a38 <__smakebuf_r+0xc>
 8023a72:	89a3      	ldrh	r3, [r4, #12]
 8023a74:	6020      	str	r0, [r4, #0]
 8023a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023a7a:	81a3      	strh	r3, [r4, #12]
 8023a7c:	9b01      	ldr	r3, [sp, #4]
 8023a7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023a82:	b15b      	cbz	r3, 8023a9c <__smakebuf_r+0x70>
 8023a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a88:	4630      	mov	r0, r6
 8023a8a:	f000 f81d 	bl	8023ac8 <_isatty_r>
 8023a8e:	b128      	cbz	r0, 8023a9c <__smakebuf_r+0x70>
 8023a90:	89a3      	ldrh	r3, [r4, #12]
 8023a92:	f023 0303 	bic.w	r3, r3, #3
 8023a96:	f043 0301 	orr.w	r3, r3, #1
 8023a9a:	81a3      	strh	r3, [r4, #12]
 8023a9c:	89a3      	ldrh	r3, [r4, #12]
 8023a9e:	431d      	orrs	r5, r3
 8023aa0:	81a5      	strh	r5, [r4, #12]
 8023aa2:	e7cf      	b.n	8023a44 <__smakebuf_r+0x18>

08023aa4 <_fstat_r>:
 8023aa4:	b538      	push	{r3, r4, r5, lr}
 8023aa6:	4d07      	ldr	r5, [pc, #28]	@ (8023ac4 <_fstat_r+0x20>)
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	4604      	mov	r4, r0
 8023aac:	4608      	mov	r0, r1
 8023aae:	4611      	mov	r1, r2
 8023ab0:	602b      	str	r3, [r5, #0]
 8023ab2:	f7fc ffd8 	bl	8020a66 <_fstat>
 8023ab6:	1c43      	adds	r3, r0, #1
 8023ab8:	d102      	bne.n	8023ac0 <_fstat_r+0x1c>
 8023aba:	682b      	ldr	r3, [r5, #0]
 8023abc:	b103      	cbz	r3, 8023ac0 <_fstat_r+0x1c>
 8023abe:	6023      	str	r3, [r4, #0]
 8023ac0:	bd38      	pop	{r3, r4, r5, pc}
 8023ac2:	bf00      	nop
 8023ac4:	200001d0 	.word	0x200001d0

08023ac8 <_isatty_r>:
 8023ac8:	b538      	push	{r3, r4, r5, lr}
 8023aca:	4d06      	ldr	r5, [pc, #24]	@ (8023ae4 <_isatty_r+0x1c>)
 8023acc:	2300      	movs	r3, #0
 8023ace:	4604      	mov	r4, r0
 8023ad0:	4608      	mov	r0, r1
 8023ad2:	602b      	str	r3, [r5, #0]
 8023ad4:	f7fc ffd7 	bl	8020a86 <_isatty>
 8023ad8:	1c43      	adds	r3, r0, #1
 8023ada:	d102      	bne.n	8023ae2 <_isatty_r+0x1a>
 8023adc:	682b      	ldr	r3, [r5, #0]
 8023ade:	b103      	cbz	r3, 8023ae2 <_isatty_r+0x1a>
 8023ae0:	6023      	str	r3, [r4, #0]
 8023ae2:	bd38      	pop	{r3, r4, r5, pc}
 8023ae4:	200001d0 	.word	0x200001d0

08023ae8 <sqrtf>:
 8023ae8:	b508      	push	{r3, lr}
 8023aea:	ed2d 8b02 	vpush	{d8}
 8023aee:	eeb0 8a40 	vmov.f32	s16, s0
 8023af2:	f000 f817 	bl	8023b24 <__ieee754_sqrtf>
 8023af6:	eeb4 8a48 	vcmp.f32	s16, s16
 8023afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023afe:	d60c      	bvs.n	8023b1a <sqrtf+0x32>
 8023b00:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8023b20 <sqrtf+0x38>
 8023b04:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b0c:	d505      	bpl.n	8023b1a <sqrtf+0x32>
 8023b0e:	f7ff fb7d 	bl	802320c <__errno>
 8023b12:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8023b16:	2321      	movs	r3, #33	@ 0x21
 8023b18:	6003      	str	r3, [r0, #0]
 8023b1a:	ecbd 8b02 	vpop	{d8}
 8023b1e:	bd08      	pop	{r3, pc}
 8023b20:	00000000 	.word	0x00000000

08023b24 <__ieee754_sqrtf>:
 8023b24:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8023b28:	4770      	bx	lr
	...

08023b2c <_init>:
 8023b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b2e:	bf00      	nop
 8023b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b32:	bc08      	pop	{r3}
 8023b34:	469e      	mov	lr, r3
 8023b36:	4770      	bx	lr

08023b38 <_fini>:
 8023b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b3a:	bf00      	nop
 8023b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b3e:	bc08      	pop	{r3}
 8023b40:	469e      	mov	lr, r3
 8023b42:	4770      	bx	lr
