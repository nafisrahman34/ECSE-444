
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b40  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08022b40  08022b40  00022b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022bcc  08022bcc  00023068  2**0
                  CONTENTS
  4 .ARM          00000008  08022bcc  08022bcc  00022bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022bd4  08022bd4  00023068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022bd4  08022bd4  00022bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022bd8  08022bd8  00022bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08022bdc  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08022c44  00023068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08022c44  000231d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023068  2**0
                  CONTENTS, READONLY
 12 .debug_line   000074c2  00000000  00000000  00023098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006d  00000000  00000000  0002a55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000073ca  00000000  00000000  0002a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019c1  00000000  00000000  00031991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000700  00000000  00000000  00033358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fbc16  00000000  00000000  00033a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000004b2  00000000  00000000  0012f66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029e35  00000000  00000000  0012fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  00159955  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ff8  00000000  00000000  00159a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000063f  00000000  00000000  0015ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  0015c047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000068 	.word	0x20000068
 801001c:	00000000 	.word	0x00000000
 8010020:	08022b28 	.word	0x08022b28

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	2000006c 	.word	0x2000006c
 801003c:	08022b28 	.word	0x08022b28
	...

08020000 <kalman>:
* R0 = pointer to state variables struct
* S0 = current measurement value
*/

kalman:
	PUSH {R1} //following ARM calling convention
 8020000:	b402      	push	{r1}
	//self->p = self->p + self->q:
	VLDR.f32 S1, [R0] //store self->p in floating point register S1
 8020002:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32 S2, [R0, #4] //store self->q in floating point register S2
 8020006:	ed90 1a01 	vldr	s2, [r0, #4]
	VADD.f32 S1, S1, S2 //self->p = self->p + self->q
 802000a:	ee70 0a81 	vadd.f32	s1, s1, s2

	//self->k = self->p / (self->p + self->r):
	VLDR.f32 S3, [R0, #8] //store self->r in floating point register S3
 802000e:	edd0 1a02 	vldr	s3, [r0, #8]
	VADD.f32 S10, S1, S3 //do (self->p + self->r) and store result in S10
 8020012:	ee30 5aa1 	vadd.f32	s10, s1, s3
	VDIV.f32 S4, S1, S10 //self->k = self->p / (self->p + self->r) with S4 storing self->k value
 8020016:	ee80 2a85 	vdiv.f32	s4, s1, s10
	VSTR.f32 S4, [R0, #16] //store self->k value in state variable
 802001a:	ed80 2a04 	vstr	s4, [r0, #16]

	//self->x = self->x + self->k*(measurement - self->x)
	VLDR.f32 S5, [R0, #12] //store self->x in floating point register S5
 802001e:	edd0 2a03 	vldr	s5, [r0, #12]
	VSUB.f32 S10, S0, S5 //do (measurement - self->x) and store result in S10
 8020022:	ee30 5a62 	vsub.f32	s10, s0, s5
	VMUL.f32 S10, S4, S10 //do self->k*(measurement - self->x) and store result in S10
 8020026:	ee22 5a05 	vmul.f32	s10, s4, s10
	VADD.f32 S5, S5, S10 //self->x = self->x + self->k*(measurement - self->x)
 802002a:	ee72 2a85 	vadd.f32	s5, s5, s10
	VSTR.f32 S5, [R0, #12] //store self->x value in state variable
 802002e:	edc0 2a03 	vstr	s5, [r0, #12]

	//self->p = (1 - self->k)*self->p
	//MOV R1, #0x3F800000 //hexadecimal representation of 1.0
	VMOV S9, #1.0 //store value of 1.0 in floating point register
 8020032:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
	VSUB.f32 S10, S9, S4 //do (1-self->k) and store result in S10
 8020036:	ee34 5ac2 	vsub.f32	s10, s9, s4
	VMUL.f32 S1, S10, S1 //S1 stores self->p value; do self->p=(1-self->k)*self->p
 802003a:	ee65 0a20 	vmul.f32	s1, s10, s1
	VSTR.f32 S1, [R0] //store self->p back in state variable
 802003e:	edc0 0a00 	vstr	s1, [r0]

	//check the FPSCR for errors
	VMRS R1, FPSCR //move the contents of FPSCR to R1
 8020042:	eef1 1a10 	vmrs	r1, fpscr
	TST R1, #8 //test if the overflow flag (bit 3) is set
 8020046:	f011 0f08 	tst.w	r1, #8
	BNE handle_error //branch if overflow occured
 802004a:	d10c      	bne.n	8020066 <handle_error>

	TST R1, #4 //test if the underflow flag (bit 2) is set
 802004c:	f011 0f04 	tst.w	r1, #4
    BNE handle_error //branch if underflow occured
 8020050:	d109      	bne.n	8020066 <handle_error>

    TST R1, #2 //test if the divide by zero flag (bit 1) is set
 8020052:	f011 0f02 	tst.w	r1, #2
    BNE handle_error //branch if divide by zero occured
 8020056:	d106      	bne.n	8020066 <handle_error>

    TST R1, #1 //test if the invalid operation flag (bit 0) is set
 8020058:	f011 0f01 	tst.w	r1, #1
    BNE handle_error //branch if invalid operation occured
 802005c:	d103      	bne.n	8020066 <handle_error>

	//return self->x
	VMOV S0, S5 //move self->x to S0
 802005e:	eeb0 0a62 	vmov.f32	s0, s5
	POP {R1} //reset register to initial state
 8020062:	bc02      	pop	{r1}
	BX LR //return
 8020064:	4770      	bx	lr

08020066 <handle_error>:


handle_error:
	VMOV S0, #-1.0 //move value of -1.0 to register that will store the value to be returned
 8020066:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
	POP {R1}
 802006a:	bc02      	pop	{r1}
	BX LR //return
 802006c:	4770      	bx	lr
 802006e:	bf00      	nop

08020070 <memchr>:
 8020070:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020074:	2a10      	cmp	r2, #16
 8020076:	db2b      	blt.n	80200d0 <memchr+0x60>
 8020078:	f010 0f07 	tst.w	r0, #7
 802007c:	d008      	beq.n	8020090 <memchr+0x20>
 802007e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020082:	3a01      	subs	r2, #1
 8020084:	428b      	cmp	r3, r1
 8020086:	d02d      	beq.n	80200e4 <memchr+0x74>
 8020088:	f010 0f07 	tst.w	r0, #7
 802008c:	b342      	cbz	r2, 80200e0 <memchr+0x70>
 802008e:	d1f6      	bne.n	802007e <memchr+0xe>
 8020090:	b4f0      	push	{r4, r5, r6, r7}
 8020092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802009a:	f022 0407 	bic.w	r4, r2, #7
 802009e:	f07f 0700 	mvns.w	r7, #0
 80200a2:	2300      	movs	r3, #0
 80200a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80200a8:	3c08      	subs	r4, #8
 80200aa:	ea85 0501 	eor.w	r5, r5, r1
 80200ae:	ea86 0601 	eor.w	r6, r6, r1
 80200b2:	fa85 f547 	uadd8	r5, r5, r7
 80200b6:	faa3 f587 	sel	r5, r3, r7
 80200ba:	fa86 f647 	uadd8	r6, r6, r7
 80200be:	faa5 f687 	sel	r6, r5, r7
 80200c2:	b98e      	cbnz	r6, 80200e8 <memchr+0x78>
 80200c4:	d1ee      	bne.n	80200a4 <memchr+0x34>
 80200c6:	bcf0      	pop	{r4, r5, r6, r7}
 80200c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80200cc:	f002 0207 	and.w	r2, r2, #7
 80200d0:	b132      	cbz	r2, 80200e0 <memchr+0x70>
 80200d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200d6:	3a01      	subs	r2, #1
 80200d8:	ea83 0301 	eor.w	r3, r3, r1
 80200dc:	b113      	cbz	r3, 80200e4 <memchr+0x74>
 80200de:	d1f8      	bne.n	80200d2 <memchr+0x62>
 80200e0:	2000      	movs	r0, #0
 80200e2:	4770      	bx	lr
 80200e4:	3801      	subs	r0, #1
 80200e6:	4770      	bx	lr
 80200e8:	2d00      	cmp	r5, #0
 80200ea:	bf06      	itte	eq
 80200ec:	4635      	moveq	r5, r6
 80200ee:	3803      	subeq	r0, #3
 80200f0:	3807      	subne	r0, #7
 80200f2:	f015 0f01 	tst.w	r5, #1
 80200f6:	d107      	bne.n	8020108 <memchr+0x98>
 80200f8:	3001      	adds	r0, #1
 80200fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80200fe:	bf02      	ittt	eq
 8020100:	3001      	addeq	r0, #1
 8020102:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020106:	3001      	addeq	r0, #1
 8020108:	bcf0      	pop	{r4, r5, r6, r7}
 802010a:	3801      	subs	r0, #1
 802010c:	4770      	bx	lr
 802010e:	bf00      	nop

08020110 <CMSISKalmanfilter>:
#include "CMSIS_KalmanFilter.h"
#include "arm_math.h"

int CMSISKalmanfilter(float* InputArray, float* OutputArray, kalman_state* kf, int Length) {
 8020110:	b580      	push	{r7, lr}
 8020112:	b088      	sub	sp, #32
 8020114:	af00      	add	r7, sp, #0
 8020116:	60f8      	str	r0, [r7, #12]
 8020118:	60b9      	str	r1, [r7, #8]
 802011a:	607a      	str	r2, [r7, #4]
 802011c:	603b      	str	r3, [r7, #0]
	//Null input exception
	if (InputArray == 0 || OutputArray == 0  || kf == 0) {
 802011e:	68fb      	ldr	r3, [r7, #12]
 8020120:	2b00      	cmp	r3, #0
 8020122:	d005      	beq.n	8020130 <CMSISKalmanfilter+0x20>
 8020124:	68bb      	ldr	r3, [r7, #8]
 8020126:	2b00      	cmp	r3, #0
 8020128:	d002      	beq.n	8020130 <CMSISKalmanfilter+0x20>
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	2b00      	cmp	r3, #0
 802012e:	d102      	bne.n	8020136 <CMSISKalmanfilter+0x26>
	        return -1;
 8020130:	f04f 33ff 	mov.w	r3, #4294967295
 8020134:	e078      	b.n	8020228 <CMSISKalmanfilter+0x118>
	    }
    for (int i = 0; i < Length; i++) {
 8020136:	2300      	movs	r3, #0
 8020138:	61fb      	str	r3, [r7, #28]
 802013a:	e070      	b.n	802021e <CMSISKalmanfilter+0x10e>
        arm_add_f32(&kf->p, &kf->q,&kf->p,1);
 802013c:	6878      	ldr	r0, [r7, #4]
 802013e:	687b      	ldr	r3, [r7, #4]
 8020140:	1d19      	adds	r1, r3, #4
 8020142:	687a      	ldr	r2, [r7, #4]
 8020144:	2301      	movs	r3, #1
 8020146:	f001 fd49 	bl	8021bdc <arm_add_f32>
        arm_add_f32(&kf->p, &kf->r,&kf->k,1);
 802014a:	6878      	ldr	r0, [r7, #4]
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	f103 0108 	add.w	r1, r3, #8
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	f103 0210 	add.w	r2, r3, #16
 8020158:	2301      	movs	r3, #1
 802015a:	f001 fd3f 	bl	8021bdc <arm_add_f32>

        //check division by 0
        if (kf->k==0){
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	edd3 7a04 	vldr	s15, [r3, #16]
 8020164:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802016c:	d102      	bne.n	8020174 <CMSISKalmanfilter+0x64>
                	return -2;
 802016e:	f06f 0301 	mvn.w	r3, #1
 8020172:	e059      	b.n	8020228 <CMSISKalmanfilter+0x118>
                }
        kf->k = kf->p/kf->k;
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	edd3 6a00 	vldr	s13, [r3]
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	ed93 7a04 	vldr	s14, [r3, #16]
 8020180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	edc3 7a04 	vstr	s15, [r3, #16]


        float32_t temp;
        arm_sub_f32(&InputArray[i], &kf->x, &temp, 1);
 802018a:	69fb      	ldr	r3, [r7, #28]
 802018c:	009b      	lsls	r3, r3, #2
 802018e:	68fa      	ldr	r2, [r7, #12]
 8020190:	18d0      	adds	r0, r2, r3
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	f103 010c 	add.w	r1, r3, #12
 8020198:	f107 0218 	add.w	r2, r7, #24
 802019c:	2301      	movs	r3, #1
 802019e:	f001 fc69 	bl	8021a74 <arm_sub_f32>
        arm_mult_f32(&kf->k, &temp, &temp, 1);
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	f103 0010 	add.w	r0, r3, #16
 80201a8:	f107 0218 	add.w	r2, r7, #24
 80201ac:	f107 0118 	add.w	r1, r7, #24
 80201b0:	2301      	movs	r3, #1
 80201b2:	f001 fcb9 	bl	8021b28 <arm_mult_f32>
        arm_add_f32(&kf->x, &temp, &kf->x, 1);
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	f103 000c 	add.w	r0, r3, #12
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	f103 020c 	add.w	r2, r3, #12
 80201c2:	f107 0118 	add.w	r1, r7, #24
 80201c6:	2301      	movs	r3, #1
 80201c8:	f001 fd08 	bl	8021bdc <arm_add_f32>
        float one = 1.0;
 80201cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80201d0:	617b      	str	r3, [r7, #20]
        arm_sub_f32(&one, &kf->k, &temp, 1);
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	f103 0110 	add.w	r1, r3, #16
 80201d8:	f107 0218 	add.w	r2, r7, #24
 80201dc:	f107 0014 	add.w	r0, r7, #20
 80201e0:	2301      	movs	r3, #1
 80201e2:	f001 fc47 	bl	8021a74 <arm_sub_f32>
        arm_mult_f32(&kf->p, &temp, &kf->p, 1);
 80201e6:	6878      	ldr	r0, [r7, #4]
 80201e8:	687a      	ldr	r2, [r7, #4]
 80201ea:	f107 0118 	add.w	r1, r7, #24
 80201ee:	2301      	movs	r3, #1
 80201f0:	f001 fc9a 	bl	8021b28 <arm_mult_f32>
        //check output
        if (isnan(kf->x)){
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80201fa:	eef4 7a67 	vcmp.f32	s15, s15
 80201fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020202:	d702      	bvc.n	802020a <CMSISKalmanfilter+0xfa>
             return -3;
 8020204:	f06f 0302 	mvn.w	r3, #2
 8020208:	e00e      	b.n	8020228 <CMSISKalmanfilter+0x118>
        }
        OutputArray[i] = kf->x;
 802020a:	69fb      	ldr	r3, [r7, #28]
 802020c:	009b      	lsls	r3, r3, #2
 802020e:	68ba      	ldr	r2, [r7, #8]
 8020210:	4413      	add	r3, r2
 8020212:	687a      	ldr	r2, [r7, #4]
 8020214:	68d2      	ldr	r2, [r2, #12]
 8020216:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < Length; i++) {
 8020218:	69fb      	ldr	r3, [r7, #28]
 802021a:	3301      	adds	r3, #1
 802021c:	61fb      	str	r3, [r7, #28]
 802021e:	69fa      	ldr	r2, [r7, #28]
 8020220:	683b      	ldr	r3, [r7, #0]
 8020222:	429a      	cmp	r2, r3
 8020224:	db8a      	blt.n	802013c <CMSISKalmanfilter+0x2c>
    }
    return 0;
 8020226:	2300      	movs	r3, #0
}
 8020228:	4618      	mov	r0, r3
 802022a:	3720      	adds	r7, #32
 802022c:	46bd      	mov	sp, r7
 802022e:	bd80      	pop	{r7, pc}

08020230 <KalmanFilter_init>:
#include "KalmanFilter.h"

void KalmanFilter_init(kalman_state *kf, float q, float r, float p, float initial_value) {
 8020230:	b480      	push	{r7}
 8020232:	b087      	sub	sp, #28
 8020234:	af00      	add	r7, sp, #0
 8020236:	6178      	str	r0, [r7, #20]
 8020238:	ed87 0a04 	vstr	s0, [r7, #16]
 802023c:	edc7 0a03 	vstr	s1, [r7, #12]
 8020240:	ed87 1a02 	vstr	s2, [r7, #8]
 8020244:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->q = q;
 8020248:	697b      	ldr	r3, [r7, #20]
 802024a:	693a      	ldr	r2, [r7, #16]
 802024c:	605a      	str	r2, [r3, #4]
    kf->r = r;
 802024e:	697b      	ldr	r3, [r7, #20]
 8020250:	68fa      	ldr	r2, [r7, #12]
 8020252:	609a      	str	r2, [r3, #8]
    kf->p = p;
 8020254:	697b      	ldr	r3, [r7, #20]
 8020256:	68ba      	ldr	r2, [r7, #8]
 8020258:	601a      	str	r2, [r3, #0]
    kf->x = initial_value;
 802025a:	697b      	ldr	r3, [r7, #20]
 802025c:	687a      	ldr	r2, [r7, #4]
 802025e:	60da      	str	r2, [r3, #12]
    kf->k = 0.0;
 8020260:	697b      	ldr	r3, [r7, #20]
 8020262:	f04f 0200 	mov.w	r2, #0
 8020266:	611a      	str	r2, [r3, #16]
}
 8020268:	bf00      	nop
 802026a:	371c      	adds	r7, #28
 802026c:	46bd      	mov	sp, r7
 802026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020272:	4770      	bx	lr

08020274 <Kalmanfilter>:
//    kf->x = kf->x + kf->k * (measurement - kf->x);
//    kf->p = (1 - kf->k) * kf->p;
//
//    return kf->x;
//}
int Kalmanfilter(float* InputArray, float* OutputArray, kalman_state* kf, int Length){
 8020274:	b480      	push	{r7}
 8020276:	b087      	sub	sp, #28
 8020278:	af00      	add	r7, sp, #0
 802027a:	60f8      	str	r0, [r7, #12]
 802027c:	60b9      	str	r1, [r7, #8]
 802027e:	607a      	str	r2, [r7, #4]
 8020280:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < Length; i++) {
 8020282:	2300      	movs	r3, #0
 8020284:	617b      	str	r3, [r7, #20]
 8020286:	e06d      	b.n	8020364 <Kalmanfilter+0xf0>
		if (InputArray == 0 || OutputArray == 0 || kf == 0) {
 8020288:	68fb      	ldr	r3, [r7, #12]
 802028a:	2b00      	cmp	r3, #0
 802028c:	d005      	beq.n	802029a <Kalmanfilter+0x26>
 802028e:	68bb      	ldr	r3, [r7, #8]
 8020290:	2b00      	cmp	r3, #0
 8020292:	d002      	beq.n	802029a <Kalmanfilter+0x26>
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	2b00      	cmp	r3, #0
 8020298:	d102      	bne.n	80202a0 <Kalmanfilter+0x2c>
			        return -1;
 802029a:	f04f 33ff 	mov.w	r3, #4294967295
 802029e:	e066      	b.n	802036e <Kalmanfilter+0xfa>
			    }
	        kf->p += kf->q;
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	ed93 7a00 	vldr	s14, [r3]
 80202a6:	687b      	ldr	r3, [r7, #4]
 80202a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80202ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	edc3 7a00 	vstr	s15, [r3]
	        kf->k = kf->p / (kf->p + kf->r);
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	edd3 6a00 	vldr	s13, [r3]
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	ed93 7a00 	vldr	s14, [r3]
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80202c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80202cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80202d0:	687b      	ldr	r3, [r7, #4]
 80202d2:	edc3 7a04 	vstr	s15, [r3, #16]
	        //check division by 0
			if (isnan(kf->k)){
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80202dc:	eef4 7a67 	vcmp.f32	s15, s15
 80202e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202e4:	d702      	bvc.n	80202ec <Kalmanfilter+0x78>
				return -2;
 80202e6:	f06f 0301 	mvn.w	r3, #1
 80202ea:	e040      	b.n	802036e <Kalmanfilter+0xfa>
			}
	        kf->x += kf->k * (InputArray[i] - kf->x);
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80202f2:	687b      	ldr	r3, [r7, #4]
 80202f4:	edd3 6a04 	vldr	s13, [r3, #16]
 80202f8:	697b      	ldr	r3, [r7, #20]
 80202fa:	009b      	lsls	r3, r3, #2
 80202fc:	68fa      	ldr	r2, [r7, #12]
 80202fe:	4413      	add	r3, r2
 8020300:	ed93 6a00 	vldr	s12, [r3]
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	edd3 7a03 	vldr	s15, [r3, #12]
 802030a:	ee76 7a67 	vsub.f32	s15, s12, s15
 802030e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020316:	687b      	ldr	r3, [r7, #4]
 8020318:	edc3 7a03 	vstr	s15, [r3, #12]
	        kf->p *= (1.0f - kf->k);
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	ed93 7a00 	vldr	s14, [r3]
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	edd3 7a04 	vldr	s15, [r3, #16]
 8020328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802032c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8020330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	edc3 7a00 	vstr	s15, [r3]
	        //check output
			if (isnan(kf->x)){
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	edd3 7a03 	vldr	s15, [r3, #12]
 8020340:	eef4 7a67 	vcmp.f32	s15, s15
 8020344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020348:	d702      	bvc.n	8020350 <Kalmanfilter+0xdc>
				 return -3;
 802034a:	f06f 0302 	mvn.w	r3, #2
 802034e:	e00e      	b.n	802036e <Kalmanfilter+0xfa>
			}
	        OutputArray[i] = kf->x;
 8020350:	697b      	ldr	r3, [r7, #20]
 8020352:	009b      	lsls	r3, r3, #2
 8020354:	68ba      	ldr	r2, [r7, #8]
 8020356:	4413      	add	r3, r2
 8020358:	687a      	ldr	r2, [r7, #4]
 802035a:	68d2      	ldr	r2, [r2, #12]
 802035c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Length; i++) {
 802035e:	697b      	ldr	r3, [r7, #20]
 8020360:	3301      	adds	r3, #1
 8020362:	617b      	str	r3, [r7, #20]
 8020364:	697a      	ldr	r2, [r7, #20]
 8020366:	683b      	ldr	r3, [r7, #0]
 8020368:	429a      	cmp	r2, r3
 802036a:	db8d      	blt.n	8020288 <Kalmanfilter+0x14>
	    }
	    return 0;
 802036c:	2300      	movs	r3, #0
}
 802036e:	4618      	mov	r0, r3
 8020370:	371c      	adds	r7, #28
 8020372:	46bd      	mov	sp, r7
 8020374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020378:	4770      	bx	lr
	...

0802037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802037c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020380:	b096      	sub	sp, #88	@ 0x58
 8020382:	af00      	add	r7, sp, #0
  HAL_Init();
 8020384:	f000 fa93 	bl	80208ae <HAL_Init>
  SystemClock_Config();
 8020388:	f000 f8e0 	bl	802054c <SystemClock_Config>
  kalman_state *kalmanFilterObject = malloc(sizeof(kalman_state));
 802038c:	2014      	movs	r0, #20
 802038e:	f001 fc7f 	bl	8021c90 <malloc>
 8020392:	4603      	mov	r3, r0
 8020394:	64fb      	str	r3, [r7, #76]	@ 0x4c
  KalmanFilter_init(kalmanFilterObject, 0.1, 0.1, 0.1, 5);
 8020396:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 802039a:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 802053c <main+0x1c0>
 802039e:	eddf 0a67 	vldr	s1, [pc, #412]	@ 802053c <main+0x1c0>
 80203a2:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 802053c <main+0x1c0>
 80203a6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80203a8:	f7ff ff42 	bl	8020230 <KalmanFilter_init>
  //to test results from Table 1 in lab doc:

  float x;
  float inarray[5] = {0,1,2,3,4};
 80203ac:	4b64      	ldr	r3, [pc, #400]	@ (8020540 <main+0x1c4>)
 80203ae:	f107 0414 	add.w	r4, r7, #20
 80203b2:	461d      	mov	r5, r3
 80203b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80203b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80203b8:	682b      	ldr	r3, [r5, #0]
 80203ba:	6023      	str	r3, [r4, #0]
  int len = sizeof(inarray) / sizeof(inarray[0]);
 80203bc:	2305      	movs	r3, #5
 80203be:	64bb      	str	r3, [r7, #72]	@ 0x48
  for(int i=0; i<5; i++){
 80203c0:	2300      	movs	r3, #0
 80203c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80203c4:	e012      	b.n	80203ec <main+0x70>
	  x = kalman(kalmanFilterObject, inarray[i]);
 80203c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80203c8:	009b      	lsls	r3, r3, #2
 80203ca:	3348      	adds	r3, #72	@ 0x48
 80203cc:	f107 0210 	add.w	r2, r7, #16
 80203d0:	4413      	add	r3, r2
 80203d2:	3b44      	subs	r3, #68	@ 0x44
 80203d4:	edd3 7a00 	vldr	s15, [r3]
 80203d8:	eeb0 0a67 	vmov.f32	s0, s15
 80203dc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80203de:	f7ff fe0f 	bl	8020000 <kalman>
 80203e2:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
  for(int i=0; i<5; i++){
 80203e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80203e8:	3301      	adds	r3, #1
 80203ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80203ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80203ee:	2b04      	cmp	r3, #4
 80203f0:	dde9      	ble.n	80203c6 <main+0x4a>

  }
  //C Version
  float outarray[len];
 80203f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80203f4:	1e4b      	subs	r3, r1, #1
 80203f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80203f8:	460a      	mov	r2, r1
 80203fa:	2300      	movs	r3, #0
 80203fc:	60ba      	str	r2, [r7, #8]
 80203fe:	60fb      	str	r3, [r7, #12]
 8020400:	f04f 0200 	mov.w	r2, #0
 8020404:	f04f 0300 	mov.w	r3, #0
 8020408:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 802040c:	4628      	mov	r0, r5
 802040e:	0143      	lsls	r3, r0, #5
 8020410:	4620      	mov	r0, r4
 8020412:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8020416:	4620      	mov	r0, r4
 8020418:	0142      	lsls	r2, r0, #5
 802041a:	460a      	mov	r2, r1
 802041c:	2300      	movs	r3, #0
 802041e:	603a      	str	r2, [r7, #0]
 8020420:	607b      	str	r3, [r7, #4]
 8020422:	f04f 0200 	mov.w	r2, #0
 8020426:	f04f 0300 	mov.w	r3, #0
 802042a:	e9d7 4500 	ldrd	r4, r5, [r7]
 802042e:	4628      	mov	r0, r5
 8020430:	0143      	lsls	r3, r0, #5
 8020432:	4620      	mov	r0, r4
 8020434:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8020438:	4620      	mov	r0, r4
 802043a:	0142      	lsls	r2, r0, #5
 802043c:	460b      	mov	r3, r1
 802043e:	009b      	lsls	r3, r3, #2
 8020440:	3307      	adds	r3, #7
 8020442:	08db      	lsrs	r3, r3, #3
 8020444:	00db      	lsls	r3, r3, #3
 8020446:	ebad 0d03 	sub.w	sp, sp, r3
 802044a:	466b      	mov	r3, sp
 802044c:	3303      	adds	r3, #3
 802044e:	089b      	lsrs	r3, r3, #2
 8020450:	009b      	lsls	r3, r3, #2
 8020452:	643b      	str	r3, [r7, #64]	@ 0x40
  kalman_state *kfc = malloc(sizeof(kalman_state));
 8020454:	2014      	movs	r0, #20
 8020456:	f001 fc1b 	bl	8021c90 <malloc>
 802045a:	4603      	mov	r3, r0
 802045c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  KalmanFilter_init(kfc, 0.1, 0.1, 0.1, 5);
 802045e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8020462:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 802053c <main+0x1c0>
 8020466:	eddf 0a35 	vldr	s1, [pc, #212]	@ 802053c <main+0x1c0>
 802046a:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 802053c <main+0x1c0>
 802046e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8020470:	f7ff fede 	bl	8020230 <KalmanFilter_init>

  int state = Kalmanfilter( inarray, outarray, kfc,len);
 8020474:	f107 0014 	add.w	r0, r7, #20
 8020478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802047a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802047c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802047e:	f7ff fef9 	bl	8020274 <Kalmanfilter>
 8020482:	63b8      	str	r0, [r7, #56]	@ 0x38
  //CMSIS-DSP C version
  float CMSISoutarray[len];
 8020484:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8020486:	1e4b      	subs	r3, r1, #1
 8020488:	637b      	str	r3, [r7, #52]	@ 0x34
 802048a:	460a      	mov	r2, r1
 802048c:	2300      	movs	r3, #0
 802048e:	4692      	mov	sl, r2
 8020490:	469b      	mov	fp, r3
 8020492:	f04f 0200 	mov.w	r2, #0
 8020496:	f04f 0300 	mov.w	r3, #0
 802049a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 802049e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80204a2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80204a6:	460a      	mov	r2, r1
 80204a8:	2300      	movs	r3, #0
 80204aa:	4690      	mov	r8, r2
 80204ac:	4699      	mov	r9, r3
 80204ae:	f04f 0200 	mov.w	r2, #0
 80204b2:	f04f 0300 	mov.w	r3, #0
 80204b6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80204ba:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80204be:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80204c2:	460b      	mov	r3, r1
 80204c4:	009b      	lsls	r3, r3, #2
 80204c6:	3307      	adds	r3, #7
 80204c8:	08db      	lsrs	r3, r3, #3
 80204ca:	00db      	lsls	r3, r3, #3
 80204cc:	ebad 0d03 	sub.w	sp, sp, r3
 80204d0:	466b      	mov	r3, sp
 80204d2:	3303      	adds	r3, #3
 80204d4:	089b      	lsrs	r3, r3, #2
 80204d6:	009b      	lsls	r3, r3, #2
 80204d8:	633b      	str	r3, [r7, #48]	@ 0x30
  kalman_state *CMSISkfc = malloc(sizeof(kalman_state));
 80204da:	2014      	movs	r0, #20
 80204dc:	f001 fbd8 	bl	8021c90 <malloc>
 80204e0:	4603      	mov	r3, r0
 80204e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  KalmanFilter_init(CMSISkfc, 0.1, 0.1, 0.1, 5);
 80204e4:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80204e8:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 802053c <main+0x1c0>
 80204ec:	eddf 0a13 	vldr	s1, [pc, #76]	@ 802053c <main+0x1c0>
 80204f0:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 802053c <main+0x1c0>
 80204f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80204f6:	f7ff fe9b 	bl	8020230 <KalmanFilter_init>

  state = CMSISKalmanfilter( inarray, CMSISoutarray, CMSISkfc,len);
 80204fa:	f107 0014 	add.w	r0, r7, #20
 80204fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020502:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8020504:	f7ff fe04 	bl	8020110 <CMSISKalmanfilter>
 8020508:	63b8      	str	r0, [r7, #56]	@ 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0; i<5; i++){
 802050a:	2300      	movs	r3, #0
 802050c:	653b      	str	r3, [r7, #80]	@ 0x50
 802050e:	e010      	b.n	8020532 <main+0x1b6>
	 	  printf("%d",i);
 8020510:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8020512:	480c      	ldr	r0, [pc, #48]	@ (8020544 <main+0x1c8>)
 8020514:	f001 fdf4 	bl	8022100 <iprintf>
	 	  fflush(stdout);
 8020518:	4b0b      	ldr	r3, [pc, #44]	@ (8020548 <main+0x1cc>)
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	689b      	ldr	r3, [r3, #8]
 802051e:	4618      	mov	r0, r3
 8020520:	f001 fd18 	bl	8021f54 <fflush>
	 	  HAL_Delay(1000);
 8020524:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8020528:	f000 fa36 	bl	8020998 <HAL_Delay>
	  for(int i=0; i<5; i++){
 802052c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802052e:	3301      	adds	r3, #1
 8020530:	653b      	str	r3, [r7, #80]	@ 0x50
 8020532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020534:	2b04      	cmp	r3, #4
 8020536:	ddeb      	ble.n	8020510 <main+0x194>
 8020538:	e7e7      	b.n	802050a <main+0x18e>
 802053a:	bf00      	nop
 802053c:	3dcccccd 	.word	0x3dcccccd
 8020540:	08022b44 	.word	0x08022b44
 8020544:	08022b40 	.word	0x08022b40
 8020548:	20000018 	.word	0x20000018

0802054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802054c:	b580      	push	{r7, lr}
 802054e:	b096      	sub	sp, #88	@ 0x58
 8020550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020552:	f107 0314 	add.w	r3, r7, #20
 8020556:	2244      	movs	r2, #68	@ 0x44
 8020558:	2100      	movs	r1, #0
 802055a:	4618      	mov	r0, r3
 802055c:	f001 fe25 	bl	80221aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020560:	463b      	mov	r3, r7
 8020562:	2200      	movs	r2, #0
 8020564:	601a      	str	r2, [r3, #0]
 8020566:	605a      	str	r2, [r3, #4]
 8020568:	609a      	str	r2, [r3, #8]
 802056a:	60da      	str	r2, [r3, #12]
 802056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 802056e:	2000      	movs	r0, #0
 8020570:	f000 fb3c 	bl	8020bec <HAL_PWREx_ControlVoltageScaling>
 8020574:	4603      	mov	r3, r0
 8020576:	2b00      	cmp	r3, #0
 8020578:	d001      	beq.n	802057e <SystemClock_Config+0x32>
  {
    Error_Handler();
 802057a:	f000 f838 	bl	80205ee <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 802057e:	2310      	movs	r3, #16
 8020580:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8020582:	2301      	movs	r3, #1
 8020584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8020586:	2300      	movs	r3, #0
 8020588:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 802058a:	2360      	movs	r3, #96	@ 0x60
 802058c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802058e:	2302      	movs	r3, #2
 8020590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8020592:	2301      	movs	r3, #1
 8020594:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8020596:	2301      	movs	r3, #1
 8020598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 802059a:	233c      	movs	r3, #60	@ 0x3c
 802059c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802059e:	2302      	movs	r3, #2
 80205a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80205a2:	2302      	movs	r3, #2
 80205a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80205a6:	2302      	movs	r3, #2
 80205a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80205aa:	f107 0314 	add.w	r3, r7, #20
 80205ae:	4618      	mov	r0, r3
 80205b0:	f000 fbc0 	bl	8020d34 <HAL_RCC_OscConfig>
 80205b4:	4603      	mov	r3, r0
 80205b6:	2b00      	cmp	r3, #0
 80205b8:	d001      	beq.n	80205be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80205ba:	f000 f818 	bl	80205ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80205be:	230f      	movs	r3, #15
 80205c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80205c2:	2303      	movs	r3, #3
 80205c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80205c6:	2300      	movs	r3, #0
 80205c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80205ca:	2300      	movs	r3, #0
 80205cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80205ce:	2300      	movs	r3, #0
 80205d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80205d2:	463b      	mov	r3, r7
 80205d4:	2105      	movs	r1, #5
 80205d6:	4618      	mov	r0, r3
 80205d8:	f000 ffc6 	bl	8021568 <HAL_RCC_ClockConfig>
 80205dc:	4603      	mov	r3, r0
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d001      	beq.n	80205e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80205e2:	f000 f804 	bl	80205ee <Error_Handler>
  }
}
 80205e6:	bf00      	nop
 80205e8:	3758      	adds	r7, #88	@ 0x58
 80205ea:	46bd      	mov	sp, r7
 80205ec:	bd80      	pop	{r7, pc}

080205ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80205ee:	b480      	push	{r7}
 80205f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80205f2:	b672      	cpsid	i
}
 80205f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80205f6:	bf00      	nop
 80205f8:	e7fd      	b.n	80205f6 <Error_Handler+0x8>
	...

080205fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80205fc:	b480      	push	{r7}
 80205fe:	b083      	sub	sp, #12
 8020600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020602:	4b0f      	ldr	r3, [pc, #60]	@ (8020640 <HAL_MspInit+0x44>)
 8020604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020606:	4a0e      	ldr	r2, [pc, #56]	@ (8020640 <HAL_MspInit+0x44>)
 8020608:	f043 0301 	orr.w	r3, r3, #1
 802060c:	6613      	str	r3, [r2, #96]	@ 0x60
 802060e:	4b0c      	ldr	r3, [pc, #48]	@ (8020640 <HAL_MspInit+0x44>)
 8020610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020612:	f003 0301 	and.w	r3, r3, #1
 8020616:	607b      	str	r3, [r7, #4]
 8020618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802061a:	4b09      	ldr	r3, [pc, #36]	@ (8020640 <HAL_MspInit+0x44>)
 802061c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802061e:	4a08      	ldr	r2, [pc, #32]	@ (8020640 <HAL_MspInit+0x44>)
 8020620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020624:	6593      	str	r3, [r2, #88]	@ 0x58
 8020626:	4b06      	ldr	r3, [pc, #24]	@ (8020640 <HAL_MspInit+0x44>)
 8020628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802062a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802062e:	603b      	str	r3, [r7, #0]
 8020630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020632:	bf00      	nop
 8020634:	370c      	adds	r7, #12
 8020636:	46bd      	mov	sp, r7
 8020638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802063c:	4770      	bx	lr
 802063e:	bf00      	nop
 8020640:	40021000 	.word	0x40021000

08020644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020644:	b480      	push	{r7}
 8020646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8020648:	bf00      	nop
 802064a:	e7fd      	b.n	8020648 <NMI_Handler+0x4>

0802064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802064c:	b480      	push	{r7}
 802064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020650:	bf00      	nop
 8020652:	e7fd      	b.n	8020650 <HardFault_Handler+0x4>

08020654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020654:	b480      	push	{r7}
 8020656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020658:	bf00      	nop
 802065a:	e7fd      	b.n	8020658 <MemManage_Handler+0x4>

0802065c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802065c:	b480      	push	{r7}
 802065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020660:	bf00      	nop
 8020662:	e7fd      	b.n	8020660 <BusFault_Handler+0x4>

08020664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020664:	b480      	push	{r7}
 8020666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020668:	bf00      	nop
 802066a:	e7fd      	b.n	8020668 <UsageFault_Handler+0x4>

0802066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802066c:	b480      	push	{r7}
 802066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020670:	bf00      	nop
 8020672:	46bd      	mov	sp, r7
 8020674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020678:	4770      	bx	lr

0802067a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802067a:	b480      	push	{r7}
 802067c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802067e:	bf00      	nop
 8020680:	46bd      	mov	sp, r7
 8020682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020686:	4770      	bx	lr

08020688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020688:	b480      	push	{r7}
 802068a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802068c:	bf00      	nop
 802068e:	46bd      	mov	sp, r7
 8020690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020694:	4770      	bx	lr

08020696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020696:	b580      	push	{r7, lr}
 8020698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802069a:	f000 f95d 	bl	8020958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802069e:	bf00      	nop
 80206a0:	bd80      	pop	{r7, pc}
	...

080206a4 <ITM_SendChar>:

#define ITM_STIMULUS_PORT0					*((volatile uint32_t*) 0xE00000000)

#define ITM_TRACE_EN					*((volatile uint32_t*) 0xE00000E00)

void ITM_SendChar(uint8_t ch){
 80206a4:	b480      	push	{r7}
 80206a6:	b083      	sub	sp, #12
 80206a8:	af00      	add	r7, sp, #0
 80206aa:	4603      	mov	r3, r0
 80206ac:	71fb      	strb	r3, [r7, #7]

	DEMCR |= (1<<24);
 80206ae:	4b0f      	ldr	r3, [pc, #60]	@ (80206ec <ITM_SendChar+0x48>)
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	4a0e      	ldr	r2, [pc, #56]	@ (80206ec <ITM_SendChar+0x48>)
 80206b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80206b8:	6013      	str	r3, [r2, #0]
	ITM_TRACE_EN |= (1<<0);
 80206ba:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 80206c4:	f043 0301 	orr.w	r3, r3, #1
 80206c8:	6013      	str	r3, [r2, #0]

	while(!(ITM_STIMULUS_PORT0 & 1));
 80206ca:	bf00      	nop
 80206cc:	2300      	movs	r3, #0
 80206ce:	681b      	ldr	r3, [r3, #0]
 80206d0:	f003 0301 	and.w	r3, r3, #1
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d0f9      	beq.n	80206cc <ITM_SendChar+0x28>

	ITM_STIMULUS_PORT0 = ch;
 80206d8:	2200      	movs	r2, #0
 80206da:	79fb      	ldrb	r3, [r7, #7]
 80206dc:	6013      	str	r3, [r2, #0]


}
 80206de:	bf00      	nop
 80206e0:	370c      	adds	r7, #12
 80206e2:	46bd      	mov	sp, r7
 80206e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206e8:	4770      	bx	lr
 80206ea:	bf00      	nop
 80206ec:	e000edfc 	.word	0xe000edfc

080206f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80206f0:	b580      	push	{r7, lr}
 80206f2:	b086      	sub	sp, #24
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	60f8      	str	r0, [r7, #12]
 80206f8:	60b9      	str	r1, [r7, #8]
 80206fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80206fc:	2300      	movs	r3, #0
 80206fe:	617b      	str	r3, [r7, #20]
 8020700:	e00a      	b.n	8020718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8020702:	f3af 8000 	nop.w
 8020706:	4601      	mov	r1, r0
 8020708:	68bb      	ldr	r3, [r7, #8]
 802070a:	1c5a      	adds	r2, r3, #1
 802070c:	60ba      	str	r2, [r7, #8]
 802070e:	b2ca      	uxtb	r2, r1
 8020710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020712:	697b      	ldr	r3, [r7, #20]
 8020714:	3301      	adds	r3, #1
 8020716:	617b      	str	r3, [r7, #20]
 8020718:	697a      	ldr	r2, [r7, #20]
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	429a      	cmp	r2, r3
 802071e:	dbf0      	blt.n	8020702 <_read+0x12>
  }

  return len;
 8020720:	687b      	ldr	r3, [r7, #4]
}
 8020722:	4618      	mov	r0, r3
 8020724:	3718      	adds	r7, #24
 8020726:	46bd      	mov	sp, r7
 8020728:	bd80      	pop	{r7, pc}

0802072a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802072a:	b580      	push	{r7, lr}
 802072c:	b086      	sub	sp, #24
 802072e:	af00      	add	r7, sp, #0
 8020730:	60f8      	str	r0, [r7, #12]
 8020732:	60b9      	str	r1, [r7, #8]
 8020734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020736:	2300      	movs	r3, #0
 8020738:	617b      	str	r3, [r7, #20]
 802073a:	e009      	b.n	8020750 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 802073c:	68bb      	ldr	r3, [r7, #8]
 802073e:	1c5a      	adds	r2, r3, #1
 8020740:	60ba      	str	r2, [r7, #8]
 8020742:	781b      	ldrb	r3, [r3, #0]
 8020744:	4618      	mov	r0, r3
 8020746:	f7ff ffad 	bl	80206a4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802074a:	697b      	ldr	r3, [r7, #20]
 802074c:	3301      	adds	r3, #1
 802074e:	617b      	str	r3, [r7, #20]
 8020750:	697a      	ldr	r2, [r7, #20]
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	429a      	cmp	r2, r3
 8020756:	dbf1      	blt.n	802073c <_write+0x12>
  }
  return len;
 8020758:	687b      	ldr	r3, [r7, #4]
}
 802075a:	4618      	mov	r0, r3
 802075c:	3718      	adds	r7, #24
 802075e:	46bd      	mov	sp, r7
 8020760:	bd80      	pop	{r7, pc}

08020762 <_close>:

int _close(int file)
{
 8020762:	b480      	push	{r7}
 8020764:	b083      	sub	sp, #12
 8020766:	af00      	add	r7, sp, #0
 8020768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 802076a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802076e:	4618      	mov	r0, r3
 8020770:	370c      	adds	r7, #12
 8020772:	46bd      	mov	sp, r7
 8020774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020778:	4770      	bx	lr

0802077a <_fstat>:


int _fstat(int file, struct stat *st)
{
 802077a:	b480      	push	{r7}
 802077c:	b083      	sub	sp, #12
 802077e:	af00      	add	r7, sp, #0
 8020780:	6078      	str	r0, [r7, #4]
 8020782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8020784:	683b      	ldr	r3, [r7, #0]
 8020786:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 802078a:	605a      	str	r2, [r3, #4]
  return 0;
 802078c:	2300      	movs	r3, #0
}
 802078e:	4618      	mov	r0, r3
 8020790:	370c      	adds	r7, #12
 8020792:	46bd      	mov	sp, r7
 8020794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020798:	4770      	bx	lr

0802079a <_isatty>:

int _isatty(int file)
{
 802079a:	b480      	push	{r7}
 802079c:	b083      	sub	sp, #12
 802079e:	af00      	add	r7, sp, #0
 80207a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80207a2:	2301      	movs	r3, #1
}
 80207a4:	4618      	mov	r0, r3
 80207a6:	370c      	adds	r7, #12
 80207a8:	46bd      	mov	sp, r7
 80207aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ae:	4770      	bx	lr

080207b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80207b0:	b480      	push	{r7}
 80207b2:	b085      	sub	sp, #20
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	60f8      	str	r0, [r7, #12]
 80207b8:	60b9      	str	r1, [r7, #8]
 80207ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80207bc:	2300      	movs	r3, #0
}
 80207be:	4618      	mov	r0, r3
 80207c0:	3714      	adds	r7, #20
 80207c2:	46bd      	mov	sp, r7
 80207c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207c8:	4770      	bx	lr
	...

080207cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80207cc:	b580      	push	{r7, lr}
 80207ce:	b086      	sub	sp, #24
 80207d0:	af00      	add	r7, sp, #0
 80207d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80207d4:	4a14      	ldr	r2, [pc, #80]	@ (8020828 <_sbrk+0x5c>)
 80207d6:	4b15      	ldr	r3, [pc, #84]	@ (802082c <_sbrk+0x60>)
 80207d8:	1ad3      	subs	r3, r2, r3
 80207da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80207dc:	697b      	ldr	r3, [r7, #20]
 80207de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80207e0:	4b13      	ldr	r3, [pc, #76]	@ (8020830 <_sbrk+0x64>)
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d102      	bne.n	80207ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80207e8:	4b11      	ldr	r3, [pc, #68]	@ (8020830 <_sbrk+0x64>)
 80207ea:	4a12      	ldr	r2, [pc, #72]	@ (8020834 <_sbrk+0x68>)
 80207ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80207ee:	4b10      	ldr	r3, [pc, #64]	@ (8020830 <_sbrk+0x64>)
 80207f0:	681a      	ldr	r2, [r3, #0]
 80207f2:	687b      	ldr	r3, [r7, #4]
 80207f4:	4413      	add	r3, r2
 80207f6:	693a      	ldr	r2, [r7, #16]
 80207f8:	429a      	cmp	r2, r3
 80207fa:	d207      	bcs.n	802080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80207fc:	f001 fd34 	bl	8022268 <__errno>
 8020800:	4603      	mov	r3, r0
 8020802:	220c      	movs	r2, #12
 8020804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020806:	f04f 33ff 	mov.w	r3, #4294967295
 802080a:	e009      	b.n	8020820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802080c:	4b08      	ldr	r3, [pc, #32]	@ (8020830 <_sbrk+0x64>)
 802080e:	681b      	ldr	r3, [r3, #0]
 8020810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020812:	4b07      	ldr	r3, [pc, #28]	@ (8020830 <_sbrk+0x64>)
 8020814:	681a      	ldr	r2, [r3, #0]
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	4413      	add	r3, r2
 802081a:	4a05      	ldr	r2, [pc, #20]	@ (8020830 <_sbrk+0x64>)
 802081c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802081e:	68fb      	ldr	r3, [r7, #12]
}
 8020820:	4618      	mov	r0, r3
 8020822:	3718      	adds	r7, #24
 8020824:	46bd      	mov	sp, r7
 8020826:	bd80      	pop	{r7, pc}
 8020828:	200a0000 	.word	0x200a0000
 802082c:	00000400 	.word	0x00000400
 8020830:	20000084 	.word	0x20000084
 8020834:	200001d8 	.word	0x200001d8

08020838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8020838:	b480      	push	{r7}
 802083a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 802083c:	4b06      	ldr	r3, [pc, #24]	@ (8020858 <SystemInit+0x20>)
 802083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020842:	4a05      	ldr	r2, [pc, #20]	@ (8020858 <SystemInit+0x20>)
 8020844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8020848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 802084c:	bf00      	nop
 802084e:	46bd      	mov	sp, r7
 8020850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020854:	4770      	bx	lr
 8020856:	bf00      	nop
 8020858:	e000ed00 	.word	0xe000ed00

0802085c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 802085c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8020894 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8020860:	f7ff ffea 	bl	8020838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8020864:	480c      	ldr	r0, [pc, #48]	@ (8020898 <LoopForever+0x6>)
  ldr r1, =_edata
 8020866:	490d      	ldr	r1, [pc, #52]	@ (802089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8020868:	4a0d      	ldr	r2, [pc, #52]	@ (80208a0 <LoopForever+0xe>)
  movs r3, #0
 802086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802086c:	e002      	b.n	8020874 <LoopCopyDataInit>

0802086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020872:	3304      	adds	r3, #4

08020874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020878:	d3f9      	bcc.n	802086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802087a:	4a0a      	ldr	r2, [pc, #40]	@ (80208a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 802087c:	4c0a      	ldr	r4, [pc, #40]	@ (80208a8 <LoopForever+0x16>)
  movs r3, #0
 802087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020880:	e001      	b.n	8020886 <LoopFillZerobss>

08020882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020884:	3204      	adds	r2, #4

08020886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020888:	d3fb      	bcc.n	8020882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802088a:	f001 fcf3 	bl	8022274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 802088e:	f7ff fd75 	bl	802037c <main>

08020892 <LoopForever>:

LoopForever:
    b LoopForever
 8020892:	e7fe      	b.n	8020892 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8020894:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8020898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802089c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80208a0:	08022bdc 	.word	0x08022bdc
  ldr r2, =_sbss
 80208a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80208a8:	200001d8 	.word	0x200001d8

080208ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80208ac:	e7fe      	b.n	80208ac <ADC1_IRQHandler>

080208ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80208ae:	b580      	push	{r7, lr}
 80208b0:	b082      	sub	sp, #8
 80208b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80208b4:	2300      	movs	r3, #0
 80208b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80208b8:	2003      	movs	r0, #3
 80208ba:	f000 f943 	bl	8020b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80208be:	2000      	movs	r0, #0
 80208c0:	f000 f80e 	bl	80208e0 <HAL_InitTick>
 80208c4:	4603      	mov	r3, r0
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d002      	beq.n	80208d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80208ca:	2301      	movs	r3, #1
 80208cc:	71fb      	strb	r3, [r7, #7]
 80208ce:	e001      	b.n	80208d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80208d0:	f7ff fe94 	bl	80205fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80208d4:	79fb      	ldrb	r3, [r7, #7]
}
 80208d6:	4618      	mov	r0, r3
 80208d8:	3708      	adds	r7, #8
 80208da:	46bd      	mov	sp, r7
 80208dc:	bd80      	pop	{r7, pc}
	...

080208e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80208e0:	b580      	push	{r7, lr}
 80208e2:	b084      	sub	sp, #16
 80208e4:	af00      	add	r7, sp, #0
 80208e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80208e8:	2300      	movs	r3, #0
 80208ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80208ec:	4b17      	ldr	r3, [pc, #92]	@ (802094c <HAL_InitTick+0x6c>)
 80208ee:	781b      	ldrb	r3, [r3, #0]
 80208f0:	2b00      	cmp	r3, #0
 80208f2:	d023      	beq.n	802093c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80208f4:	4b16      	ldr	r3, [pc, #88]	@ (8020950 <HAL_InitTick+0x70>)
 80208f6:	681a      	ldr	r2, [r3, #0]
 80208f8:	4b14      	ldr	r3, [pc, #80]	@ (802094c <HAL_InitTick+0x6c>)
 80208fa:	781b      	ldrb	r3, [r3, #0]
 80208fc:	4619      	mov	r1, r3
 80208fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020902:	fbb3 f3f1 	udiv	r3, r3, r1
 8020906:	fbb2 f3f3 	udiv	r3, r2, r3
 802090a:	4618      	mov	r0, r3
 802090c:	f000 f941 	bl	8020b92 <HAL_SYSTICK_Config>
 8020910:	4603      	mov	r3, r0
 8020912:	2b00      	cmp	r3, #0
 8020914:	d10f      	bne.n	8020936 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020916:	687b      	ldr	r3, [r7, #4]
 8020918:	2b0f      	cmp	r3, #15
 802091a:	d809      	bhi.n	8020930 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802091c:	2200      	movs	r2, #0
 802091e:	6879      	ldr	r1, [r7, #4]
 8020920:	f04f 30ff 	mov.w	r0, #4294967295
 8020924:	f000 f919 	bl	8020b5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020928:	4a0a      	ldr	r2, [pc, #40]	@ (8020954 <HAL_InitTick+0x74>)
 802092a:	687b      	ldr	r3, [r7, #4]
 802092c:	6013      	str	r3, [r2, #0]
 802092e:	e007      	b.n	8020940 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8020930:	2301      	movs	r3, #1
 8020932:	73fb      	strb	r3, [r7, #15]
 8020934:	e004      	b.n	8020940 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020936:	2301      	movs	r3, #1
 8020938:	73fb      	strb	r3, [r7, #15]
 802093a:	e001      	b.n	8020940 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 802093c:	2301      	movs	r3, #1
 802093e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8020940:	7bfb      	ldrb	r3, [r7, #15]
}
 8020942:	4618      	mov	r0, r3
 8020944:	3710      	adds	r7, #16
 8020946:	46bd      	mov	sp, r7
 8020948:	bd80      	pop	{r7, pc}
 802094a:	bf00      	nop
 802094c:	20000008 	.word	0x20000008
 8020950:	20000000 	.word	0x20000000
 8020954:	20000004 	.word	0x20000004

08020958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020958:	b480      	push	{r7}
 802095a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802095c:	4b06      	ldr	r3, [pc, #24]	@ (8020978 <HAL_IncTick+0x20>)
 802095e:	781b      	ldrb	r3, [r3, #0]
 8020960:	461a      	mov	r2, r3
 8020962:	4b06      	ldr	r3, [pc, #24]	@ (802097c <HAL_IncTick+0x24>)
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	4413      	add	r3, r2
 8020968:	4a04      	ldr	r2, [pc, #16]	@ (802097c <HAL_IncTick+0x24>)
 802096a:	6013      	str	r3, [r2, #0]
}
 802096c:	bf00      	nop
 802096e:	46bd      	mov	sp, r7
 8020970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020974:	4770      	bx	lr
 8020976:	bf00      	nop
 8020978:	20000008 	.word	0x20000008
 802097c:	20000088 	.word	0x20000088

08020980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020980:	b480      	push	{r7}
 8020982:	af00      	add	r7, sp, #0
  return uwTick;
 8020984:	4b03      	ldr	r3, [pc, #12]	@ (8020994 <HAL_GetTick+0x14>)
 8020986:	681b      	ldr	r3, [r3, #0]
}
 8020988:	4618      	mov	r0, r3
 802098a:	46bd      	mov	sp, r7
 802098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020990:	4770      	bx	lr
 8020992:	bf00      	nop
 8020994:	20000088 	.word	0x20000088

08020998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020998:	b580      	push	{r7, lr}
 802099a:	b084      	sub	sp, #16
 802099c:	af00      	add	r7, sp, #0
 802099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80209a0:	f7ff ffee 	bl	8020980 <HAL_GetTick>
 80209a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80209a6:	687b      	ldr	r3, [r7, #4]
 80209a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80209aa:	68fb      	ldr	r3, [r7, #12]
 80209ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80209b0:	d005      	beq.n	80209be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80209b2:	4b0a      	ldr	r3, [pc, #40]	@ (80209dc <HAL_Delay+0x44>)
 80209b4:	781b      	ldrb	r3, [r3, #0]
 80209b6:	461a      	mov	r2, r3
 80209b8:	68fb      	ldr	r3, [r7, #12]
 80209ba:	4413      	add	r3, r2
 80209bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80209be:	bf00      	nop
 80209c0:	f7ff ffde 	bl	8020980 <HAL_GetTick>
 80209c4:	4602      	mov	r2, r0
 80209c6:	68bb      	ldr	r3, [r7, #8]
 80209c8:	1ad3      	subs	r3, r2, r3
 80209ca:	68fa      	ldr	r2, [r7, #12]
 80209cc:	429a      	cmp	r2, r3
 80209ce:	d8f7      	bhi.n	80209c0 <HAL_Delay+0x28>
  {
  }
}
 80209d0:	bf00      	nop
 80209d2:	bf00      	nop
 80209d4:	3710      	adds	r7, #16
 80209d6:	46bd      	mov	sp, r7
 80209d8:	bd80      	pop	{r7, pc}
 80209da:	bf00      	nop
 80209dc:	20000008 	.word	0x20000008

080209e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80209e0:	b480      	push	{r7}
 80209e2:	b085      	sub	sp, #20
 80209e4:	af00      	add	r7, sp, #0
 80209e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	f003 0307 	and.w	r3, r3, #7
 80209ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80209f0:	4b0c      	ldr	r3, [pc, #48]	@ (8020a24 <__NVIC_SetPriorityGrouping+0x44>)
 80209f2:	68db      	ldr	r3, [r3, #12]
 80209f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80209f6:	68ba      	ldr	r2, [r7, #8]
 80209f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80209fc:	4013      	ands	r3, r2
 80209fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020a00:	68fb      	ldr	r3, [r7, #12]
 8020a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020a04:	68bb      	ldr	r3, [r7, #8]
 8020a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020a12:	4a04      	ldr	r2, [pc, #16]	@ (8020a24 <__NVIC_SetPriorityGrouping+0x44>)
 8020a14:	68bb      	ldr	r3, [r7, #8]
 8020a16:	60d3      	str	r3, [r2, #12]
}
 8020a18:	bf00      	nop
 8020a1a:	3714      	adds	r7, #20
 8020a1c:	46bd      	mov	sp, r7
 8020a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a22:	4770      	bx	lr
 8020a24:	e000ed00 	.word	0xe000ed00

08020a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020a28:	b480      	push	{r7}
 8020a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020a2c:	4b04      	ldr	r3, [pc, #16]	@ (8020a40 <__NVIC_GetPriorityGrouping+0x18>)
 8020a2e:	68db      	ldr	r3, [r3, #12]
 8020a30:	0a1b      	lsrs	r3, r3, #8
 8020a32:	f003 0307 	and.w	r3, r3, #7
}
 8020a36:	4618      	mov	r0, r3
 8020a38:	46bd      	mov	sp, r7
 8020a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a3e:	4770      	bx	lr
 8020a40:	e000ed00 	.word	0xe000ed00

08020a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020a44:	b480      	push	{r7}
 8020a46:	b083      	sub	sp, #12
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	4603      	mov	r3, r0
 8020a4c:	6039      	str	r1, [r7, #0]
 8020a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	db0a      	blt.n	8020a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020a58:	683b      	ldr	r3, [r7, #0]
 8020a5a:	b2da      	uxtb	r2, r3
 8020a5c:	490c      	ldr	r1, [pc, #48]	@ (8020a90 <__NVIC_SetPriority+0x4c>)
 8020a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020a62:	0112      	lsls	r2, r2, #4
 8020a64:	b2d2      	uxtb	r2, r2
 8020a66:	440b      	add	r3, r1
 8020a68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020a6c:	e00a      	b.n	8020a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020a6e:	683b      	ldr	r3, [r7, #0]
 8020a70:	b2da      	uxtb	r2, r3
 8020a72:	4908      	ldr	r1, [pc, #32]	@ (8020a94 <__NVIC_SetPriority+0x50>)
 8020a74:	79fb      	ldrb	r3, [r7, #7]
 8020a76:	f003 030f 	and.w	r3, r3, #15
 8020a7a:	3b04      	subs	r3, #4
 8020a7c:	0112      	lsls	r2, r2, #4
 8020a7e:	b2d2      	uxtb	r2, r2
 8020a80:	440b      	add	r3, r1
 8020a82:	761a      	strb	r2, [r3, #24]
}
 8020a84:	bf00      	nop
 8020a86:	370c      	adds	r7, #12
 8020a88:	46bd      	mov	sp, r7
 8020a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a8e:	4770      	bx	lr
 8020a90:	e000e100 	.word	0xe000e100
 8020a94:	e000ed00 	.word	0xe000ed00

08020a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020a98:	b480      	push	{r7}
 8020a9a:	b089      	sub	sp, #36	@ 0x24
 8020a9c:	af00      	add	r7, sp, #0
 8020a9e:	60f8      	str	r0, [r7, #12]
 8020aa0:	60b9      	str	r1, [r7, #8]
 8020aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020aa4:	68fb      	ldr	r3, [r7, #12]
 8020aa6:	f003 0307 	and.w	r3, r3, #7
 8020aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020aac:	69fb      	ldr	r3, [r7, #28]
 8020aae:	f1c3 0307 	rsb	r3, r3, #7
 8020ab2:	2b04      	cmp	r3, #4
 8020ab4:	bf28      	it	cs
 8020ab6:	2304      	movcs	r3, #4
 8020ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020aba:	69fb      	ldr	r3, [r7, #28]
 8020abc:	3304      	adds	r3, #4
 8020abe:	2b06      	cmp	r3, #6
 8020ac0:	d902      	bls.n	8020ac8 <NVIC_EncodePriority+0x30>
 8020ac2:	69fb      	ldr	r3, [r7, #28]
 8020ac4:	3b03      	subs	r3, #3
 8020ac6:	e000      	b.n	8020aca <NVIC_EncodePriority+0x32>
 8020ac8:	2300      	movs	r3, #0
 8020aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020acc:	f04f 32ff 	mov.w	r2, #4294967295
 8020ad0:	69bb      	ldr	r3, [r7, #24]
 8020ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8020ad6:	43da      	mvns	r2, r3
 8020ad8:	68bb      	ldr	r3, [r7, #8]
 8020ada:	401a      	ands	r2, r3
 8020adc:	697b      	ldr	r3, [r7, #20]
 8020ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8020ae4:	697b      	ldr	r3, [r7, #20]
 8020ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8020aea:	43d9      	mvns	r1, r3
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020af0:	4313      	orrs	r3, r2
         );
}
 8020af2:	4618      	mov	r0, r3
 8020af4:	3724      	adds	r7, #36	@ 0x24
 8020af6:	46bd      	mov	sp, r7
 8020af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020afc:	4770      	bx	lr
	...

08020b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020b00:	b580      	push	{r7, lr}
 8020b02:	b082      	sub	sp, #8
 8020b04:	af00      	add	r7, sp, #0
 8020b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	3b01      	subs	r3, #1
 8020b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020b10:	d301      	bcc.n	8020b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020b12:	2301      	movs	r3, #1
 8020b14:	e00f      	b.n	8020b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020b16:	4a0a      	ldr	r2, [pc, #40]	@ (8020b40 <SysTick_Config+0x40>)
 8020b18:	687b      	ldr	r3, [r7, #4]
 8020b1a:	3b01      	subs	r3, #1
 8020b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020b1e:	210f      	movs	r1, #15
 8020b20:	f04f 30ff 	mov.w	r0, #4294967295
 8020b24:	f7ff ff8e 	bl	8020a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020b28:	4b05      	ldr	r3, [pc, #20]	@ (8020b40 <SysTick_Config+0x40>)
 8020b2a:	2200      	movs	r2, #0
 8020b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020b2e:	4b04      	ldr	r3, [pc, #16]	@ (8020b40 <SysTick_Config+0x40>)
 8020b30:	2207      	movs	r2, #7
 8020b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020b34:	2300      	movs	r3, #0
}
 8020b36:	4618      	mov	r0, r3
 8020b38:	3708      	adds	r7, #8
 8020b3a:	46bd      	mov	sp, r7
 8020b3c:	bd80      	pop	{r7, pc}
 8020b3e:	bf00      	nop
 8020b40:	e000e010 	.word	0xe000e010

08020b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020b44:	b580      	push	{r7, lr}
 8020b46:	b082      	sub	sp, #8
 8020b48:	af00      	add	r7, sp, #0
 8020b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020b4c:	6878      	ldr	r0, [r7, #4]
 8020b4e:	f7ff ff47 	bl	80209e0 <__NVIC_SetPriorityGrouping>
}
 8020b52:	bf00      	nop
 8020b54:	3708      	adds	r7, #8
 8020b56:	46bd      	mov	sp, r7
 8020b58:	bd80      	pop	{r7, pc}

08020b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020b5a:	b580      	push	{r7, lr}
 8020b5c:	b086      	sub	sp, #24
 8020b5e:	af00      	add	r7, sp, #0
 8020b60:	4603      	mov	r3, r0
 8020b62:	60b9      	str	r1, [r7, #8]
 8020b64:	607a      	str	r2, [r7, #4]
 8020b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8020b68:	2300      	movs	r3, #0
 8020b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020b6c:	f7ff ff5c 	bl	8020a28 <__NVIC_GetPriorityGrouping>
 8020b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020b72:	687a      	ldr	r2, [r7, #4]
 8020b74:	68b9      	ldr	r1, [r7, #8]
 8020b76:	6978      	ldr	r0, [r7, #20]
 8020b78:	f7ff ff8e 	bl	8020a98 <NVIC_EncodePriority>
 8020b7c:	4602      	mov	r2, r0
 8020b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020b82:	4611      	mov	r1, r2
 8020b84:	4618      	mov	r0, r3
 8020b86:	f7ff ff5d 	bl	8020a44 <__NVIC_SetPriority>
}
 8020b8a:	bf00      	nop
 8020b8c:	3718      	adds	r7, #24
 8020b8e:	46bd      	mov	sp, r7
 8020b90:	bd80      	pop	{r7, pc}

08020b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020b92:	b580      	push	{r7, lr}
 8020b94:	b082      	sub	sp, #8
 8020b96:	af00      	add	r7, sp, #0
 8020b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020b9a:	6878      	ldr	r0, [r7, #4]
 8020b9c:	f7ff ffb0 	bl	8020b00 <SysTick_Config>
 8020ba0:	4603      	mov	r3, r0
}
 8020ba2:	4618      	mov	r0, r3
 8020ba4:	3708      	adds	r7, #8
 8020ba6:	46bd      	mov	sp, r7
 8020ba8:	bd80      	pop	{r7, pc}
	...

08020bac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8020bac:	b480      	push	{r7}
 8020bae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8020be8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020bbc:	d102      	bne.n	8020bc4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8020bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020bc2:	e00b      	b.n	8020bdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8020bc4:	4b08      	ldr	r3, [pc, #32]	@ (8020be8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8020bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020bd2:	d102      	bne.n	8020bda <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8020bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8020bd8:	e000      	b.n	8020bdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8020bda:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8020bdc:	4618      	mov	r0, r3
 8020bde:	46bd      	mov	sp, r7
 8020be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020be4:	4770      	bx	lr
 8020be6:	bf00      	nop
 8020be8:	40007000 	.word	0x40007000

08020bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8020bec:	b480      	push	{r7}
 8020bee:	b085      	sub	sp, #20
 8020bf0:	af00      	add	r7, sp, #0
 8020bf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d141      	bne.n	8020c7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020c06:	d131      	bne.n	8020c6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020c08:	4b47      	ldr	r3, [pc, #284]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020c0e:	4a46      	ldr	r2, [pc, #280]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020c14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8020c18:	4b43      	ldr	r3, [pc, #268]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c1a:	681b      	ldr	r3, [r3, #0]
 8020c1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020c20:	4a41      	ldr	r2, [pc, #260]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8020c28:	4b40      	ldr	r3, [pc, #256]	@ (8020d2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8020c2a:	681b      	ldr	r3, [r3, #0]
 8020c2c:	2232      	movs	r2, #50	@ 0x32
 8020c2e:	fb02 f303 	mul.w	r3, r2, r3
 8020c32:	4a3f      	ldr	r2, [pc, #252]	@ (8020d30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8020c34:	fba2 2303 	umull	r2, r3, r2, r3
 8020c38:	0c9b      	lsrs	r3, r3, #18
 8020c3a:	3301      	adds	r3, #1
 8020c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020c3e:	e002      	b.n	8020c46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8020c40:	68fb      	ldr	r3, [r7, #12]
 8020c42:	3b01      	subs	r3, #1
 8020c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020c46:	4b38      	ldr	r3, [pc, #224]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c48:	695b      	ldr	r3, [r3, #20]
 8020c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020c52:	d102      	bne.n	8020c5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8020c54:	68fb      	ldr	r3, [r7, #12]
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	d1f2      	bne.n	8020c40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8020c5a:	4b33      	ldr	r3, [pc, #204]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c5c:	695b      	ldr	r3, [r3, #20]
 8020c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020c66:	d158      	bne.n	8020d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8020c68:	2303      	movs	r3, #3
 8020c6a:	e057      	b.n	8020d1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020c72:	4a2d      	ldr	r2, [pc, #180]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020c7c:	e04d      	b.n	8020d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020c84:	d141      	bne.n	8020d0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020c86:	4b28      	ldr	r3, [pc, #160]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c88:	681b      	ldr	r3, [r3, #0]
 8020c8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020c92:	d131      	bne.n	8020cf8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020c94:	4b24      	ldr	r3, [pc, #144]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020c9a:	4a23      	ldr	r2, [pc, #140]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020ca0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8020ca4:	4b20      	ldr	r3, [pc, #128]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020ca6:	681b      	ldr	r3, [r3, #0]
 8020ca8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020cac:	4a1e      	ldr	r2, [pc, #120]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020cb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8020cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8020d2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8020cb6:	681b      	ldr	r3, [r3, #0]
 8020cb8:	2232      	movs	r2, #50	@ 0x32
 8020cba:	fb02 f303 	mul.w	r3, r2, r3
 8020cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8020d30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8020cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8020cc4:	0c9b      	lsrs	r3, r3, #18
 8020cc6:	3301      	adds	r3, #1
 8020cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020cca:	e002      	b.n	8020cd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8020ccc:	68fb      	ldr	r3, [r7, #12]
 8020cce:	3b01      	subs	r3, #1
 8020cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020cd2:	4b15      	ldr	r3, [pc, #84]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020cd4:	695b      	ldr	r3, [r3, #20]
 8020cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020cde:	d102      	bne.n	8020ce6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8020ce0:	68fb      	ldr	r3, [r7, #12]
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d1f2      	bne.n	8020ccc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8020ce6:	4b10      	ldr	r3, [pc, #64]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020ce8:	695b      	ldr	r3, [r3, #20]
 8020cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020cf2:	d112      	bne.n	8020d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8020cf4:	2303      	movs	r3, #3
 8020cf6:	e011      	b.n	8020d1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020d04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020d08:	e007      	b.n	8020d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8020d0a:	4b07      	ldr	r3, [pc, #28]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020d12:	4a05      	ldr	r2, [pc, #20]	@ (8020d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020d14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8020d18:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8020d1a:	2300      	movs	r3, #0
}
 8020d1c:	4618      	mov	r0, r3
 8020d1e:	3714      	adds	r7, #20
 8020d20:	46bd      	mov	sp, r7
 8020d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d26:	4770      	bx	lr
 8020d28:	40007000 	.word	0x40007000
 8020d2c:	20000000 	.word	0x20000000
 8020d30:	431bde83 	.word	0x431bde83

08020d34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020d34:	b580      	push	{r7, lr}
 8020d36:	b088      	sub	sp, #32
 8020d38:	af00      	add	r7, sp, #0
 8020d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	2b00      	cmp	r3, #0
 8020d40:	d102      	bne.n	8020d48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8020d42:	2301      	movs	r3, #1
 8020d44:	f000 bc08 	b.w	8021558 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8020d48:	4b96      	ldr	r3, [pc, #600]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020d4a:	689b      	ldr	r3, [r3, #8]
 8020d4c:	f003 030c 	and.w	r3, r3, #12
 8020d50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8020d52:	4b94      	ldr	r3, [pc, #592]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020d54:	68db      	ldr	r3, [r3, #12]
 8020d56:	f003 0303 	and.w	r3, r3, #3
 8020d5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8020d5c:	687b      	ldr	r3, [r7, #4]
 8020d5e:	681b      	ldr	r3, [r3, #0]
 8020d60:	f003 0310 	and.w	r3, r3, #16
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	f000 80e4 	beq.w	8020f32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8020d6a:	69bb      	ldr	r3, [r7, #24]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d007      	beq.n	8020d80 <HAL_RCC_OscConfig+0x4c>
 8020d70:	69bb      	ldr	r3, [r7, #24]
 8020d72:	2b0c      	cmp	r3, #12
 8020d74:	f040 808b 	bne.w	8020e8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8020d78:	697b      	ldr	r3, [r7, #20]
 8020d7a:	2b01      	cmp	r3, #1
 8020d7c:	f040 8087 	bne.w	8020e8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8020d80:	4b88      	ldr	r3, [pc, #544]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020d82:	681b      	ldr	r3, [r3, #0]
 8020d84:	f003 0302 	and.w	r3, r3, #2
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	d005      	beq.n	8020d98 <HAL_RCC_OscConfig+0x64>
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	699b      	ldr	r3, [r3, #24]
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d101      	bne.n	8020d98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8020d94:	2301      	movs	r3, #1
 8020d96:	e3df      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	6a1a      	ldr	r2, [r3, #32]
 8020d9c:	4b81      	ldr	r3, [pc, #516]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	f003 0308 	and.w	r3, r3, #8
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d004      	beq.n	8020db2 <HAL_RCC_OscConfig+0x7e>
 8020da8:	4b7e      	ldr	r3, [pc, #504]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020daa:	681b      	ldr	r3, [r3, #0]
 8020dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020db0:	e005      	b.n	8020dbe <HAL_RCC_OscConfig+0x8a>
 8020db2:	4b7c      	ldr	r3, [pc, #496]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020db8:	091b      	lsrs	r3, r3, #4
 8020dba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020dbe:	4293      	cmp	r3, r2
 8020dc0:	d223      	bcs.n	8020e0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	6a1b      	ldr	r3, [r3, #32]
 8020dc6:	4618      	mov	r0, r3
 8020dc8:	f000 fd94 	bl	80218f4 <RCC_SetFlashLatencyFromMSIRange>
 8020dcc:	4603      	mov	r3, r0
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d001      	beq.n	8020dd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	e3c0      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8020dd6:	4b73      	ldr	r3, [pc, #460]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020dd8:	681b      	ldr	r3, [r3, #0]
 8020dda:	4a72      	ldr	r2, [pc, #456]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020ddc:	f043 0308 	orr.w	r3, r3, #8
 8020de0:	6013      	str	r3, [r2, #0]
 8020de2:	4b70      	ldr	r3, [pc, #448]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	6a1b      	ldr	r3, [r3, #32]
 8020dee:	496d      	ldr	r1, [pc, #436]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020df0:	4313      	orrs	r3, r2
 8020df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8020df4:	4b6b      	ldr	r3, [pc, #428]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020df6:	685b      	ldr	r3, [r3, #4]
 8020df8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	69db      	ldr	r3, [r3, #28]
 8020e00:	021b      	lsls	r3, r3, #8
 8020e02:	4968      	ldr	r1, [pc, #416]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e04:	4313      	orrs	r3, r2
 8020e06:	604b      	str	r3, [r1, #4]
 8020e08:	e025      	b.n	8020e56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8020e0a:	4b66      	ldr	r3, [pc, #408]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e0c:	681b      	ldr	r3, [r3, #0]
 8020e0e:	4a65      	ldr	r2, [pc, #404]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e10:	f043 0308 	orr.w	r3, r3, #8
 8020e14:	6013      	str	r3, [r2, #0]
 8020e16:	4b63      	ldr	r3, [pc, #396]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e18:	681b      	ldr	r3, [r3, #0]
 8020e1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8020e1e:	687b      	ldr	r3, [r7, #4]
 8020e20:	6a1b      	ldr	r3, [r3, #32]
 8020e22:	4960      	ldr	r1, [pc, #384]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e24:	4313      	orrs	r3, r2
 8020e26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8020e28:	4b5e      	ldr	r3, [pc, #376]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e2a:	685b      	ldr	r3, [r3, #4]
 8020e2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	69db      	ldr	r3, [r3, #28]
 8020e34:	021b      	lsls	r3, r3, #8
 8020e36:	495b      	ldr	r1, [pc, #364]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e38:	4313      	orrs	r3, r2
 8020e3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8020e3c:	69bb      	ldr	r3, [r7, #24]
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d109      	bne.n	8020e56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	6a1b      	ldr	r3, [r3, #32]
 8020e46:	4618      	mov	r0, r3
 8020e48:	f000 fd54 	bl	80218f4 <RCC_SetFlashLatencyFromMSIRange>
 8020e4c:	4603      	mov	r3, r0
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d001      	beq.n	8020e56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8020e52:	2301      	movs	r3, #1
 8020e54:	e380      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8020e56:	f000 fcc1 	bl	80217dc <HAL_RCC_GetSysClockFreq>
 8020e5a:	4602      	mov	r2, r0
 8020e5c:	4b51      	ldr	r3, [pc, #324]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e5e:	689b      	ldr	r3, [r3, #8]
 8020e60:	091b      	lsrs	r3, r3, #4
 8020e62:	f003 030f 	and.w	r3, r3, #15
 8020e66:	4950      	ldr	r1, [pc, #320]	@ (8020fa8 <HAL_RCC_OscConfig+0x274>)
 8020e68:	5ccb      	ldrb	r3, [r1, r3]
 8020e6a:	f003 031f 	and.w	r3, r3, #31
 8020e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8020e72:	4a4e      	ldr	r2, [pc, #312]	@ (8020fac <HAL_RCC_OscConfig+0x278>)
 8020e74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8020e76:	4b4e      	ldr	r3, [pc, #312]	@ (8020fb0 <HAL_RCC_OscConfig+0x27c>)
 8020e78:	681b      	ldr	r3, [r3, #0]
 8020e7a:	4618      	mov	r0, r3
 8020e7c:	f7ff fd30 	bl	80208e0 <HAL_InitTick>
 8020e80:	4603      	mov	r3, r0
 8020e82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8020e84:	7bfb      	ldrb	r3, [r7, #15]
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d052      	beq.n	8020f30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8020e8a:	7bfb      	ldrb	r3, [r7, #15]
 8020e8c:	e364      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	699b      	ldr	r3, [r3, #24]
 8020e92:	2b00      	cmp	r3, #0
 8020e94:	d032      	beq.n	8020efc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8020e96:	4b43      	ldr	r3, [pc, #268]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e98:	681b      	ldr	r3, [r3, #0]
 8020e9a:	4a42      	ldr	r2, [pc, #264]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020e9c:	f043 0301 	orr.w	r3, r3, #1
 8020ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8020ea2:	f7ff fd6d 	bl	8020980 <HAL_GetTick>
 8020ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8020ea8:	e008      	b.n	8020ebc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8020eaa:	f7ff fd69 	bl	8020980 <HAL_GetTick>
 8020eae:	4602      	mov	r2, r0
 8020eb0:	693b      	ldr	r3, [r7, #16]
 8020eb2:	1ad3      	subs	r3, r2, r3
 8020eb4:	2b02      	cmp	r3, #2
 8020eb6:	d901      	bls.n	8020ebc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8020eb8:	2303      	movs	r3, #3
 8020eba:	e34d      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8020ebc:	4b39      	ldr	r3, [pc, #228]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	f003 0302 	and.w	r3, r3, #2
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	d0f0      	beq.n	8020eaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8020ec8:	4b36      	ldr	r3, [pc, #216]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020eca:	681b      	ldr	r3, [r3, #0]
 8020ecc:	4a35      	ldr	r2, [pc, #212]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020ece:	f043 0308 	orr.w	r3, r3, #8
 8020ed2:	6013      	str	r3, [r2, #0]
 8020ed4:	4b33      	ldr	r3, [pc, #204]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020ed6:	681b      	ldr	r3, [r3, #0]
 8020ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	6a1b      	ldr	r3, [r3, #32]
 8020ee0:	4930      	ldr	r1, [pc, #192]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020ee2:	4313      	orrs	r3, r2
 8020ee4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8020ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020ee8:	685b      	ldr	r3, [r3, #4]
 8020eea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	69db      	ldr	r3, [r3, #28]
 8020ef2:	021b      	lsls	r3, r3, #8
 8020ef4:	492b      	ldr	r1, [pc, #172]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020ef6:	4313      	orrs	r3, r2
 8020ef8:	604b      	str	r3, [r1, #4]
 8020efa:	e01a      	b.n	8020f32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8020efc:	4b29      	ldr	r3, [pc, #164]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020efe:	681b      	ldr	r3, [r3, #0]
 8020f00:	4a28      	ldr	r2, [pc, #160]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f02:	f023 0301 	bic.w	r3, r3, #1
 8020f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8020f08:	f7ff fd3a 	bl	8020980 <HAL_GetTick>
 8020f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8020f0e:	e008      	b.n	8020f22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8020f10:	f7ff fd36 	bl	8020980 <HAL_GetTick>
 8020f14:	4602      	mov	r2, r0
 8020f16:	693b      	ldr	r3, [r7, #16]
 8020f18:	1ad3      	subs	r3, r2, r3
 8020f1a:	2b02      	cmp	r3, #2
 8020f1c:	d901      	bls.n	8020f22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8020f1e:	2303      	movs	r3, #3
 8020f20:	e31a      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8020f22:	4b20      	ldr	r3, [pc, #128]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f24:	681b      	ldr	r3, [r3, #0]
 8020f26:	f003 0302 	and.w	r3, r3, #2
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d1f0      	bne.n	8020f10 <HAL_RCC_OscConfig+0x1dc>
 8020f2e:	e000      	b.n	8020f32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8020f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	681b      	ldr	r3, [r3, #0]
 8020f36:	f003 0301 	and.w	r3, r3, #1
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d073      	beq.n	8021026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8020f3e:	69bb      	ldr	r3, [r7, #24]
 8020f40:	2b08      	cmp	r3, #8
 8020f42:	d005      	beq.n	8020f50 <HAL_RCC_OscConfig+0x21c>
 8020f44:	69bb      	ldr	r3, [r7, #24]
 8020f46:	2b0c      	cmp	r3, #12
 8020f48:	d10e      	bne.n	8020f68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8020f4a:	697b      	ldr	r3, [r7, #20]
 8020f4c:	2b03      	cmp	r3, #3
 8020f4e:	d10b      	bne.n	8020f68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020f50:	4b14      	ldr	r3, [pc, #80]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f52:	681b      	ldr	r3, [r3, #0]
 8020f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	d063      	beq.n	8021024 <HAL_RCC_OscConfig+0x2f0>
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	685b      	ldr	r3, [r3, #4]
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	d15f      	bne.n	8021024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8020f64:	2301      	movs	r3, #1
 8020f66:	e2f7      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	685b      	ldr	r3, [r3, #4]
 8020f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020f70:	d106      	bne.n	8020f80 <HAL_RCC_OscConfig+0x24c>
 8020f72:	4b0c      	ldr	r3, [pc, #48]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f74:	681b      	ldr	r3, [r3, #0]
 8020f76:	4a0b      	ldr	r2, [pc, #44]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020f7c:	6013      	str	r3, [r2, #0]
 8020f7e:	e025      	b.n	8020fcc <HAL_RCC_OscConfig+0x298>
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	685b      	ldr	r3, [r3, #4]
 8020f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8020f88:	d114      	bne.n	8020fb4 <HAL_RCC_OscConfig+0x280>
 8020f8a:	4b06      	ldr	r3, [pc, #24]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	4a05      	ldr	r2, [pc, #20]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8020f94:	6013      	str	r3, [r2, #0]
 8020f96:	4b03      	ldr	r3, [pc, #12]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f98:	681b      	ldr	r3, [r3, #0]
 8020f9a:	4a02      	ldr	r2, [pc, #8]	@ (8020fa4 <HAL_RCC_OscConfig+0x270>)
 8020f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020fa0:	6013      	str	r3, [r2, #0]
 8020fa2:	e013      	b.n	8020fcc <HAL_RCC_OscConfig+0x298>
 8020fa4:	40021000 	.word	0x40021000
 8020fa8:	08022b58 	.word	0x08022b58
 8020fac:	20000000 	.word	0x20000000
 8020fb0:	20000004 	.word	0x20000004
 8020fb4:	4ba0      	ldr	r3, [pc, #640]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8020fb6:	681b      	ldr	r3, [r3, #0]
 8020fb8:	4a9f      	ldr	r2, [pc, #636]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8020fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020fbe:	6013      	str	r3, [r2, #0]
 8020fc0:	4b9d      	ldr	r3, [pc, #628]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	4a9c      	ldr	r2, [pc, #624]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8020fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8020fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	685b      	ldr	r3, [r3, #4]
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	d013      	beq.n	8020ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020fd4:	f7ff fcd4 	bl	8020980 <HAL_GetTick>
 8020fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8020fda:	e008      	b.n	8020fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8020fdc:	f7ff fcd0 	bl	8020980 <HAL_GetTick>
 8020fe0:	4602      	mov	r2, r0
 8020fe2:	693b      	ldr	r3, [r7, #16]
 8020fe4:	1ad3      	subs	r3, r2, r3
 8020fe6:	2b64      	cmp	r3, #100	@ 0x64
 8020fe8:	d901      	bls.n	8020fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8020fea:	2303      	movs	r3, #3
 8020fec:	e2b4      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8020fee:	4b92      	ldr	r3, [pc, #584]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8020ff0:	681b      	ldr	r3, [r3, #0]
 8020ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d0f0      	beq.n	8020fdc <HAL_RCC_OscConfig+0x2a8>
 8020ffa:	e014      	b.n	8021026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020ffc:	f7ff fcc0 	bl	8020980 <HAL_GetTick>
 8021000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021002:	e008      	b.n	8021016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021004:	f7ff fcbc 	bl	8020980 <HAL_GetTick>
 8021008:	4602      	mov	r2, r0
 802100a:	693b      	ldr	r3, [r7, #16]
 802100c:	1ad3      	subs	r3, r2, r3
 802100e:	2b64      	cmp	r3, #100	@ 0x64
 8021010:	d901      	bls.n	8021016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8021012:	2303      	movs	r3, #3
 8021014:	e2a0      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021016:	4b88      	ldr	r3, [pc, #544]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021018:	681b      	ldr	r3, [r3, #0]
 802101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802101e:	2b00      	cmp	r3, #0
 8021020:	d1f0      	bne.n	8021004 <HAL_RCC_OscConfig+0x2d0>
 8021022:	e000      	b.n	8021026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	681b      	ldr	r3, [r3, #0]
 802102a:	f003 0302 	and.w	r3, r3, #2
 802102e:	2b00      	cmp	r3, #0
 8021030:	d060      	beq.n	80210f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8021032:	69bb      	ldr	r3, [r7, #24]
 8021034:	2b04      	cmp	r3, #4
 8021036:	d005      	beq.n	8021044 <HAL_RCC_OscConfig+0x310>
 8021038:	69bb      	ldr	r3, [r7, #24]
 802103a:	2b0c      	cmp	r3, #12
 802103c:	d119      	bne.n	8021072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 802103e:	697b      	ldr	r3, [r7, #20]
 8021040:	2b02      	cmp	r3, #2
 8021042:	d116      	bne.n	8021072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021044:	4b7c      	ldr	r3, [pc, #496]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802104c:	2b00      	cmp	r3, #0
 802104e:	d005      	beq.n	802105c <HAL_RCC_OscConfig+0x328>
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	68db      	ldr	r3, [r3, #12]
 8021054:	2b00      	cmp	r3, #0
 8021056:	d101      	bne.n	802105c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8021058:	2301      	movs	r3, #1
 802105a:	e27d      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802105c:	4b76      	ldr	r3, [pc, #472]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802105e:	685b      	ldr	r3, [r3, #4]
 8021060:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	691b      	ldr	r3, [r3, #16]
 8021068:	061b      	lsls	r3, r3, #24
 802106a:	4973      	ldr	r1, [pc, #460]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802106c:	4313      	orrs	r3, r2
 802106e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021070:	e040      	b.n	80210f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	68db      	ldr	r3, [r3, #12]
 8021076:	2b00      	cmp	r3, #0
 8021078:	d023      	beq.n	80210c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802107a:	4b6f      	ldr	r3, [pc, #444]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	4a6e      	ldr	r2, [pc, #440]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021086:	f7ff fc7b 	bl	8020980 <HAL_GetTick>
 802108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802108c:	e008      	b.n	80210a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802108e:	f7ff fc77 	bl	8020980 <HAL_GetTick>
 8021092:	4602      	mov	r2, r0
 8021094:	693b      	ldr	r3, [r7, #16]
 8021096:	1ad3      	subs	r3, r2, r3
 8021098:	2b02      	cmp	r3, #2
 802109a:	d901      	bls.n	80210a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 802109c:	2303      	movs	r3, #3
 802109e:	e25b      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80210a0:	4b65      	ldr	r3, [pc, #404]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	d0f0      	beq.n	802108e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80210ac:	4b62      	ldr	r3, [pc, #392]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 80210ae:	685b      	ldr	r3, [r3, #4]
 80210b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	691b      	ldr	r3, [r3, #16]
 80210b8:	061b      	lsls	r3, r3, #24
 80210ba:	495f      	ldr	r1, [pc, #380]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 80210bc:	4313      	orrs	r3, r2
 80210be:	604b      	str	r3, [r1, #4]
 80210c0:	e018      	b.n	80210f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80210c2:	4b5d      	ldr	r3, [pc, #372]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 80210c4:	681b      	ldr	r3, [r3, #0]
 80210c6:	4a5c      	ldr	r2, [pc, #368]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 80210c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80210cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80210ce:	f7ff fc57 	bl	8020980 <HAL_GetTick>
 80210d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80210d4:	e008      	b.n	80210e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80210d6:	f7ff fc53 	bl	8020980 <HAL_GetTick>
 80210da:	4602      	mov	r2, r0
 80210dc:	693b      	ldr	r3, [r7, #16]
 80210de:	1ad3      	subs	r3, r2, r3
 80210e0:	2b02      	cmp	r3, #2
 80210e2:	d901      	bls.n	80210e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80210e4:	2303      	movs	r3, #3
 80210e6:	e237      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80210e8:	4b53      	ldr	r3, [pc, #332]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 80210ea:	681b      	ldr	r3, [r3, #0]
 80210ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	d1f0      	bne.n	80210d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	681b      	ldr	r3, [r3, #0]
 80210f8:	f003 0308 	and.w	r3, r3, #8
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	d03c      	beq.n	802117a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	695b      	ldr	r3, [r3, #20]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d01c      	beq.n	8021142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021108:	4b4b      	ldr	r3, [pc, #300]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802110a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802110e:	4a4a      	ldr	r2, [pc, #296]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021110:	f043 0301 	orr.w	r3, r3, #1
 8021114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021118:	f7ff fc32 	bl	8020980 <HAL_GetTick>
 802111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 802111e:	e008      	b.n	8021132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021120:	f7ff fc2e 	bl	8020980 <HAL_GetTick>
 8021124:	4602      	mov	r2, r0
 8021126:	693b      	ldr	r3, [r7, #16]
 8021128:	1ad3      	subs	r3, r2, r3
 802112a:	2b02      	cmp	r3, #2
 802112c:	d901      	bls.n	8021132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 802112e:	2303      	movs	r3, #3
 8021130:	e212      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8021132:	4b41      	ldr	r3, [pc, #260]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021138:	f003 0302 	and.w	r3, r3, #2
 802113c:	2b00      	cmp	r3, #0
 802113e:	d0ef      	beq.n	8021120 <HAL_RCC_OscConfig+0x3ec>
 8021140:	e01b      	b.n	802117a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021142:	4b3d      	ldr	r3, [pc, #244]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021148:	4a3b      	ldr	r2, [pc, #236]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802114a:	f023 0301 	bic.w	r3, r3, #1
 802114e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021152:	f7ff fc15 	bl	8020980 <HAL_GetTick>
 8021156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021158:	e008      	b.n	802116c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802115a:	f7ff fc11 	bl	8020980 <HAL_GetTick>
 802115e:	4602      	mov	r2, r0
 8021160:	693b      	ldr	r3, [r7, #16]
 8021162:	1ad3      	subs	r3, r2, r3
 8021164:	2b02      	cmp	r3, #2
 8021166:	d901      	bls.n	802116c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8021168:	2303      	movs	r3, #3
 802116a:	e1f5      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 802116c:	4b32      	ldr	r3, [pc, #200]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802116e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021172:	f003 0302 	and.w	r3, r3, #2
 8021176:	2b00      	cmp	r3, #0
 8021178:	d1ef      	bne.n	802115a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	681b      	ldr	r3, [r3, #0]
 802117e:	f003 0304 	and.w	r3, r3, #4
 8021182:	2b00      	cmp	r3, #0
 8021184:	f000 80a6 	beq.w	80212d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021188:	2300      	movs	r3, #0
 802118a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 802118c:	4b2a      	ldr	r3, [pc, #168]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021194:	2b00      	cmp	r3, #0
 8021196:	d10d      	bne.n	80211b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021198:	4b27      	ldr	r3, [pc, #156]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802119a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802119c:	4a26      	ldr	r2, [pc, #152]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802119e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80211a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80211a4:	4b24      	ldr	r3, [pc, #144]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 80211a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80211a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80211ac:	60bb      	str	r3, [r7, #8]
 80211ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80211b0:	2301      	movs	r3, #1
 80211b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80211b4:	4b21      	ldr	r3, [pc, #132]	@ (802123c <HAL_RCC_OscConfig+0x508>)
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80211bc:	2b00      	cmp	r3, #0
 80211be:	d118      	bne.n	80211f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80211c0:	4b1e      	ldr	r3, [pc, #120]	@ (802123c <HAL_RCC_OscConfig+0x508>)
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	4a1d      	ldr	r2, [pc, #116]	@ (802123c <HAL_RCC_OscConfig+0x508>)
 80211c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80211ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80211cc:	f7ff fbd8 	bl	8020980 <HAL_GetTick>
 80211d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80211d2:	e008      	b.n	80211e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80211d4:	f7ff fbd4 	bl	8020980 <HAL_GetTick>
 80211d8:	4602      	mov	r2, r0
 80211da:	693b      	ldr	r3, [r7, #16]
 80211dc:	1ad3      	subs	r3, r2, r3
 80211de:	2b02      	cmp	r3, #2
 80211e0:	d901      	bls.n	80211e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80211e2:	2303      	movs	r3, #3
 80211e4:	e1b8      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80211e6:	4b15      	ldr	r3, [pc, #84]	@ (802123c <HAL_RCC_OscConfig+0x508>)
 80211e8:	681b      	ldr	r3, [r3, #0]
 80211ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d0f0      	beq.n	80211d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	689b      	ldr	r3, [r3, #8]
 80211f6:	2b01      	cmp	r3, #1
 80211f8:	d108      	bne.n	802120c <HAL_RCC_OscConfig+0x4d8>
 80211fa:	4b0f      	ldr	r3, [pc, #60]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 80211fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021200:	4a0d      	ldr	r2, [pc, #52]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021202:	f043 0301 	orr.w	r3, r3, #1
 8021206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 802120a:	e029      	b.n	8021260 <HAL_RCC_OscConfig+0x52c>
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	689b      	ldr	r3, [r3, #8]
 8021210:	2b05      	cmp	r3, #5
 8021212:	d115      	bne.n	8021240 <HAL_RCC_OscConfig+0x50c>
 8021214:	4b08      	ldr	r3, [pc, #32]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802121a:	4a07      	ldr	r2, [pc, #28]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802121c:	f043 0304 	orr.w	r3, r3, #4
 8021220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021224:	4b04      	ldr	r3, [pc, #16]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 8021226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802122a:	4a03      	ldr	r2, [pc, #12]	@ (8021238 <HAL_RCC_OscConfig+0x504>)
 802122c:	f043 0301 	orr.w	r3, r3, #1
 8021230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021234:	e014      	b.n	8021260 <HAL_RCC_OscConfig+0x52c>
 8021236:	bf00      	nop
 8021238:	40021000 	.word	0x40021000
 802123c:	40007000 	.word	0x40007000
 8021240:	4b9d      	ldr	r3, [pc, #628]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021246:	4a9c      	ldr	r2, [pc, #624]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021248:	f023 0301 	bic.w	r3, r3, #1
 802124c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8021250:	4b99      	ldr	r3, [pc, #612]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021256:	4a98      	ldr	r2, [pc, #608]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021258:	f023 0304 	bic.w	r3, r3, #4
 802125c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	689b      	ldr	r3, [r3, #8]
 8021264:	2b00      	cmp	r3, #0
 8021266:	d016      	beq.n	8021296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021268:	f7ff fb8a 	bl	8020980 <HAL_GetTick>
 802126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 802126e:	e00a      	b.n	8021286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021270:	f7ff fb86 	bl	8020980 <HAL_GetTick>
 8021274:	4602      	mov	r2, r0
 8021276:	693b      	ldr	r3, [r7, #16]
 8021278:	1ad3      	subs	r3, r2, r3
 802127a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802127e:	4293      	cmp	r3, r2
 8021280:	d901      	bls.n	8021286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8021282:	2303      	movs	r3, #3
 8021284:	e168      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8021286:	4b8c      	ldr	r3, [pc, #560]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802128c:	f003 0302 	and.w	r3, r3, #2
 8021290:	2b00      	cmp	r3, #0
 8021292:	d0ed      	beq.n	8021270 <HAL_RCC_OscConfig+0x53c>
 8021294:	e015      	b.n	80212c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021296:	f7ff fb73 	bl	8020980 <HAL_GetTick>
 802129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 802129c:	e00a      	b.n	80212b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802129e:	f7ff fb6f 	bl	8020980 <HAL_GetTick>
 80212a2:	4602      	mov	r2, r0
 80212a4:	693b      	ldr	r3, [r7, #16]
 80212a6:	1ad3      	subs	r3, r2, r3
 80212a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80212ac:	4293      	cmp	r3, r2
 80212ae:	d901      	bls.n	80212b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80212b0:	2303      	movs	r3, #3
 80212b2:	e151      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80212b4:	4b80      	ldr	r3, [pc, #512]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 80212b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80212ba:	f003 0302 	and.w	r3, r3, #2
 80212be:	2b00      	cmp	r3, #0
 80212c0:	d1ed      	bne.n	802129e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80212c2:	7ffb      	ldrb	r3, [r7, #31]
 80212c4:	2b01      	cmp	r3, #1
 80212c6:	d105      	bne.n	80212d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80212c8:	4b7b      	ldr	r3, [pc, #492]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 80212ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80212cc:	4a7a      	ldr	r2, [pc, #488]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 80212ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80212d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80212d4:	687b      	ldr	r3, [r7, #4]
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	f003 0320 	and.w	r3, r3, #32
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d03c      	beq.n	802135a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d01c      	beq.n	8021322 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80212e8:	4b73      	ldr	r3, [pc, #460]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 80212ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80212ee:	4a72      	ldr	r2, [pc, #456]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 80212f0:	f043 0301 	orr.w	r3, r3, #1
 80212f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80212f8:	f7ff fb42 	bl	8020980 <HAL_GetTick>
 80212fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80212fe:	e008      	b.n	8021312 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8021300:	f7ff fb3e 	bl	8020980 <HAL_GetTick>
 8021304:	4602      	mov	r2, r0
 8021306:	693b      	ldr	r3, [r7, #16]
 8021308:	1ad3      	subs	r3, r2, r3
 802130a:	2b02      	cmp	r3, #2
 802130c:	d901      	bls.n	8021312 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 802130e:	2303      	movs	r3, #3
 8021310:	e122      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8021312:	4b69      	ldr	r3, [pc, #420]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021318:	f003 0302 	and.w	r3, r3, #2
 802131c:	2b00      	cmp	r3, #0
 802131e:	d0ef      	beq.n	8021300 <HAL_RCC_OscConfig+0x5cc>
 8021320:	e01b      	b.n	802135a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8021322:	4b65      	ldr	r3, [pc, #404]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021328:	4a63      	ldr	r2, [pc, #396]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 802132a:	f023 0301 	bic.w	r3, r3, #1
 802132e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021332:	f7ff fb25 	bl	8020980 <HAL_GetTick>
 8021336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8021338:	e008      	b.n	802134c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802133a:	f7ff fb21 	bl	8020980 <HAL_GetTick>
 802133e:	4602      	mov	r2, r0
 8021340:	693b      	ldr	r3, [r7, #16]
 8021342:	1ad3      	subs	r3, r2, r3
 8021344:	2b02      	cmp	r3, #2
 8021346:	d901      	bls.n	802134c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8021348:	2303      	movs	r3, #3
 802134a:	e105      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 802134c:	4b5a      	ldr	r3, [pc, #360]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 802134e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021352:	f003 0302 	and.w	r3, r3, #2
 8021356:	2b00      	cmp	r3, #0
 8021358:	d1ef      	bne.n	802133a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802135e:	2b00      	cmp	r3, #0
 8021360:	f000 80f9 	beq.w	8021556 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8021364:	687b      	ldr	r3, [r7, #4]
 8021366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021368:	2b02      	cmp	r3, #2
 802136a:	f040 80cf 	bne.w	802150c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 802136e:	4b52      	ldr	r3, [pc, #328]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021370:	68db      	ldr	r3, [r3, #12]
 8021372:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021374:	697b      	ldr	r3, [r7, #20]
 8021376:	f003 0203 	and.w	r2, r3, #3
 802137a:	687b      	ldr	r3, [r7, #4]
 802137c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802137e:	429a      	cmp	r2, r3
 8021380:	d12c      	bne.n	80213dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021382:	697b      	ldr	r3, [r7, #20]
 8021384:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802138c:	3b01      	subs	r3, #1
 802138e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021390:	429a      	cmp	r2, r3
 8021392:	d123      	bne.n	80213dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021394:	697b      	ldr	r3, [r7, #20]
 8021396:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802139e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80213a0:	429a      	cmp	r2, r3
 80213a2:	d11b      	bne.n	80213dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80213a4:	697b      	ldr	r3, [r7, #20]
 80213a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80213ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80213b0:	429a      	cmp	r2, r3
 80213b2:	d113      	bne.n	80213dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80213b4:	697b      	ldr	r3, [r7, #20]
 80213b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80213be:	085b      	lsrs	r3, r3, #1
 80213c0:	3b01      	subs	r3, #1
 80213c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80213c4:	429a      	cmp	r2, r3
 80213c6:	d109      	bne.n	80213dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80213c8:	697b      	ldr	r3, [r7, #20]
 80213ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80213ce:	687b      	ldr	r3, [r7, #4]
 80213d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80213d2:	085b      	lsrs	r3, r3, #1
 80213d4:	3b01      	subs	r3, #1
 80213d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80213d8:	429a      	cmp	r2, r3
 80213da:	d071      	beq.n	80214c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80213dc:	69bb      	ldr	r3, [r7, #24]
 80213de:	2b0c      	cmp	r3, #12
 80213e0:	d068      	beq.n	80214b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80213e2:	4b35      	ldr	r3, [pc, #212]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	d105      	bne.n	80213fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80213ee:	4b32      	ldr	r3, [pc, #200]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d001      	beq.n	80213fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80213fa:	2301      	movs	r3, #1
 80213fc:	e0ac      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80213fe:	4b2e      	ldr	r3, [pc, #184]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	4a2d      	ldr	r2, [pc, #180]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021404:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8021408:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 802140a:	f7ff fab9 	bl	8020980 <HAL_GetTick>
 802140e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021410:	e008      	b.n	8021424 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021412:	f7ff fab5 	bl	8020980 <HAL_GetTick>
 8021416:	4602      	mov	r2, r0
 8021418:	693b      	ldr	r3, [r7, #16]
 802141a:	1ad3      	subs	r3, r2, r3
 802141c:	2b02      	cmp	r3, #2
 802141e:	d901      	bls.n	8021424 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8021420:	2303      	movs	r3, #3
 8021422:	e099      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021424:	4b24      	ldr	r3, [pc, #144]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802142c:	2b00      	cmp	r3, #0
 802142e:	d1f0      	bne.n	8021412 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021430:	4b21      	ldr	r3, [pc, #132]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021432:	68da      	ldr	r2, [r3, #12]
 8021434:	4b21      	ldr	r3, [pc, #132]	@ (80214bc <HAL_RCC_OscConfig+0x788>)
 8021436:	4013      	ands	r3, r2
 8021438:	687a      	ldr	r2, [r7, #4]
 802143a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 802143c:	687a      	ldr	r2, [r7, #4]
 802143e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8021440:	3a01      	subs	r2, #1
 8021442:	0112      	lsls	r2, r2, #4
 8021444:	4311      	orrs	r1, r2
 8021446:	687a      	ldr	r2, [r7, #4]
 8021448:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802144a:	0212      	lsls	r2, r2, #8
 802144c:	4311      	orrs	r1, r2
 802144e:	687a      	ldr	r2, [r7, #4]
 8021450:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8021452:	0852      	lsrs	r2, r2, #1
 8021454:	3a01      	subs	r2, #1
 8021456:	0552      	lsls	r2, r2, #21
 8021458:	4311      	orrs	r1, r2
 802145a:	687a      	ldr	r2, [r7, #4]
 802145c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 802145e:	0852      	lsrs	r2, r2, #1
 8021460:	3a01      	subs	r2, #1
 8021462:	0652      	lsls	r2, r2, #25
 8021464:	4311      	orrs	r1, r2
 8021466:	687a      	ldr	r2, [r7, #4]
 8021468:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 802146a:	06d2      	lsls	r2, r2, #27
 802146c:	430a      	orrs	r2, r1
 802146e:	4912      	ldr	r1, [pc, #72]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021470:	4313      	orrs	r3, r2
 8021472:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8021474:	4b10      	ldr	r3, [pc, #64]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	4a0f      	ldr	r2, [pc, #60]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 802147a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 802147e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8021480:	4b0d      	ldr	r3, [pc, #52]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021482:	68db      	ldr	r3, [r3, #12]
 8021484:	4a0c      	ldr	r2, [pc, #48]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 8021486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 802148a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 802148c:	f7ff fa78 	bl	8020980 <HAL_GetTick>
 8021490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021492:	e008      	b.n	80214a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021494:	f7ff fa74 	bl	8020980 <HAL_GetTick>
 8021498:	4602      	mov	r2, r0
 802149a:	693b      	ldr	r3, [r7, #16]
 802149c:	1ad3      	subs	r3, r2, r3
 802149e:	2b02      	cmp	r3, #2
 80214a0:	d901      	bls.n	80214a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80214a2:	2303      	movs	r3, #3
 80214a4:	e058      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80214a6:	4b04      	ldr	r3, [pc, #16]	@ (80214b8 <HAL_RCC_OscConfig+0x784>)
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	d0f0      	beq.n	8021494 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80214b2:	e050      	b.n	8021556 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80214b4:	2301      	movs	r3, #1
 80214b6:	e04f      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
 80214b8:	40021000 	.word	0x40021000
 80214bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80214c0:	4b27      	ldr	r3, [pc, #156]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 80214c2:	681b      	ldr	r3, [r3, #0]
 80214c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	d144      	bne.n	8021556 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80214cc:	4b24      	ldr	r3, [pc, #144]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 80214ce:	681b      	ldr	r3, [r3, #0]
 80214d0:	4a23      	ldr	r2, [pc, #140]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 80214d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80214d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80214d8:	4b21      	ldr	r3, [pc, #132]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 80214da:	68db      	ldr	r3, [r3, #12]
 80214dc:	4a20      	ldr	r2, [pc, #128]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 80214de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80214e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80214e4:	f7ff fa4c 	bl	8020980 <HAL_GetTick>
 80214e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80214ea:	e008      	b.n	80214fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80214ec:	f7ff fa48 	bl	8020980 <HAL_GetTick>
 80214f0:	4602      	mov	r2, r0
 80214f2:	693b      	ldr	r3, [r7, #16]
 80214f4:	1ad3      	subs	r3, r2, r3
 80214f6:	2b02      	cmp	r3, #2
 80214f8:	d901      	bls.n	80214fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80214fa:	2303      	movs	r3, #3
 80214fc:	e02c      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80214fe:	4b18      	ldr	r3, [pc, #96]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021506:	2b00      	cmp	r3, #0
 8021508:	d0f0      	beq.n	80214ec <HAL_RCC_OscConfig+0x7b8>
 802150a:	e024      	b.n	8021556 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 802150c:	69bb      	ldr	r3, [r7, #24]
 802150e:	2b0c      	cmp	r3, #12
 8021510:	d01f      	beq.n	8021552 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021512:	4b13      	ldr	r3, [pc, #76]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	4a12      	ldr	r2, [pc, #72]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 8021518:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 802151c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802151e:	f7ff fa2f 	bl	8020980 <HAL_GetTick>
 8021522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021524:	e008      	b.n	8021538 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021526:	f7ff fa2b 	bl	8020980 <HAL_GetTick>
 802152a:	4602      	mov	r2, r0
 802152c:	693b      	ldr	r3, [r7, #16]
 802152e:	1ad3      	subs	r3, r2, r3
 8021530:	2b02      	cmp	r3, #2
 8021532:	d901      	bls.n	8021538 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8021534:	2303      	movs	r3, #3
 8021536:	e00f      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021538:	4b09      	ldr	r3, [pc, #36]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 802153a:	681b      	ldr	r3, [r3, #0]
 802153c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021540:	2b00      	cmp	r3, #0
 8021542:	d1f0      	bne.n	8021526 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8021544:	4b06      	ldr	r3, [pc, #24]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 8021546:	68da      	ldr	r2, [r3, #12]
 8021548:	4905      	ldr	r1, [pc, #20]	@ (8021560 <HAL_RCC_OscConfig+0x82c>)
 802154a:	4b06      	ldr	r3, [pc, #24]	@ (8021564 <HAL_RCC_OscConfig+0x830>)
 802154c:	4013      	ands	r3, r2
 802154e:	60cb      	str	r3, [r1, #12]
 8021550:	e001      	b.n	8021556 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8021552:	2301      	movs	r3, #1
 8021554:	e000      	b.n	8021558 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8021556:	2300      	movs	r3, #0
}
 8021558:	4618      	mov	r0, r3
 802155a:	3720      	adds	r7, #32
 802155c:	46bd      	mov	sp, r7
 802155e:	bd80      	pop	{r7, pc}
 8021560:	40021000 	.word	0x40021000
 8021564:	feeefffc 	.word	0xfeeefffc

08021568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021568:	b580      	push	{r7, lr}
 802156a:	b086      	sub	sp, #24
 802156c:	af00      	add	r7, sp, #0
 802156e:	6078      	str	r0, [r7, #4]
 8021570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8021572:	2300      	movs	r3, #0
 8021574:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	2b00      	cmp	r3, #0
 802157a:	d101      	bne.n	8021580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 802157c:	2301      	movs	r3, #1
 802157e:	e11d      	b.n	80217bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8021580:	4b90      	ldr	r3, [pc, #576]	@ (80217c4 <HAL_RCC_ClockConfig+0x25c>)
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	f003 030f 	and.w	r3, r3, #15
 8021588:	683a      	ldr	r2, [r7, #0]
 802158a:	429a      	cmp	r2, r3
 802158c:	d910      	bls.n	80215b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802158e:	4b8d      	ldr	r3, [pc, #564]	@ (80217c4 <HAL_RCC_ClockConfig+0x25c>)
 8021590:	681b      	ldr	r3, [r3, #0]
 8021592:	f023 020f 	bic.w	r2, r3, #15
 8021596:	498b      	ldr	r1, [pc, #556]	@ (80217c4 <HAL_RCC_ClockConfig+0x25c>)
 8021598:	683b      	ldr	r3, [r7, #0]
 802159a:	4313      	orrs	r3, r2
 802159c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802159e:	4b89      	ldr	r3, [pc, #548]	@ (80217c4 <HAL_RCC_ClockConfig+0x25c>)
 80215a0:	681b      	ldr	r3, [r3, #0]
 80215a2:	f003 030f 	and.w	r3, r3, #15
 80215a6:	683a      	ldr	r2, [r7, #0]
 80215a8:	429a      	cmp	r2, r3
 80215aa:	d001      	beq.n	80215b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80215ac:	2301      	movs	r3, #1
 80215ae:	e105      	b.n	80217bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	f003 0302 	and.w	r3, r3, #2
 80215b8:	2b00      	cmp	r3, #0
 80215ba:	d010      	beq.n	80215de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	689a      	ldr	r2, [r3, #8]
 80215c0:	4b81      	ldr	r3, [pc, #516]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 80215c2:	689b      	ldr	r3, [r3, #8]
 80215c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80215c8:	429a      	cmp	r2, r3
 80215ca:	d908      	bls.n	80215de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80215cc:	4b7e      	ldr	r3, [pc, #504]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 80215ce:	689b      	ldr	r3, [r3, #8]
 80215d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	689b      	ldr	r3, [r3, #8]
 80215d8:	497b      	ldr	r1, [pc, #492]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 80215da:	4313      	orrs	r3, r2
 80215dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	681b      	ldr	r3, [r3, #0]
 80215e2:	f003 0301 	and.w	r3, r3, #1
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d079      	beq.n	80216de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80215ea:	687b      	ldr	r3, [r7, #4]
 80215ec:	685b      	ldr	r3, [r3, #4]
 80215ee:	2b03      	cmp	r3, #3
 80215f0:	d11e      	bne.n	8021630 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80215f2:	4b75      	ldr	r3, [pc, #468]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	d101      	bne.n	8021602 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80215fe:	2301      	movs	r3, #1
 8021600:	e0dc      	b.n	80217bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8021602:	f000 f9d1 	bl	80219a8 <RCC_GetSysClockFreqFromPLLSource>
 8021606:	4603      	mov	r3, r0
 8021608:	4a70      	ldr	r2, [pc, #448]	@ (80217cc <HAL_RCC_ClockConfig+0x264>)
 802160a:	4293      	cmp	r3, r2
 802160c:	d946      	bls.n	802169c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 802160e:	4b6e      	ldr	r3, [pc, #440]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021610:	689b      	ldr	r3, [r3, #8]
 8021612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021616:	2b00      	cmp	r3, #0
 8021618:	d140      	bne.n	802169c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 802161a:	4b6b      	ldr	r3, [pc, #428]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802161c:	689b      	ldr	r3, [r3, #8]
 802161e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8021622:	4a69      	ldr	r2, [pc, #420]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021628:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 802162a:	2380      	movs	r3, #128	@ 0x80
 802162c:	617b      	str	r3, [r7, #20]
 802162e:	e035      	b.n	802169c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	685b      	ldr	r3, [r3, #4]
 8021634:	2b02      	cmp	r3, #2
 8021636:	d107      	bne.n	8021648 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021638:	4b63      	ldr	r3, [pc, #396]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021640:	2b00      	cmp	r3, #0
 8021642:	d115      	bne.n	8021670 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8021644:	2301      	movs	r3, #1
 8021646:	e0b9      	b.n	80217bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8021648:	687b      	ldr	r3, [r7, #4]
 802164a:	685b      	ldr	r3, [r3, #4]
 802164c:	2b00      	cmp	r3, #0
 802164e:	d107      	bne.n	8021660 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021650:	4b5d      	ldr	r3, [pc, #372]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	f003 0302 	and.w	r3, r3, #2
 8021658:	2b00      	cmp	r3, #0
 802165a:	d109      	bne.n	8021670 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 802165c:	2301      	movs	r3, #1
 802165e:	e0ad      	b.n	80217bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021660:	4b59      	ldr	r3, [pc, #356]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021662:	681b      	ldr	r3, [r3, #0]
 8021664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021668:	2b00      	cmp	r3, #0
 802166a:	d101      	bne.n	8021670 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 802166c:	2301      	movs	r3, #1
 802166e:	e0a5      	b.n	80217bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8021670:	f000 f8b4 	bl	80217dc <HAL_RCC_GetSysClockFreq>
 8021674:	4603      	mov	r3, r0
 8021676:	4a55      	ldr	r2, [pc, #340]	@ (80217cc <HAL_RCC_ClockConfig+0x264>)
 8021678:	4293      	cmp	r3, r2
 802167a:	d90f      	bls.n	802169c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 802167c:	4b52      	ldr	r3, [pc, #328]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802167e:	689b      	ldr	r3, [r3, #8]
 8021680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021684:	2b00      	cmp	r3, #0
 8021686:	d109      	bne.n	802169c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021688:	4b4f      	ldr	r3, [pc, #316]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802168a:	689b      	ldr	r3, [r3, #8]
 802168c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8021690:	4a4d      	ldr	r2, [pc, #308]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021696:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021698:	2380      	movs	r3, #128	@ 0x80
 802169a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802169c:	4b4a      	ldr	r3, [pc, #296]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802169e:	689b      	ldr	r3, [r3, #8]
 80216a0:	f023 0203 	bic.w	r2, r3, #3
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	685b      	ldr	r3, [r3, #4]
 80216a8:	4947      	ldr	r1, [pc, #284]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 80216aa:	4313      	orrs	r3, r2
 80216ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80216ae:	f7ff f967 	bl	8020980 <HAL_GetTick>
 80216b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80216b4:	e00a      	b.n	80216cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80216b6:	f7ff f963 	bl	8020980 <HAL_GetTick>
 80216ba:	4602      	mov	r2, r0
 80216bc:	693b      	ldr	r3, [r7, #16]
 80216be:	1ad3      	subs	r3, r2, r3
 80216c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80216c4:	4293      	cmp	r3, r2
 80216c6:	d901      	bls.n	80216cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80216c8:	2303      	movs	r3, #3
 80216ca:	e077      	b.n	80217bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80216cc:	4b3e      	ldr	r3, [pc, #248]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 80216ce:	689b      	ldr	r3, [r3, #8]
 80216d0:	f003 020c 	and.w	r2, r3, #12
 80216d4:	687b      	ldr	r3, [r7, #4]
 80216d6:	685b      	ldr	r3, [r3, #4]
 80216d8:	009b      	lsls	r3, r3, #2
 80216da:	429a      	cmp	r2, r3
 80216dc:	d1eb      	bne.n	80216b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80216de:	697b      	ldr	r3, [r7, #20]
 80216e0:	2b80      	cmp	r3, #128	@ 0x80
 80216e2:	d105      	bne.n	80216f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80216e4:	4b38      	ldr	r3, [pc, #224]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 80216e6:	689b      	ldr	r3, [r3, #8]
 80216e8:	4a37      	ldr	r2, [pc, #220]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 80216ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80216ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	681b      	ldr	r3, [r3, #0]
 80216f4:	f003 0302 	and.w	r3, r3, #2
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d010      	beq.n	802171e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	689a      	ldr	r2, [r3, #8]
 8021700:	4b31      	ldr	r3, [pc, #196]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021702:	689b      	ldr	r3, [r3, #8]
 8021704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021708:	429a      	cmp	r2, r3
 802170a:	d208      	bcs.n	802171e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802170c:	4b2e      	ldr	r3, [pc, #184]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802170e:	689b      	ldr	r3, [r3, #8]
 8021710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	689b      	ldr	r3, [r3, #8]
 8021718:	492b      	ldr	r1, [pc, #172]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802171a:	4313      	orrs	r3, r2
 802171c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802171e:	4b29      	ldr	r3, [pc, #164]	@ (80217c4 <HAL_RCC_ClockConfig+0x25c>)
 8021720:	681b      	ldr	r3, [r3, #0]
 8021722:	f003 030f 	and.w	r3, r3, #15
 8021726:	683a      	ldr	r2, [r7, #0]
 8021728:	429a      	cmp	r2, r3
 802172a:	d210      	bcs.n	802174e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802172c:	4b25      	ldr	r3, [pc, #148]	@ (80217c4 <HAL_RCC_ClockConfig+0x25c>)
 802172e:	681b      	ldr	r3, [r3, #0]
 8021730:	f023 020f 	bic.w	r2, r3, #15
 8021734:	4923      	ldr	r1, [pc, #140]	@ (80217c4 <HAL_RCC_ClockConfig+0x25c>)
 8021736:	683b      	ldr	r3, [r7, #0]
 8021738:	4313      	orrs	r3, r2
 802173a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802173c:	4b21      	ldr	r3, [pc, #132]	@ (80217c4 <HAL_RCC_ClockConfig+0x25c>)
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	f003 030f 	and.w	r3, r3, #15
 8021744:	683a      	ldr	r2, [r7, #0]
 8021746:	429a      	cmp	r2, r3
 8021748:	d001      	beq.n	802174e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 802174a:	2301      	movs	r3, #1
 802174c:	e036      	b.n	80217bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	f003 0304 	and.w	r3, r3, #4
 8021756:	2b00      	cmp	r3, #0
 8021758:	d008      	beq.n	802176c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802175a:	4b1b      	ldr	r3, [pc, #108]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802175c:	689b      	ldr	r3, [r3, #8]
 802175e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	68db      	ldr	r3, [r3, #12]
 8021766:	4918      	ldr	r1, [pc, #96]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021768:	4313      	orrs	r3, r2
 802176a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	681b      	ldr	r3, [r3, #0]
 8021770:	f003 0308 	and.w	r3, r3, #8
 8021774:	2b00      	cmp	r3, #0
 8021776:	d009      	beq.n	802178c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021778:	4b13      	ldr	r3, [pc, #76]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 802177a:	689b      	ldr	r3, [r3, #8]
 802177c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	691b      	ldr	r3, [r3, #16]
 8021784:	00db      	lsls	r3, r3, #3
 8021786:	4910      	ldr	r1, [pc, #64]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021788:	4313      	orrs	r3, r2
 802178a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 802178c:	f000 f826 	bl	80217dc <HAL_RCC_GetSysClockFreq>
 8021790:	4602      	mov	r2, r0
 8021792:	4b0d      	ldr	r3, [pc, #52]	@ (80217c8 <HAL_RCC_ClockConfig+0x260>)
 8021794:	689b      	ldr	r3, [r3, #8]
 8021796:	091b      	lsrs	r3, r3, #4
 8021798:	f003 030f 	and.w	r3, r3, #15
 802179c:	490c      	ldr	r1, [pc, #48]	@ (80217d0 <HAL_RCC_ClockConfig+0x268>)
 802179e:	5ccb      	ldrb	r3, [r1, r3]
 80217a0:	f003 031f 	and.w	r3, r3, #31
 80217a4:	fa22 f303 	lsr.w	r3, r2, r3
 80217a8:	4a0a      	ldr	r2, [pc, #40]	@ (80217d4 <HAL_RCC_ClockConfig+0x26c>)
 80217aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80217ac:	4b0a      	ldr	r3, [pc, #40]	@ (80217d8 <HAL_RCC_ClockConfig+0x270>)
 80217ae:	681b      	ldr	r3, [r3, #0]
 80217b0:	4618      	mov	r0, r3
 80217b2:	f7ff f895 	bl	80208e0 <HAL_InitTick>
 80217b6:	4603      	mov	r3, r0
 80217b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80217ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80217bc:	4618      	mov	r0, r3
 80217be:	3718      	adds	r7, #24
 80217c0:	46bd      	mov	sp, r7
 80217c2:	bd80      	pop	{r7, pc}
 80217c4:	40022000 	.word	0x40022000
 80217c8:	40021000 	.word	0x40021000
 80217cc:	04c4b400 	.word	0x04c4b400
 80217d0:	08022b58 	.word	0x08022b58
 80217d4:	20000000 	.word	0x20000000
 80217d8:	20000004 	.word	0x20000004

080217dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80217dc:	b480      	push	{r7}
 80217de:	b089      	sub	sp, #36	@ 0x24
 80217e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80217e2:	2300      	movs	r3, #0
 80217e4:	61fb      	str	r3, [r7, #28]
 80217e6:	2300      	movs	r3, #0
 80217e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80217ea:	4b3e      	ldr	r3, [pc, #248]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80217ec:	689b      	ldr	r3, [r3, #8]
 80217ee:	f003 030c 	and.w	r3, r3, #12
 80217f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80217f4:	4b3b      	ldr	r3, [pc, #236]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80217f6:	68db      	ldr	r3, [r3, #12]
 80217f8:	f003 0303 	and.w	r3, r3, #3
 80217fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80217fe:	693b      	ldr	r3, [r7, #16]
 8021800:	2b00      	cmp	r3, #0
 8021802:	d005      	beq.n	8021810 <HAL_RCC_GetSysClockFreq+0x34>
 8021804:	693b      	ldr	r3, [r7, #16]
 8021806:	2b0c      	cmp	r3, #12
 8021808:	d121      	bne.n	802184e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 802180a:	68fb      	ldr	r3, [r7, #12]
 802180c:	2b01      	cmp	r3, #1
 802180e:	d11e      	bne.n	802184e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021810:	4b34      	ldr	r3, [pc, #208]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8021812:	681b      	ldr	r3, [r3, #0]
 8021814:	f003 0308 	and.w	r3, r3, #8
 8021818:	2b00      	cmp	r3, #0
 802181a:	d107      	bne.n	802182c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 802181c:	4b31      	ldr	r3, [pc, #196]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 802181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021822:	0a1b      	lsrs	r3, r3, #8
 8021824:	f003 030f 	and.w	r3, r3, #15
 8021828:	61fb      	str	r3, [r7, #28]
 802182a:	e005      	b.n	8021838 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 802182c:	4b2d      	ldr	r3, [pc, #180]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 802182e:	681b      	ldr	r3, [r3, #0]
 8021830:	091b      	lsrs	r3, r3, #4
 8021832:	f003 030f 	and.w	r3, r3, #15
 8021836:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8021838:	4a2b      	ldr	r2, [pc, #172]	@ (80218e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 802183a:	69fb      	ldr	r3, [r7, #28]
 802183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021840:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021842:	693b      	ldr	r3, [r7, #16]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d10d      	bne.n	8021864 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8021848:	69fb      	ldr	r3, [r7, #28]
 802184a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 802184c:	e00a      	b.n	8021864 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 802184e:	693b      	ldr	r3, [r7, #16]
 8021850:	2b04      	cmp	r3, #4
 8021852:	d102      	bne.n	802185a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8021854:	4b25      	ldr	r3, [pc, #148]	@ (80218ec <HAL_RCC_GetSysClockFreq+0x110>)
 8021856:	61bb      	str	r3, [r7, #24]
 8021858:	e004      	b.n	8021864 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 802185a:	693b      	ldr	r3, [r7, #16]
 802185c:	2b08      	cmp	r3, #8
 802185e:	d101      	bne.n	8021864 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8021860:	4b23      	ldr	r3, [pc, #140]	@ (80218f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8021862:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8021864:	693b      	ldr	r3, [r7, #16]
 8021866:	2b0c      	cmp	r3, #12
 8021868:	d134      	bne.n	80218d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802186a:	4b1e      	ldr	r3, [pc, #120]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 802186c:	68db      	ldr	r3, [r3, #12]
 802186e:	f003 0303 	and.w	r3, r3, #3
 8021872:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8021874:	68bb      	ldr	r3, [r7, #8]
 8021876:	2b02      	cmp	r3, #2
 8021878:	d003      	beq.n	8021882 <HAL_RCC_GetSysClockFreq+0xa6>
 802187a:	68bb      	ldr	r3, [r7, #8]
 802187c:	2b03      	cmp	r3, #3
 802187e:	d003      	beq.n	8021888 <HAL_RCC_GetSysClockFreq+0xac>
 8021880:	e005      	b.n	802188e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8021882:	4b1a      	ldr	r3, [pc, #104]	@ (80218ec <HAL_RCC_GetSysClockFreq+0x110>)
 8021884:	617b      	str	r3, [r7, #20]
      break;
 8021886:	e005      	b.n	8021894 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8021888:	4b19      	ldr	r3, [pc, #100]	@ (80218f0 <HAL_RCC_GetSysClockFreq+0x114>)
 802188a:	617b      	str	r3, [r7, #20]
      break;
 802188c:	e002      	b.n	8021894 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 802188e:	69fb      	ldr	r3, [r7, #28]
 8021890:	617b      	str	r3, [r7, #20]
      break;
 8021892:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021894:	4b13      	ldr	r3, [pc, #76]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8021896:	68db      	ldr	r3, [r3, #12]
 8021898:	091b      	lsrs	r3, r3, #4
 802189a:	f003 030f 	and.w	r3, r3, #15
 802189e:	3301      	adds	r3, #1
 80218a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80218a2:	4b10      	ldr	r3, [pc, #64]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80218a4:	68db      	ldr	r3, [r3, #12]
 80218a6:	0a1b      	lsrs	r3, r3, #8
 80218a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80218ac:	697a      	ldr	r2, [r7, #20]
 80218ae:	fb03 f202 	mul.w	r2, r3, r2
 80218b2:	687b      	ldr	r3, [r7, #4]
 80218b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80218b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80218ba:	4b0a      	ldr	r3, [pc, #40]	@ (80218e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80218bc:	68db      	ldr	r3, [r3, #12]
 80218be:	0e5b      	lsrs	r3, r3, #25
 80218c0:	f003 0303 	and.w	r3, r3, #3
 80218c4:	3301      	adds	r3, #1
 80218c6:	005b      	lsls	r3, r3, #1
 80218c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80218ca:	697a      	ldr	r2, [r7, #20]
 80218cc:	683b      	ldr	r3, [r7, #0]
 80218ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80218d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80218d4:	69bb      	ldr	r3, [r7, #24]
}
 80218d6:	4618      	mov	r0, r3
 80218d8:	3724      	adds	r7, #36	@ 0x24
 80218da:	46bd      	mov	sp, r7
 80218dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218e0:	4770      	bx	lr
 80218e2:	bf00      	nop
 80218e4:	40021000 	.word	0x40021000
 80218e8:	08022b68 	.word	0x08022b68
 80218ec:	00f42400 	.word	0x00f42400
 80218f0:	007a1200 	.word	0x007a1200

080218f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80218f4:	b580      	push	{r7, lr}
 80218f6:	b086      	sub	sp, #24
 80218f8:	af00      	add	r7, sp, #0
 80218fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80218fc:	2300      	movs	r3, #0
 80218fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021900:	4b27      	ldr	r3, [pc, #156]	@ (80219a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021908:	2b00      	cmp	r3, #0
 802190a:	d003      	beq.n	8021914 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 802190c:	f7ff f94e 	bl	8020bac <HAL_PWREx_GetVoltageRange>
 8021910:	6178      	str	r0, [r7, #20]
 8021912:	e014      	b.n	802193e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8021914:	4b22      	ldr	r3, [pc, #136]	@ (80219a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021918:	4a21      	ldr	r2, [pc, #132]	@ (80219a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802191a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802191e:	6593      	str	r3, [r2, #88]	@ 0x58
 8021920:	4b1f      	ldr	r3, [pc, #124]	@ (80219a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021928:	60fb      	str	r3, [r7, #12]
 802192a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 802192c:	f7ff f93e 	bl	8020bac <HAL_PWREx_GetVoltageRange>
 8021930:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8021932:	4b1b      	ldr	r3, [pc, #108]	@ (80219a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021936:	4a1a      	ldr	r2, [pc, #104]	@ (80219a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802193c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 802193e:	697b      	ldr	r3, [r7, #20]
 8021940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021944:	d10b      	bne.n	802195e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	2b80      	cmp	r3, #128	@ 0x80
 802194a:	d913      	bls.n	8021974 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 802194c:	687b      	ldr	r3, [r7, #4]
 802194e:	2ba0      	cmp	r3, #160	@ 0xa0
 8021950:	d902      	bls.n	8021958 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8021952:	2302      	movs	r3, #2
 8021954:	613b      	str	r3, [r7, #16]
 8021956:	e00d      	b.n	8021974 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021958:	2301      	movs	r3, #1
 802195a:	613b      	str	r3, [r7, #16]
 802195c:	e00a      	b.n	8021974 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 802195e:	687b      	ldr	r3, [r7, #4]
 8021960:	2b7f      	cmp	r3, #127	@ 0x7f
 8021962:	d902      	bls.n	802196a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8021964:	2302      	movs	r3, #2
 8021966:	613b      	str	r3, [r7, #16]
 8021968:	e004      	b.n	8021974 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	2b70      	cmp	r3, #112	@ 0x70
 802196e:	d101      	bne.n	8021974 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021970:	2301      	movs	r3, #1
 8021972:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8021974:	4b0b      	ldr	r3, [pc, #44]	@ (80219a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	f023 020f 	bic.w	r2, r3, #15
 802197c:	4909      	ldr	r1, [pc, #36]	@ (80219a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802197e:	693b      	ldr	r3, [r7, #16]
 8021980:	4313      	orrs	r3, r2
 8021982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8021984:	4b07      	ldr	r3, [pc, #28]	@ (80219a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8021986:	681b      	ldr	r3, [r3, #0]
 8021988:	f003 030f 	and.w	r3, r3, #15
 802198c:	693a      	ldr	r2, [r7, #16]
 802198e:	429a      	cmp	r2, r3
 8021990:	d001      	beq.n	8021996 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8021992:	2301      	movs	r3, #1
 8021994:	e000      	b.n	8021998 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8021996:	2300      	movs	r3, #0
}
 8021998:	4618      	mov	r0, r3
 802199a:	3718      	adds	r7, #24
 802199c:	46bd      	mov	sp, r7
 802199e:	bd80      	pop	{r7, pc}
 80219a0:	40021000 	.word	0x40021000
 80219a4:	40022000 	.word	0x40022000

080219a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80219a8:	b480      	push	{r7}
 80219aa:	b087      	sub	sp, #28
 80219ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80219ae:	4b2d      	ldr	r3, [pc, #180]	@ (8021a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80219b0:	68db      	ldr	r3, [r3, #12]
 80219b2:	f003 0303 	and.w	r3, r3, #3
 80219b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80219b8:	68fb      	ldr	r3, [r7, #12]
 80219ba:	2b03      	cmp	r3, #3
 80219bc:	d00b      	beq.n	80219d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80219be:	68fb      	ldr	r3, [r7, #12]
 80219c0:	2b03      	cmp	r3, #3
 80219c2:	d825      	bhi.n	8021a10 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80219c4:	68fb      	ldr	r3, [r7, #12]
 80219c6:	2b01      	cmp	r3, #1
 80219c8:	d008      	beq.n	80219dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80219ca:	68fb      	ldr	r3, [r7, #12]
 80219cc:	2b02      	cmp	r3, #2
 80219ce:	d11f      	bne.n	8021a10 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80219d0:	4b25      	ldr	r3, [pc, #148]	@ (8021a68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80219d2:	613b      	str	r3, [r7, #16]
    break;
 80219d4:	e01f      	b.n	8021a16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80219d6:	4b25      	ldr	r3, [pc, #148]	@ (8021a6c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80219d8:	613b      	str	r3, [r7, #16]
    break;
 80219da:	e01c      	b.n	8021a16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80219dc:	4b21      	ldr	r3, [pc, #132]	@ (8021a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	f003 0308 	and.w	r3, r3, #8
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d107      	bne.n	80219f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80219e8:	4b1e      	ldr	r3, [pc, #120]	@ (8021a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80219ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80219ee:	0a1b      	lsrs	r3, r3, #8
 80219f0:	f003 030f 	and.w	r3, r3, #15
 80219f4:	617b      	str	r3, [r7, #20]
 80219f6:	e005      	b.n	8021a04 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80219f8:	4b1a      	ldr	r3, [pc, #104]	@ (8021a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	091b      	lsrs	r3, r3, #4
 80219fe:	f003 030f 	and.w	r3, r3, #15
 8021a02:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8021a04:	4a1a      	ldr	r2, [pc, #104]	@ (8021a70 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8021a06:	697b      	ldr	r3, [r7, #20]
 8021a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021a0c:	613b      	str	r3, [r7, #16]
    break;
 8021a0e:	e002      	b.n	8021a16 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8021a10:	2300      	movs	r3, #0
 8021a12:	613b      	str	r3, [r7, #16]
    break;
 8021a14:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021a16:	4b13      	ldr	r3, [pc, #76]	@ (8021a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a18:	68db      	ldr	r3, [r3, #12]
 8021a1a:	091b      	lsrs	r3, r3, #4
 8021a1c:	f003 030f 	and.w	r3, r3, #15
 8021a20:	3301      	adds	r3, #1
 8021a22:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021a24:	4b0f      	ldr	r3, [pc, #60]	@ (8021a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a26:	68db      	ldr	r3, [r3, #12]
 8021a28:	0a1b      	lsrs	r3, r3, #8
 8021a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021a2e:	693a      	ldr	r2, [r7, #16]
 8021a30:	fb03 f202 	mul.w	r2, r3, r2
 8021a34:	68bb      	ldr	r3, [r7, #8]
 8021a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8021a3a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021a3c:	4b09      	ldr	r3, [pc, #36]	@ (8021a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021a3e:	68db      	ldr	r3, [r3, #12]
 8021a40:	0e5b      	lsrs	r3, r3, #25
 8021a42:	f003 0303 	and.w	r3, r3, #3
 8021a46:	3301      	adds	r3, #1
 8021a48:	005b      	lsls	r3, r3, #1
 8021a4a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8021a4c:	693a      	ldr	r2, [r7, #16]
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8021a54:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8021a56:	683b      	ldr	r3, [r7, #0]
}
 8021a58:	4618      	mov	r0, r3
 8021a5a:	371c      	adds	r7, #28
 8021a5c:	46bd      	mov	sp, r7
 8021a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a62:	4770      	bx	lr
 8021a64:	40021000 	.word	0x40021000
 8021a68:	00f42400 	.word	0x00f42400
 8021a6c:	007a1200 	.word	0x007a1200
 8021a70:	08022b68 	.word	0x08022b68

08021a74 <arm_sub_f32>:
 8021a74:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8021a78:	b4f0      	push	{r4, r5, r6, r7}
 8021a7a:	d033      	beq.n	8021ae4 <arm_sub_f32+0x70>
 8021a7c:	f100 0610 	add.w	r6, r0, #16
 8021a80:	f101 0510 	add.w	r5, r1, #16
 8021a84:	f102 0410 	add.w	r4, r2, #16
 8021a88:	4667      	mov	r7, ip
 8021a8a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8021a8e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8021a92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021a96:	3f01      	subs	r7, #1
 8021a98:	ed44 7a04 	vstr	s15, [r4, #-16]
 8021a9c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8021aa0:	ed56 7a03 	vldr	s15, [r6, #-12]
 8021aa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021aa8:	f106 0610 	add.w	r6, r6, #16
 8021aac:	ed44 7a03 	vstr	s15, [r4, #-12]
 8021ab0:	ed15 7a02 	vldr	s14, [r5, #-8]
 8021ab4:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8021ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021abc:	f105 0510 	add.w	r5, r5, #16
 8021ac0:	ed44 7a02 	vstr	s15, [r4, #-8]
 8021ac4:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8021ac8:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8021acc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021ad0:	f104 0410 	add.w	r4, r4, #16
 8021ad4:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8021ad8:	d1d7      	bne.n	8021a8a <arm_sub_f32+0x16>
 8021ada:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8021ade:	4420      	add	r0, r4
 8021ae0:	4421      	add	r1, r4
 8021ae2:	4422      	add	r2, r4
 8021ae4:	f013 0303 	ands.w	r3, r3, #3
 8021ae8:	d01b      	beq.n	8021b22 <arm_sub_f32+0xae>
 8021aea:	edd0 7a00 	vldr	s15, [r0]
 8021aee:	ed91 7a00 	vldr	s14, [r1]
 8021af2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021af6:	3b01      	subs	r3, #1
 8021af8:	edc2 7a00 	vstr	s15, [r2]
 8021afc:	d011      	beq.n	8021b22 <arm_sub_f32+0xae>
 8021afe:	edd0 7a01 	vldr	s15, [r0, #4]
 8021b02:	ed91 7a01 	vldr	s14, [r1, #4]
 8021b06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b0a:	2b01      	cmp	r3, #1
 8021b0c:	edc2 7a01 	vstr	s15, [r2, #4]
 8021b10:	d007      	beq.n	8021b22 <arm_sub_f32+0xae>
 8021b12:	edd0 7a02 	vldr	s15, [r0, #8]
 8021b16:	ed91 7a02 	vldr	s14, [r1, #8]
 8021b1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b1e:	edc2 7a02 	vstr	s15, [r2, #8]
 8021b22:	bcf0      	pop	{r4, r5, r6, r7}
 8021b24:	4770      	bx	lr
 8021b26:	bf00      	nop

08021b28 <arm_mult_f32>:
 8021b28:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8021b2c:	b4f0      	push	{r4, r5, r6, r7}
 8021b2e:	d033      	beq.n	8021b98 <arm_mult_f32+0x70>
 8021b30:	f100 0610 	add.w	r6, r0, #16
 8021b34:	f101 0510 	add.w	r5, r1, #16
 8021b38:	f102 0410 	add.w	r4, r2, #16
 8021b3c:	4667      	mov	r7, ip
 8021b3e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8021b42:	ed56 7a04 	vldr	s15, [r6, #-16]
 8021b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021b4a:	3f01      	subs	r7, #1
 8021b4c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8021b50:	ed15 7a03 	vldr	s14, [r5, #-12]
 8021b54:	ed56 7a03 	vldr	s15, [r6, #-12]
 8021b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021b5c:	f106 0610 	add.w	r6, r6, #16
 8021b60:	ed44 7a03 	vstr	s15, [r4, #-12]
 8021b64:	ed15 7a02 	vldr	s14, [r5, #-8]
 8021b68:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8021b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021b70:	f105 0510 	add.w	r5, r5, #16
 8021b74:	ed44 7a02 	vstr	s15, [r4, #-8]
 8021b78:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8021b7c:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8021b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021b84:	f104 0410 	add.w	r4, r4, #16
 8021b88:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8021b8c:	d1d7      	bne.n	8021b3e <arm_mult_f32+0x16>
 8021b8e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8021b92:	4420      	add	r0, r4
 8021b94:	4421      	add	r1, r4
 8021b96:	4422      	add	r2, r4
 8021b98:	f013 0303 	ands.w	r3, r3, #3
 8021b9c:	d01b      	beq.n	8021bd6 <arm_mult_f32+0xae>
 8021b9e:	edd1 7a00 	vldr	s15, [r1]
 8021ba2:	ed90 7a00 	vldr	s14, [r0]
 8021ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021baa:	3b01      	subs	r3, #1
 8021bac:	edc2 7a00 	vstr	s15, [r2]
 8021bb0:	d011      	beq.n	8021bd6 <arm_mult_f32+0xae>
 8021bb2:	edd0 7a01 	vldr	s15, [r0, #4]
 8021bb6:	ed91 7a01 	vldr	s14, [r1, #4]
 8021bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021bbe:	2b01      	cmp	r3, #1
 8021bc0:	edc2 7a01 	vstr	s15, [r2, #4]
 8021bc4:	d007      	beq.n	8021bd6 <arm_mult_f32+0xae>
 8021bc6:	edd0 7a02 	vldr	s15, [r0, #8]
 8021bca:	ed91 7a02 	vldr	s14, [r1, #8]
 8021bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021bd2:	edc2 7a02 	vstr	s15, [r2, #8]
 8021bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8021bd8:	4770      	bx	lr
 8021bda:	bf00      	nop

08021bdc <arm_add_f32>:
 8021bdc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8021be0:	b4f0      	push	{r4, r5, r6, r7}
 8021be2:	d033      	beq.n	8021c4c <arm_add_f32+0x70>
 8021be4:	f100 0610 	add.w	r6, r0, #16
 8021be8:	f101 0510 	add.w	r5, r1, #16
 8021bec:	f102 0410 	add.w	r4, r2, #16
 8021bf0:	4667      	mov	r7, ip
 8021bf2:	ed15 7a04 	vldr	s14, [r5, #-16]
 8021bf6:	ed56 7a04 	vldr	s15, [r6, #-16]
 8021bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021bfe:	3f01      	subs	r7, #1
 8021c00:	ed44 7a04 	vstr	s15, [r4, #-16]
 8021c04:	ed15 7a03 	vldr	s14, [r5, #-12]
 8021c08:	ed56 7a03 	vldr	s15, [r6, #-12]
 8021c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c10:	f106 0610 	add.w	r6, r6, #16
 8021c14:	ed44 7a03 	vstr	s15, [r4, #-12]
 8021c18:	ed15 7a02 	vldr	s14, [r5, #-8]
 8021c1c:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8021c20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c24:	f105 0510 	add.w	r5, r5, #16
 8021c28:	ed44 7a02 	vstr	s15, [r4, #-8]
 8021c2c:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8021c30:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8021c34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c38:	f104 0410 	add.w	r4, r4, #16
 8021c3c:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8021c40:	d1d7      	bne.n	8021bf2 <arm_add_f32+0x16>
 8021c42:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8021c46:	4420      	add	r0, r4
 8021c48:	4421      	add	r1, r4
 8021c4a:	4422      	add	r2, r4
 8021c4c:	f013 0303 	ands.w	r3, r3, #3
 8021c50:	d01b      	beq.n	8021c8a <arm_add_f32+0xae>
 8021c52:	edd1 7a00 	vldr	s15, [r1]
 8021c56:	ed90 7a00 	vldr	s14, [r0]
 8021c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c5e:	3b01      	subs	r3, #1
 8021c60:	edc2 7a00 	vstr	s15, [r2]
 8021c64:	d011      	beq.n	8021c8a <arm_add_f32+0xae>
 8021c66:	edd0 7a01 	vldr	s15, [r0, #4]
 8021c6a:	ed91 7a01 	vldr	s14, [r1, #4]
 8021c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c72:	2b01      	cmp	r3, #1
 8021c74:	edc2 7a01 	vstr	s15, [r2, #4]
 8021c78:	d007      	beq.n	8021c8a <arm_add_f32+0xae>
 8021c7a:	edd0 7a02 	vldr	s15, [r0, #8]
 8021c7e:	ed91 7a02 	vldr	s14, [r1, #8]
 8021c82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c86:	edc2 7a02 	vstr	s15, [r2, #8]
 8021c8a:	bcf0      	pop	{r4, r5, r6, r7}
 8021c8c:	4770      	bx	lr
 8021c8e:	bf00      	nop

08021c90 <malloc>:
 8021c90:	4b02      	ldr	r3, [pc, #8]	@ (8021c9c <malloc+0xc>)
 8021c92:	4601      	mov	r1, r0
 8021c94:	6818      	ldr	r0, [r3, #0]
 8021c96:	f000 b825 	b.w	8021ce4 <_malloc_r>
 8021c9a:	bf00      	nop
 8021c9c:	20000018 	.word	0x20000018

08021ca0 <sbrk_aligned>:
 8021ca0:	b570      	push	{r4, r5, r6, lr}
 8021ca2:	4e0f      	ldr	r6, [pc, #60]	@ (8021ce0 <sbrk_aligned+0x40>)
 8021ca4:	460c      	mov	r4, r1
 8021ca6:	6831      	ldr	r1, [r6, #0]
 8021ca8:	4605      	mov	r5, r0
 8021caa:	b911      	cbnz	r1, 8021cb2 <sbrk_aligned+0x12>
 8021cac:	f000 faba 	bl	8022224 <_sbrk_r>
 8021cb0:	6030      	str	r0, [r6, #0]
 8021cb2:	4621      	mov	r1, r4
 8021cb4:	4628      	mov	r0, r5
 8021cb6:	f000 fab5 	bl	8022224 <_sbrk_r>
 8021cba:	1c43      	adds	r3, r0, #1
 8021cbc:	d103      	bne.n	8021cc6 <sbrk_aligned+0x26>
 8021cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8021cc2:	4620      	mov	r0, r4
 8021cc4:	bd70      	pop	{r4, r5, r6, pc}
 8021cc6:	1cc4      	adds	r4, r0, #3
 8021cc8:	f024 0403 	bic.w	r4, r4, #3
 8021ccc:	42a0      	cmp	r0, r4
 8021cce:	d0f8      	beq.n	8021cc2 <sbrk_aligned+0x22>
 8021cd0:	1a21      	subs	r1, r4, r0
 8021cd2:	4628      	mov	r0, r5
 8021cd4:	f000 faa6 	bl	8022224 <_sbrk_r>
 8021cd8:	3001      	adds	r0, #1
 8021cda:	d1f2      	bne.n	8021cc2 <sbrk_aligned+0x22>
 8021cdc:	e7ef      	b.n	8021cbe <sbrk_aligned+0x1e>
 8021cde:	bf00      	nop
 8021ce0:	2000008c 	.word	0x2000008c

08021ce4 <_malloc_r>:
 8021ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ce8:	1ccd      	adds	r5, r1, #3
 8021cea:	f025 0503 	bic.w	r5, r5, #3
 8021cee:	3508      	adds	r5, #8
 8021cf0:	2d0c      	cmp	r5, #12
 8021cf2:	bf38      	it	cc
 8021cf4:	250c      	movcc	r5, #12
 8021cf6:	2d00      	cmp	r5, #0
 8021cf8:	4606      	mov	r6, r0
 8021cfa:	db01      	blt.n	8021d00 <_malloc_r+0x1c>
 8021cfc:	42a9      	cmp	r1, r5
 8021cfe:	d904      	bls.n	8021d0a <_malloc_r+0x26>
 8021d00:	230c      	movs	r3, #12
 8021d02:	6033      	str	r3, [r6, #0]
 8021d04:	2000      	movs	r0, #0
 8021d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021de0 <_malloc_r+0xfc>
 8021d0e:	f000 f869 	bl	8021de4 <__malloc_lock>
 8021d12:	f8d8 3000 	ldr.w	r3, [r8]
 8021d16:	461c      	mov	r4, r3
 8021d18:	bb44      	cbnz	r4, 8021d6c <_malloc_r+0x88>
 8021d1a:	4629      	mov	r1, r5
 8021d1c:	4630      	mov	r0, r6
 8021d1e:	f7ff ffbf 	bl	8021ca0 <sbrk_aligned>
 8021d22:	1c43      	adds	r3, r0, #1
 8021d24:	4604      	mov	r4, r0
 8021d26:	d158      	bne.n	8021dda <_malloc_r+0xf6>
 8021d28:	f8d8 4000 	ldr.w	r4, [r8]
 8021d2c:	4627      	mov	r7, r4
 8021d2e:	2f00      	cmp	r7, #0
 8021d30:	d143      	bne.n	8021dba <_malloc_r+0xd6>
 8021d32:	2c00      	cmp	r4, #0
 8021d34:	d04b      	beq.n	8021dce <_malloc_r+0xea>
 8021d36:	6823      	ldr	r3, [r4, #0]
 8021d38:	4639      	mov	r1, r7
 8021d3a:	4630      	mov	r0, r6
 8021d3c:	eb04 0903 	add.w	r9, r4, r3
 8021d40:	f000 fa70 	bl	8022224 <_sbrk_r>
 8021d44:	4581      	cmp	r9, r0
 8021d46:	d142      	bne.n	8021dce <_malloc_r+0xea>
 8021d48:	6821      	ldr	r1, [r4, #0]
 8021d4a:	1a6d      	subs	r5, r5, r1
 8021d4c:	4629      	mov	r1, r5
 8021d4e:	4630      	mov	r0, r6
 8021d50:	f7ff ffa6 	bl	8021ca0 <sbrk_aligned>
 8021d54:	3001      	adds	r0, #1
 8021d56:	d03a      	beq.n	8021dce <_malloc_r+0xea>
 8021d58:	6823      	ldr	r3, [r4, #0]
 8021d5a:	442b      	add	r3, r5
 8021d5c:	6023      	str	r3, [r4, #0]
 8021d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8021d62:	685a      	ldr	r2, [r3, #4]
 8021d64:	bb62      	cbnz	r2, 8021dc0 <_malloc_r+0xdc>
 8021d66:	f8c8 7000 	str.w	r7, [r8]
 8021d6a:	e00f      	b.n	8021d8c <_malloc_r+0xa8>
 8021d6c:	6822      	ldr	r2, [r4, #0]
 8021d6e:	1b52      	subs	r2, r2, r5
 8021d70:	d420      	bmi.n	8021db4 <_malloc_r+0xd0>
 8021d72:	2a0b      	cmp	r2, #11
 8021d74:	d917      	bls.n	8021da6 <_malloc_r+0xc2>
 8021d76:	1961      	adds	r1, r4, r5
 8021d78:	42a3      	cmp	r3, r4
 8021d7a:	6025      	str	r5, [r4, #0]
 8021d7c:	bf18      	it	ne
 8021d7e:	6059      	strne	r1, [r3, #4]
 8021d80:	6863      	ldr	r3, [r4, #4]
 8021d82:	bf08      	it	eq
 8021d84:	f8c8 1000 	streq.w	r1, [r8]
 8021d88:	5162      	str	r2, [r4, r5]
 8021d8a:	604b      	str	r3, [r1, #4]
 8021d8c:	4630      	mov	r0, r6
 8021d8e:	f000 f82f 	bl	8021df0 <__malloc_unlock>
 8021d92:	f104 000b 	add.w	r0, r4, #11
 8021d96:	1d23      	adds	r3, r4, #4
 8021d98:	f020 0007 	bic.w	r0, r0, #7
 8021d9c:	1ac2      	subs	r2, r0, r3
 8021d9e:	bf1c      	itt	ne
 8021da0:	1a1b      	subne	r3, r3, r0
 8021da2:	50a3      	strne	r3, [r4, r2]
 8021da4:	e7af      	b.n	8021d06 <_malloc_r+0x22>
 8021da6:	6862      	ldr	r2, [r4, #4]
 8021da8:	42a3      	cmp	r3, r4
 8021daa:	bf0c      	ite	eq
 8021dac:	f8c8 2000 	streq.w	r2, [r8]
 8021db0:	605a      	strne	r2, [r3, #4]
 8021db2:	e7eb      	b.n	8021d8c <_malloc_r+0xa8>
 8021db4:	4623      	mov	r3, r4
 8021db6:	6864      	ldr	r4, [r4, #4]
 8021db8:	e7ae      	b.n	8021d18 <_malloc_r+0x34>
 8021dba:	463c      	mov	r4, r7
 8021dbc:	687f      	ldr	r7, [r7, #4]
 8021dbe:	e7b6      	b.n	8021d2e <_malloc_r+0x4a>
 8021dc0:	461a      	mov	r2, r3
 8021dc2:	685b      	ldr	r3, [r3, #4]
 8021dc4:	42a3      	cmp	r3, r4
 8021dc6:	d1fb      	bne.n	8021dc0 <_malloc_r+0xdc>
 8021dc8:	2300      	movs	r3, #0
 8021dca:	6053      	str	r3, [r2, #4]
 8021dcc:	e7de      	b.n	8021d8c <_malloc_r+0xa8>
 8021dce:	230c      	movs	r3, #12
 8021dd0:	6033      	str	r3, [r6, #0]
 8021dd2:	4630      	mov	r0, r6
 8021dd4:	f000 f80c 	bl	8021df0 <__malloc_unlock>
 8021dd8:	e794      	b.n	8021d04 <_malloc_r+0x20>
 8021dda:	6005      	str	r5, [r0, #0]
 8021ddc:	e7d6      	b.n	8021d8c <_malloc_r+0xa8>
 8021dde:	bf00      	nop
 8021de0:	20000090 	.word	0x20000090

08021de4 <__malloc_lock>:
 8021de4:	4801      	ldr	r0, [pc, #4]	@ (8021dec <__malloc_lock+0x8>)
 8021de6:	f000 ba6a 	b.w	80222be <__retarget_lock_acquire_recursive>
 8021dea:	bf00      	nop
 8021dec:	200001d4 	.word	0x200001d4

08021df0 <__malloc_unlock>:
 8021df0:	4801      	ldr	r0, [pc, #4]	@ (8021df8 <__malloc_unlock+0x8>)
 8021df2:	f000 ba65 	b.w	80222c0 <__retarget_lock_release_recursive>
 8021df6:	bf00      	nop
 8021df8:	200001d4 	.word	0x200001d4

08021dfc <__sflush_r>:
 8021dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e04:	0716      	lsls	r6, r2, #28
 8021e06:	4605      	mov	r5, r0
 8021e08:	460c      	mov	r4, r1
 8021e0a:	d454      	bmi.n	8021eb6 <__sflush_r+0xba>
 8021e0c:	684b      	ldr	r3, [r1, #4]
 8021e0e:	2b00      	cmp	r3, #0
 8021e10:	dc02      	bgt.n	8021e18 <__sflush_r+0x1c>
 8021e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	dd48      	ble.n	8021eaa <__sflush_r+0xae>
 8021e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021e1a:	2e00      	cmp	r6, #0
 8021e1c:	d045      	beq.n	8021eaa <__sflush_r+0xae>
 8021e1e:	2300      	movs	r3, #0
 8021e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021e24:	682f      	ldr	r7, [r5, #0]
 8021e26:	6a21      	ldr	r1, [r4, #32]
 8021e28:	602b      	str	r3, [r5, #0]
 8021e2a:	d030      	beq.n	8021e8e <__sflush_r+0x92>
 8021e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021e2e:	89a3      	ldrh	r3, [r4, #12]
 8021e30:	0759      	lsls	r1, r3, #29
 8021e32:	d505      	bpl.n	8021e40 <__sflush_r+0x44>
 8021e34:	6863      	ldr	r3, [r4, #4]
 8021e36:	1ad2      	subs	r2, r2, r3
 8021e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021e3a:	b10b      	cbz	r3, 8021e40 <__sflush_r+0x44>
 8021e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021e3e:	1ad2      	subs	r2, r2, r3
 8021e40:	2300      	movs	r3, #0
 8021e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021e44:	6a21      	ldr	r1, [r4, #32]
 8021e46:	4628      	mov	r0, r5
 8021e48:	47b0      	blx	r6
 8021e4a:	1c43      	adds	r3, r0, #1
 8021e4c:	89a3      	ldrh	r3, [r4, #12]
 8021e4e:	d106      	bne.n	8021e5e <__sflush_r+0x62>
 8021e50:	6829      	ldr	r1, [r5, #0]
 8021e52:	291d      	cmp	r1, #29
 8021e54:	d82b      	bhi.n	8021eae <__sflush_r+0xb2>
 8021e56:	4a2a      	ldr	r2, [pc, #168]	@ (8021f00 <__sflush_r+0x104>)
 8021e58:	410a      	asrs	r2, r1
 8021e5a:	07d6      	lsls	r6, r2, #31
 8021e5c:	d427      	bmi.n	8021eae <__sflush_r+0xb2>
 8021e5e:	2200      	movs	r2, #0
 8021e60:	6062      	str	r2, [r4, #4]
 8021e62:	04d9      	lsls	r1, r3, #19
 8021e64:	6922      	ldr	r2, [r4, #16]
 8021e66:	6022      	str	r2, [r4, #0]
 8021e68:	d504      	bpl.n	8021e74 <__sflush_r+0x78>
 8021e6a:	1c42      	adds	r2, r0, #1
 8021e6c:	d101      	bne.n	8021e72 <__sflush_r+0x76>
 8021e6e:	682b      	ldr	r3, [r5, #0]
 8021e70:	b903      	cbnz	r3, 8021e74 <__sflush_r+0x78>
 8021e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8021e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021e76:	602f      	str	r7, [r5, #0]
 8021e78:	b1b9      	cbz	r1, 8021eaa <__sflush_r+0xae>
 8021e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021e7e:	4299      	cmp	r1, r3
 8021e80:	d002      	beq.n	8021e88 <__sflush_r+0x8c>
 8021e82:	4628      	mov	r0, r5
 8021e84:	f000 fa1e 	bl	80222c4 <_free_r>
 8021e88:	2300      	movs	r3, #0
 8021e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8021e8c:	e00d      	b.n	8021eaa <__sflush_r+0xae>
 8021e8e:	2301      	movs	r3, #1
 8021e90:	4628      	mov	r0, r5
 8021e92:	47b0      	blx	r6
 8021e94:	4602      	mov	r2, r0
 8021e96:	1c50      	adds	r0, r2, #1
 8021e98:	d1c9      	bne.n	8021e2e <__sflush_r+0x32>
 8021e9a:	682b      	ldr	r3, [r5, #0]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	d0c6      	beq.n	8021e2e <__sflush_r+0x32>
 8021ea0:	2b1d      	cmp	r3, #29
 8021ea2:	d001      	beq.n	8021ea8 <__sflush_r+0xac>
 8021ea4:	2b16      	cmp	r3, #22
 8021ea6:	d11e      	bne.n	8021ee6 <__sflush_r+0xea>
 8021ea8:	602f      	str	r7, [r5, #0]
 8021eaa:	2000      	movs	r0, #0
 8021eac:	e022      	b.n	8021ef4 <__sflush_r+0xf8>
 8021eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021eb2:	b21b      	sxth	r3, r3
 8021eb4:	e01b      	b.n	8021eee <__sflush_r+0xf2>
 8021eb6:	690f      	ldr	r7, [r1, #16]
 8021eb8:	2f00      	cmp	r7, #0
 8021eba:	d0f6      	beq.n	8021eaa <__sflush_r+0xae>
 8021ebc:	0793      	lsls	r3, r2, #30
 8021ebe:	680e      	ldr	r6, [r1, #0]
 8021ec0:	bf08      	it	eq
 8021ec2:	694b      	ldreq	r3, [r1, #20]
 8021ec4:	600f      	str	r7, [r1, #0]
 8021ec6:	bf18      	it	ne
 8021ec8:	2300      	movne	r3, #0
 8021eca:	eba6 0807 	sub.w	r8, r6, r7
 8021ece:	608b      	str	r3, [r1, #8]
 8021ed0:	f1b8 0f00 	cmp.w	r8, #0
 8021ed4:	dde9      	ble.n	8021eaa <__sflush_r+0xae>
 8021ed6:	6a21      	ldr	r1, [r4, #32]
 8021ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021eda:	4643      	mov	r3, r8
 8021edc:	463a      	mov	r2, r7
 8021ede:	4628      	mov	r0, r5
 8021ee0:	47b0      	blx	r6
 8021ee2:	2800      	cmp	r0, #0
 8021ee4:	dc08      	bgt.n	8021ef8 <__sflush_r+0xfc>
 8021ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021eee:	81a3      	strh	r3, [r4, #12]
 8021ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8021ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ef8:	4407      	add	r7, r0
 8021efa:	eba8 0800 	sub.w	r8, r8, r0
 8021efe:	e7e7      	b.n	8021ed0 <__sflush_r+0xd4>
 8021f00:	dfbffffe 	.word	0xdfbffffe

08021f04 <_fflush_r>:
 8021f04:	b538      	push	{r3, r4, r5, lr}
 8021f06:	690b      	ldr	r3, [r1, #16]
 8021f08:	4605      	mov	r5, r0
 8021f0a:	460c      	mov	r4, r1
 8021f0c:	b913      	cbnz	r3, 8021f14 <_fflush_r+0x10>
 8021f0e:	2500      	movs	r5, #0
 8021f10:	4628      	mov	r0, r5
 8021f12:	bd38      	pop	{r3, r4, r5, pc}
 8021f14:	b118      	cbz	r0, 8021f1e <_fflush_r+0x1a>
 8021f16:	6a03      	ldr	r3, [r0, #32]
 8021f18:	b90b      	cbnz	r3, 8021f1e <_fflush_r+0x1a>
 8021f1a:	f000 f8bb 	bl	8022094 <__sinit>
 8021f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	d0f3      	beq.n	8021f0e <_fflush_r+0xa>
 8021f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021f28:	07d0      	lsls	r0, r2, #31
 8021f2a:	d404      	bmi.n	8021f36 <_fflush_r+0x32>
 8021f2c:	0599      	lsls	r1, r3, #22
 8021f2e:	d402      	bmi.n	8021f36 <_fflush_r+0x32>
 8021f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f32:	f000 f9c4 	bl	80222be <__retarget_lock_acquire_recursive>
 8021f36:	4628      	mov	r0, r5
 8021f38:	4621      	mov	r1, r4
 8021f3a:	f7ff ff5f 	bl	8021dfc <__sflush_r>
 8021f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021f40:	07da      	lsls	r2, r3, #31
 8021f42:	4605      	mov	r5, r0
 8021f44:	d4e4      	bmi.n	8021f10 <_fflush_r+0xc>
 8021f46:	89a3      	ldrh	r3, [r4, #12]
 8021f48:	059b      	lsls	r3, r3, #22
 8021f4a:	d4e1      	bmi.n	8021f10 <_fflush_r+0xc>
 8021f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f4e:	f000 f9b7 	bl	80222c0 <__retarget_lock_release_recursive>
 8021f52:	e7dd      	b.n	8021f10 <_fflush_r+0xc>

08021f54 <fflush>:
 8021f54:	4601      	mov	r1, r0
 8021f56:	b920      	cbnz	r0, 8021f62 <fflush+0xe>
 8021f58:	4a04      	ldr	r2, [pc, #16]	@ (8021f6c <fflush+0x18>)
 8021f5a:	4905      	ldr	r1, [pc, #20]	@ (8021f70 <fflush+0x1c>)
 8021f5c:	4805      	ldr	r0, [pc, #20]	@ (8021f74 <fflush+0x20>)
 8021f5e:	f000 b8b1 	b.w	80220c4 <_fwalk_sglue>
 8021f62:	4b05      	ldr	r3, [pc, #20]	@ (8021f78 <fflush+0x24>)
 8021f64:	6818      	ldr	r0, [r3, #0]
 8021f66:	f7ff bfcd 	b.w	8021f04 <_fflush_r>
 8021f6a:	bf00      	nop
 8021f6c:	2000000c 	.word	0x2000000c
 8021f70:	08021f05 	.word	0x08021f05
 8021f74:	2000001c 	.word	0x2000001c
 8021f78:	20000018 	.word	0x20000018

08021f7c <std>:
 8021f7c:	2300      	movs	r3, #0
 8021f7e:	b510      	push	{r4, lr}
 8021f80:	4604      	mov	r4, r0
 8021f82:	e9c0 3300 	strd	r3, r3, [r0]
 8021f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021f8a:	6083      	str	r3, [r0, #8]
 8021f8c:	8181      	strh	r1, [r0, #12]
 8021f8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8021f90:	81c2      	strh	r2, [r0, #14]
 8021f92:	6183      	str	r3, [r0, #24]
 8021f94:	4619      	mov	r1, r3
 8021f96:	2208      	movs	r2, #8
 8021f98:	305c      	adds	r0, #92	@ 0x5c
 8021f9a:	f000 f906 	bl	80221aa <memset>
 8021f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8021fd4 <std+0x58>)
 8021fa0:	6263      	str	r3, [r4, #36]	@ 0x24
 8021fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8021fd8 <std+0x5c>)
 8021fa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8021fdc <std+0x60>)
 8021fa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021faa:	4b0d      	ldr	r3, [pc, #52]	@ (8021fe0 <std+0x64>)
 8021fac:	6323      	str	r3, [r4, #48]	@ 0x30
 8021fae:	4b0d      	ldr	r3, [pc, #52]	@ (8021fe4 <std+0x68>)
 8021fb0:	6224      	str	r4, [r4, #32]
 8021fb2:	429c      	cmp	r4, r3
 8021fb4:	d006      	beq.n	8021fc4 <std+0x48>
 8021fb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021fba:	4294      	cmp	r4, r2
 8021fbc:	d002      	beq.n	8021fc4 <std+0x48>
 8021fbe:	33d0      	adds	r3, #208	@ 0xd0
 8021fc0:	429c      	cmp	r4, r3
 8021fc2:	d105      	bne.n	8021fd0 <std+0x54>
 8021fc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fcc:	f000 b976 	b.w	80222bc <__retarget_lock_init_recursive>
 8021fd0:	bd10      	pop	{r4, pc}
 8021fd2:	bf00      	nop
 8021fd4:	08022125 	.word	0x08022125
 8021fd8:	08022147 	.word	0x08022147
 8021fdc:	0802217f 	.word	0x0802217f
 8021fe0:	080221a3 	.word	0x080221a3
 8021fe4:	20000094 	.word	0x20000094

08021fe8 <stdio_exit_handler>:
 8021fe8:	4a02      	ldr	r2, [pc, #8]	@ (8021ff4 <stdio_exit_handler+0xc>)
 8021fea:	4903      	ldr	r1, [pc, #12]	@ (8021ff8 <stdio_exit_handler+0x10>)
 8021fec:	4803      	ldr	r0, [pc, #12]	@ (8021ffc <stdio_exit_handler+0x14>)
 8021fee:	f000 b869 	b.w	80220c4 <_fwalk_sglue>
 8021ff2:	bf00      	nop
 8021ff4:	2000000c 	.word	0x2000000c
 8021ff8:	08021f05 	.word	0x08021f05
 8021ffc:	2000001c 	.word	0x2000001c

08022000 <cleanup_stdio>:
 8022000:	6841      	ldr	r1, [r0, #4]
 8022002:	4b0c      	ldr	r3, [pc, #48]	@ (8022034 <cleanup_stdio+0x34>)
 8022004:	4299      	cmp	r1, r3
 8022006:	b510      	push	{r4, lr}
 8022008:	4604      	mov	r4, r0
 802200a:	d001      	beq.n	8022010 <cleanup_stdio+0x10>
 802200c:	f7ff ff7a 	bl	8021f04 <_fflush_r>
 8022010:	68a1      	ldr	r1, [r4, #8]
 8022012:	4b09      	ldr	r3, [pc, #36]	@ (8022038 <cleanup_stdio+0x38>)
 8022014:	4299      	cmp	r1, r3
 8022016:	d002      	beq.n	802201e <cleanup_stdio+0x1e>
 8022018:	4620      	mov	r0, r4
 802201a:	f7ff ff73 	bl	8021f04 <_fflush_r>
 802201e:	68e1      	ldr	r1, [r4, #12]
 8022020:	4b06      	ldr	r3, [pc, #24]	@ (802203c <cleanup_stdio+0x3c>)
 8022022:	4299      	cmp	r1, r3
 8022024:	d004      	beq.n	8022030 <cleanup_stdio+0x30>
 8022026:	4620      	mov	r0, r4
 8022028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802202c:	f7ff bf6a 	b.w	8021f04 <_fflush_r>
 8022030:	bd10      	pop	{r4, pc}
 8022032:	bf00      	nop
 8022034:	20000094 	.word	0x20000094
 8022038:	200000fc 	.word	0x200000fc
 802203c:	20000164 	.word	0x20000164

08022040 <global_stdio_init.part.0>:
 8022040:	b510      	push	{r4, lr}
 8022042:	4b0b      	ldr	r3, [pc, #44]	@ (8022070 <global_stdio_init.part.0+0x30>)
 8022044:	4c0b      	ldr	r4, [pc, #44]	@ (8022074 <global_stdio_init.part.0+0x34>)
 8022046:	4a0c      	ldr	r2, [pc, #48]	@ (8022078 <global_stdio_init.part.0+0x38>)
 8022048:	601a      	str	r2, [r3, #0]
 802204a:	4620      	mov	r0, r4
 802204c:	2200      	movs	r2, #0
 802204e:	2104      	movs	r1, #4
 8022050:	f7ff ff94 	bl	8021f7c <std>
 8022054:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022058:	2201      	movs	r2, #1
 802205a:	2109      	movs	r1, #9
 802205c:	f7ff ff8e 	bl	8021f7c <std>
 8022060:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022064:	2202      	movs	r2, #2
 8022066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802206a:	2112      	movs	r1, #18
 802206c:	f7ff bf86 	b.w	8021f7c <std>
 8022070:	200001cc 	.word	0x200001cc
 8022074:	20000094 	.word	0x20000094
 8022078:	08021fe9 	.word	0x08021fe9

0802207c <__sfp_lock_acquire>:
 802207c:	4801      	ldr	r0, [pc, #4]	@ (8022084 <__sfp_lock_acquire+0x8>)
 802207e:	f000 b91e 	b.w	80222be <__retarget_lock_acquire_recursive>
 8022082:	bf00      	nop
 8022084:	200001d5 	.word	0x200001d5

08022088 <__sfp_lock_release>:
 8022088:	4801      	ldr	r0, [pc, #4]	@ (8022090 <__sfp_lock_release+0x8>)
 802208a:	f000 b919 	b.w	80222c0 <__retarget_lock_release_recursive>
 802208e:	bf00      	nop
 8022090:	200001d5 	.word	0x200001d5

08022094 <__sinit>:
 8022094:	b510      	push	{r4, lr}
 8022096:	4604      	mov	r4, r0
 8022098:	f7ff fff0 	bl	802207c <__sfp_lock_acquire>
 802209c:	6a23      	ldr	r3, [r4, #32]
 802209e:	b11b      	cbz	r3, 80220a8 <__sinit+0x14>
 80220a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80220a4:	f7ff bff0 	b.w	8022088 <__sfp_lock_release>
 80220a8:	4b04      	ldr	r3, [pc, #16]	@ (80220bc <__sinit+0x28>)
 80220aa:	6223      	str	r3, [r4, #32]
 80220ac:	4b04      	ldr	r3, [pc, #16]	@ (80220c0 <__sinit+0x2c>)
 80220ae:	681b      	ldr	r3, [r3, #0]
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	d1f5      	bne.n	80220a0 <__sinit+0xc>
 80220b4:	f7ff ffc4 	bl	8022040 <global_stdio_init.part.0>
 80220b8:	e7f2      	b.n	80220a0 <__sinit+0xc>
 80220ba:	bf00      	nop
 80220bc:	08022001 	.word	0x08022001
 80220c0:	200001cc 	.word	0x200001cc

080220c4 <_fwalk_sglue>:
 80220c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80220c8:	4607      	mov	r7, r0
 80220ca:	4688      	mov	r8, r1
 80220cc:	4614      	mov	r4, r2
 80220ce:	2600      	movs	r6, #0
 80220d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80220d4:	f1b9 0901 	subs.w	r9, r9, #1
 80220d8:	d505      	bpl.n	80220e6 <_fwalk_sglue+0x22>
 80220da:	6824      	ldr	r4, [r4, #0]
 80220dc:	2c00      	cmp	r4, #0
 80220de:	d1f7      	bne.n	80220d0 <_fwalk_sglue+0xc>
 80220e0:	4630      	mov	r0, r6
 80220e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80220e6:	89ab      	ldrh	r3, [r5, #12]
 80220e8:	2b01      	cmp	r3, #1
 80220ea:	d907      	bls.n	80220fc <_fwalk_sglue+0x38>
 80220ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80220f0:	3301      	adds	r3, #1
 80220f2:	d003      	beq.n	80220fc <_fwalk_sglue+0x38>
 80220f4:	4629      	mov	r1, r5
 80220f6:	4638      	mov	r0, r7
 80220f8:	47c0      	blx	r8
 80220fa:	4306      	orrs	r6, r0
 80220fc:	3568      	adds	r5, #104	@ 0x68
 80220fe:	e7e9      	b.n	80220d4 <_fwalk_sglue+0x10>

08022100 <iprintf>:
 8022100:	b40f      	push	{r0, r1, r2, r3}
 8022102:	b507      	push	{r0, r1, r2, lr}
 8022104:	4906      	ldr	r1, [pc, #24]	@ (8022120 <iprintf+0x20>)
 8022106:	ab04      	add	r3, sp, #16
 8022108:	6808      	ldr	r0, [r1, #0]
 802210a:	f853 2b04 	ldr.w	r2, [r3], #4
 802210e:	6881      	ldr	r1, [r0, #8]
 8022110:	9301      	str	r3, [sp, #4]
 8022112:	f000 f94b 	bl	80223ac <_vfiprintf_r>
 8022116:	b003      	add	sp, #12
 8022118:	f85d eb04 	ldr.w	lr, [sp], #4
 802211c:	b004      	add	sp, #16
 802211e:	4770      	bx	lr
 8022120:	20000018 	.word	0x20000018

08022124 <__sread>:
 8022124:	b510      	push	{r4, lr}
 8022126:	460c      	mov	r4, r1
 8022128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802212c:	f000 f868 	bl	8022200 <_read_r>
 8022130:	2800      	cmp	r0, #0
 8022132:	bfab      	itete	ge
 8022134:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022136:	89a3      	ldrhlt	r3, [r4, #12]
 8022138:	181b      	addge	r3, r3, r0
 802213a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802213e:	bfac      	ite	ge
 8022140:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022142:	81a3      	strhlt	r3, [r4, #12]
 8022144:	bd10      	pop	{r4, pc}

08022146 <__swrite>:
 8022146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802214a:	461f      	mov	r7, r3
 802214c:	898b      	ldrh	r3, [r1, #12]
 802214e:	05db      	lsls	r3, r3, #23
 8022150:	4605      	mov	r5, r0
 8022152:	460c      	mov	r4, r1
 8022154:	4616      	mov	r6, r2
 8022156:	d505      	bpl.n	8022164 <__swrite+0x1e>
 8022158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802215c:	2302      	movs	r3, #2
 802215e:	2200      	movs	r2, #0
 8022160:	f000 f83c 	bl	80221dc <_lseek_r>
 8022164:	89a3      	ldrh	r3, [r4, #12]
 8022166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802216a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802216e:	81a3      	strh	r3, [r4, #12]
 8022170:	4632      	mov	r2, r6
 8022172:	463b      	mov	r3, r7
 8022174:	4628      	mov	r0, r5
 8022176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802217a:	f000 b863 	b.w	8022244 <_write_r>

0802217e <__sseek>:
 802217e:	b510      	push	{r4, lr}
 8022180:	460c      	mov	r4, r1
 8022182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022186:	f000 f829 	bl	80221dc <_lseek_r>
 802218a:	1c43      	adds	r3, r0, #1
 802218c:	89a3      	ldrh	r3, [r4, #12]
 802218e:	bf15      	itete	ne
 8022190:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022192:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022196:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802219a:	81a3      	strheq	r3, [r4, #12]
 802219c:	bf18      	it	ne
 802219e:	81a3      	strhne	r3, [r4, #12]
 80221a0:	bd10      	pop	{r4, pc}

080221a2 <__sclose>:
 80221a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221a6:	f000 b809 	b.w	80221bc <_close_r>

080221aa <memset>:
 80221aa:	4402      	add	r2, r0
 80221ac:	4603      	mov	r3, r0
 80221ae:	4293      	cmp	r3, r2
 80221b0:	d100      	bne.n	80221b4 <memset+0xa>
 80221b2:	4770      	bx	lr
 80221b4:	f803 1b01 	strb.w	r1, [r3], #1
 80221b8:	e7f9      	b.n	80221ae <memset+0x4>
	...

080221bc <_close_r>:
 80221bc:	b538      	push	{r3, r4, r5, lr}
 80221be:	4d06      	ldr	r5, [pc, #24]	@ (80221d8 <_close_r+0x1c>)
 80221c0:	2300      	movs	r3, #0
 80221c2:	4604      	mov	r4, r0
 80221c4:	4608      	mov	r0, r1
 80221c6:	602b      	str	r3, [r5, #0]
 80221c8:	f7fe facb 	bl	8020762 <_close>
 80221cc:	1c43      	adds	r3, r0, #1
 80221ce:	d102      	bne.n	80221d6 <_close_r+0x1a>
 80221d0:	682b      	ldr	r3, [r5, #0]
 80221d2:	b103      	cbz	r3, 80221d6 <_close_r+0x1a>
 80221d4:	6023      	str	r3, [r4, #0]
 80221d6:	bd38      	pop	{r3, r4, r5, pc}
 80221d8:	200001d0 	.word	0x200001d0

080221dc <_lseek_r>:
 80221dc:	b538      	push	{r3, r4, r5, lr}
 80221de:	4d07      	ldr	r5, [pc, #28]	@ (80221fc <_lseek_r+0x20>)
 80221e0:	4604      	mov	r4, r0
 80221e2:	4608      	mov	r0, r1
 80221e4:	4611      	mov	r1, r2
 80221e6:	2200      	movs	r2, #0
 80221e8:	602a      	str	r2, [r5, #0]
 80221ea:	461a      	mov	r2, r3
 80221ec:	f7fe fae0 	bl	80207b0 <_lseek>
 80221f0:	1c43      	adds	r3, r0, #1
 80221f2:	d102      	bne.n	80221fa <_lseek_r+0x1e>
 80221f4:	682b      	ldr	r3, [r5, #0]
 80221f6:	b103      	cbz	r3, 80221fa <_lseek_r+0x1e>
 80221f8:	6023      	str	r3, [r4, #0]
 80221fa:	bd38      	pop	{r3, r4, r5, pc}
 80221fc:	200001d0 	.word	0x200001d0

08022200 <_read_r>:
 8022200:	b538      	push	{r3, r4, r5, lr}
 8022202:	4d07      	ldr	r5, [pc, #28]	@ (8022220 <_read_r+0x20>)
 8022204:	4604      	mov	r4, r0
 8022206:	4608      	mov	r0, r1
 8022208:	4611      	mov	r1, r2
 802220a:	2200      	movs	r2, #0
 802220c:	602a      	str	r2, [r5, #0]
 802220e:	461a      	mov	r2, r3
 8022210:	f7fe fa6e 	bl	80206f0 <_read>
 8022214:	1c43      	adds	r3, r0, #1
 8022216:	d102      	bne.n	802221e <_read_r+0x1e>
 8022218:	682b      	ldr	r3, [r5, #0]
 802221a:	b103      	cbz	r3, 802221e <_read_r+0x1e>
 802221c:	6023      	str	r3, [r4, #0]
 802221e:	bd38      	pop	{r3, r4, r5, pc}
 8022220:	200001d0 	.word	0x200001d0

08022224 <_sbrk_r>:
 8022224:	b538      	push	{r3, r4, r5, lr}
 8022226:	4d06      	ldr	r5, [pc, #24]	@ (8022240 <_sbrk_r+0x1c>)
 8022228:	2300      	movs	r3, #0
 802222a:	4604      	mov	r4, r0
 802222c:	4608      	mov	r0, r1
 802222e:	602b      	str	r3, [r5, #0]
 8022230:	f7fe facc 	bl	80207cc <_sbrk>
 8022234:	1c43      	adds	r3, r0, #1
 8022236:	d102      	bne.n	802223e <_sbrk_r+0x1a>
 8022238:	682b      	ldr	r3, [r5, #0]
 802223a:	b103      	cbz	r3, 802223e <_sbrk_r+0x1a>
 802223c:	6023      	str	r3, [r4, #0]
 802223e:	bd38      	pop	{r3, r4, r5, pc}
 8022240:	200001d0 	.word	0x200001d0

08022244 <_write_r>:
 8022244:	b538      	push	{r3, r4, r5, lr}
 8022246:	4d07      	ldr	r5, [pc, #28]	@ (8022264 <_write_r+0x20>)
 8022248:	4604      	mov	r4, r0
 802224a:	4608      	mov	r0, r1
 802224c:	4611      	mov	r1, r2
 802224e:	2200      	movs	r2, #0
 8022250:	602a      	str	r2, [r5, #0]
 8022252:	461a      	mov	r2, r3
 8022254:	f7fe fa69 	bl	802072a <_write>
 8022258:	1c43      	adds	r3, r0, #1
 802225a:	d102      	bne.n	8022262 <_write_r+0x1e>
 802225c:	682b      	ldr	r3, [r5, #0]
 802225e:	b103      	cbz	r3, 8022262 <_write_r+0x1e>
 8022260:	6023      	str	r3, [r4, #0]
 8022262:	bd38      	pop	{r3, r4, r5, pc}
 8022264:	200001d0 	.word	0x200001d0

08022268 <__errno>:
 8022268:	4b01      	ldr	r3, [pc, #4]	@ (8022270 <__errno+0x8>)
 802226a:	6818      	ldr	r0, [r3, #0]
 802226c:	4770      	bx	lr
 802226e:	bf00      	nop
 8022270:	20000018 	.word	0x20000018

08022274 <__libc_init_array>:
 8022274:	b570      	push	{r4, r5, r6, lr}
 8022276:	4d0d      	ldr	r5, [pc, #52]	@ (80222ac <__libc_init_array+0x38>)
 8022278:	4c0d      	ldr	r4, [pc, #52]	@ (80222b0 <__libc_init_array+0x3c>)
 802227a:	1b64      	subs	r4, r4, r5
 802227c:	10a4      	asrs	r4, r4, #2
 802227e:	2600      	movs	r6, #0
 8022280:	42a6      	cmp	r6, r4
 8022282:	d109      	bne.n	8022298 <__libc_init_array+0x24>
 8022284:	4d0b      	ldr	r5, [pc, #44]	@ (80222b4 <__libc_init_array+0x40>)
 8022286:	4c0c      	ldr	r4, [pc, #48]	@ (80222b8 <__libc_init_array+0x44>)
 8022288:	f000 fc4e 	bl	8022b28 <_init>
 802228c:	1b64      	subs	r4, r4, r5
 802228e:	10a4      	asrs	r4, r4, #2
 8022290:	2600      	movs	r6, #0
 8022292:	42a6      	cmp	r6, r4
 8022294:	d105      	bne.n	80222a2 <__libc_init_array+0x2e>
 8022296:	bd70      	pop	{r4, r5, r6, pc}
 8022298:	f855 3b04 	ldr.w	r3, [r5], #4
 802229c:	4798      	blx	r3
 802229e:	3601      	adds	r6, #1
 80222a0:	e7ee      	b.n	8022280 <__libc_init_array+0xc>
 80222a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80222a6:	4798      	blx	r3
 80222a8:	3601      	adds	r6, #1
 80222aa:	e7f2      	b.n	8022292 <__libc_init_array+0x1e>
 80222ac:	08022bd4 	.word	0x08022bd4
 80222b0:	08022bd4 	.word	0x08022bd4
 80222b4:	08022bd4 	.word	0x08022bd4
 80222b8:	08022bd8 	.word	0x08022bd8

080222bc <__retarget_lock_init_recursive>:
 80222bc:	4770      	bx	lr

080222be <__retarget_lock_acquire_recursive>:
 80222be:	4770      	bx	lr

080222c0 <__retarget_lock_release_recursive>:
 80222c0:	4770      	bx	lr
	...

080222c4 <_free_r>:
 80222c4:	b538      	push	{r3, r4, r5, lr}
 80222c6:	4605      	mov	r5, r0
 80222c8:	2900      	cmp	r1, #0
 80222ca:	d041      	beq.n	8022350 <_free_r+0x8c>
 80222cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80222d0:	1f0c      	subs	r4, r1, #4
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	bfb8      	it	lt
 80222d6:	18e4      	addlt	r4, r4, r3
 80222d8:	f7ff fd84 	bl	8021de4 <__malloc_lock>
 80222dc:	4a1d      	ldr	r2, [pc, #116]	@ (8022354 <_free_r+0x90>)
 80222de:	6813      	ldr	r3, [r2, #0]
 80222e0:	b933      	cbnz	r3, 80222f0 <_free_r+0x2c>
 80222e2:	6063      	str	r3, [r4, #4]
 80222e4:	6014      	str	r4, [r2, #0]
 80222e6:	4628      	mov	r0, r5
 80222e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80222ec:	f7ff bd80 	b.w	8021df0 <__malloc_unlock>
 80222f0:	42a3      	cmp	r3, r4
 80222f2:	d908      	bls.n	8022306 <_free_r+0x42>
 80222f4:	6820      	ldr	r0, [r4, #0]
 80222f6:	1821      	adds	r1, r4, r0
 80222f8:	428b      	cmp	r3, r1
 80222fa:	bf01      	itttt	eq
 80222fc:	6819      	ldreq	r1, [r3, #0]
 80222fe:	685b      	ldreq	r3, [r3, #4]
 8022300:	1809      	addeq	r1, r1, r0
 8022302:	6021      	streq	r1, [r4, #0]
 8022304:	e7ed      	b.n	80222e2 <_free_r+0x1e>
 8022306:	461a      	mov	r2, r3
 8022308:	685b      	ldr	r3, [r3, #4]
 802230a:	b10b      	cbz	r3, 8022310 <_free_r+0x4c>
 802230c:	42a3      	cmp	r3, r4
 802230e:	d9fa      	bls.n	8022306 <_free_r+0x42>
 8022310:	6811      	ldr	r1, [r2, #0]
 8022312:	1850      	adds	r0, r2, r1
 8022314:	42a0      	cmp	r0, r4
 8022316:	d10b      	bne.n	8022330 <_free_r+0x6c>
 8022318:	6820      	ldr	r0, [r4, #0]
 802231a:	4401      	add	r1, r0
 802231c:	1850      	adds	r0, r2, r1
 802231e:	4283      	cmp	r3, r0
 8022320:	6011      	str	r1, [r2, #0]
 8022322:	d1e0      	bne.n	80222e6 <_free_r+0x22>
 8022324:	6818      	ldr	r0, [r3, #0]
 8022326:	685b      	ldr	r3, [r3, #4]
 8022328:	6053      	str	r3, [r2, #4]
 802232a:	4408      	add	r0, r1
 802232c:	6010      	str	r0, [r2, #0]
 802232e:	e7da      	b.n	80222e6 <_free_r+0x22>
 8022330:	d902      	bls.n	8022338 <_free_r+0x74>
 8022332:	230c      	movs	r3, #12
 8022334:	602b      	str	r3, [r5, #0]
 8022336:	e7d6      	b.n	80222e6 <_free_r+0x22>
 8022338:	6820      	ldr	r0, [r4, #0]
 802233a:	1821      	adds	r1, r4, r0
 802233c:	428b      	cmp	r3, r1
 802233e:	bf04      	itt	eq
 8022340:	6819      	ldreq	r1, [r3, #0]
 8022342:	685b      	ldreq	r3, [r3, #4]
 8022344:	6063      	str	r3, [r4, #4]
 8022346:	bf04      	itt	eq
 8022348:	1809      	addeq	r1, r1, r0
 802234a:	6021      	streq	r1, [r4, #0]
 802234c:	6054      	str	r4, [r2, #4]
 802234e:	e7ca      	b.n	80222e6 <_free_r+0x22>
 8022350:	bd38      	pop	{r3, r4, r5, pc}
 8022352:	bf00      	nop
 8022354:	20000090 	.word	0x20000090

08022358 <__sfputc_r>:
 8022358:	6893      	ldr	r3, [r2, #8]
 802235a:	3b01      	subs	r3, #1
 802235c:	2b00      	cmp	r3, #0
 802235e:	b410      	push	{r4}
 8022360:	6093      	str	r3, [r2, #8]
 8022362:	da08      	bge.n	8022376 <__sfputc_r+0x1e>
 8022364:	6994      	ldr	r4, [r2, #24]
 8022366:	42a3      	cmp	r3, r4
 8022368:	db01      	blt.n	802236e <__sfputc_r+0x16>
 802236a:	290a      	cmp	r1, #10
 802236c:	d103      	bne.n	8022376 <__sfputc_r+0x1e>
 802236e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022372:	f000 bac1 	b.w	80228f8 <__swbuf_r>
 8022376:	6813      	ldr	r3, [r2, #0]
 8022378:	1c58      	adds	r0, r3, #1
 802237a:	6010      	str	r0, [r2, #0]
 802237c:	7019      	strb	r1, [r3, #0]
 802237e:	4608      	mov	r0, r1
 8022380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022384:	4770      	bx	lr

08022386 <__sfputs_r>:
 8022386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022388:	4606      	mov	r6, r0
 802238a:	460f      	mov	r7, r1
 802238c:	4614      	mov	r4, r2
 802238e:	18d5      	adds	r5, r2, r3
 8022390:	42ac      	cmp	r4, r5
 8022392:	d101      	bne.n	8022398 <__sfputs_r+0x12>
 8022394:	2000      	movs	r0, #0
 8022396:	e007      	b.n	80223a8 <__sfputs_r+0x22>
 8022398:	f814 1b01 	ldrb.w	r1, [r4], #1
 802239c:	463a      	mov	r2, r7
 802239e:	4630      	mov	r0, r6
 80223a0:	f7ff ffda 	bl	8022358 <__sfputc_r>
 80223a4:	1c43      	adds	r3, r0, #1
 80223a6:	d1f3      	bne.n	8022390 <__sfputs_r+0xa>
 80223a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080223ac <_vfiprintf_r>:
 80223ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223b0:	460d      	mov	r5, r1
 80223b2:	b09d      	sub	sp, #116	@ 0x74
 80223b4:	4614      	mov	r4, r2
 80223b6:	4698      	mov	r8, r3
 80223b8:	4606      	mov	r6, r0
 80223ba:	b118      	cbz	r0, 80223c4 <_vfiprintf_r+0x18>
 80223bc:	6a03      	ldr	r3, [r0, #32]
 80223be:	b90b      	cbnz	r3, 80223c4 <_vfiprintf_r+0x18>
 80223c0:	f7ff fe68 	bl	8022094 <__sinit>
 80223c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80223c6:	07d9      	lsls	r1, r3, #31
 80223c8:	d405      	bmi.n	80223d6 <_vfiprintf_r+0x2a>
 80223ca:	89ab      	ldrh	r3, [r5, #12]
 80223cc:	059a      	lsls	r2, r3, #22
 80223ce:	d402      	bmi.n	80223d6 <_vfiprintf_r+0x2a>
 80223d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80223d2:	f7ff ff74 	bl	80222be <__retarget_lock_acquire_recursive>
 80223d6:	89ab      	ldrh	r3, [r5, #12]
 80223d8:	071b      	lsls	r3, r3, #28
 80223da:	d501      	bpl.n	80223e0 <_vfiprintf_r+0x34>
 80223dc:	692b      	ldr	r3, [r5, #16]
 80223de:	b99b      	cbnz	r3, 8022408 <_vfiprintf_r+0x5c>
 80223e0:	4629      	mov	r1, r5
 80223e2:	4630      	mov	r0, r6
 80223e4:	f000 fac6 	bl	8022974 <__swsetup_r>
 80223e8:	b170      	cbz	r0, 8022408 <_vfiprintf_r+0x5c>
 80223ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80223ec:	07dc      	lsls	r4, r3, #31
 80223ee:	d504      	bpl.n	80223fa <_vfiprintf_r+0x4e>
 80223f0:	f04f 30ff 	mov.w	r0, #4294967295
 80223f4:	b01d      	add	sp, #116	@ 0x74
 80223f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223fa:	89ab      	ldrh	r3, [r5, #12]
 80223fc:	0598      	lsls	r0, r3, #22
 80223fe:	d4f7      	bmi.n	80223f0 <_vfiprintf_r+0x44>
 8022400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022402:	f7ff ff5d 	bl	80222c0 <__retarget_lock_release_recursive>
 8022406:	e7f3      	b.n	80223f0 <_vfiprintf_r+0x44>
 8022408:	2300      	movs	r3, #0
 802240a:	9309      	str	r3, [sp, #36]	@ 0x24
 802240c:	2320      	movs	r3, #32
 802240e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022412:	f8cd 800c 	str.w	r8, [sp, #12]
 8022416:	2330      	movs	r3, #48	@ 0x30
 8022418:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80225c8 <_vfiprintf_r+0x21c>
 802241c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022420:	f04f 0901 	mov.w	r9, #1
 8022424:	4623      	mov	r3, r4
 8022426:	469a      	mov	sl, r3
 8022428:	f813 2b01 	ldrb.w	r2, [r3], #1
 802242c:	b10a      	cbz	r2, 8022432 <_vfiprintf_r+0x86>
 802242e:	2a25      	cmp	r2, #37	@ 0x25
 8022430:	d1f9      	bne.n	8022426 <_vfiprintf_r+0x7a>
 8022432:	ebba 0b04 	subs.w	fp, sl, r4
 8022436:	d00b      	beq.n	8022450 <_vfiprintf_r+0xa4>
 8022438:	465b      	mov	r3, fp
 802243a:	4622      	mov	r2, r4
 802243c:	4629      	mov	r1, r5
 802243e:	4630      	mov	r0, r6
 8022440:	f7ff ffa1 	bl	8022386 <__sfputs_r>
 8022444:	3001      	adds	r0, #1
 8022446:	f000 80a7 	beq.w	8022598 <_vfiprintf_r+0x1ec>
 802244a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802244c:	445a      	add	r2, fp
 802244e:	9209      	str	r2, [sp, #36]	@ 0x24
 8022450:	f89a 3000 	ldrb.w	r3, [sl]
 8022454:	2b00      	cmp	r3, #0
 8022456:	f000 809f 	beq.w	8022598 <_vfiprintf_r+0x1ec>
 802245a:	2300      	movs	r3, #0
 802245c:	f04f 32ff 	mov.w	r2, #4294967295
 8022460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022464:	f10a 0a01 	add.w	sl, sl, #1
 8022468:	9304      	str	r3, [sp, #16]
 802246a:	9307      	str	r3, [sp, #28]
 802246c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022470:	931a      	str	r3, [sp, #104]	@ 0x68
 8022472:	4654      	mov	r4, sl
 8022474:	2205      	movs	r2, #5
 8022476:	f814 1b01 	ldrb.w	r1, [r4], #1
 802247a:	4853      	ldr	r0, [pc, #332]	@ (80225c8 <_vfiprintf_r+0x21c>)
 802247c:	f7fd fdf8 	bl	8020070 <memchr>
 8022480:	9a04      	ldr	r2, [sp, #16]
 8022482:	b9d8      	cbnz	r0, 80224bc <_vfiprintf_r+0x110>
 8022484:	06d1      	lsls	r1, r2, #27
 8022486:	bf44      	itt	mi
 8022488:	2320      	movmi	r3, #32
 802248a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802248e:	0713      	lsls	r3, r2, #28
 8022490:	bf44      	itt	mi
 8022492:	232b      	movmi	r3, #43	@ 0x2b
 8022494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022498:	f89a 3000 	ldrb.w	r3, [sl]
 802249c:	2b2a      	cmp	r3, #42	@ 0x2a
 802249e:	d015      	beq.n	80224cc <_vfiprintf_r+0x120>
 80224a0:	9a07      	ldr	r2, [sp, #28]
 80224a2:	4654      	mov	r4, sl
 80224a4:	2000      	movs	r0, #0
 80224a6:	f04f 0c0a 	mov.w	ip, #10
 80224aa:	4621      	mov	r1, r4
 80224ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80224b0:	3b30      	subs	r3, #48	@ 0x30
 80224b2:	2b09      	cmp	r3, #9
 80224b4:	d94b      	bls.n	802254e <_vfiprintf_r+0x1a2>
 80224b6:	b1b0      	cbz	r0, 80224e6 <_vfiprintf_r+0x13a>
 80224b8:	9207      	str	r2, [sp, #28]
 80224ba:	e014      	b.n	80224e6 <_vfiprintf_r+0x13a>
 80224bc:	eba0 0308 	sub.w	r3, r0, r8
 80224c0:	fa09 f303 	lsl.w	r3, r9, r3
 80224c4:	4313      	orrs	r3, r2
 80224c6:	9304      	str	r3, [sp, #16]
 80224c8:	46a2      	mov	sl, r4
 80224ca:	e7d2      	b.n	8022472 <_vfiprintf_r+0xc6>
 80224cc:	9b03      	ldr	r3, [sp, #12]
 80224ce:	1d19      	adds	r1, r3, #4
 80224d0:	681b      	ldr	r3, [r3, #0]
 80224d2:	9103      	str	r1, [sp, #12]
 80224d4:	2b00      	cmp	r3, #0
 80224d6:	bfbb      	ittet	lt
 80224d8:	425b      	neglt	r3, r3
 80224da:	f042 0202 	orrlt.w	r2, r2, #2
 80224de:	9307      	strge	r3, [sp, #28]
 80224e0:	9307      	strlt	r3, [sp, #28]
 80224e2:	bfb8      	it	lt
 80224e4:	9204      	strlt	r2, [sp, #16]
 80224e6:	7823      	ldrb	r3, [r4, #0]
 80224e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80224ea:	d10a      	bne.n	8022502 <_vfiprintf_r+0x156>
 80224ec:	7863      	ldrb	r3, [r4, #1]
 80224ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80224f0:	d132      	bne.n	8022558 <_vfiprintf_r+0x1ac>
 80224f2:	9b03      	ldr	r3, [sp, #12]
 80224f4:	1d1a      	adds	r2, r3, #4
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	9203      	str	r2, [sp, #12]
 80224fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80224fe:	3402      	adds	r4, #2
 8022500:	9305      	str	r3, [sp, #20]
 8022502:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80225d8 <_vfiprintf_r+0x22c>
 8022506:	7821      	ldrb	r1, [r4, #0]
 8022508:	2203      	movs	r2, #3
 802250a:	4650      	mov	r0, sl
 802250c:	f7fd fdb0 	bl	8020070 <memchr>
 8022510:	b138      	cbz	r0, 8022522 <_vfiprintf_r+0x176>
 8022512:	9b04      	ldr	r3, [sp, #16]
 8022514:	eba0 000a 	sub.w	r0, r0, sl
 8022518:	2240      	movs	r2, #64	@ 0x40
 802251a:	4082      	lsls	r2, r0
 802251c:	4313      	orrs	r3, r2
 802251e:	3401      	adds	r4, #1
 8022520:	9304      	str	r3, [sp, #16]
 8022522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022526:	4829      	ldr	r0, [pc, #164]	@ (80225cc <_vfiprintf_r+0x220>)
 8022528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802252c:	2206      	movs	r2, #6
 802252e:	f7fd fd9f 	bl	8020070 <memchr>
 8022532:	2800      	cmp	r0, #0
 8022534:	d03f      	beq.n	80225b6 <_vfiprintf_r+0x20a>
 8022536:	4b26      	ldr	r3, [pc, #152]	@ (80225d0 <_vfiprintf_r+0x224>)
 8022538:	bb1b      	cbnz	r3, 8022582 <_vfiprintf_r+0x1d6>
 802253a:	9b03      	ldr	r3, [sp, #12]
 802253c:	3307      	adds	r3, #7
 802253e:	f023 0307 	bic.w	r3, r3, #7
 8022542:	3308      	adds	r3, #8
 8022544:	9303      	str	r3, [sp, #12]
 8022546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022548:	443b      	add	r3, r7
 802254a:	9309      	str	r3, [sp, #36]	@ 0x24
 802254c:	e76a      	b.n	8022424 <_vfiprintf_r+0x78>
 802254e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022552:	460c      	mov	r4, r1
 8022554:	2001      	movs	r0, #1
 8022556:	e7a8      	b.n	80224aa <_vfiprintf_r+0xfe>
 8022558:	2300      	movs	r3, #0
 802255a:	3401      	adds	r4, #1
 802255c:	9305      	str	r3, [sp, #20]
 802255e:	4619      	mov	r1, r3
 8022560:	f04f 0c0a 	mov.w	ip, #10
 8022564:	4620      	mov	r0, r4
 8022566:	f810 2b01 	ldrb.w	r2, [r0], #1
 802256a:	3a30      	subs	r2, #48	@ 0x30
 802256c:	2a09      	cmp	r2, #9
 802256e:	d903      	bls.n	8022578 <_vfiprintf_r+0x1cc>
 8022570:	2b00      	cmp	r3, #0
 8022572:	d0c6      	beq.n	8022502 <_vfiprintf_r+0x156>
 8022574:	9105      	str	r1, [sp, #20]
 8022576:	e7c4      	b.n	8022502 <_vfiprintf_r+0x156>
 8022578:	fb0c 2101 	mla	r1, ip, r1, r2
 802257c:	4604      	mov	r4, r0
 802257e:	2301      	movs	r3, #1
 8022580:	e7f0      	b.n	8022564 <_vfiprintf_r+0x1b8>
 8022582:	ab03      	add	r3, sp, #12
 8022584:	9300      	str	r3, [sp, #0]
 8022586:	462a      	mov	r2, r5
 8022588:	4b12      	ldr	r3, [pc, #72]	@ (80225d4 <_vfiprintf_r+0x228>)
 802258a:	a904      	add	r1, sp, #16
 802258c:	4630      	mov	r0, r6
 802258e:	f3af 8000 	nop.w
 8022592:	4607      	mov	r7, r0
 8022594:	1c78      	adds	r0, r7, #1
 8022596:	d1d6      	bne.n	8022546 <_vfiprintf_r+0x19a>
 8022598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802259a:	07d9      	lsls	r1, r3, #31
 802259c:	d405      	bmi.n	80225aa <_vfiprintf_r+0x1fe>
 802259e:	89ab      	ldrh	r3, [r5, #12]
 80225a0:	059a      	lsls	r2, r3, #22
 80225a2:	d402      	bmi.n	80225aa <_vfiprintf_r+0x1fe>
 80225a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80225a6:	f7ff fe8b 	bl	80222c0 <__retarget_lock_release_recursive>
 80225aa:	89ab      	ldrh	r3, [r5, #12]
 80225ac:	065b      	lsls	r3, r3, #25
 80225ae:	f53f af1f 	bmi.w	80223f0 <_vfiprintf_r+0x44>
 80225b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80225b4:	e71e      	b.n	80223f4 <_vfiprintf_r+0x48>
 80225b6:	ab03      	add	r3, sp, #12
 80225b8:	9300      	str	r3, [sp, #0]
 80225ba:	462a      	mov	r2, r5
 80225bc:	4b05      	ldr	r3, [pc, #20]	@ (80225d4 <_vfiprintf_r+0x228>)
 80225be:	a904      	add	r1, sp, #16
 80225c0:	4630      	mov	r0, r6
 80225c2:	f000 f879 	bl	80226b8 <_printf_i>
 80225c6:	e7e4      	b.n	8022592 <_vfiprintf_r+0x1e6>
 80225c8:	08022b98 	.word	0x08022b98
 80225cc:	08022ba2 	.word	0x08022ba2
 80225d0:	00000000 	.word	0x00000000
 80225d4:	08022387 	.word	0x08022387
 80225d8:	08022b9e 	.word	0x08022b9e

080225dc <_printf_common>:
 80225dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225e0:	4616      	mov	r6, r2
 80225e2:	4698      	mov	r8, r3
 80225e4:	688a      	ldr	r2, [r1, #8]
 80225e6:	690b      	ldr	r3, [r1, #16]
 80225e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80225ec:	4293      	cmp	r3, r2
 80225ee:	bfb8      	it	lt
 80225f0:	4613      	movlt	r3, r2
 80225f2:	6033      	str	r3, [r6, #0]
 80225f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80225f8:	4607      	mov	r7, r0
 80225fa:	460c      	mov	r4, r1
 80225fc:	b10a      	cbz	r2, 8022602 <_printf_common+0x26>
 80225fe:	3301      	adds	r3, #1
 8022600:	6033      	str	r3, [r6, #0]
 8022602:	6823      	ldr	r3, [r4, #0]
 8022604:	0699      	lsls	r1, r3, #26
 8022606:	bf42      	ittt	mi
 8022608:	6833      	ldrmi	r3, [r6, #0]
 802260a:	3302      	addmi	r3, #2
 802260c:	6033      	strmi	r3, [r6, #0]
 802260e:	6825      	ldr	r5, [r4, #0]
 8022610:	f015 0506 	ands.w	r5, r5, #6
 8022614:	d106      	bne.n	8022624 <_printf_common+0x48>
 8022616:	f104 0a19 	add.w	sl, r4, #25
 802261a:	68e3      	ldr	r3, [r4, #12]
 802261c:	6832      	ldr	r2, [r6, #0]
 802261e:	1a9b      	subs	r3, r3, r2
 8022620:	42ab      	cmp	r3, r5
 8022622:	dc26      	bgt.n	8022672 <_printf_common+0x96>
 8022624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022628:	6822      	ldr	r2, [r4, #0]
 802262a:	3b00      	subs	r3, #0
 802262c:	bf18      	it	ne
 802262e:	2301      	movne	r3, #1
 8022630:	0692      	lsls	r2, r2, #26
 8022632:	d42b      	bmi.n	802268c <_printf_common+0xb0>
 8022634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022638:	4641      	mov	r1, r8
 802263a:	4638      	mov	r0, r7
 802263c:	47c8      	blx	r9
 802263e:	3001      	adds	r0, #1
 8022640:	d01e      	beq.n	8022680 <_printf_common+0xa4>
 8022642:	6823      	ldr	r3, [r4, #0]
 8022644:	6922      	ldr	r2, [r4, #16]
 8022646:	f003 0306 	and.w	r3, r3, #6
 802264a:	2b04      	cmp	r3, #4
 802264c:	bf02      	ittt	eq
 802264e:	68e5      	ldreq	r5, [r4, #12]
 8022650:	6833      	ldreq	r3, [r6, #0]
 8022652:	1aed      	subeq	r5, r5, r3
 8022654:	68a3      	ldr	r3, [r4, #8]
 8022656:	bf0c      	ite	eq
 8022658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802265c:	2500      	movne	r5, #0
 802265e:	4293      	cmp	r3, r2
 8022660:	bfc4      	itt	gt
 8022662:	1a9b      	subgt	r3, r3, r2
 8022664:	18ed      	addgt	r5, r5, r3
 8022666:	2600      	movs	r6, #0
 8022668:	341a      	adds	r4, #26
 802266a:	42b5      	cmp	r5, r6
 802266c:	d11a      	bne.n	80226a4 <_printf_common+0xc8>
 802266e:	2000      	movs	r0, #0
 8022670:	e008      	b.n	8022684 <_printf_common+0xa8>
 8022672:	2301      	movs	r3, #1
 8022674:	4652      	mov	r2, sl
 8022676:	4641      	mov	r1, r8
 8022678:	4638      	mov	r0, r7
 802267a:	47c8      	blx	r9
 802267c:	3001      	adds	r0, #1
 802267e:	d103      	bne.n	8022688 <_printf_common+0xac>
 8022680:	f04f 30ff 	mov.w	r0, #4294967295
 8022684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022688:	3501      	adds	r5, #1
 802268a:	e7c6      	b.n	802261a <_printf_common+0x3e>
 802268c:	18e1      	adds	r1, r4, r3
 802268e:	1c5a      	adds	r2, r3, #1
 8022690:	2030      	movs	r0, #48	@ 0x30
 8022692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022696:	4422      	add	r2, r4
 8022698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802269c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80226a0:	3302      	adds	r3, #2
 80226a2:	e7c7      	b.n	8022634 <_printf_common+0x58>
 80226a4:	2301      	movs	r3, #1
 80226a6:	4622      	mov	r2, r4
 80226a8:	4641      	mov	r1, r8
 80226aa:	4638      	mov	r0, r7
 80226ac:	47c8      	blx	r9
 80226ae:	3001      	adds	r0, #1
 80226b0:	d0e6      	beq.n	8022680 <_printf_common+0xa4>
 80226b2:	3601      	adds	r6, #1
 80226b4:	e7d9      	b.n	802266a <_printf_common+0x8e>
	...

080226b8 <_printf_i>:
 80226b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80226bc:	7e0f      	ldrb	r7, [r1, #24]
 80226be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80226c0:	2f78      	cmp	r7, #120	@ 0x78
 80226c2:	4691      	mov	r9, r2
 80226c4:	4680      	mov	r8, r0
 80226c6:	460c      	mov	r4, r1
 80226c8:	469a      	mov	sl, r3
 80226ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80226ce:	d807      	bhi.n	80226e0 <_printf_i+0x28>
 80226d0:	2f62      	cmp	r7, #98	@ 0x62
 80226d2:	d80a      	bhi.n	80226ea <_printf_i+0x32>
 80226d4:	2f00      	cmp	r7, #0
 80226d6:	f000 80d2 	beq.w	802287e <_printf_i+0x1c6>
 80226da:	2f58      	cmp	r7, #88	@ 0x58
 80226dc:	f000 80b9 	beq.w	8022852 <_printf_i+0x19a>
 80226e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80226e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80226e8:	e03a      	b.n	8022760 <_printf_i+0xa8>
 80226ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80226ee:	2b15      	cmp	r3, #21
 80226f0:	d8f6      	bhi.n	80226e0 <_printf_i+0x28>
 80226f2:	a101      	add	r1, pc, #4	@ (adr r1, 80226f8 <_printf_i+0x40>)
 80226f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80226f8:	08022751 	.word	0x08022751
 80226fc:	08022765 	.word	0x08022765
 8022700:	080226e1 	.word	0x080226e1
 8022704:	080226e1 	.word	0x080226e1
 8022708:	080226e1 	.word	0x080226e1
 802270c:	080226e1 	.word	0x080226e1
 8022710:	08022765 	.word	0x08022765
 8022714:	080226e1 	.word	0x080226e1
 8022718:	080226e1 	.word	0x080226e1
 802271c:	080226e1 	.word	0x080226e1
 8022720:	080226e1 	.word	0x080226e1
 8022724:	08022865 	.word	0x08022865
 8022728:	0802278f 	.word	0x0802278f
 802272c:	0802281f 	.word	0x0802281f
 8022730:	080226e1 	.word	0x080226e1
 8022734:	080226e1 	.word	0x080226e1
 8022738:	08022887 	.word	0x08022887
 802273c:	080226e1 	.word	0x080226e1
 8022740:	0802278f 	.word	0x0802278f
 8022744:	080226e1 	.word	0x080226e1
 8022748:	080226e1 	.word	0x080226e1
 802274c:	08022827 	.word	0x08022827
 8022750:	6833      	ldr	r3, [r6, #0]
 8022752:	1d1a      	adds	r2, r3, #4
 8022754:	681b      	ldr	r3, [r3, #0]
 8022756:	6032      	str	r2, [r6, #0]
 8022758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802275c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022760:	2301      	movs	r3, #1
 8022762:	e09d      	b.n	80228a0 <_printf_i+0x1e8>
 8022764:	6833      	ldr	r3, [r6, #0]
 8022766:	6820      	ldr	r0, [r4, #0]
 8022768:	1d19      	adds	r1, r3, #4
 802276a:	6031      	str	r1, [r6, #0]
 802276c:	0606      	lsls	r6, r0, #24
 802276e:	d501      	bpl.n	8022774 <_printf_i+0xbc>
 8022770:	681d      	ldr	r5, [r3, #0]
 8022772:	e003      	b.n	802277c <_printf_i+0xc4>
 8022774:	0645      	lsls	r5, r0, #25
 8022776:	d5fb      	bpl.n	8022770 <_printf_i+0xb8>
 8022778:	f9b3 5000 	ldrsh.w	r5, [r3]
 802277c:	2d00      	cmp	r5, #0
 802277e:	da03      	bge.n	8022788 <_printf_i+0xd0>
 8022780:	232d      	movs	r3, #45	@ 0x2d
 8022782:	426d      	negs	r5, r5
 8022784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022788:	4859      	ldr	r0, [pc, #356]	@ (80228f0 <_printf_i+0x238>)
 802278a:	230a      	movs	r3, #10
 802278c:	e011      	b.n	80227b2 <_printf_i+0xfa>
 802278e:	6821      	ldr	r1, [r4, #0]
 8022790:	6833      	ldr	r3, [r6, #0]
 8022792:	0608      	lsls	r0, r1, #24
 8022794:	f853 5b04 	ldr.w	r5, [r3], #4
 8022798:	d402      	bmi.n	80227a0 <_printf_i+0xe8>
 802279a:	0649      	lsls	r1, r1, #25
 802279c:	bf48      	it	mi
 802279e:	b2ad      	uxthmi	r5, r5
 80227a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80227a2:	4853      	ldr	r0, [pc, #332]	@ (80228f0 <_printf_i+0x238>)
 80227a4:	6033      	str	r3, [r6, #0]
 80227a6:	bf14      	ite	ne
 80227a8:	230a      	movne	r3, #10
 80227aa:	2308      	moveq	r3, #8
 80227ac:	2100      	movs	r1, #0
 80227ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80227b2:	6866      	ldr	r6, [r4, #4]
 80227b4:	60a6      	str	r6, [r4, #8]
 80227b6:	2e00      	cmp	r6, #0
 80227b8:	bfa2      	ittt	ge
 80227ba:	6821      	ldrge	r1, [r4, #0]
 80227bc:	f021 0104 	bicge.w	r1, r1, #4
 80227c0:	6021      	strge	r1, [r4, #0]
 80227c2:	b90d      	cbnz	r5, 80227c8 <_printf_i+0x110>
 80227c4:	2e00      	cmp	r6, #0
 80227c6:	d04b      	beq.n	8022860 <_printf_i+0x1a8>
 80227c8:	4616      	mov	r6, r2
 80227ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80227ce:	fb03 5711 	mls	r7, r3, r1, r5
 80227d2:	5dc7      	ldrb	r7, [r0, r7]
 80227d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80227d8:	462f      	mov	r7, r5
 80227da:	42bb      	cmp	r3, r7
 80227dc:	460d      	mov	r5, r1
 80227de:	d9f4      	bls.n	80227ca <_printf_i+0x112>
 80227e0:	2b08      	cmp	r3, #8
 80227e2:	d10b      	bne.n	80227fc <_printf_i+0x144>
 80227e4:	6823      	ldr	r3, [r4, #0]
 80227e6:	07df      	lsls	r7, r3, #31
 80227e8:	d508      	bpl.n	80227fc <_printf_i+0x144>
 80227ea:	6923      	ldr	r3, [r4, #16]
 80227ec:	6861      	ldr	r1, [r4, #4]
 80227ee:	4299      	cmp	r1, r3
 80227f0:	bfde      	ittt	le
 80227f2:	2330      	movle	r3, #48	@ 0x30
 80227f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80227f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80227fc:	1b92      	subs	r2, r2, r6
 80227fe:	6122      	str	r2, [r4, #16]
 8022800:	f8cd a000 	str.w	sl, [sp]
 8022804:	464b      	mov	r3, r9
 8022806:	aa03      	add	r2, sp, #12
 8022808:	4621      	mov	r1, r4
 802280a:	4640      	mov	r0, r8
 802280c:	f7ff fee6 	bl	80225dc <_printf_common>
 8022810:	3001      	adds	r0, #1
 8022812:	d14a      	bne.n	80228aa <_printf_i+0x1f2>
 8022814:	f04f 30ff 	mov.w	r0, #4294967295
 8022818:	b004      	add	sp, #16
 802281a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802281e:	6823      	ldr	r3, [r4, #0]
 8022820:	f043 0320 	orr.w	r3, r3, #32
 8022824:	6023      	str	r3, [r4, #0]
 8022826:	4833      	ldr	r0, [pc, #204]	@ (80228f4 <_printf_i+0x23c>)
 8022828:	2778      	movs	r7, #120	@ 0x78
 802282a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802282e:	6823      	ldr	r3, [r4, #0]
 8022830:	6831      	ldr	r1, [r6, #0]
 8022832:	061f      	lsls	r7, r3, #24
 8022834:	f851 5b04 	ldr.w	r5, [r1], #4
 8022838:	d402      	bmi.n	8022840 <_printf_i+0x188>
 802283a:	065f      	lsls	r7, r3, #25
 802283c:	bf48      	it	mi
 802283e:	b2ad      	uxthmi	r5, r5
 8022840:	6031      	str	r1, [r6, #0]
 8022842:	07d9      	lsls	r1, r3, #31
 8022844:	bf44      	itt	mi
 8022846:	f043 0320 	orrmi.w	r3, r3, #32
 802284a:	6023      	strmi	r3, [r4, #0]
 802284c:	b11d      	cbz	r5, 8022856 <_printf_i+0x19e>
 802284e:	2310      	movs	r3, #16
 8022850:	e7ac      	b.n	80227ac <_printf_i+0xf4>
 8022852:	4827      	ldr	r0, [pc, #156]	@ (80228f0 <_printf_i+0x238>)
 8022854:	e7e9      	b.n	802282a <_printf_i+0x172>
 8022856:	6823      	ldr	r3, [r4, #0]
 8022858:	f023 0320 	bic.w	r3, r3, #32
 802285c:	6023      	str	r3, [r4, #0]
 802285e:	e7f6      	b.n	802284e <_printf_i+0x196>
 8022860:	4616      	mov	r6, r2
 8022862:	e7bd      	b.n	80227e0 <_printf_i+0x128>
 8022864:	6833      	ldr	r3, [r6, #0]
 8022866:	6825      	ldr	r5, [r4, #0]
 8022868:	6961      	ldr	r1, [r4, #20]
 802286a:	1d18      	adds	r0, r3, #4
 802286c:	6030      	str	r0, [r6, #0]
 802286e:	062e      	lsls	r6, r5, #24
 8022870:	681b      	ldr	r3, [r3, #0]
 8022872:	d501      	bpl.n	8022878 <_printf_i+0x1c0>
 8022874:	6019      	str	r1, [r3, #0]
 8022876:	e002      	b.n	802287e <_printf_i+0x1c6>
 8022878:	0668      	lsls	r0, r5, #25
 802287a:	d5fb      	bpl.n	8022874 <_printf_i+0x1bc>
 802287c:	8019      	strh	r1, [r3, #0]
 802287e:	2300      	movs	r3, #0
 8022880:	6123      	str	r3, [r4, #16]
 8022882:	4616      	mov	r6, r2
 8022884:	e7bc      	b.n	8022800 <_printf_i+0x148>
 8022886:	6833      	ldr	r3, [r6, #0]
 8022888:	1d1a      	adds	r2, r3, #4
 802288a:	6032      	str	r2, [r6, #0]
 802288c:	681e      	ldr	r6, [r3, #0]
 802288e:	6862      	ldr	r2, [r4, #4]
 8022890:	2100      	movs	r1, #0
 8022892:	4630      	mov	r0, r6
 8022894:	f7fd fbec 	bl	8020070 <memchr>
 8022898:	b108      	cbz	r0, 802289e <_printf_i+0x1e6>
 802289a:	1b80      	subs	r0, r0, r6
 802289c:	6060      	str	r0, [r4, #4]
 802289e:	6863      	ldr	r3, [r4, #4]
 80228a0:	6123      	str	r3, [r4, #16]
 80228a2:	2300      	movs	r3, #0
 80228a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80228a8:	e7aa      	b.n	8022800 <_printf_i+0x148>
 80228aa:	6923      	ldr	r3, [r4, #16]
 80228ac:	4632      	mov	r2, r6
 80228ae:	4649      	mov	r1, r9
 80228b0:	4640      	mov	r0, r8
 80228b2:	47d0      	blx	sl
 80228b4:	3001      	adds	r0, #1
 80228b6:	d0ad      	beq.n	8022814 <_printf_i+0x15c>
 80228b8:	6823      	ldr	r3, [r4, #0]
 80228ba:	079b      	lsls	r3, r3, #30
 80228bc:	d413      	bmi.n	80228e6 <_printf_i+0x22e>
 80228be:	68e0      	ldr	r0, [r4, #12]
 80228c0:	9b03      	ldr	r3, [sp, #12]
 80228c2:	4298      	cmp	r0, r3
 80228c4:	bfb8      	it	lt
 80228c6:	4618      	movlt	r0, r3
 80228c8:	e7a6      	b.n	8022818 <_printf_i+0x160>
 80228ca:	2301      	movs	r3, #1
 80228cc:	4632      	mov	r2, r6
 80228ce:	4649      	mov	r1, r9
 80228d0:	4640      	mov	r0, r8
 80228d2:	47d0      	blx	sl
 80228d4:	3001      	adds	r0, #1
 80228d6:	d09d      	beq.n	8022814 <_printf_i+0x15c>
 80228d8:	3501      	adds	r5, #1
 80228da:	68e3      	ldr	r3, [r4, #12]
 80228dc:	9903      	ldr	r1, [sp, #12]
 80228de:	1a5b      	subs	r3, r3, r1
 80228e0:	42ab      	cmp	r3, r5
 80228e2:	dcf2      	bgt.n	80228ca <_printf_i+0x212>
 80228e4:	e7eb      	b.n	80228be <_printf_i+0x206>
 80228e6:	2500      	movs	r5, #0
 80228e8:	f104 0619 	add.w	r6, r4, #25
 80228ec:	e7f5      	b.n	80228da <_printf_i+0x222>
 80228ee:	bf00      	nop
 80228f0:	08022ba9 	.word	0x08022ba9
 80228f4:	08022bba 	.word	0x08022bba

080228f8 <__swbuf_r>:
 80228f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228fa:	460e      	mov	r6, r1
 80228fc:	4614      	mov	r4, r2
 80228fe:	4605      	mov	r5, r0
 8022900:	b118      	cbz	r0, 802290a <__swbuf_r+0x12>
 8022902:	6a03      	ldr	r3, [r0, #32]
 8022904:	b90b      	cbnz	r3, 802290a <__swbuf_r+0x12>
 8022906:	f7ff fbc5 	bl	8022094 <__sinit>
 802290a:	69a3      	ldr	r3, [r4, #24]
 802290c:	60a3      	str	r3, [r4, #8]
 802290e:	89a3      	ldrh	r3, [r4, #12]
 8022910:	071a      	lsls	r2, r3, #28
 8022912:	d501      	bpl.n	8022918 <__swbuf_r+0x20>
 8022914:	6923      	ldr	r3, [r4, #16]
 8022916:	b943      	cbnz	r3, 802292a <__swbuf_r+0x32>
 8022918:	4621      	mov	r1, r4
 802291a:	4628      	mov	r0, r5
 802291c:	f000 f82a 	bl	8022974 <__swsetup_r>
 8022920:	b118      	cbz	r0, 802292a <__swbuf_r+0x32>
 8022922:	f04f 37ff 	mov.w	r7, #4294967295
 8022926:	4638      	mov	r0, r7
 8022928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802292a:	6823      	ldr	r3, [r4, #0]
 802292c:	6922      	ldr	r2, [r4, #16]
 802292e:	1a98      	subs	r0, r3, r2
 8022930:	6963      	ldr	r3, [r4, #20]
 8022932:	b2f6      	uxtb	r6, r6
 8022934:	4283      	cmp	r3, r0
 8022936:	4637      	mov	r7, r6
 8022938:	dc05      	bgt.n	8022946 <__swbuf_r+0x4e>
 802293a:	4621      	mov	r1, r4
 802293c:	4628      	mov	r0, r5
 802293e:	f7ff fae1 	bl	8021f04 <_fflush_r>
 8022942:	2800      	cmp	r0, #0
 8022944:	d1ed      	bne.n	8022922 <__swbuf_r+0x2a>
 8022946:	68a3      	ldr	r3, [r4, #8]
 8022948:	3b01      	subs	r3, #1
 802294a:	60a3      	str	r3, [r4, #8]
 802294c:	6823      	ldr	r3, [r4, #0]
 802294e:	1c5a      	adds	r2, r3, #1
 8022950:	6022      	str	r2, [r4, #0]
 8022952:	701e      	strb	r6, [r3, #0]
 8022954:	6962      	ldr	r2, [r4, #20]
 8022956:	1c43      	adds	r3, r0, #1
 8022958:	429a      	cmp	r2, r3
 802295a:	d004      	beq.n	8022966 <__swbuf_r+0x6e>
 802295c:	89a3      	ldrh	r3, [r4, #12]
 802295e:	07db      	lsls	r3, r3, #31
 8022960:	d5e1      	bpl.n	8022926 <__swbuf_r+0x2e>
 8022962:	2e0a      	cmp	r6, #10
 8022964:	d1df      	bne.n	8022926 <__swbuf_r+0x2e>
 8022966:	4621      	mov	r1, r4
 8022968:	4628      	mov	r0, r5
 802296a:	f7ff facb 	bl	8021f04 <_fflush_r>
 802296e:	2800      	cmp	r0, #0
 8022970:	d0d9      	beq.n	8022926 <__swbuf_r+0x2e>
 8022972:	e7d6      	b.n	8022922 <__swbuf_r+0x2a>

08022974 <__swsetup_r>:
 8022974:	b538      	push	{r3, r4, r5, lr}
 8022976:	4b29      	ldr	r3, [pc, #164]	@ (8022a1c <__swsetup_r+0xa8>)
 8022978:	4605      	mov	r5, r0
 802297a:	6818      	ldr	r0, [r3, #0]
 802297c:	460c      	mov	r4, r1
 802297e:	b118      	cbz	r0, 8022988 <__swsetup_r+0x14>
 8022980:	6a03      	ldr	r3, [r0, #32]
 8022982:	b90b      	cbnz	r3, 8022988 <__swsetup_r+0x14>
 8022984:	f7ff fb86 	bl	8022094 <__sinit>
 8022988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802298c:	0719      	lsls	r1, r3, #28
 802298e:	d422      	bmi.n	80229d6 <__swsetup_r+0x62>
 8022990:	06da      	lsls	r2, r3, #27
 8022992:	d407      	bmi.n	80229a4 <__swsetup_r+0x30>
 8022994:	2209      	movs	r2, #9
 8022996:	602a      	str	r2, [r5, #0]
 8022998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802299c:	81a3      	strh	r3, [r4, #12]
 802299e:	f04f 30ff 	mov.w	r0, #4294967295
 80229a2:	e033      	b.n	8022a0c <__swsetup_r+0x98>
 80229a4:	0758      	lsls	r0, r3, #29
 80229a6:	d512      	bpl.n	80229ce <__swsetup_r+0x5a>
 80229a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80229aa:	b141      	cbz	r1, 80229be <__swsetup_r+0x4a>
 80229ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80229b0:	4299      	cmp	r1, r3
 80229b2:	d002      	beq.n	80229ba <__swsetup_r+0x46>
 80229b4:	4628      	mov	r0, r5
 80229b6:	f7ff fc85 	bl	80222c4 <_free_r>
 80229ba:	2300      	movs	r3, #0
 80229bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80229be:	89a3      	ldrh	r3, [r4, #12]
 80229c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80229c4:	81a3      	strh	r3, [r4, #12]
 80229c6:	2300      	movs	r3, #0
 80229c8:	6063      	str	r3, [r4, #4]
 80229ca:	6923      	ldr	r3, [r4, #16]
 80229cc:	6023      	str	r3, [r4, #0]
 80229ce:	89a3      	ldrh	r3, [r4, #12]
 80229d0:	f043 0308 	orr.w	r3, r3, #8
 80229d4:	81a3      	strh	r3, [r4, #12]
 80229d6:	6923      	ldr	r3, [r4, #16]
 80229d8:	b94b      	cbnz	r3, 80229ee <__swsetup_r+0x7a>
 80229da:	89a3      	ldrh	r3, [r4, #12]
 80229dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80229e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80229e4:	d003      	beq.n	80229ee <__swsetup_r+0x7a>
 80229e6:	4621      	mov	r1, r4
 80229e8:	4628      	mov	r0, r5
 80229ea:	f000 f83f 	bl	8022a6c <__smakebuf_r>
 80229ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80229f2:	f013 0201 	ands.w	r2, r3, #1
 80229f6:	d00a      	beq.n	8022a0e <__swsetup_r+0x9a>
 80229f8:	2200      	movs	r2, #0
 80229fa:	60a2      	str	r2, [r4, #8]
 80229fc:	6962      	ldr	r2, [r4, #20]
 80229fe:	4252      	negs	r2, r2
 8022a00:	61a2      	str	r2, [r4, #24]
 8022a02:	6922      	ldr	r2, [r4, #16]
 8022a04:	b942      	cbnz	r2, 8022a18 <__swsetup_r+0xa4>
 8022a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022a0a:	d1c5      	bne.n	8022998 <__swsetup_r+0x24>
 8022a0c:	bd38      	pop	{r3, r4, r5, pc}
 8022a0e:	0799      	lsls	r1, r3, #30
 8022a10:	bf58      	it	pl
 8022a12:	6962      	ldrpl	r2, [r4, #20]
 8022a14:	60a2      	str	r2, [r4, #8]
 8022a16:	e7f4      	b.n	8022a02 <__swsetup_r+0x8e>
 8022a18:	2000      	movs	r0, #0
 8022a1a:	e7f7      	b.n	8022a0c <__swsetup_r+0x98>
 8022a1c:	20000018 	.word	0x20000018

08022a20 <__swhatbuf_r>:
 8022a20:	b570      	push	{r4, r5, r6, lr}
 8022a22:	460c      	mov	r4, r1
 8022a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a28:	2900      	cmp	r1, #0
 8022a2a:	b096      	sub	sp, #88	@ 0x58
 8022a2c:	4615      	mov	r5, r2
 8022a2e:	461e      	mov	r6, r3
 8022a30:	da0d      	bge.n	8022a4e <__swhatbuf_r+0x2e>
 8022a32:	89a3      	ldrh	r3, [r4, #12]
 8022a34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022a38:	f04f 0100 	mov.w	r1, #0
 8022a3c:	bf14      	ite	ne
 8022a3e:	2340      	movne	r3, #64	@ 0x40
 8022a40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022a44:	2000      	movs	r0, #0
 8022a46:	6031      	str	r1, [r6, #0]
 8022a48:	602b      	str	r3, [r5, #0]
 8022a4a:	b016      	add	sp, #88	@ 0x58
 8022a4c:	bd70      	pop	{r4, r5, r6, pc}
 8022a4e:	466a      	mov	r2, sp
 8022a50:	f000 f848 	bl	8022ae4 <_fstat_r>
 8022a54:	2800      	cmp	r0, #0
 8022a56:	dbec      	blt.n	8022a32 <__swhatbuf_r+0x12>
 8022a58:	9901      	ldr	r1, [sp, #4]
 8022a5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022a5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022a62:	4259      	negs	r1, r3
 8022a64:	4159      	adcs	r1, r3
 8022a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022a6a:	e7eb      	b.n	8022a44 <__swhatbuf_r+0x24>

08022a6c <__smakebuf_r>:
 8022a6c:	898b      	ldrh	r3, [r1, #12]
 8022a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022a70:	079d      	lsls	r5, r3, #30
 8022a72:	4606      	mov	r6, r0
 8022a74:	460c      	mov	r4, r1
 8022a76:	d507      	bpl.n	8022a88 <__smakebuf_r+0x1c>
 8022a78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022a7c:	6023      	str	r3, [r4, #0]
 8022a7e:	6123      	str	r3, [r4, #16]
 8022a80:	2301      	movs	r3, #1
 8022a82:	6163      	str	r3, [r4, #20]
 8022a84:	b003      	add	sp, #12
 8022a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a88:	ab01      	add	r3, sp, #4
 8022a8a:	466a      	mov	r2, sp
 8022a8c:	f7ff ffc8 	bl	8022a20 <__swhatbuf_r>
 8022a90:	9f00      	ldr	r7, [sp, #0]
 8022a92:	4605      	mov	r5, r0
 8022a94:	4639      	mov	r1, r7
 8022a96:	4630      	mov	r0, r6
 8022a98:	f7ff f924 	bl	8021ce4 <_malloc_r>
 8022a9c:	b948      	cbnz	r0, 8022ab2 <__smakebuf_r+0x46>
 8022a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022aa2:	059a      	lsls	r2, r3, #22
 8022aa4:	d4ee      	bmi.n	8022a84 <__smakebuf_r+0x18>
 8022aa6:	f023 0303 	bic.w	r3, r3, #3
 8022aaa:	f043 0302 	orr.w	r3, r3, #2
 8022aae:	81a3      	strh	r3, [r4, #12]
 8022ab0:	e7e2      	b.n	8022a78 <__smakebuf_r+0xc>
 8022ab2:	89a3      	ldrh	r3, [r4, #12]
 8022ab4:	6020      	str	r0, [r4, #0]
 8022ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022aba:	81a3      	strh	r3, [r4, #12]
 8022abc:	9b01      	ldr	r3, [sp, #4]
 8022abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022ac2:	b15b      	cbz	r3, 8022adc <__smakebuf_r+0x70>
 8022ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022ac8:	4630      	mov	r0, r6
 8022aca:	f000 f81d 	bl	8022b08 <_isatty_r>
 8022ace:	b128      	cbz	r0, 8022adc <__smakebuf_r+0x70>
 8022ad0:	89a3      	ldrh	r3, [r4, #12]
 8022ad2:	f023 0303 	bic.w	r3, r3, #3
 8022ad6:	f043 0301 	orr.w	r3, r3, #1
 8022ada:	81a3      	strh	r3, [r4, #12]
 8022adc:	89a3      	ldrh	r3, [r4, #12]
 8022ade:	431d      	orrs	r5, r3
 8022ae0:	81a5      	strh	r5, [r4, #12]
 8022ae2:	e7cf      	b.n	8022a84 <__smakebuf_r+0x18>

08022ae4 <_fstat_r>:
 8022ae4:	b538      	push	{r3, r4, r5, lr}
 8022ae6:	4d07      	ldr	r5, [pc, #28]	@ (8022b04 <_fstat_r+0x20>)
 8022ae8:	2300      	movs	r3, #0
 8022aea:	4604      	mov	r4, r0
 8022aec:	4608      	mov	r0, r1
 8022aee:	4611      	mov	r1, r2
 8022af0:	602b      	str	r3, [r5, #0]
 8022af2:	f7fd fe42 	bl	802077a <_fstat>
 8022af6:	1c43      	adds	r3, r0, #1
 8022af8:	d102      	bne.n	8022b00 <_fstat_r+0x1c>
 8022afa:	682b      	ldr	r3, [r5, #0]
 8022afc:	b103      	cbz	r3, 8022b00 <_fstat_r+0x1c>
 8022afe:	6023      	str	r3, [r4, #0]
 8022b00:	bd38      	pop	{r3, r4, r5, pc}
 8022b02:	bf00      	nop
 8022b04:	200001d0 	.word	0x200001d0

08022b08 <_isatty_r>:
 8022b08:	b538      	push	{r3, r4, r5, lr}
 8022b0a:	4d06      	ldr	r5, [pc, #24]	@ (8022b24 <_isatty_r+0x1c>)
 8022b0c:	2300      	movs	r3, #0
 8022b0e:	4604      	mov	r4, r0
 8022b10:	4608      	mov	r0, r1
 8022b12:	602b      	str	r3, [r5, #0]
 8022b14:	f7fd fe41 	bl	802079a <_isatty>
 8022b18:	1c43      	adds	r3, r0, #1
 8022b1a:	d102      	bne.n	8022b22 <_isatty_r+0x1a>
 8022b1c:	682b      	ldr	r3, [r5, #0]
 8022b1e:	b103      	cbz	r3, 8022b22 <_isatty_r+0x1a>
 8022b20:	6023      	str	r3, [r4, #0]
 8022b22:	bd38      	pop	{r3, r4, r5, pc}
 8022b24:	200001d0 	.word	0x200001d0

08022b28 <_init>:
 8022b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b2a:	bf00      	nop
 8022b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022b2e:	bc08      	pop	{r3}
 8022b30:	469e      	mov	lr, r3
 8022b32:	4770      	bx	lr

08022b34 <_fini>:
 8022b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b36:	bf00      	nop
 8022b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022b3a:	bc08      	pop	{r3}
 8022b3c:	469e      	mov	lr, r3
 8022b3e:	4770      	bx	lr
