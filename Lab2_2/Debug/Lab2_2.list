
Lab2_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003924  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ae0  08003ae0  00004ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b20  08003b20  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b20  08003b20  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b20  08003b20  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b20  08003b20  00004b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b24  08003b24  00004b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b28  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08003b34  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08003b34  00005098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a925  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9c  00000000  00000000  0000f961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00011400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e9  00000000  00000000  00011e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d19  00000000  00000000  00012679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af90  00000000  00000000  0003c392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106588  00000000  00000000  00047322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d8aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b04  00000000  00000000  0014d8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001503f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003ac8 	.word	0x08003ac8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003ac8 	.word	0x08003ac8

080001fc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//This is the interrupt function that is called when the button is pressed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
	LEDState = !LEDState;
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <HAL_GPIO_EXTI_Callback+0x40>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	bf14      	ite	ne
 800020e:	2301      	movne	r3, #1
 8000210:	2300      	moveq	r3, #0
 8000212:	b2db      	uxtb	r3, r3
 8000214:	f083 0301 	eor.w	r3, r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <HAL_GPIO_EXTI_Callback+0x40>)
 8000222:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LEDState);
 8000224:	4b05      	ldr	r3, [pc, #20]	@ (800023c <HAL_GPIO_EXTI_Callback+0x40>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800022e:	4804      	ldr	r0, [pc, #16]	@ (8000240 <HAL_GPIO_EXTI_Callback+0x44>)
 8000230:	f001 ff72 	bl	8002118 <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000090 	.word	0x20000090
 8000240:	48000400 	.word	0x48000400

08000244 <MX_ADC1_Init1>:
/**
  * @brief  The application entry point.
  * @retval int
  */
static void MX_ADC1_Init1(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

/* USER CODE END ADC1_Init 1 */

/** Common config
*/
hadc1.Instance = ADC1;
 8000248:	4b1c      	ldr	r3, [pc, #112]	@ (80002bc <MX_ADC1_Init1+0x78>)
 800024a:	4a1d      	ldr	r2, [pc, #116]	@ (80002c0 <MX_ADC1_Init1+0x7c>)
 800024c:	601a      	str	r2, [r3, #0]
hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800024e:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <MX_ADC1_Init1+0x78>)
 8000250:	2200      	movs	r2, #0
 8000252:	605a      	str	r2, [r3, #4]
hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000254:	4b19      	ldr	r3, [pc, #100]	@ (80002bc <MX_ADC1_Init1+0x78>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025a:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <MX_ADC1_Init1+0x78>)
 800025c:	2200      	movs	r2, #0
 800025e:	60da      	str	r2, [r3, #12]
hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000260:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <MX_ADC1_Init1+0x78>)
 8000262:	2200      	movs	r2, #0
 8000264:	611a      	str	r2, [r3, #16]
hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000266:	4b15      	ldr	r3, [pc, #84]	@ (80002bc <MX_ADC1_Init1+0x78>)
 8000268:	2204      	movs	r2, #4
 800026a:	615a      	str	r2, [r3, #20]
hadc1.Init.LowPowerAutoWait = DISABLE;
 800026c:	4b13      	ldr	r3, [pc, #76]	@ (80002bc <MX_ADC1_Init1+0x78>)
 800026e:	2200      	movs	r2, #0
 8000270:	761a      	strb	r2, [r3, #24]
hadc1.Init.ContinuousConvMode = DISABLE;
 8000272:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <MX_ADC1_Init1+0x78>)
 8000274:	2200      	movs	r2, #0
 8000276:	765a      	strb	r2, [r3, #25]
hadc1.Init.NbrOfConversion = 1;
 8000278:	4b10      	ldr	r3, [pc, #64]	@ (80002bc <MX_ADC1_Init1+0x78>)
 800027a:	2201      	movs	r2, #1
 800027c:	61da      	str	r2, [r3, #28]
hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027e:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <MX_ADC1_Init1+0x78>)
 8000280:	2200      	movs	r2, #0
 8000282:	f883 2020 	strb.w	r2, [r3, #32]
hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000286:	4b0d      	ldr	r3, [pc, #52]	@ (80002bc <MX_ADC1_Init1+0x78>)
 8000288:	2200      	movs	r2, #0
 800028a:	629a      	str	r2, [r3, #40]	@ 0x28
hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800028c:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <MX_ADC1_Init1+0x78>)
 800028e:	2200      	movs	r2, #0
 8000290:	62da      	str	r2, [r3, #44]	@ 0x2c
hadc1.Init.DMAContinuousRequests = DISABLE;
 8000292:	4b0a      	ldr	r3, [pc, #40]	@ (80002bc <MX_ADC1_Init1+0x78>)
 8000294:	2200      	movs	r2, #0
 8000296:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800029a:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <MX_ADC1_Init1+0x78>)
 800029c:	2200      	movs	r2, #0
 800029e:	635a      	str	r2, [r3, #52]	@ 0x34
hadc1.Init.OversamplingMode = DISABLE;
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <MX_ADC1_Init1+0x78>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a8:	4804      	ldr	r0, [pc, #16]	@ (80002bc <MX_ADC1_Init1+0x78>)
 80002aa:	f000 fcdd 	bl	8000c68 <HAL_ADC_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_ADC1_Init1+0x74>
{
Error_Handler();
 80002b4:	f000 f982 	bl	80005bc <Error_Handler>

/* USER CODE BEGIN ADC1_Init 2 */

/* USER CODE END ADC1_Init 2 */

}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000028 	.word	0x20000028
 80002c0:	50040000 	.word	0x50040000

080002c4 <main>:
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b092      	sub	sp, #72	@ 0x48
 80002c8:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002da:	f000 fa50 	bl	800077e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002de:	f000 f8c3 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e2:	f000 f913 	bl	800050c <MX_GPIO_Init>
  MX_ADC1_Init1();
 80002e6:	f7ff ffad 	bl	8000244 <MX_ADC1_Init1>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (LEDState){
 80002ea:	4b56      	ldr	r3, [pc, #344]	@ (8000444 <main+0x180>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d069      	beq.n	80003c6 <main+0x102>
		  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) Error_Handler();
 80002f2:	217f      	movs	r1, #127	@ 0x7f
 80002f4:	4854      	ldr	r0, [pc, #336]	@ (8000448 <main+0x184>)
 80002f6:	f001 fc0b 	bl	8001b10 <HAL_ADCEx_Calibration_Start>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <main+0x40>
 8000300:	f000 f95c 	bl	80005bc <Error_Handler>
		  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000304:	4b51      	ldr	r3, [pc, #324]	@ (800044c <main+0x188>)
 8000306:	603b      	str	r3, [r7, #0]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000308:	2306      	movs	r3, #6
 800030a:	607b      	str	r3, [r7, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800030c:	2300      	movs	r3, #0
 800030e:	60bb      	str	r3, [r7, #8]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000310:	237f      	movs	r3, #127	@ 0x7f
 8000312:	60fb      	str	r3, [r7, #12]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000314:	2304      	movs	r3, #4
 8000316:	613b      	str	r3, [r7, #16]
		  sConfig.Offset = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031c:	463b      	mov	r3, r7
 800031e:	4619      	mov	r1, r3
 8000320:	4849      	ldr	r0, [pc, #292]	@ (8000448 <main+0x184>)
 8000322:	f000 fee7 	bl	80010f4 <HAL_ADC_ConfigChannel>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <main+0x6c>
		  {
		  Error_Handler();
 800032c:	f000 f946 	bl	80005bc <Error_Handler>
		  }
		  HAL_ADC_Start(&hadc1);
 8000330:	4845      	ldr	r0, [pc, #276]	@ (8000448 <main+0x184>)
 8000332:	f000 fddf 	bl	8000ef4 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc1, 300) == HAL_OK){
 8000336:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800033a:	4843      	ldr	r0, [pc, #268]	@ (8000448 <main+0x184>)
 800033c:	f000 fe3d 	bl	8000fba <HAL_ADC_PollForConversion>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d1d1      	bne.n	80002ea <main+0x26>
			  uint16_t TS_Data = HAL_ADC_GetValue(&hadc1);
 8000346:	4840      	ldr	r0, [pc, #256]	@ (8000448 <main+0x184>)
 8000348:	f000 fec6 	bl	80010d8 <HAL_ADC_GetValue>
 800034c:	4603      	mov	r3, r0
 800034e:	86fb      	strh	r3, [r7, #54]	@ 0x36
			  float calibratedTS_Data = (float) (3.3/3.0)*((int32_t)TS_Data);
 8000350:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000352:	ee07 3a90 	vmov	s15, r3
 8000356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800035a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000450 <main+0x18c>
 800035e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000362:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30


			  int32_t TS_CAL2 = (int32_t) *((uint16_t*) 0x1FFF75CA);
 8000366:	4b3b      	ldr	r3, [pc, #236]	@ (8000454 <main+0x190>)
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  int32_t TS_CAL1 = (int32_t) *((uint16_t*) 0x1FFF75A8);
 800036c:	4b3a      	ldr	r3, [pc, #232]	@ (8000458 <main+0x194>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	62bb      	str	r3, [r7, #40]	@ 0x28
			  int TS_CAL2_TEMP = 130;
 8000372:	2382      	movs	r3, #130	@ 0x82
 8000374:	627b      	str	r3, [r7, #36]	@ 0x24
			  int TS_CAL1_TEMP = 30;
 8000376:	231e      	movs	r3, #30
 8000378:	623b      	str	r3, [r7, #32]

			  float avgSlope = (float) (TS_CAL2 - TS_CAL1)/(TS_CAL2_TEMP - TS_CAL1_TEMP);
 800037a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800037c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	ee07 3a90 	vmov	s15, r3
 8000384:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800038a:	6a3b      	ldr	r3, [r7, #32]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	ee07 3a90 	vmov	s15, r3
 8000392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800039a:	edc7 7a07 	vstr	s15, [r7, #28]
			  temp = (calibratedTS_Data - TS_CAL1)/avgSlope + 30;
 800039e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003a0:	ee07 3a90 	vmov	s15, r3
 80003a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003a8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80003ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 80003b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80003b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003b8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80003bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003c0:	edc7 7a06 	vstr	s15, [r7, #24]
 80003c4:	e791      	b.n	80002ea <main+0x26>
	  }
	  }else{
		  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80003c6:	4b25      	ldr	r3, [pc, #148]	@ (800045c <main+0x198>)
 80003c8:	603b      	str	r3, [r7, #0]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ca:	2306      	movs	r3, #6
 80003cc:	607b      	str	r3, [r7, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003d2:	237f      	movs	r3, #127	@ 0x7f
 80003d4:	60fb      	str	r3, [r7, #12]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003d6:	2304      	movs	r3, #4
 80003d8:	613b      	str	r3, [r7, #16]
		  sConfig.Offset = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	463b      	mov	r3, r7
 80003e0:	4619      	mov	r1, r3
 80003e2:	4819      	ldr	r0, [pc, #100]	@ (8000448 <main+0x184>)
 80003e4:	f000 fe86 	bl	80010f4 <HAL_ADC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <main+0x12e>
		  {
		  Error_Handler();
 80003ee:	f000 f8e5 	bl	80005bc <Error_Handler>
		  }
		  HAL_ADC_Start(&hadc1);
 80003f2:	4815      	ldr	r0, [pc, #84]	@ (8000448 <main+0x184>)
 80003f4:	f000 fd7e 	bl	8000ef4 <HAL_ADC_Start>
		  	  if(HAL_ADC_PollForConversion(&hadc1, 300) == HAL_OK){
 80003f8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80003fc:	4812      	ldr	r0, [pc, #72]	@ (8000448 <main+0x184>)
 80003fe:	f000 fddc 	bl	8000fba <HAL_ADC_PollForConversion>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	f47f af70 	bne.w	80002ea <main+0x26>
		  		  int32_t ADCValue = (int32_t) HAL_ADC_GetValue(&hadc1);
 800040a:	480f      	ldr	r0, [pc, #60]	@ (8000448 <main+0x184>)
 800040c:	f000 fe64 	bl	80010d8 <HAL_ADC_GetValue>
 8000410:	4603      	mov	r3, r0
 8000412:	647b      	str	r3, [r7, #68]	@ 0x44
		  		  int32_t VREFINT_CAL =(int32_t) *((uint16_t *) 0x1FFF75AA); //the calibration value
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <main+0x19c>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	643b      	str	r3, [r7, #64]	@ 0x40
		  		  float VREF_Charac = 3.0; //voltage characterized at VREFINT during manufacturing, specified in datasheet
 800041a:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <main+0x1a0>)
 800041c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  		  VREF = VREF_Charac*((float) VREFINT_CAL/ADCValue);
 800041e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000420:	ee07 3a90 	vmov	s15, r3
 8000424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800042a:	ee07 3a90 	vmov	s15, r3
 800042e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000436:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800043a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	  if (LEDState){
 8000442:	e752      	b.n	80002ea <main+0x26>
 8000444:	20000090 	.word	0x20000090
 8000448:	20000028 	.word	0x20000028
 800044c:	c7520000 	.word	0xc7520000
 8000450:	3f8ccccd 	.word	0x3f8ccccd
 8000454:	1fff75ca 	.word	0x1fff75ca
 8000458:	1fff75a8 	.word	0x1fff75a8
 800045c:	80000001 	.word	0x80000001
 8000460:	1fff75aa 	.word	0x1fff75aa
 8000464:	40400000 	.word	0x40400000

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b096      	sub	sp, #88	@ 0x58
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2244      	movs	r2, #68	@ 0x44
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f003 fafa 	bl	8003a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	463b      	mov	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800048a:	2000      	movs	r0, #0
 800048c:	f001 fe94 	bl	80021b8 <HAL_PWREx_ControlVoltageScaling>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000496:	f000 f891 	bl	80005bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800049a:	2310      	movs	r3, #16
 800049c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800049e:	2301      	movs	r3, #1
 80004a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004a6:	2360      	movs	r3, #96	@ 0x60
 80004a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004ae:	2301      	movs	r3, #1
 80004b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80004b6:	233c      	movs	r3, #60	@ 0x3c
 80004b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004be:	2302      	movs	r3, #2
 80004c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 ff18 	bl	8002300 <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004d6:	f000 f871 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	2303      	movs	r3, #3
 80004e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004ee:	463b      	mov	r3, r7
 80004f0:	2105      	movs	r1, #5
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 fb1e 	bl	8002b34 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004fe:	f000 f85d 	bl	80005bc <Error_Handler>
  }
}
 8000502:	bf00      	nop
 8000504:	3758      	adds	r7, #88	@ 0x58
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b23      	ldr	r3, [pc, #140]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a22      	ldr	r2, [pc, #136]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b20      	ldr	r3, [pc, #128]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b1d      	ldr	r3, [pc, #116]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a1c      	ldr	r2, [pc, #112]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b1a      	ldr	r3, [pc, #104]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000558:	4816      	ldr	r0, [pc, #88]	@ (80005b4 <MX_GPIO_Init+0xa8>)
 800055a:	f001 fddd 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800055e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000564:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	4810      	ldr	r0, [pc, #64]	@ (80005b8 <MX_GPIO_Init+0xac>)
 8000576:	f001 fc3d 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800057a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4808      	ldr	r0, [pc, #32]	@ (80005b4 <MX_GPIO_Init+0xa8>)
 8000594:	f001 fc2e 	bl	8001df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	2028      	movs	r0, #40	@ 0x28
 800059e:	f001 fbf2 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a2:	2028      	movs	r0, #40	@ 0x28
 80005a4:	f001 fc0b 	bl	8001dbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400
 80005b8:	48000800 	.word	0x48000800

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <HAL_MspInit+0x44>)
 80005d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005d2:	4a0e      	ldr	r2, [pc, #56]	@ (800060c <HAL_MspInit+0x44>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <HAL_MspInit+0x44>)
 80005dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <HAL_MspInit+0x44>)
 80005e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ea:	4a08      	ldr	r2, [pc, #32]	@ (800060c <HAL_MspInit+0x44>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <HAL_MspInit+0x44>)
 80005f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0a8      	sub	sp, #160	@ 0xa0
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2294      	movs	r2, #148	@ 0x94
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f003 fa25 	bl	8003a70 <memset>
  if(hadc->Instance==ADC1)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a19      	ldr	r2, [pc, #100]	@ (8000690 <HAL_ADC_MspInit+0x80>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d12b      	bne.n	8000688 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000630:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000634:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000636:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800063a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800063e:	2301      	movs	r3, #1
 8000640:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000646:	2318      	movs	r3, #24
 8000648:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000656:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fced 	bl	8003040 <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 800066c:	f7ff ffa6 	bl	80005bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000670:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <HAL_ADC_MspInit+0x84>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_ADC_MspInit+0x84>)
 8000676:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800067a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <HAL_ADC_MspInit+0x84>)
 800067e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000688:	bf00      	nop
 800068a:	37a0      	adds	r7, #160	@ 0xa0
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	50040000 	.word	0x50040000
 8000694:	40021000 	.word	0x40021000

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <NMI_Handler+0x4>

080006a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <MemManage_Handler+0x4>

080006b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <UsageFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ee:	f000 f89b 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80006fa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006fe:	f001 fd23 	bl	8002148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <SystemInit+0x20>)
 800070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000712:	4a05      	ldr	r2, [pc, #20]	@ (8000728 <SystemInit+0x20>)
 8000714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000730:	f7ff ffea 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	@ (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	@ (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	@ (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	@ (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	@ (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f003 f991 	bl	8003a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075e:	f7ff fdb1 	bl	80002c4 <main>

08000762 <LoopForever>:

LoopForever:
    b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000764:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000770:	08003b28 	.word	0x08003b28
  ldr r2, =_sbss
 8000774:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000778:	20000098 	.word	0x20000098

0800077c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_IRQHandler>

0800077e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f001 faf1 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f80e 	bl	80007b0 <HAL_InitTick>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	e001      	b.n	80007a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007a0:	f7ff ff12 	bl	80005c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007a4:	79fb      	ldrb	r3, [r7, #7]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <HAL_InitTick+0x6c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d023      	beq.n	800080c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <HAL_InitTick+0x70>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <HAL_InitTick+0x6c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fafd 	bl	8001dda <HAL_SYSTICK_Config>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10f      	bne.n	8000806 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d809      	bhi.n	8000800 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f001 fac7 	bl	8001d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <HAL_InitTick+0x74>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	e007      	b.n	8000810 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e004      	b.n	8000810 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	e001      	b.n	8000810 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000008 	.word	0x20000008
 8000820:	20000000 	.word	0x20000000
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	20000094 	.word	0x20000094

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000094 	.word	0x20000094

08000868 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	609a      	str	r2, [r3, #8]
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	431a      	orrs	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	609a      	str	r2, [r3, #8]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3360      	adds	r3, #96	@ 0x60
 80008e2:	461a      	mov	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <LL_ADC_SetOffset+0x44>)
 80008f2:	4013      	ands	r3, r2
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	4313      	orrs	r3, r2
 8000900:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000908:	bf00      	nop
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	03fff000 	.word	0x03fff000

08000918 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3360      	adds	r3, #96	@ 0x60
 8000926:	461a      	mov	r2, r3
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3360      	adds	r3, #96	@ 0x60
 8000954:	461a      	mov	r2, r3
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	431a      	orrs	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800096e:	bf00      	nop
 8000970:	371c      	adds	r7, #28
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	431a      	orrs	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	615a      	str	r2, [r3, #20]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b087      	sub	sp, #28
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3330      	adds	r3, #48	@ 0x30
 80009d6:	461a      	mov	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	0a1b      	lsrs	r3, r3, #8
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	f003 030c 	and.w	r3, r3, #12
 80009e2:	4413      	add	r3, r2
 80009e4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	211f      	movs	r1, #31
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	401a      	ands	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	0e9b      	lsrs	r3, r3, #26
 80009fe:	f003 011f 	and.w	r1, r3, #31
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	f003 031f 	and.w	r3, r3, #31
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a12:	bf00      	nop
 8000a14:	371c      	adds	r7, #28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b087      	sub	sp, #28
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3314      	adds	r3, #20
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	0e5b      	lsrs	r3, r3, #25
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	4413      	add	r3, r2
 8000a3c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	0d1b      	lsrs	r3, r3, #20
 8000a46:	f003 031f 	and.w	r3, r3, #31
 8000a4a:	2107      	movs	r1, #7
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	401a      	ands	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	0d1b      	lsrs	r3, r3, #20
 8000a58:	f003 031f 	and.w	r3, r3, #31
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	431a      	orrs	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	401a      	ands	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0318 	and.w	r3, r3, #24
 8000a96:	4908      	ldr	r1, [pc, #32]	@ (8000ab8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a98:	40d9      	lsrs	r1, r3
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	400b      	ands	r3, r1
 8000a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	0007ffff 	.word	0x0007ffff

08000abc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000acc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6093      	str	r3, [r2, #8]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000af4:	d101      	bne.n	8000afa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000b18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000b44:	d101      	bne.n	8000b4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b6c:	f043 0201 	orr.w	r2, r3, #1
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b94:	f043 0202 	orr.w	r2, r3, #2
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d101      	bne.n	8000bc0 <LL_ADC_IsEnabled+0x18>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e000      	b.n	8000bc2 <LL_ADC_IsEnabled+0x1a>
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d101      	bne.n	8000be6 <LL_ADC_IsDisableOngoing+0x18>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <LL_ADC_IsDisableOngoing+0x1a>
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c08:	f043 0204 	orr.w	r2, r3, #4
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d101      	bne.n	8000c34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d101      	bne.n	8000c5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e129      	b.n	8000ed6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d109      	bne.n	8000ca4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff fcbd 	bl	8000610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff19 	bl	8000ae0 <LL_ADC_IsDeepPowerDownEnabled>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d004      	beq.n	8000cbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff feff 	bl	8000abc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff34 	bl	8000b30 <LL_ADC_IsInternalRegulatorEnabled>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d115      	bne.n	8000cfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff18 	bl	8000b08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000cd8:	4b81      	ldr	r3, [pc, #516]	@ (8000ee0 <HAL_ADC_Init+0x278>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	099b      	lsrs	r3, r3, #6
 8000cde:	4a81      	ldr	r2, [pc, #516]	@ (8000ee4 <HAL_ADC_Init+0x27c>)
 8000ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce4:	099b      	lsrs	r3, r3, #6
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000cec:	e002      	b.n	8000cf4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f9      	bne.n	8000cee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff16 	bl	8000b30 <LL_ADC_IsInternalRegulatorEnabled>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10d      	bne.n	8000d26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f043 0210 	orr.w	r2, r3, #16
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff76 	bl	8000c1c <LL_ADC_REG_IsConversionOngoing>
 8000d30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 80c2 	bne.w	8000ec4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 80be 	bne.w	8000ec4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000d50:	f043 0202 	orr.w	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff23 	bl	8000ba8 <LL_ADC_IsEnabled>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10b      	bne.n	8000d80 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d68:	485f      	ldr	r0, [pc, #380]	@ (8000ee8 <HAL_ADC_Init+0x280>)
 8000d6a:	f7ff ff1d 	bl	8000ba8 <LL_ADC_IsEnabled>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	485c      	ldr	r0, [pc, #368]	@ (8000eec <HAL_ADC_Init+0x284>)
 8000d7c:	f7ff fd74 	bl	8000868 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7e5b      	ldrb	r3, [r3, #25]
 8000d84:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d8a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000d90:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000d96:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d106      	bne.n	8000dbc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db2:	3b01      	subs	r3, #1
 8000db4:	045b      	lsls	r3, r3, #17
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d009      	beq.n	8000dd8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	4b44      	ldr	r3, [pc, #272]	@ (8000ef0 <HAL_ADC_Init+0x288>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	69b9      	ldr	r1, [r7, #24]
 8000de8:	430b      	orrs	r3, r1
 8000dea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff26 	bl	8000c42 <LL_ADC_INJ_IsConversionOngoing>
 8000df6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d140      	bne.n	8000e80 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d13d      	bne.n	8000e80 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7e1b      	ldrb	r3, [r3, #24]
 8000e0c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e0e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e16:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e26:	f023 0306 	bic.w	r3, r3, #6
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	69b9      	ldr	r1, [r7, #24]
 8000e30:	430b      	orrs	r3, r1
 8000e32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d118      	bne.n	8000e70 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000e48:	f023 0304 	bic.w	r3, r3, #4
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000e54:	4311      	orrs	r1, r2
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000e5a:	4311      	orrs	r1, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000e60:	430a      	orrs	r2, r1
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0201 	orr.w	r2, r2, #1
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	e007      	b.n	8000e80 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d10c      	bne.n	8000ea2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f023 010f 	bic.w	r1, r3, #15
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ea0:	e007      	b.n	8000eb2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 020f 	bic.w	r2, r2, #15
 8000eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	f023 0303 	bic.w	r3, r3, #3
 8000eba:	f043 0201 	orr.w	r2, r3, #1
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ec2:	e007      	b.n	8000ed4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec8:	f043 0210 	orr.w	r2, r3, #16
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ed4:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	053e2d63 	.word	0x053e2d63
 8000ee8:	50040000 	.word	0x50040000
 8000eec:	50040300 	.word	0x50040300
 8000ef0:	fff0c007 	.word	0xfff0c007

08000ef4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe8b 	bl	8000c1c <LL_ADC_REG_IsConversionOngoing>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d14f      	bne.n	8000fac <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d101      	bne.n	8000f1a <HAL_ADC_Start+0x26>
 8000f16:	2302      	movs	r3, #2
 8000f18:	e04b      	b.n	8000fb2 <HAL_ADC_Start+0xbe>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fce2 	bl	80018ec <ADC_Enable>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d137      	bne.n	8000fa2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f52:	d106      	bne.n	8000f62 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f58:	f023 0206 	bic.w	r2, r3, #6
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	221c      	movs	r2, #28
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d007      	beq.n	8000f96 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe2a 	bl	8000bf4 <LL_ADC_REG_StartConversion>
 8000fa0:	e006      	b.n	8000fb0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8000faa:	e001      	b.n	8000fb0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fac:	2302      	movs	r3, #2
 8000fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d102      	bne.n	8000fd2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e010      	b.n	8000ff4 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d007      	beq.n	8000ff0 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe4:	f043 0220 	orr.w	r2, r3, #32
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e06f      	b.n	80010d0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ff4:	f7ff fc2c 	bl	8000850 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ffa:	e021      	b.n	8001040 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001002:	d01d      	beq.n	8001040 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001004:	f7ff fc24 	bl	8000850 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d302      	bcc.n	800101a <HAL_ADC_PollForConversion+0x60>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d112      	bne.n	8001040 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10b      	bne.n	8001040 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102c:	f043 0204 	orr.w	r2, r3, #4
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e047      	b.n	80010d0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0d6      	beq.n	8000ffc <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fc9e 	bl	80009a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01c      	beq.n	80010a4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7e5b      	ldrb	r3, [r3, #25]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b08      	cmp	r3, #8
 800107e:	d111      	bne.n	80010a4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001084:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d105      	bne.n	80010a4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	f043 0201 	orr.w	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d104      	bne.n	80010bc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2208      	movs	r2, #8
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e008      	b.n	80010ce <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0b6      	sub	sp, #216	@ 0xd8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x22>
 8001112:	2302      	movs	r3, #2
 8001114:	e3d5      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x7ce>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fd7a 	bl	8000c1c <LL_ADC_REG_IsConversionOngoing>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 83ba 	bne.w	80018a4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b05      	cmp	r3, #5
 800113e:	d824      	bhi.n	800118a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	3b02      	subs	r3, #2
 8001146:	2b03      	cmp	r3, #3
 8001148:	d81b      	bhi.n	8001182 <HAL_ADC_ConfigChannel+0x8e>
 800114a:	a201      	add	r2, pc, #4	@ (adr r2, 8001150 <HAL_ADC_ConfigChannel+0x5c>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	08001161 	.word	0x08001161
 8001154:	08001169 	.word	0x08001169
 8001158:	08001171 	.word	0x08001171
 800115c:	08001179 	.word	0x08001179
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001160:	230c      	movs	r3, #12
 8001162:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001166:	e010      	b.n	800118a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001168:	2312      	movs	r3, #18
 800116a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800116e:	e00c      	b.n	800118a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001170:	2318      	movs	r3, #24
 8001172:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001176:	e008      	b.n	800118a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001178:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001180:	e003      	b.n	800118a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001182:	2306      	movs	r3, #6
 8001184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001188:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001198:	f7ff fc15 	bl	80009c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd3b 	bl	8000c1c <LL_ADC_REG_IsConversionOngoing>
 80011a6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd47 	bl	8000c42 <LL_ADC_INJ_IsConversionOngoing>
 80011b4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f040 81bf 	bne.w	8001540 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 81ba 	bne.w	8001540 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80011d4:	d10f      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fc1c 	bl	8000a1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbc3 	bl	800097a <LL_ADC_SetSamplingTimeCommonConfig>
 80011f4:	e00e      	b.n	8001214 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	461a      	mov	r2, r3
 8001204:	f7ff fc0b 	bl	8000a1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fbb3 	bl	800097a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d00a      	beq.n	800124c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	6919      	ldr	r1, [r3, #16]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001246:	f7ff fb43 	bl	80008d0 <LL_ADC_SetOffset>
 800124a:	e179      	b.n	8001540 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb60 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x184>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fb55 	bl	8000918 <LL_ADC_GetOffsetChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	0e9b      	lsrs	r3, r3, #26
 8001272:	f003 021f 	and.w	r2, r3, #31
 8001276:	e01e      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x1c2>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fb4a 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800129a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800129e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80012a6:	2320      	movs	r3, #32
 80012a8:	e004      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80012aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x1da>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0e9b      	lsrs	r3, r3, #26
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	e018      	b.n	8001300 <HAL_ADC_ConfigChannel+0x20c>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80012e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80012ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80012f2:	2320      	movs	r3, #32
 80012f4:	e004      	b.n	8001300 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80012f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001300:	429a      	cmp	r2, r3
 8001302:	d106      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb19 	bl	8000944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2101      	movs	r1, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fafd 	bl	8000918 <LL_ADC_GetOffsetChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10a      	bne.n	800133e <HAL_ADC_ConfigChannel+0x24a>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff faf2 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	0e9b      	lsrs	r3, r3, #26
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	e01e      	b.n	800137c <HAL_ADC_ConfigChannel+0x288>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2101      	movs	r1, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fae7 	bl	8000918 <LL_ADC_GetOffsetChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800135c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001360:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800136c:	2320      	movs	r3, #32
 800136e:	e004      	b.n	800137a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001370:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x2a0>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0e9b      	lsrs	r3, r3, #26
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	e018      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x2d2>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80013a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80013b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80013b8:	2320      	movs	r3, #32
 80013ba:	e004      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80013bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d106      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	2101      	movs	r1, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fab6 	bl	8000944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2102      	movs	r1, #2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fa9a 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10a      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x310>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2102      	movs	r1, #2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fa8f 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	0e9b      	lsrs	r3, r3, #26
 80013fe:	f003 021f 	and.w	r2, r3, #31
 8001402:	e01e      	b.n	8001442 <HAL_ADC_ConfigChannel+0x34e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fa84 	bl	8000918 <LL_ADC_GetOffsetChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001422:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800142a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001432:	2320      	movs	r3, #32
 8001434:	e004      	b.n	8001440 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <HAL_ADC_ConfigChannel+0x366>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0e9b      	lsrs	r3, r3, #26
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	e014      	b.n	8001484 <HAL_ADC_ConfigChannel+0x390>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800146a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800146e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001476:	2320      	movs	r3, #32
 8001478:	e004      	b.n	8001484 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800147a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800147e:	fab3 f383 	clz	r3, r3
 8001482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001484:	429a      	cmp	r2, r3
 8001486:	d106      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	2102      	movs	r1, #2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fa57 	bl	8000944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2103      	movs	r1, #3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fa3b 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10a      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x3ce>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2103      	movs	r1, #3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fa30 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	0e9b      	lsrs	r3, r3, #26
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	e017      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x3fe>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2103      	movs	r1, #3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fa25 	bl	8000918 <LL_ADC_GetOffsetChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80014da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80014de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80014e4:	2320      	movs	r3, #32
 80014e6:	e003      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80014e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <HAL_ADC_ConfigChannel+0x416>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0e9b      	lsrs	r3, r3, #26
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	e011      	b.n	800152e <HAL_ADC_ConfigChannel+0x43a>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800151a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800151c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001522:	2320      	movs	r3, #32
 8001524:	e003      	b.n	800152e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800152e:	429a      	cmp	r2, r3
 8001530:	d106      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	2103      	movs	r1, #3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fa02 	bl	8000944 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fb2f 	bl	8000ba8 <LL_ADC_IsEnabled>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	f040 813f 	bne.w	80017d0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	461a      	mov	r2, r3
 8001560:	f7ff fa88 	bl	8000a74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4a8e      	ldr	r2, [pc, #568]	@ (80017a4 <HAL_ADC_ConfigChannel+0x6b0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	f040 8130 	bne.w	80017d0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10b      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x4a4>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0e9b      	lsrs	r3, r3, #26
 8001586:	3301      	adds	r3, #1
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b09      	cmp	r3, #9
 800158e:	bf94      	ite	ls
 8001590:	2301      	movls	r3, #1
 8001592:	2300      	movhi	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	e019      	b.n	80015cc <HAL_ADC_ConfigChannel+0x4d8>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80015a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80015aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80015b0:	2320      	movs	r3, #32
 80015b2:	e003      	b.n	80015bc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80015b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	2b09      	cmp	r3, #9
 80015c4:	bf94      	ite	ls
 80015c6:	2301      	movls	r3, #1
 80015c8:	2300      	movhi	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d079      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d107      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x4f8>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0e9b      	lsrs	r3, r3, #26
 80015e2:	3301      	adds	r3, #1
 80015e4:	069b      	lsls	r3, r3, #26
 80015e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015ea:	e015      	b.n	8001618 <HAL_ADC_ConfigChannel+0x524>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80015fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80015fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001604:	2320      	movs	r3, #32
 8001606:	e003      	b.n	8001610 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	069b      	lsls	r3, r3, #26
 8001614:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x544>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0e9b      	lsrs	r3, r3, #26
 800162a:	3301      	adds	r3, #1
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	e017      	b.n	8001668 <HAL_ADC_ConfigChannel+0x574>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001648:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800164a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001650:	2320      	movs	r3, #32
 8001652:	e003      	b.n	800165c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	3301      	adds	r3, #1
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	2101      	movs	r1, #1
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	ea42 0103 	orr.w	r1, r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10a      	bne.n	800168e <HAL_ADC_ConfigChannel+0x59a>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0e9b      	lsrs	r3, r3, #26
 800167e:	3301      	adds	r3, #1
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	051b      	lsls	r3, r3, #20
 800168c:	e018      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x5cc>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800169c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80016a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80016a6:	2320      	movs	r3, #32
 80016a8:	e003      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80016aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016c0:	430b      	orrs	r3, r1
 80016c2:	e080      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x5ec>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0e9b      	lsrs	r3, r3, #26
 80016d6:	3301      	adds	r3, #1
 80016d8:	069b      	lsls	r3, r3, #26
 80016da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016de:	e015      	b.n	800170c <HAL_ADC_ConfigChannel+0x618>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80016f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80016f8:	2320      	movs	r3, #32
 80016fa:	e003      	b.n	8001704 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80016fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	069b      	lsls	r3, r3, #26
 8001708:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <HAL_ADC_ConfigChannel+0x638>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0e9b      	lsrs	r3, r3, #26
 800171e:	3301      	adds	r3, #1
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	e017      	b.n	800175c <HAL_ADC_ConfigChannel+0x668>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	61bb      	str	r3, [r7, #24]
  return result;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001744:	2320      	movs	r3, #32
 8001746:	e003      	b.n	8001750 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3301      	adds	r3, #1
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	ea42 0103 	orr.w	r1, r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10d      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x694>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0e9b      	lsrs	r3, r3, #26
 8001772:	3301      	adds	r3, #1
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	3b1e      	subs	r3, #30
 8001780:	051b      	lsls	r3, r3, #20
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001786:	e01d      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x6d0>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	60fb      	str	r3, [r7, #12]
  return result;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80017a0:	2320      	movs	r3, #32
 80017a2:	e005      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x6bc>
 80017a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	f003 021f 	and.w	r2, r3, #31
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	3b1e      	subs	r3, #30
 80017be:	051b      	lsls	r3, r3, #20
 80017c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f927 	bl	8000a1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <HAL_ADC_ConfigChannel+0x7d8>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d06c      	beq.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017dc:	483c      	ldr	r0, [pc, #240]	@ (80018d0 <HAL_ADC_ConfigChannel+0x7dc>)
 80017de:	f7ff f869 	bl	80008b4 <LL_ADC_GetCommonPathInternalCh>
 80017e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a3a      	ldr	r2, [pc, #232]	@ (80018d4 <HAL_ADC_ConfigChannel+0x7e0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d127      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d121      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a35      	ldr	r2, [pc, #212]	@ (80018d8 <HAL_ADC_ConfigChannel+0x7e4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d157      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800180a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800180e:	4619      	mov	r1, r3
 8001810:	482f      	ldr	r0, [pc, #188]	@ (80018d0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001812:	f7ff f83c 	bl	800088e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001816:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <HAL_ADC_ConfigChannel+0x7e8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	4a30      	ldr	r2, [pc, #192]	@ (80018e0 <HAL_ADC_ConfigChannel+0x7ec>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001830:	e002      	b.n	8001838 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3b01      	subs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f9      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800183e:	e03a      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a27      	ldr	r2, [pc, #156]	@ (80018e4 <HAL_ADC_ConfigChannel+0x7f0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d113      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800184a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800184e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10d      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1f      	ldr	r2, [pc, #124]	@ (80018d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d12a      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001864:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001868:	4619      	mov	r1, r3
 800186a:	4819      	ldr	r0, [pc, #100]	@ (80018d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800186c:	f7ff f80f 	bl	800088e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001870:	e021      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <HAL_ADC_ConfigChannel+0x7f4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d11c      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800187c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d116      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d111      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001896:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800189a:	4619      	mov	r1, r3
 800189c:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800189e:	f7fe fff6 	bl	800088e <LL_ADC_SetCommonPathInternalCh>
 80018a2:	e008      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f043 0220 	orr.w	r2, r3, #32
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80018be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	37d8      	adds	r7, #216	@ 0xd8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	80080000 	.word	0x80080000
 80018d0:	50040300 	.word	0x50040300
 80018d4:	c7520000 	.word	0xc7520000
 80018d8:	50040000 	.word	0x50040000
 80018dc:	20000000 	.word	0x20000000
 80018e0:	053e2d63 	.word	0x053e2d63
 80018e4:	cb840000 	.word	0xcb840000
 80018e8:	80000001 	.word	0x80000001

080018ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f953 	bl	8000ba8 <LL_ADC_IsEnabled>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d169      	bne.n	80019dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <ADC_Enable+0xfc>)
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e055      	b.n	80019de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f90e 	bl	8000b58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800193c:	482b      	ldr	r0, [pc, #172]	@ (80019ec <ADC_Enable+0x100>)
 800193e:	f7fe ffb9 	bl	80008b4 <LL_ADC_GetCommonPathInternalCh>
 8001942:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <ADC_Enable+0x104>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	4a28      	ldr	r2, [pc, #160]	@ (80019f4 <ADC_Enable+0x108>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001966:	e002      	b.n	800196e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3b01      	subs	r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f9      	bne.n	8001968 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001974:	f7fe ff6c 	bl	8000850 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800197a:	e028      	b.n	80019ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f911 	bl	8000ba8 <LL_ADC_IsEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d104      	bne.n	8001996 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f8e1 	bl	8000b58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001996:	f7fe ff5b 	bl	8000850 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d914      	bls.n	80019ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d00d      	beq.n	80019ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	f043 0210 	orr.w	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e007      	b.n	80019de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d1cf      	bne.n	800197c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	8000003f 	.word	0x8000003f
 80019ec:	50040300 	.word	0x50040300
 80019f0:	20000000 	.word	0x20000000
 80019f4:	053e2d63 	.word	0x053e2d63

080019f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f8e2 	bl	8000bce <LL_ADC_IsDisableOngoing>
 8001a0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f8c9 	bl	8000ba8 <LL_ADC_IsEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d047      	beq.n	8001aac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d144      	bne.n	8001aac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030d 	and.w	r3, r3, #13
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10c      	bne.n	8001a4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f8a3 	bl	8000b80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a42:	f7fe ff05 	bl	8000850 <HAL_GetTick>
 8001a46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a48:	e029      	b.n	8001a9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	f043 0210 	orr.w	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5a:	f043 0201 	orr.w	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e023      	b.n	8001aae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a66:	f7fe fef3 	bl	8000850 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d914      	bls.n	8001a9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00d      	beq.n	8001a9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	f043 0210 	orr.w	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e007      	b.n	8001aae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1dc      	bne.n	8001a66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <LL_ADC_StartCalibration>:
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	609a      	str	r2, [r3, #8]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_IsCalibrationOnGoing>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001afc:	d101      	bne.n	8001b02 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_ADCEx_Calibration_Start+0x1c>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e04d      	b.n	8001bc8 <HAL_ADCEx_Calibration_Start+0xb8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff5f 	bl	80019f8 <ADC_Disable>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d136      	bne.n	8001bb2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b4c:	f023 0302 	bic.w	r3, r3, #2
 8001b50:	f043 0202 	orr.w	r2, r3, #2
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ffa9 	bl	8001ab6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001b64:	e014      	b.n	8001b90 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8001b72:	d30d      	bcc.n	8001b90 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	f023 0312 	bic.w	r3, r3, #18
 8001b7c:	f043 0210 	orr.w	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e01b      	b.n	8001bc8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ffa7 	bl	8001ae8 <LL_ADC_IsCalibrationOnGoing>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e2      	bne.n	8001b66 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba4:	f023 0303 	bic.w	r3, r3, #3
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bb0:	e005      	b.n	8001bbe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	@ (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	@ (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	@ (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	@ 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff3e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff31 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffa2 	bl	8001d2c <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e166      	b.n	80020d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8158 	beq.w	80020cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d005      	beq.n	8001e34 <HAL_GPIO_Init+0x40>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d130      	bne.n	8001e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 0201 	and.w	r2, r3, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d017      	beq.n	8001ed2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d123      	bne.n	8001f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	6939      	ldr	r1, [r7, #16]
 8001f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0203 	and.w	r2, r3, #3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80b2 	beq.w	80020cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f68:	4b61      	ldr	r3, [pc, #388]	@ (80020f0 <HAL_GPIO_Init+0x2fc>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6c:	4a60      	ldr	r2, [pc, #384]	@ (80020f0 <HAL_GPIO_Init+0x2fc>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f74:	4b5e      	ldr	r3, [pc, #376]	@ (80020f0 <HAL_GPIO_Init+0x2fc>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f80:	4a5c      	ldr	r2, [pc, #368]	@ (80020f4 <HAL_GPIO_Init+0x300>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001faa:	d02b      	beq.n	8002004 <HAL_GPIO_Init+0x210>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a52      	ldr	r2, [pc, #328]	@ (80020f8 <HAL_GPIO_Init+0x304>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d025      	beq.n	8002000 <HAL_GPIO_Init+0x20c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a51      	ldr	r2, [pc, #324]	@ (80020fc <HAL_GPIO_Init+0x308>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d01f      	beq.n	8001ffc <HAL_GPIO_Init+0x208>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a50      	ldr	r2, [pc, #320]	@ (8002100 <HAL_GPIO_Init+0x30c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d019      	beq.n	8001ff8 <HAL_GPIO_Init+0x204>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a4f      	ldr	r2, [pc, #316]	@ (8002104 <HAL_GPIO_Init+0x310>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_GPIO_Init+0x200>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4e      	ldr	r2, [pc, #312]	@ (8002108 <HAL_GPIO_Init+0x314>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_GPIO_Init+0x1fc>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a4d      	ldr	r2, [pc, #308]	@ (800210c <HAL_GPIO_Init+0x318>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <HAL_GPIO_Init+0x1f8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a4c      	ldr	r2, [pc, #304]	@ (8002110 <HAL_GPIO_Init+0x31c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_GPIO_Init+0x1f4>
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	e00e      	b.n	8002006 <HAL_GPIO_Init+0x212>
 8001fe8:	2308      	movs	r3, #8
 8001fea:	e00c      	b.n	8002006 <HAL_GPIO_Init+0x212>
 8001fec:	2306      	movs	r3, #6
 8001fee:	e00a      	b.n	8002006 <HAL_GPIO_Init+0x212>
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	e008      	b.n	8002006 <HAL_GPIO_Init+0x212>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x212>
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e004      	b.n	8002006 <HAL_GPIO_Init+0x212>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x212>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_GPIO_Init+0x212>
 8002004:	2300      	movs	r3, #0
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	f002 0203 	and.w	r2, r2, #3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4093      	lsls	r3, r2
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002016:	4937      	ldr	r1, [pc, #220]	@ (80020f4 <HAL_GPIO_Init+0x300>)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002024:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_GPIO_Init+0x320>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002048:	4a32      	ldr	r2, [pc, #200]	@ (8002114 <HAL_GPIO_Init+0x320>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_GPIO_Init+0x320>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002072:	4a28      	ldr	r2, [pc, #160]	@ (8002114 <HAL_GPIO_Init+0x320>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002078:	4b26      	ldr	r3, [pc, #152]	@ (8002114 <HAL_GPIO_Init+0x320>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <HAL_GPIO_Init+0x320>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <HAL_GPIO_Init+0x320>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020c6:	4a13      	ldr	r2, [pc, #76]	@ (8002114 <HAL_GPIO_Init+0x320>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f ae91 	bne.w	8001e04 <HAL_GPIO_Init+0x10>
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000
 80020f8:	48000400 	.word	0x48000400
 80020fc:	48000800 	.word	0x48000800
 8002100:	48000c00 	.word	0x48000c00
 8002104:	48001000 	.word	0x48001000
 8002108:	48001400 	.word	0x48001400
 800210c:	48001800 	.word	0x48001800
 8002110:	48001c00 	.word	0x48001c00
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002134:	e002      	b.n	800213c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f848 	bl	80001fc <HAL_GPIO_EXTI_Callback>
  }
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800217c:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002188:	d102      	bne.n	8002190 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800218a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800218e:	e00b      	b.n	80021a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800219e:	d102      	bne.n	80021a6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80021a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a4:	e000      	b.n	80021a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021a6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40007000 	.word	0x40007000

080021b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d141      	bne.n	800224a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c6:	4b4b      	ldr	r3, [pc, #300]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d2:	d131      	bne.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021d4:	4b47      	ldr	r3, [pc, #284]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021da:	4a46      	ldr	r2, [pc, #280]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e4:	4b43      	ldr	r3, [pc, #268]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ec:	4a41      	ldr	r2, [pc, #260]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021f4:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2232      	movs	r2, #50	@ 0x32
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	4a3f      	ldr	r2, [pc, #252]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	0c9b      	lsrs	r3, r3, #18
 8002206:	3301      	adds	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220a:	e002      	b.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3b01      	subs	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002212:	4b38      	ldr	r3, [pc, #224]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800221e:	d102      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f2      	bne.n	800220c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002226:	4b33      	ldr	r3, [pc, #204]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002232:	d158      	bne.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e057      	b.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002238:	4b2e      	ldr	r3, [pc, #184]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800223e:	4a2d      	ldr	r2, [pc, #180]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002248:	e04d      	b.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002250:	d141      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002252:	4b28      	ldr	r3, [pc, #160]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225e:	d131      	bne.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002266:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002270:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002278:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002280:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2232      	movs	r2, #50	@ 0x32
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	4a1c      	ldr	r2, [pc, #112]	@ (80022fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	0c9b      	lsrs	r3, r3, #18
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002296:	e002      	b.n	800229e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3b01      	subs	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022aa:	d102      	bne.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f2      	bne.n	8002298 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022be:	d112      	bne.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e011      	b.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ca:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022d4:	e007      	b.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d6:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022de:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40007000 	.word	0x40007000
 80022f8:	20000000 	.word	0x20000000
 80022fc:	431bde83 	.word	0x431bde83

08002300 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	f000 bc08 	b.w	8002b24 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002314:	4b96      	ldr	r3, [pc, #600]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800231e:	4b94      	ldr	r3, [pc, #592]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80e4 	beq.w	80024fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_RCC_OscConfig+0x4c>
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	f040 808b 	bne.w	800245a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b01      	cmp	r3, #1
 8002348:	f040 8087 	bne.w	800245a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234c:	4b88      	ldr	r3, [pc, #544]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_OscConfig+0x64>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e3df      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_RCC_OscConfig+0x7e>
 8002374:	4b7e      	ldr	r3, [pc, #504]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800237c:	e005      	b.n	800238a <HAL_RCC_OscConfig+0x8a>
 800237e:	4b7c      	ldr	r3, [pc, #496]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800238a:	4293      	cmp	r3, r2
 800238c:	d223      	bcs.n	80023d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fd94 	bl	8002ec0 <RCC_SetFlashLatencyFromMSIRange>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e3c0      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a2:	4b73      	ldr	r3, [pc, #460]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a72      	ldr	r2, [pc, #456]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b70      	ldr	r3, [pc, #448]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	496d      	ldr	r1, [pc, #436]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	4968      	ldr	r1, [pc, #416]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
 80023d4:	e025      	b.n	8002422 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d6:	4b66      	ldr	r3, [pc, #408]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a65      	ldr	r2, [pc, #404]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b63      	ldr	r3, [pc, #396]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4960      	ldr	r1, [pc, #384]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	495b      	ldr	r1, [pc, #364]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fd54 	bl	8002ec0 <RCC_SetFlashLatencyFromMSIRange>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e380      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002422:	f000 fcc1 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002426:	4602      	mov	r2, r0
 8002428:	4b51      	ldr	r3, [pc, #324]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	4950      	ldr	r1, [pc, #320]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002434:	5ccb      	ldrb	r3, [r1, r3]
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	4a4e      	ldr	r2, [pc, #312]	@ (8002578 <HAL_RCC_OscConfig+0x278>)
 8002440:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002442:	4b4e      	ldr	r3, [pc, #312]	@ (800257c <HAL_RCC_OscConfig+0x27c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f9b2 	bl	80007b0 <HAL_InitTick>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d052      	beq.n	80024fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	e364      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d032      	beq.n	80024c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002462:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a42      	ldr	r2, [pc, #264]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800246e:	f7fe f9ef 	bl	8000850 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002476:	f7fe f9eb 	bl	8000850 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e34d      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002488:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002494:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a35      	ldr	r2, [pc, #212]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800249a:	f043 0308 	orr.w	r3, r3, #8
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b33      	ldr	r3, [pc, #204]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4930      	ldr	r1, [pc, #192]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	492b      	ldr	r1, [pc, #172]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
 80024c6:	e01a      	b.n	80024fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024c8:	4b29      	ldr	r3, [pc, #164]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a28      	ldr	r2, [pc, #160]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d4:	f7fe f9bc 	bl	8000850 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024dc:	f7fe f9b8 	bl	8000850 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e31a      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ee:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x1dc>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d073      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b08      	cmp	r3, #8
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x21c>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d10e      	bne.n	8002534 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d10b      	bne.n	8002534 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d063      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d15f      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e2f7      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253c:	d106      	bne.n	800254c <HAL_RCC_OscConfig+0x24c>
 800253e:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a0b      	ldr	r2, [pc, #44]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e025      	b.n	8002598 <HAL_RCC_OscConfig+0x298>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002554:	d114      	bne.n	8002580 <HAL_RCC_OscConfig+0x280>
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a02      	ldr	r2, [pc, #8]	@ (8002570 <HAL_RCC_OscConfig+0x270>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e013      	b.n	8002598 <HAL_RCC_OscConfig+0x298>
 8002570:	40021000 	.word	0x40021000
 8002574:	08003ae0 	.word	0x08003ae0
 8002578:	20000000 	.word	0x20000000
 800257c:	20000004 	.word	0x20000004
 8002580:	4ba0      	ldr	r3, [pc, #640]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a9f      	ldr	r2, [pc, #636]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b9d      	ldr	r3, [pc, #628]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a9c      	ldr	r2, [pc, #624]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7fe f956 	bl	8000850 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7fe f952 	bl	8000850 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	@ 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e2b4      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ba:	4b92      	ldr	r3, [pc, #584]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2a8>
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe f942 	bl	8000850 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe f93e 	bl	8000850 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	@ 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e2a0      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e2:	4b88      	ldr	r3, [pc, #544]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2d0>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d060      	beq.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x310>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d119      	bne.n	800263e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d116      	bne.n	800263e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002610:	4b7c      	ldr	r3, [pc, #496]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x328>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e27d      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b76      	ldr	r3, [pc, #472]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	4973      	ldr	r1, [pc, #460]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263c:	e040      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d023      	beq.n	800268e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002646:	4b6f      	ldr	r3, [pc, #444]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a6e      	ldr	r2, [pc, #440]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe f8fd 	bl	8000850 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe f8f9 	bl	8000850 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e25b      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266c:	4b65      	ldr	r3, [pc, #404]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b62      	ldr	r3, [pc, #392]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	495f      	ldr	r1, [pc, #380]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
 800268c:	e018      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b5d      	ldr	r3, [pc, #372]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5c      	ldr	r2, [pc, #368]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe f8d9 	bl	8000850 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7fe f8d5 	bl	8000850 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e237      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b4:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d03c      	beq.n	8002746 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026da:	4a4a      	ldr	r2, [pc, #296]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe f8b4 	bl	8000850 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe f8b0 	bl	8000850 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e212      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026fe:	4b41      	ldr	r3, [pc, #260]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ef      	beq.n	80026ec <HAL_RCC_OscConfig+0x3ec>
 800270c:	e01b      	b.n	8002746 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270e:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002714:	4a3b      	ldr	r2, [pc, #236]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7fe f897 	bl	8000850 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7fe f893 	bl	8000850 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1f5      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002738:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800273a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ef      	bne.n	8002726 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80a6 	beq.w	80028a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002758:	4b2a      	ldr	r3, [pc, #168]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	4b27      	ldr	r3, [pc, #156]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	4a26      	ldr	r2, [pc, #152]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002770:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277c:	2301      	movs	r3, #1
 800277e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002780:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <HAL_RCC_OscConfig+0x508>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d118      	bne.n	80027be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <HAL_RCC_OscConfig+0x508>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <HAL_RCC_OscConfig+0x508>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002798:	f7fe f85a 	bl	8000850 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a0:	f7fe f856 	bl	8000850 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1b8      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_RCC_OscConfig+0x508>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4d8>
 80027c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d6:	e029      	b.n	800282c <HAL_RCC_OscConfig+0x52c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d115      	bne.n	800280c <HAL_RCC_OscConfig+0x50c>
 80027e0:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e6:	4a07      	ldr	r2, [pc, #28]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f0:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	4a03      	ldr	r2, [pc, #12]	@ (8002804 <HAL_RCC_OscConfig+0x504>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002800:	e014      	b.n	800282c <HAL_RCC_OscConfig+0x52c>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	4b9d      	ldr	r3, [pc, #628]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002812:	4a9c      	ldr	r2, [pc, #624]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800281c:	4b99      	ldr	r3, [pc, #612]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	4a98      	ldr	r2, [pc, #608]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d016      	beq.n	8002862 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe f80c 	bl	8000850 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe f808 	bl	8000850 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e168      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002852:	4b8c      	ldr	r3, [pc, #560]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ed      	beq.n	800283c <HAL_RCC_OscConfig+0x53c>
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fd fff5 	bl	8000850 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fd fff1 	bl	8000850 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e151      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002880:	4b80      	ldr	r3, [pc, #512]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ed      	bne.n	800286a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288e:	7ffb      	ldrb	r3, [r7, #31]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b7b      	ldr	r3, [pc, #492]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	4a7a      	ldr	r2, [pc, #488]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d03c      	beq.n	8002926 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01c      	beq.n	80028ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028b4:	4b73      	ldr	r3, [pc, #460]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80028b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028ba:	4a72      	ldr	r2, [pc, #456]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fd ffc4 	bl	8000850 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028cc:	f7fd ffc0 	bl	8000850 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e122      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028de:	4b69      	ldr	r3, [pc, #420]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80028e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ef      	beq.n	80028cc <HAL_RCC_OscConfig+0x5cc>
 80028ec:	e01b      	b.n	8002926 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ee:	4b65      	ldr	r3, [pc, #404]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80028f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028f4:	4a63      	ldr	r2, [pc, #396]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fd ffa7 	bl	8000850 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002906:	f7fd ffa3 	bl	8000850 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e105      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002918:	4b5a      	ldr	r3, [pc, #360]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 800291a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ef      	bne.n	8002906 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80f9 	beq.w	8002b22 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	2b02      	cmp	r3, #2
 8002936:	f040 80cf 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800293a:	4b52      	ldr	r3, [pc, #328]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	429a      	cmp	r2, r3
 800294c:	d12c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	3b01      	subs	r3, #1
 800295a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d123      	bne.n	80029a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d11b      	bne.n	80029a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d113      	bne.n	80029a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	3b01      	subs	r3, #1
 80029a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d071      	beq.n	8002a8c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d068      	beq.n	8002a80 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029ae:	4b35      	ldr	r3, [pc, #212]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029ba:	4b32      	ldr	r3, [pc, #200]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0ac      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80029d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d6:	f7fd ff3b 	bl	8000850 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7fd ff37 	bl	8000850 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e099      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fc:	4b21      	ldr	r3, [pc, #132]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4b21      	ldr	r3, [pc, #132]	@ (8002a88 <HAL_RCC_OscConfig+0x788>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a16:	0212      	lsls	r2, r2, #8
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a1e:	0852      	lsrs	r2, r2, #1
 8002a20:	3a01      	subs	r2, #1
 8002a22:	0552      	lsls	r2, r2, #21
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0652      	lsls	r2, r2, #25
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a36:	06d2      	lsls	r2, r2, #27
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	4912      	ldr	r1, [pc, #72]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a40:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002a46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4a0c      	ldr	r2, [pc, #48]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a58:	f7fd fefa 	bl	8000850 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fd fef6 	bl	8000850 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e058      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a72:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <HAL_RCC_OscConfig+0x784>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a7e:	e050      	b.n	8002b22 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e04f      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8c:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d144      	bne.n	8002b22 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a98:	4b24      	ldr	r3, [pc, #144]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a20      	ldr	r2, [pc, #128]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ab0:	f7fd fece 	bl	8000850 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fd feca 	bl	8000850 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e02c      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b18      	ldr	r3, [pc, #96]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x7b8>
 8002ad6:	e024      	b.n	8002b22 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d01f      	beq.n	8002b1e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002ae4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fd feb1 	bl	8000850 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fd fead 	bl	8000850 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e00f      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	4905      	ldr	r1, [pc, #20]	@ (8002b2c <HAL_RCC_OscConfig+0x82c>)
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_OscConfig+0x830>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60cb      	str	r3, [r1, #12]
 8002b1c:	e001      	b.n	8002b22 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	feeefffc 	.word	0xfeeefffc

08002b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e11d      	b.n	8002d88 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b90      	ldr	r3, [pc, #576]	@ (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d910      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 020f 	bic.w	r2, r3, #15
 8002b62:	498b      	ldr	r1, [pc, #556]	@ (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b89      	ldr	r3, [pc, #548]	@ (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e105      	b.n	8002d88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b81      	ldr	r3, [pc, #516]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d908      	bls.n	8002baa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b98:	4b7e      	ldr	r3, [pc, #504]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	497b      	ldr	r1, [pc, #492]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d079      	beq.n	8002caa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d11e      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	4b75      	ldr	r3, [pc, #468]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0dc      	b.n	8002d88 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002bce:	f000 f9d1 	bl	8002f74 <RCC_GetSysClockFreqFromPLLSource>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4a70      	ldr	r2, [pc, #448]	@ (8002d98 <HAL_RCC_ClockConfig+0x264>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d946      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bda:	4b6e      	ldr	r3, [pc, #440]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d140      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002be6:	4b6b      	ldr	r3, [pc, #428]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bee:	4a69      	ldr	r2, [pc, #420]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	e035      	b.n	8002c68 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c04:	4b63      	ldr	r3, [pc, #396]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d115      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0b9      	b.n	8002d88 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0ad      	b.n	8002d88 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c2c:	4b59      	ldr	r3, [pc, #356]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0a5      	b.n	8002d88 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c3c:	f000 f8b4 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a55      	ldr	r2, [pc, #340]	@ (8002d98 <HAL_RCC_ClockConfig+0x264>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d90f      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c48:	4b52      	ldr	r3, [pc, #328]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c54:	4b4f      	ldr	r3, [pc, #316]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c62:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c68:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 0203 	bic.w	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4947      	ldr	r1, [pc, #284]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7a:	f7fd fde9 	bl	8000850 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c82:	f7fd fde5 	bl	8000850 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e077      	b.n	8002d88 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c98:	4b3e      	ldr	r3, [pc, #248]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 020c 	and.w	r2, r3, #12
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d1eb      	bne.n	8002c82 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b80      	cmp	r3, #128	@ 0x80
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cb0:	4b38      	ldr	r3, [pc, #224]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a37      	ldr	r2, [pc, #220]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d208      	bcs.n	8002cea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	492b      	ldr	r1, [pc, #172]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cea:	4b29      	ldr	r3, [pc, #164]	@ (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d210      	bcs.n	8002d1a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf8:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 020f 	bic.w	r2, r3, #15
 8002d00:	4923      	ldr	r1, [pc, #140]	@ (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d08:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <HAL_RCC_ClockConfig+0x25c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e036      	b.n	8002d88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4918      	ldr	r1, [pc, #96]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d44:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4910      	ldr	r1, [pc, #64]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d58:	f000 f826 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	490c      	ldr	r1, [pc, #48]	@ (8002d9c <HAL_RCC_ClockConfig+0x268>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
 8002d74:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <HAL_RCC_ClockConfig+0x26c>)
 8002d76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_ClockConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fd17 	bl	80007b0 <HAL_InitTick>
 8002d82:	4603      	mov	r3, r0
 8002d84:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40021000 	.word	0x40021000
 8002d98:	04c4b400 	.word	0x04c4b400
 8002d9c:	08003ae0 	.word	0x08003ae0
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000004 	.word	0x20000004

08002da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db6:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x34>
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d121      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d11e      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ddc:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002de8:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e005      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002df8:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e04:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10d      	bne.n	8002e30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e20:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	e004      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e2c:	4b23      	ldr	r3, [pc, #140]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d134      	bne.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e36:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d003      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0xac>
 8002e4c:	e005      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e50:	617b      	str	r3, [r7, #20]
      break;
 8002e52:	e005      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e54:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e56:	617b      	str	r3, [r7, #20]
      break;
 8002e58:	e002      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	617b      	str	r3, [r7, #20]
      break;
 8002e5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e60:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e6e:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	fb03 f202 	mul.w	r2, r3, r2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	0e5b      	lsrs	r3, r3, #25
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	3301      	adds	r3, #1
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ea0:	69bb      	ldr	r3, [r7, #24]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	@ 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	08003af0 	.word	0x08003af0
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ecc:	4b27      	ldr	r3, [pc, #156]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ed8:	f7ff f94e 	bl	8002178 <HAL_PWREx_GetVoltageRange>
 8002edc:	6178      	str	r0, [r7, #20]
 8002ede:	e014      	b.n	8002f0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b22      	ldr	r3, [pc, #136]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	4a21      	ldr	r2, [pc, #132]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eec:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ef8:	f7ff f93e 	bl	8002178 <HAL_PWREx_GetVoltageRange>
 8002efc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002efe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	4a1a      	ldr	r2, [pc, #104]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f10:	d10b      	bne.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b80      	cmp	r3, #128	@ 0x80
 8002f16:	d913      	bls.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f1c:	d902      	bls.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f1e:	2302      	movs	r3, #2
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	e00d      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e00a      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f2e:	d902      	bls.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f30:	2302      	movs	r3, #2
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	e004      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b70      	cmp	r3, #112	@ 0x70
 8002f3a:	d101      	bne.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 020f 	bic.w	r2, r3, #15
 8002f48:	4909      	ldr	r1, [pc, #36]	@ (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f50:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40022000 	.word	0x40022000

08002f74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d00b      	beq.n	8002fa2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d825      	bhi.n	8002fdc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d008      	beq.n	8002fa8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d11f      	bne.n	8002fdc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002f9c:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f9e:	613b      	str	r3, [r7, #16]
    break;
 8002fa0:	e01f      	b.n	8002fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fa2:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002fa4:	613b      	str	r3, [r7, #16]
    break;
 8002fa6:	e01c      	b.n	8002fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa8:	4b21      	ldr	r3, [pc, #132]	@ (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e005      	b.n	8002fd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800303c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	613b      	str	r3, [r7, #16]
    break;
 8002fda:	e002      	b.n	8002fe2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
    break;
 8002fe0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	3301      	adds	r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	fb03 f202 	mul.w	r2, r3, r2
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003008:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0e5b      	lsrs	r3, r3, #25
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003022:	683b      	ldr	r3, [r7, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40021000 	.word	0x40021000
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200
 800303c:	08003af0 	.word	0x08003af0

08003040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003048:	2300      	movs	r3, #0
 800304a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800304c:	2300      	movs	r3, #0
 800304e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003058:	2b00      	cmp	r3, #0
 800305a:	d040      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003060:	2b80      	cmp	r3, #128	@ 0x80
 8003062:	d02a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003064:	2b80      	cmp	r3, #128	@ 0x80
 8003066:	d825      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003068:	2b60      	cmp	r3, #96	@ 0x60
 800306a:	d026      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800306c:	2b60      	cmp	r3, #96	@ 0x60
 800306e:	d821      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003070:	2b40      	cmp	r3, #64	@ 0x40
 8003072:	d006      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003074:	2b40      	cmp	r3, #64	@ 0x40
 8003076:	d81d      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d009      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d010      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003080:	e018      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003082:	4b89      	ldr	r3, [pc, #548]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a88      	ldr	r2, [pc, #544]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800308e:	e015      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fb02 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a0:	e00c      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3320      	adds	r3, #32
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fbed 	bl	8003888 <RCCEx_PLLSAI2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b2:	e003      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	74fb      	strb	r3, [r7, #19]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80030ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c2:	4b79      	ldr	r3, [pc, #484]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030c8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030d0:	4975      	ldr	r1, [pc, #468]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80030d8:	e001      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d047      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f2:	d030      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f8:	d82a      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030fe:	d02a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003104:	d824      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800310a:	d008      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800310c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003110:	d81e      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800311a:	d010      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800311c:	e018      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800311e:	4b62      	ldr	r3, [pc, #392]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a61      	ldr	r2, [pc, #388]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003128:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800312a:	e015      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fab4 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800313c:	e00c      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3320      	adds	r3, #32
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fb9f 	bl	8003888 <RCCEx_PLLSAI2_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800314e:	e003      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	74fb      	strb	r3, [r7, #19]
      break;
 8003154:	e000      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800315e:	4b52      	ldr	r3, [pc, #328]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003160:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316c:	494e      	ldr	r1, [pc, #312]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003174:	e001      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 809f 	beq.w	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800318c:	4b46      	ldr	r3, [pc, #280]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b41      	ldr	r3, [pc, #260]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a6:	4a40      	ldr	r2, [pc, #256]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ae:	4b3e      	ldr	r3, [pc, #248]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031be:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3a      	ldr	r2, [pc, #232]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ca:	f7fd fb41 	bl	8000850 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031d0:	e009      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d2:	f7fd fb3d 	bl	8000850 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d902      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	74fb      	strb	r3, [r7, #19]
        break;
 80031e4:	e005      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031e6:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ef      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d15b      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031f8:	4b2b      	ldr	r3, [pc, #172]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003202:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01f      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	429a      	cmp	r2, r3
 8003214:	d019      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003216:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003220:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003222:	4b21      	ldr	r3, [pc, #132]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003228:	4a1f      	ldr	r2, [pc, #124]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003232:	4b1d      	ldr	r3, [pc, #116]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800323e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003242:	4a19      	ldr	r2, [pc, #100]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d016      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fd fafc 	bl	8000850 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325a:	e00b      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fd faf8 	bl	8000850 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d902      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	74fb      	strb	r3, [r7, #19]
            break;
 8003272:	e006      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ec      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10c      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003288:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003298:	4903      	ldr	r1, [pc, #12]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032a0:	e008      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	74bb      	strb	r3, [r7, #18]
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b4:	7c7b      	ldrb	r3, [r7, #17]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d105      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ba:	4ba0      	ldr	r3, [pc, #640]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	4a9f      	ldr	r2, [pc, #636]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032d2:	4b9a      	ldr	r3, [pc, #616]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d8:	f023 0203 	bic.w	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e0:	4996      	ldr	r1, [pc, #600]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f4:	4b91      	ldr	r3, [pc, #580]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	f023 020c 	bic.w	r2, r3, #12
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	498e      	ldr	r1, [pc, #568]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003316:	4b89      	ldr	r3, [pc, #548]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003324:	4985      	ldr	r1, [pc, #532]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003338:	4b80      	ldr	r3, [pc, #512]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003346:	497d      	ldr	r1, [pc, #500]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800335a:	4b78      	ldr	r3, [pc, #480]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003368:	4974      	ldr	r1, [pc, #464]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800337c:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003382:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338a:	496c      	ldr	r1, [pc, #432]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800339e:	4b67      	ldr	r3, [pc, #412]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ac:	4963      	ldr	r1, [pc, #396]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033c0:	4b5e      	ldr	r3, [pc, #376]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ce:	495b      	ldr	r1, [pc, #364]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033e2:	4b56      	ldr	r3, [pc, #344]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	4952      	ldr	r1, [pc, #328]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003404:	4b4d      	ldr	r3, [pc, #308]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003412:	494a      	ldr	r1, [pc, #296]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003426:	4b45      	ldr	r3, [pc, #276]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003434:	4941      	ldr	r1, [pc, #260]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003448:	4b3c      	ldr	r3, [pc, #240]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003456:	4939      	ldr	r1, [pc, #228]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d028      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800346a:	4b34      	ldr	r3, [pc, #208]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003470:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003478:	4930      	ldr	r1, [pc, #192]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003488:	d106      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800348a:	4b2c      	ldr	r3, [pc, #176]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4a2b      	ldr	r2, [pc, #172]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003494:	60d3      	str	r3, [r2, #12]
 8003496:	e011      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f8f9 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d04d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034d0:	d108      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80034d2:	4b1a      	ldr	r3, [pc, #104]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034d8:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80034e2:	e012      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80034e4:	4b15      	ldr	r3, [pc, #84]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034ea:	4a14      	ldr	r2, [pc, #80]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003502:	490e      	ldr	r1, [pc, #56]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800350e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003512:	d106      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003514:	4b09      	ldr	r3, [pc, #36]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a08      	ldr	r2, [pc, #32]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800351e:	60d3      	str	r3, [r2, #12]
 8003520:	e020      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800352a:	d109      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a02      	ldr	r2, [pc, #8]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003536:	60d3      	str	r3, [r2, #12]
 8003538:	e014      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003544:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003548:	d10c      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f8a5 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d028      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003570:	4b4a      	ldr	r3, [pc, #296]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800357e:	4947      	ldr	r1, [pc, #284]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800358a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800358e:	d106      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003590:	4b42      	ldr	r3, [pc, #264]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4a41      	ldr	r2, [pc, #260]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800359a:	60d3      	str	r3, [r2, #12]
 800359c:	e011      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035a6:	d10c      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3304      	adds	r3, #4
 80035ac:	2101      	movs	r1, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f876 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01e      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ce:	4b33      	ldr	r3, [pc, #204]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035de:	492f      	ldr	r1, [pc, #188]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035f0:	d10c      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f851 	bl	80036a0 <RCCEx_PLLSAI1_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003618:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800361e:	f023 0204 	bic.w	r2, r3, #4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003628:	491c      	ldr	r1, [pc, #112]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800363c:	4b17      	ldr	r3, [pc, #92]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003642:	f023 0218 	bic.w	r2, r3, #24
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364c:	4913      	ldr	r1, [pc, #76]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d017      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003660:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003666:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003670:	490a      	ldr	r1, [pc, #40]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800367e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003682:	d105      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800368e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003690:	7cbb      	ldrb	r3, [r7, #18]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000

080036a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ae:	4b72      	ldr	r3, [pc, #456]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d103      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
       ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d142      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	e03f      	b.n	8003758 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d018      	beq.n	8003712 <RCCEx_PLLSAI1_Config+0x72>
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d825      	bhi.n	8003730 <RCCEx_PLLSAI1_Config+0x90>
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d002      	beq.n	80036ee <RCCEx_PLLSAI1_Config+0x4e>
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d009      	beq.n	8003700 <RCCEx_PLLSAI1_Config+0x60>
 80036ec:	e020      	b.n	8003730 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ee:	4b62      	ldr	r3, [pc, #392]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11d      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fe:	e01a      	b.n	8003736 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003700:	4b5d      	ldr	r3, [pc, #372]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e013      	b.n	800373a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003712:	4b59      	ldr	r3, [pc, #356]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800371e:	4b56      	ldr	r3, [pc, #344]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800372e:	e006      	b.n	800373e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e004      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800373e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003746:	4b4c      	ldr	r3, [pc, #304]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4949      	ldr	r1, [pc, #292]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8086 	bne.w	800386c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003760:	4b45      	ldr	r3, [pc, #276]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a44      	ldr	r2, [pc, #272]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003766:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fd f870 	bl	8000850 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003774:	f7fd f86c 	bl	8000850 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
        break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003788:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ef      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d168      	bne.n	800386c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d113      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037a0:	4b35      	ldr	r3, [pc, #212]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	4b35      	ldr	r3, [pc, #212]	@ (800387c <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6892      	ldr	r2, [r2, #8]
 80037ac:	0211      	lsls	r1, r2, #8
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68d2      	ldr	r2, [r2, #12]
 80037b2:	06d2      	lsls	r2, r2, #27
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6852      	ldr	r2, [r2, #4]
 80037ba:	3a01      	subs	r2, #1
 80037bc:	0112      	lsls	r2, r2, #4
 80037be:	430a      	orrs	r2, r1
 80037c0:	492d      	ldr	r1, [pc, #180]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	610b      	str	r3, [r1, #16]
 80037c6:	e02d      	b.n	8003824 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	0211      	lsls	r1, r2, #8
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6912      	ldr	r2, [r2, #16]
 80037e0:	0852      	lsrs	r2, r2, #1
 80037e2:	3a01      	subs	r2, #1
 80037e4:	0552      	lsls	r2, r2, #21
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6852      	ldr	r2, [r2, #4]
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0112      	lsls	r2, r2, #4
 80037f0:	430a      	orrs	r2, r1
 80037f2:	4921      	ldr	r1, [pc, #132]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	610b      	str	r3, [r1, #16]
 80037f8:	e014      	b.n	8003824 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	4b21      	ldr	r3, [pc, #132]	@ (8003884 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6892      	ldr	r2, [r2, #8]
 8003806:	0211      	lsls	r1, r2, #8
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6952      	ldr	r2, [r2, #20]
 800380c:	0852      	lsrs	r2, r2, #1
 800380e:	3a01      	subs	r2, #1
 8003810:	0652      	lsls	r2, r2, #25
 8003812:	4311      	orrs	r1, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6852      	ldr	r2, [r2, #4]
 8003818:	3a01      	subs	r2, #1
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	430a      	orrs	r2, r1
 800381e:	4916      	ldr	r1, [pc, #88]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003824:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a13      	ldr	r2, [pc, #76]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800382a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800382e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fd f80e 	bl	8000850 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003838:	f7fd f80a 	bl	8000850 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
          break;
 800384a:	e005      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800384c:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	4904      	ldr	r1, [pc, #16]	@ (8003878 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	07ff800f 	.word	0x07ff800f
 8003880:	ff9f800f 	.word	0xff9f800f
 8003884:	f9ff800f 	.word	0xf9ff800f

08003888 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003896:	4b72      	ldr	r3, [pc, #456]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00e      	beq.n	80038c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0203 	and.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d103      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
       ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d142      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	e03f      	b.n	8003940 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d018      	beq.n	80038fa <RCCEx_PLLSAI2_Config+0x72>
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d825      	bhi.n	8003918 <RCCEx_PLLSAI2_Config+0x90>
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d002      	beq.n	80038d6 <RCCEx_PLLSAI2_Config+0x4e>
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d009      	beq.n	80038e8 <RCCEx_PLLSAI2_Config+0x60>
 80038d4:	e020      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038d6:	4b62      	ldr	r3, [pc, #392]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11d      	bne.n	800391e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e6:	e01a      	b.n	800391e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e013      	b.n	8003922 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038fa:	4b59      	ldr	r3, [pc, #356]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003906:	4b56      	ldr	r3, [pc, #344]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003916:	e006      	b.n	8003926 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e004      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003926:	bf00      	nop
    }

    if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800392e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4949      	ldr	r1, [pc, #292]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 8086 	bne.w	8003a54 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003948:	4b45      	ldr	r3, [pc, #276]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a44      	ldr	r2, [pc, #272]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fc ff7c 	bl	8000850 <HAL_GetTick>
 8003958:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800395a:	e009      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800395c:	f7fc ff78 	bl	8000850 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d902      	bls.n	8003970 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	73fb      	strb	r3, [r7, #15]
        break;
 800396e:	e005      	b.n	800397c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003970:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1ef      	bne.n	800395c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d168      	bne.n	8003a54 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d113      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003988:	4b35      	ldr	r3, [pc, #212]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	4b35      	ldr	r3, [pc, #212]	@ (8003a64 <RCCEx_PLLSAI2_Config+0x1dc>)
 800398e:	4013      	ands	r3, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6892      	ldr	r2, [r2, #8]
 8003994:	0211      	lsls	r1, r2, #8
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	06d2      	lsls	r2, r2, #27
 800399c:	4311      	orrs	r1, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6852      	ldr	r2, [r2, #4]
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	430a      	orrs	r2, r1
 80039a8:	492d      	ldr	r1, [pc, #180]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	614b      	str	r3, [r1, #20]
 80039ae:	e02d      	b.n	8003a0c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d115      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <RCCEx_PLLSAI2_Config+0x1e0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6892      	ldr	r2, [r2, #8]
 80039c2:	0211      	lsls	r1, r2, #8
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6912      	ldr	r2, [r2, #16]
 80039c8:	0852      	lsrs	r2, r2, #1
 80039ca:	3a01      	subs	r2, #1
 80039cc:	0552      	lsls	r2, r2, #21
 80039ce:	4311      	orrs	r1, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6852      	ldr	r2, [r2, #4]
 80039d4:	3a01      	subs	r2, #1
 80039d6:	0112      	lsls	r2, r2, #4
 80039d8:	430a      	orrs	r2, r1
 80039da:	4921      	ldr	r1, [pc, #132]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	614b      	str	r3, [r1, #20]
 80039e0:	e014      	b.n	8003a0c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	4b21      	ldr	r3, [pc, #132]	@ (8003a6c <RCCEx_PLLSAI2_Config+0x1e4>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6892      	ldr	r2, [r2, #8]
 80039ee:	0211      	lsls	r1, r2, #8
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6952      	ldr	r2, [r2, #20]
 80039f4:	0852      	lsrs	r2, r2, #1
 80039f6:	3a01      	subs	r2, #1
 80039f8:	0652      	lsls	r2, r2, #25
 80039fa:	4311      	orrs	r1, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6852      	ldr	r2, [r2, #4]
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0112      	lsls	r2, r2, #4
 8003a04:	430a      	orrs	r2, r1
 8003a06:	4916      	ldr	r1, [pc, #88]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a0c:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a13      	ldr	r2, [pc, #76]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fc ff1a 	bl	8000850 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a20:	f7fc ff16 	bl	8000850 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
          break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a34:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	4904      	ldr	r1, [pc, #16]	@ (8003a60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	07ff800f 	.word	0x07ff800f
 8003a68:	ff9f800f 	.word	0xff9f800f
 8003a6c:	f9ff800f 	.word	0xf9ff800f

08003a70 <memset>:
 8003a70:	4402      	add	r2, r0
 8003a72:	4603      	mov	r3, r0
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d100      	bne.n	8003a7a <memset+0xa>
 8003a78:	4770      	bx	lr
 8003a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7e:	e7f9      	b.n	8003a74 <memset+0x4>

08003a80 <__libc_init_array>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4d0d      	ldr	r5, [pc, #52]	@ (8003ab8 <__libc_init_array+0x38>)
 8003a84:	4c0d      	ldr	r4, [pc, #52]	@ (8003abc <__libc_init_array+0x3c>)
 8003a86:	1b64      	subs	r4, r4, r5
 8003a88:	10a4      	asrs	r4, r4, #2
 8003a8a:	2600      	movs	r6, #0
 8003a8c:	42a6      	cmp	r6, r4
 8003a8e:	d109      	bne.n	8003aa4 <__libc_init_array+0x24>
 8003a90:	4d0b      	ldr	r5, [pc, #44]	@ (8003ac0 <__libc_init_array+0x40>)
 8003a92:	4c0c      	ldr	r4, [pc, #48]	@ (8003ac4 <__libc_init_array+0x44>)
 8003a94:	f000 f818 	bl	8003ac8 <_init>
 8003a98:	1b64      	subs	r4, r4, r5
 8003a9a:	10a4      	asrs	r4, r4, #2
 8003a9c:	2600      	movs	r6, #0
 8003a9e:	42a6      	cmp	r6, r4
 8003aa0:	d105      	bne.n	8003aae <__libc_init_array+0x2e>
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa8:	4798      	blx	r3
 8003aaa:	3601      	adds	r6, #1
 8003aac:	e7ee      	b.n	8003a8c <__libc_init_array+0xc>
 8003aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab2:	4798      	blx	r3
 8003ab4:	3601      	adds	r6, #1
 8003ab6:	e7f2      	b.n	8003a9e <__libc_init_array+0x1e>
 8003ab8:	08003b20 	.word	0x08003b20
 8003abc:	08003b20 	.word	0x08003b20
 8003ac0:	08003b20 	.word	0x08003b20
 8003ac4:	08003b24 	.word	0x08003b24

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
