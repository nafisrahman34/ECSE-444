
Lab2_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd4  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004194  08004194  00005194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d4  080041d4  000051d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041d8  080041d8  000051d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080041dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080041e8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080041e8  000060a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a95d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8d  00000000  00000000  00010999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00012428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e9  00000000  00000000  00012eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d19  00000000  00000000  000136a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b03d  00000000  00000000  0003d3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065a6  00000000  00000000  000483f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e99d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  0014e9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001515e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800417c 	.word	0x0800417c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	0800417c 	.word	0x0800417c

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	@ 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2f>:
 80007cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007d4:	bf24      	itt	cs
 80007d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007de:	d90d      	bls.n	80007fc <__aeabi_d2f+0x30>
 80007e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007f4:	bf08      	it	eq
 80007f6:	f020 0001 	biceq.w	r0, r0, #1
 80007fa:	4770      	bx	lr
 80007fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000800:	d121      	bne.n	8000846 <__aeabi_d2f+0x7a>
 8000802:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000806:	bfbc      	itt	lt
 8000808:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800080c:	4770      	bxlt	lr
 800080e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000812:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000816:	f1c2 0218 	rsb	r2, r2, #24
 800081a:	f1c2 0c20 	rsb	ip, r2, #32
 800081e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000822:	fa20 f002 	lsr.w	r0, r0, r2
 8000826:	bf18      	it	ne
 8000828:	f040 0001 	orrne.w	r0, r0, #1
 800082c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000830:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000834:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000838:	ea40 000c 	orr.w	r0, r0, ip
 800083c:	fa23 f302 	lsr.w	r3, r3, r2
 8000840:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000844:	e7cc      	b.n	80007e0 <__aeabi_d2f+0x14>
 8000846:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800084a:	d107      	bne.n	800085c <__aeabi_d2f+0x90>
 800084c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000850:	bf1e      	ittt	ne
 8000852:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000856:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800085a:	4770      	bxne	lr
 800085c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000860:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000864:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//This is the interrupt function that is called when the button is pressed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	LEDState = !LEDState;
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x40>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f083 0301 	eor.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x40>)
 8000892:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LEDState);
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x40>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x44>)
 80008a0:	f001 ff94 	bl	80027cc <HAL_GPIO_WritePin>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000090 	.word	0x20000090
 80008b0:	48000400 	.word	0x48000400

080008b4 <MX_ADC1_Init1>:
/**
  * @brief  The application entry point.
  * @retval int
  */
static void MX_ADC1_Init1(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

/* USER CODE END ADC1_Init 1 */

/** Common config
*/
	hadc1.Instance = ADC1;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000930 <MX_ADC1_Init1+0x7c>)
 80008bc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008d8:	2204      	movs	r2, #4
 80008da:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008de:	2200      	movs	r2, #0
 80008e0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80008e8:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_ADC1_Init1+0x78>)
 80008fe:	2200      	movs	r2, #0
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_ADC1_Init1+0x78>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_ADC1_Init1+0x78>)
 800090c:	2200      	movs	r2, #0
 800090e:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_ADC1_Init1+0x78>)
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_ADC1_Init1+0x78>)
 800091a:	f000 fcff 	bl	800131c <HAL_ADC_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init1+0x74>
	{
		Error_Handler();
 8000924:	f000 f9a4 	bl	8000c70 <Error_Handler>

/* USER CODE BEGIN ADC1_Init 2 */

/* USER CODE END ADC1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000028 	.word	0x20000028
 8000930:	50040000 	.word	0x50040000
 8000934:	00000000 	.word	0x00000000

08000938 <main>:
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b092      	sub	sp, #72	@ 0x48
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fa78 	bl	8000e32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f8eb 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 f93b 	bl	8000bc0 <MX_GPIO_Init>
  MX_ADC1_Init1();
 800094a:	f7ff ffb3 	bl	80008b4 <MX_ADC1_Init1>
  while(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK);
 800094e:	bf00      	nop
 8000950:	217f      	movs	r1, #127	@ 0x7f
 8000952:	4867      	ldr	r0, [pc, #412]	@ (8000af0 <main+0x1b8>)
 8000954:	f001 fc36 	bl	80021c4 <HAL_ADCEx_Calibration_Start>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f8      	bne.n	8000950 <main+0x18>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (LEDState){
 800095e:	4b65      	ldr	r3, [pc, #404]	@ (8000af4 <main+0x1bc>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d078      	beq.n	8000a58 <main+0x120>
		  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000966:	4b64      	ldr	r3, [pc, #400]	@ (8000af8 <main+0x1c0>)
 8000968:	603b      	str	r3, [r7, #0]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 800096a:	2306      	movs	r3, #6
 800096c:	607b      	str	r3, [r7, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800096e:	2303      	movs	r3, #3
 8000970:	60bb      	str	r3, [r7, #8]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000972:	237f      	movs	r3, #127	@ 0x7f
 8000974:	60fb      	str	r3, [r7, #12]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000976:	2304      	movs	r3, #4
 8000978:	613b      	str	r3, [r7, #16]
		  sConfig.Offset = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
		  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800097e:	463b      	mov	r3, r7
 8000980:	4619      	mov	r1, r3
 8000982:	485b      	ldr	r0, [pc, #364]	@ (8000af0 <main+0x1b8>)
 8000984:	f000 ff10 	bl	80017a8 <HAL_ADC_ConfigChannel>

		  HAL_ADC_Start(&hadc1);
 8000988:	4859      	ldr	r0, [pc, #356]	@ (8000af0 <main+0x1b8>)
 800098a:	f000 fe0d 	bl	80015a8 <HAL_ADC_Start>
		  while(HAL_ADC_PollForConversion(&hadc1, 1000000) != HAL_OK);
 800098e:	bf00      	nop
 8000990:	495a      	ldr	r1, [pc, #360]	@ (8000afc <main+0x1c4>)
 8000992:	4857      	ldr	r0, [pc, #348]	@ (8000af0 <main+0x1b8>)
 8000994:	f000 fe6b 	bl	800166e <HAL_ADC_PollForConversion>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f8      	bne.n	8000990 <main+0x58>
		  uint16_t TS_Data = HAL_ADC_GetValue(&hadc1);
 800099e:	4854      	ldr	r0, [pc, #336]	@ (8000af0 <main+0x1b8>)
 80009a0:	f000 fef4 	bl	800178c <HAL_ADC_GetValue>
 80009a4:	4603      	mov	r3, r0
 80009a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
		  float calibratedTS_Data = (float) TS_Data;
 80009a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80009aa:	ee07 3a90 	vmov	s15, r3
 80009ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  calibratedTS_Data = calibratedTS_Data*(3.3/3.0);
 80009b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80009b8:	f7ff feb0 	bl	800071c <__aeabi_f2d>
 80009bc:	a348      	add	r3, pc, #288	@ (adr r3, 8000ae0 <main+0x1a8>)
 80009be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c2:	f7ff fc1d 	bl	8000200 <__aeabi_dmul>
 80009c6:	4602      	mov	r2, r0
 80009c8:	460b      	mov	r3, r1
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	f7ff fefd 	bl	80007cc <__aeabi_d2f>
 80009d2:	4603      	mov	r3, r0
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34

		  //get calibration data from memory
		  int32_t TS_CAL2 = (int32_t) *((uint16_t *) 0x1FFF75CA);
 80009d6:	4b4a      	ldr	r3, [pc, #296]	@ (8000b00 <main+0x1c8>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
		  int32_t TS_CAL1 = (int32_t) *((uint16_t *) 0x1FFF75A8);
 80009dc:	4b49      	ldr	r3, [pc, #292]	@ (8000b04 <main+0x1cc>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  //temperatures at which calibration data was collected according to Datasheet
		  int TS_CAL2_TEMP = 130;
 80009e2:	2382      	movs	r3, #130	@ 0x82
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		  int TS_CAL1_TEMP = 30;
 80009e6:	231e      	movs	r3, #30
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24

		  //calculate avgSlope
		  float numerator = 3.3*(TS_CAL2 - TS_CAL1); //scale temp according to reference voltage
 80009ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe81 	bl	80006f8 <__aeabi_i2d>
 80009f6:	a33c      	add	r3, pc, #240	@ (adr r3, 8000ae8 <main+0x1b0>)
 80009f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fc:	f7ff fc00 	bl	8000200 <__aeabi_dmul>
 8000a00:	4602      	mov	r2, r0
 8000a02:	460b      	mov	r3, r1
 8000a04:	4610      	mov	r0, r2
 8000a06:	4619      	mov	r1, r3
 8000a08:	f7ff fee0 	bl	80007cc <__aeabi_d2f>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	623b      	str	r3, [r7, #32]
		  float avgSlope = numerator/(TS_CAL2_TEMP - TS_CAL1_TEMP);
 8000a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1e:	edd7 6a08 	vldr	s13, [r7, #32]
 8000a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a26:	edc7 7a07 	vstr	s15, [r7, #28]
		  float temp = (calibratedTS_Data - TS_CAL1)/avgSlope + 30.0f;
 8000a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a34:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000a38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000a3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a4c:	edc7 7a06 	vstr	s15, [r7, #24]
		  output = temp;
 8000a50:	4a2d      	ldr	r2, [pc, #180]	@ (8000b08 <main+0x1d0>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e782      	b.n	800095e <main+0x26>

	  }else{
		  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <main+0x1d4>)
 8000a5a:	603b      	str	r3, [r7, #0]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	607b      	str	r3, [r7, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a64:	237f      	movs	r3, #127	@ 0x7f
 8000a66:	60fb      	str	r3, [r7, #12]
		  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	613b      	str	r3, [r7, #16]
		  sConfig.Offset = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) Error_Handler();
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	481e      	ldr	r0, [pc, #120]	@ (8000af0 <main+0x1b8>)
 8000a76:	f000 fe97 	bl	80017a8 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <main+0x14c>
 8000a80:	f000 f8f6 	bl	8000c70 <Error_Handler>

		  HAL_ADC_Start(&hadc1);
 8000a84:	481a      	ldr	r0, [pc, #104]	@ (8000af0 <main+0x1b8>)
 8000a86:	f000 fd8f 	bl	80015a8 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 8000a8a:	491c      	ldr	r1, [pc, #112]	@ (8000afc <main+0x1c4>)
 8000a8c:	4818      	ldr	r0, [pc, #96]	@ (8000af0 <main+0x1b8>)
 8000a8e:	f000 fdee 	bl	800166e <HAL_ADC_PollForConversion>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f47f af62 	bne.w	800095e <main+0x26>
			  int32_t ADCValue = (int32_t) HAL_ADC_GetValue(&hadc1);
 8000a9a:	4815      	ldr	r0, [pc, #84]	@ (8000af0 <main+0x1b8>)
 8000a9c:	f000 fe76 	bl	800178c <HAL_ADC_GetValue>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	647b      	str	r3, [r7, #68]	@ 0x44
			  int32_t VREFINT_CAL =(int32_t) *((uint16_t *) 0x1FFF75AA); //the calibration value
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <main+0x1d8>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	643b      	str	r3, [r7, #64]	@ 0x40
			  float VREF_Charac = 3.0; //voltage characterized at VREFINT during manufacturing, specified in datasheet
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <main+0x1dc>)
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
			  VREF = VREF_Charac*((float) VREFINT_CAL/ADCValue);
 8000aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000aba:	ee07 3a90 	vmov	s15, r3
 8000abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ac6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <main+0x1e0>)
 8000ad0:	edc3 7a00 	vstr	s15, [r3]
			  output = VREF;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <main+0x1e0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <main+0x1d0>)
 8000ada:	6013      	str	r3, [r2, #0]
	  if (LEDState){
 8000adc:	e73f      	b.n	800095e <main+0x26>
 8000ade:	bf00      	nop
 8000ae0:	99999999 	.word	0x99999999
 8000ae4:	3ff19999 	.word	0x3ff19999
 8000ae8:	66666666 	.word	0x66666666
 8000aec:	400a6666 	.word	0x400a6666
 8000af0:	20000028 	.word	0x20000028
 8000af4:	20000090 	.word	0x20000090
 8000af8:	c7520000 	.word	0xc7520000
 8000afc:	000f4240 	.word	0x000f4240
 8000b00:	1fff75ca 	.word	0x1fff75ca
 8000b04:	1fff75a8 	.word	0x1fff75a8
 8000b08:	20000094 	.word	0x20000094
 8000b0c:	80000001 	.word	0x80000001
 8000b10:	1fff75aa 	.word	0x1fff75aa
 8000b14:	40400000 	.word	0x40400000
 8000b18:	20000098 	.word	0x20000098

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b096      	sub	sp, #88	@ 0x58
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2244      	movs	r2, #68	@ 0x44
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fafa 	bl	8004124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f001 fe94 	bl	800286c <HAL_PWREx_ControlVoltageScaling>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b4a:	f000 f891 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b52:	2301      	movs	r3, #1
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b5a:	2360      	movs	r3, #96	@ 0x60
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b6a:	233c      	movs	r3, #60	@ 0x3c
 8000b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 ff18 	bl	80029b4 <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b8a:	f000 f871 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2303      	movs	r3, #3
 8000b94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fb1e 	bl	80031e8 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bb2:	f000 f85d 	bl	8000c70 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3758      	adds	r7, #88	@ 0x58
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	4a22      	ldr	r2, [pc, #136]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c64 <MX_GPIO_Init+0xa4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c0c:	4816      	ldr	r0, [pc, #88]	@ (8000c68 <MX_GPIO_Init+0xa8>)
 8000c0e:	f001 fddd 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	4810      	ldr	r0, [pc, #64]	@ (8000c6c <MX_GPIO_Init+0xac>)
 8000c2a:	f001 fc3d 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4808      	ldr	r0, [pc, #32]	@ (8000c68 <MX_GPIO_Init+0xa8>)
 8000c48:	f001 fc2e 	bl	80024a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2028      	movs	r0, #40	@ 0x28
 8000c52:	f001 fbf2 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c56:	2028      	movs	r0, #40	@ 0x28
 8000c58:	f001 fc0b 	bl	8002472 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	48000400 	.word	0x48000400
 8000c6c:	48000800 	.word	0x48000800

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9e:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0a8      	sub	sp, #160	@ 0xa0
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2294      	movs	r2, #148	@ 0x94
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fa25 	bl	8004124 <memset>
  if(hadc->Instance==ADC1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a19      	ldr	r2, [pc, #100]	@ (8000d44 <HAL_ADC_MspInit+0x80>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d12b      	bne.n	8000d3c <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ce4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ce8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000cfa:	2318      	movs	r3, #24
 8000cfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fced 	bl	80036f4 <HAL_RCCEx_PeriphCLKConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000d20:	f7ff ffa6 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_ADC_MspInit+0x84>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <HAL_ADC_MspInit+0x84>)
 8000d2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_ADC_MspInit+0x84>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d3c:	bf00      	nop
 8000d3e:	37a0      	adds	r7, #160	@ 0xa0
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	50040000 	.word	0x50040000
 8000d48:	40021000 	.word	0x40021000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 f89b 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000dae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000db2:	f001 fd23 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	@ (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	@ (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 f991 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff fd91 	bl	8000938 <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e24:	080041dc 	.word	0x080041dc
  ldr r2, =_sbss
 8000e28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e2c:	200000a0 	.word	0x200000a0

08000e30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_IRQHandler>

08000e32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f001 faf1 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f80e 	bl	8000e64 <HAL_InitTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	e001      	b.n	8000e58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e54:	f7ff ff12 	bl	8000c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d023      	beq.n	8000ec0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <HAL_InitTick+0x70>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fafd 	bl	800248e <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d809      	bhi.n	8000eb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f001 fac7 	bl	800243a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_InitTick+0x74>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e007      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e004      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e001      	b.n	8000ec4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	2000009c 	.word	0x2000009c

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000009c 	.word	0x2000009c

08000f1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	609a      	str	r2, [r3, #8]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3360      	adds	r3, #96	@ 0x60
 8000f96:	461a      	mov	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <LL_ADC_SetOffset+0x44>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	03fff000 	.word	0x03fff000

08000fcc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3360      	adds	r3, #96	@ 0x60
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3360      	adds	r3, #96	@ 0x60
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	615a      	str	r2, [r3, #20]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800107a:	b480      	push	{r7}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3330      	adds	r3, #48	@ 0x30
 800108a:	461a      	mov	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	4413      	add	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	211f      	movs	r1, #31
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	401a      	ands	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0e9b      	lsrs	r3, r3, #26
 80010b2:	f003 011f 	and.w	r1, r3, #31
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3314      	adds	r3, #20
 80010e2:	461a      	mov	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	0e5b      	lsrs	r3, r3, #25
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	0d1b      	lsrs	r3, r3, #20
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	2107      	movs	r1, #7
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	0d1b      	lsrs	r3, r3, #20
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	431a      	orrs	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0318 	and.w	r3, r3, #24
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <LL_ADC_SetChannelSingleDiff+0x44>)
 800114c:	40d9      	lsrs	r1, r3
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	400b      	ands	r3, r1
 8001152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001156:	431a      	orrs	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	0007ffff 	.word	0x0007ffff

08001170 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001180:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6093      	str	r3, [r2, #8]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011a8:	d101      	bne.n	80011ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80011cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80011f8:	d101      	bne.n	80011fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800121c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001244:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001248:	f043 0202 	orr.w	r2, r3, #2
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <LL_ADC_IsEnabled+0x18>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <LL_ADC_IsEnabled+0x1a>
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d101      	bne.n	800129a <LL_ADC_IsDisableOngoing+0x18>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_ADC_IsDisableOngoing+0x1a>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012bc:	f043 0204 	orr.w	r2, r3, #4
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d101      	bne.n	80012e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b08      	cmp	r3, #8
 8001308:	d101      	bne.n	800130e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e129      	b.n	800158a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fcbd 	bl	8000cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff19 	bl	8001194 <LL_ADC_IsDeepPowerDownEnabled>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff feff 	bl	8001170 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff34 	bl	80011e4 <LL_ADC_IsInternalRegulatorEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d115      	bne.n	80013ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff18 	bl	80011bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800138c:	4b81      	ldr	r3, [pc, #516]	@ (8001594 <HAL_ADC_Init+0x278>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	4a81      	ldr	r2, [pc, #516]	@ (8001598 <HAL_ADC_Init+0x27c>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	3301      	adds	r3, #1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013a0:	e002      	b.n	80013a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff16 	bl	80011e4 <LL_ADC_IsInternalRegulatorEnabled>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10d      	bne.n	80013da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	f043 0210 	orr.w	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff76 	bl	80012d0 <LL_ADC_REG_IsConversionOngoing>
 80013e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 80c2 	bne.w	8001578 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 80be 	bne.w	8001578 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001400:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001404:	f043 0202 	orr.w	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff23 	bl	800125c <LL_ADC_IsEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10b      	bne.n	8001434 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800141c:	485f      	ldr	r0, [pc, #380]	@ (800159c <HAL_ADC_Init+0x280>)
 800141e:	f7ff ff1d 	bl	800125c <LL_ADC_IsEnabled>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	485c      	ldr	r0, [pc, #368]	@ (80015a0 <HAL_ADC_Init+0x284>)
 8001430:	f7ff fd74 	bl	8000f1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7e5b      	ldrb	r3, [r3, #25]
 8001438:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800143e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001444:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800144a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001452:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001466:	3b01      	subs	r3, #1
 8001468:	045b      	lsls	r3, r3, #17
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001474:	2b00      	cmp	r3, #0
 8001476:	d009      	beq.n	800148c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001484:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	4b44      	ldr	r3, [pc, #272]	@ (80015a4 <HAL_ADC_Init+0x288>)
 8001494:	4013      	ands	r3, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	430b      	orrs	r3, r1
 800149e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff26 	bl	80012f6 <LL_ADC_INJ_IsConversionOngoing>
 80014aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d140      	bne.n	8001534 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d13d      	bne.n	8001534 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7e1b      	ldrb	r3, [r3, #24]
 80014c0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014c2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014da:	f023 0306 	bic.w	r3, r3, #6
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	69b9      	ldr	r1, [r7, #24]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d118      	bne.n	8001524 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001508:	4311      	orrs	r1, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001514:	430a      	orrs	r2, r1
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	e007      	b.n	8001534 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d10c      	bne.n	8001556 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f023 010f 	bic.w	r1, r3, #15
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	631a      	str	r2, [r3, #48]	@ 0x30
 8001554:	e007      	b.n	8001566 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 020f 	bic.w	r2, r2, #15
 8001564:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	f023 0303 	bic.w	r3, r3, #3
 800156e:	f043 0201 	orr.w	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	659a      	str	r2, [r3, #88]	@ 0x58
 8001576:	e007      	b.n	8001588 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	f043 0210 	orr.w	r2, r3, #16
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001588:	7ffb      	ldrb	r3, [r7, #31]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000000 	.word	0x20000000
 8001598:	053e2d63 	.word	0x053e2d63
 800159c:	50040000 	.word	0x50040000
 80015a0:	50040300 	.word	0x50040300
 80015a4:	fff0c007 	.word	0xfff0c007

080015a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe8b 	bl	80012d0 <LL_ADC_REG_IsConversionOngoing>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d14f      	bne.n	8001660 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Start+0x26>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e04b      	b.n	8001666 <HAL_ADC_Start+0xbe>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fce2 	bl	8001fa0 <ADC_Enable>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d137      	bne.n	8001656 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001606:	d106      	bne.n	8001616 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160c:	f023 0206 	bic.w	r2, r3, #6
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001614:	e002      	b.n	800161c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	221c      	movs	r2, #28
 8001622:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001642:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fe2a 	bl	80012a8 <LL_ADC_REG_StartConversion>
 8001654:	e006      	b.n	8001664 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800165e:	e001      	b.n	8001664 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001660:	2302      	movs	r3, #2
 8001662:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d102      	bne.n	8001686 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001680:	2308      	movs	r3, #8
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e010      	b.n	80016a8 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e06f      	b.n	8001784 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80016a4:	2304      	movs	r3, #4
 80016a6:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016a8:	f7ff fc2c 	bl	8000f04 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016ae:	e021      	b.n	80016f4 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b6:	d01d      	beq.n	80016f4 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016b8:	f7ff fc24 	bl	8000f04 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d302      	bcc.n	80016ce <HAL_ADC_PollForConversion+0x60>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d112      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10b      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	f043 0204 	orr.w	r2, r3, #4
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e047      	b.n	8001784 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0d6      	beq.n	80016b0 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fc9e 	bl	8001054 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01c      	beq.n	8001758 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7e5b      	ldrb	r3, [r3, #25]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b08      	cmp	r3, #8
 8001732:	d111      	bne.n	8001758 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001738:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b08      	cmp	r3, #8
 8001764:	d104      	bne.n	8001770 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2208      	movs	r2, #8
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e008      	b.n	8001782 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b0b6      	sub	sp, #216	@ 0xd8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x22>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e3d5      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x7ce>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fd7a 	bl	80012d0 <LL_ADC_REG_IsConversionOngoing>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 83ba 	bne.w	8001f58 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d824      	bhi.n	800183e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	3b02      	subs	r3, #2
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d81b      	bhi.n	8001836 <HAL_ADC_ConfigChannel+0x8e>
 80017fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001804 <HAL_ADC_ConfigChannel+0x5c>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	0800181d 	.word	0x0800181d
 800180c:	08001825 	.word	0x08001825
 8001810:	0800182d 	.word	0x0800182d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001814:	230c      	movs	r3, #12
 8001816:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800181a:	e010      	b.n	800183e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800181c:	2312      	movs	r3, #18
 800181e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001822:	e00c      	b.n	800183e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001824:	2318      	movs	r3, #24
 8001826:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800182a:	e008      	b.n	800183e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800182c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001830:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001834:	e003      	b.n	800183e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001836:	2306      	movs	r3, #6
 8001838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800183c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800184c:	f7ff fc15 	bl	800107a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fd3b 	bl	80012d0 <LL_ADC_REG_IsConversionOngoing>
 800185a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fd47 	bl	80012f6 <LL_ADC_INJ_IsConversionOngoing>
 8001868:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800186c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001870:	2b00      	cmp	r3, #0
 8001872:	f040 81bf 	bne.w	8001bf4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 81ba 	bne.w	8001bf4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001888:	d10f      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff fc1c 	bl	80010d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fbc3 	bl	800102e <LL_ADC_SetSamplingTimeCommonConfig>
 80018a8:	e00e      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f7ff fc0b 	bl	80010d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fbb3 	bl	800102e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	08db      	lsrs	r3, r3, #3
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d00a      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018fa:	f7ff fb43 	bl	8000f84 <LL_ADC_SetOffset>
 80018fe:	e179      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb60 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10a      	bne.n	800192c <HAL_ADC_ConfigChannel+0x184>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb55 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	0e9b      	lsrs	r3, r3, #26
 8001926:	f003 021f 	and.w	r2, r3, #31
 800192a:	e01e      	b.n	800196a <HAL_ADC_ConfigChannel+0x1c2>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb4a 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800194a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800194e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800195a:	2320      	movs	r3, #32
 800195c:	e004      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800195e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x1da>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	0e9b      	lsrs	r3, r3, #26
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	e018      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x20c>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800199a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800199e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80019a6:	2320      	movs	r3, #32
 80019a8:	e004      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80019aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d106      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb19 	bl	8000ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2101      	movs	r1, #1
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fafd 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x24a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff faf2 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	0e9b      	lsrs	r3, r3, #26
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	e01e      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x288>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2101      	movs	r1, #1
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fae7 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001a18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001a20:	2320      	movs	r3, #32
 8001a22:	e004      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001a24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x2a0>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	e018      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x2d2>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e004      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d106      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fab6 	bl	8000ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2102      	movs	r1, #2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fa9a 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10a      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x310>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fa8f 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	0e9b      	lsrs	r3, r3, #26
 8001ab2:	f003 021f 	and.w	r2, r3, #31
 8001ab6:	e01e      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x34e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2102      	movs	r1, #2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fa84 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e004      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x366>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	e014      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x390>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	e004      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d106      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	2102      	movs	r1, #2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fa57 	bl	8000ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2103      	movs	r1, #3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fa3b 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10a      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x3ce>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2103      	movs	r1, #3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fa30 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	0e9b      	lsrs	r3, r3, #26
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	e017      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x3fe>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2103      	movs	r1, #3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fa25 	bl	8000fcc <LL_ADC_GetOffsetChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b90:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e003      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001b9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x416>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	e011      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x43a>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001bcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bce:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001bd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	e003      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001bda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d106      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	2103      	movs	r1, #3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fa02 	bl	8000ff8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb2f 	bl	800125c <LL_ADC_IsEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 813f 	bne.w	8001e84 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f7ff fa88 	bl	8001128 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a8e      	ldr	r2, [pc, #568]	@ (8001e58 <HAL_ADC_ConfigChannel+0x6b0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	f040 8130 	bne.w	8001e84 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x4a4>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e019      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x4d8>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e003      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	bf94      	ite	ls
 8001c7a:	2301      	movls	r3, #1
 8001c7c:	2300      	movhi	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d079      	beq.n	8001d78 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x4f8>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	3301      	adds	r3, #1
 8001c98:	069b      	lsls	r3, r3, #26
 8001c9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c9e:	e015      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x524>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	069b      	lsls	r3, r3, #26
 8001cc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x544>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	e017      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x574>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cfc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001d04:	2320      	movs	r3, #32
 8001d06:	e003      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	ea42 0103 	orr.w	r1, r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10a      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x59a>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	3301      	adds	r3, #1
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	051b      	lsls	r3, r3, #20
 8001d40:	e018      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x5cc>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e003      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d74:	430b      	orrs	r3, r1
 8001d76:	e080      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x5ec>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	069b      	lsls	r3, r3, #26
 8001d8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d92:	e015      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x618>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e003      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	069b      	lsls	r3, r3, #26
 8001dbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x638>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	e017      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x668>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	61bb      	str	r3, [r7, #24]
  return result;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	ea42 0103 	orr.w	r1, r2, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10d      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x694>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	3301      	adds	r3, #1
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	3b1e      	subs	r3, #30
 8001e34:	051b      	lsls	r3, r3, #20
 8001e36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	e01d      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x6d0>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	60fb      	str	r3, [r7, #12]
  return result;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d103      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e005      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x6bc>
 8001e58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	f003 021f 	and.w	r2, r3, #31
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b1e      	subs	r3, #30
 8001e72:	051b      	lsls	r3, r3, #20
 8001e74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e78:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7ff f927 	bl	80010d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b3d      	ldr	r3, [pc, #244]	@ (8001f80 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d06c      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e90:	483c      	ldr	r0, [pc, #240]	@ (8001f84 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e92:	f7ff f869 	bl	8000f68 <LL_ADC_GetCommonPathInternalCh>
 8001e96:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f88 <HAL_ADC_ConfigChannel+0x7e0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d127      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d121      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a35      	ldr	r2, [pc, #212]	@ (8001f8c <HAL_ADC_ConfigChannel+0x7e4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d157      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ebe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	482f      	ldr	r0, [pc, #188]	@ (8001f84 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ec6:	f7ff f83c 	bl	8000f42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eca:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7e8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	099b      	lsrs	r3, r3, #6
 8001ed0:	4a30      	ldr	r2, [pc, #192]	@ (8001f94 <HAL_ADC_ConfigChannel+0x7ec>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef2:	e03a      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a27      	ldr	r2, [pc, #156]	@ (8001f98 <HAL_ADC_ConfigChannel+0x7f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d113      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <HAL_ADC_ConfigChannel+0x7e4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d12a      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4819      	ldr	r0, [pc, #100]	@ (8001f84 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f20:	f7ff f80f 	bl	8000f42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f24:	e021      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f9c <HAL_ADC_ConfigChannel+0x7f4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d11c      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d116      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <HAL_ADC_ConfigChannel+0x7e4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d111      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f52:	f7fe fff6 	bl	8000f42 <LL_ADC_SetCommonPathInternalCh>
 8001f56:	e008      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f043 0220 	orr.w	r2, r3, #32
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f72:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	37d8      	adds	r7, #216	@ 0xd8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	80080000 	.word	0x80080000
 8001f84:	50040300 	.word	0x50040300
 8001f88:	c7520000 	.word	0xc7520000
 8001f8c:	50040000 	.word	0x50040000
 8001f90:	20000000 	.word	0x20000000
 8001f94:	053e2d63 	.word	0x053e2d63
 8001f98:	cb840000 	.word	0xcb840000
 8001f9c:	80000001 	.word	0x80000001

08001fa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f953 	bl	800125c <LL_ADC_IsEnabled>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d169      	bne.n	8002090 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	4b36      	ldr	r3, [pc, #216]	@ (800209c <ADC_Enable+0xfc>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00d      	beq.n	8001fe6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e055      	b.n	8002092 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f90e 	bl	800120c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ff0:	482b      	ldr	r0, [pc, #172]	@ (80020a0 <ADC_Enable+0x100>)
 8001ff2:	f7fe ffb9 	bl	8000f68 <LL_ADC_GetCommonPathInternalCh>
 8001ff6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002000:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <ADC_Enable+0x104>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	4a28      	ldr	r2, [pc, #160]	@ (80020a8 <ADC_Enable+0x108>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800201a:	e002      	b.n	8002022 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	3b01      	subs	r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f9      	bne.n	800201c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002028:	f7fe ff6c 	bl	8000f04 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800202e:	e028      	b.n	8002082 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f911 	bl	800125c <LL_ADC_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff f8e1 	bl	800120c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800204a:	f7fe ff5b 	bl	8000f04 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d914      	bls.n	8002082 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d00d      	beq.n	8002082 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e007      	b.n	8002092 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d1cf      	bne.n	8002030 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	8000003f 	.word	0x8000003f
 80020a0:	50040300 	.word	0x50040300
 80020a4:	20000000 	.word	0x20000000
 80020a8:	053e2d63 	.word	0x053e2d63

080020ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f8e2 	bl	8001282 <LL_ADC_IsDisableOngoing>
 80020be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f8c9 	bl	800125c <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d047      	beq.n	8002160 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d144      	bne.n	8002160 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 030d 	and.w	r3, r3, #13
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10c      	bne.n	80020fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f8a3 	bl	8001234 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2203      	movs	r2, #3
 80020f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020f6:	f7fe ff05 	bl	8000f04 <HAL_GetTick>
 80020fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020fc:	e029      	b.n	8002152 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	f043 0210 	orr.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e023      	b.n	8002162 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800211a:	f7fe fef3 	bl	8000f04 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d914      	bls.n	8002152 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e007      	b.n	8002162 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1dc      	bne.n	800211a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <LL_ADC_StartCalibration>:
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800217c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002186:	4313      	orrs	r3, r2
 8002188:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_IsCalibrationOnGoing>:
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80021dc:	2302      	movs	r3, #2
 80021de:	e04d      	b.n	800227c <HAL_ADCEx_Calibration_Start+0xb8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff5f 	bl	80020ac <ADC_Disable>
 80021ee:	4603      	mov	r3, r0
 80021f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d136      	bne.n	8002266 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002200:	f023 0302 	bic.w	r3, r3, #2
 8002204:	f043 0202 	orr.w	r2, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ffa9 	bl	800216a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002218:	e014      	b.n	8002244 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3301      	adds	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002226:	d30d      	bcc.n	8002244 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222c:	f023 0312 	bic.w	r3, r3, #18
 8002230:	f043 0210 	orr.w	r2, r3, #16
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e01b      	b.n	800227c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ffa7 	bl	800219c <LL_ADC_IsCalibrationOnGoing>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e2      	bne.n	800221a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	f023 0303 	bic.w	r3, r3, #3
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	@ 0x58
 8002264:	e005      	b.n	8002272 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	@ (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	@ (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b6:	e166      	b.n	8002786 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	4013      	ands	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8158 	beq.w	8002780 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d005      	beq.n	80024e8 <HAL_GPIO_Init+0x40>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d130      	bne.n	800254a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800251e:	2201      	movs	r2, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 0201 	and.w	r2, r3, #1
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b03      	cmp	r3, #3
 8002554:	d017      	beq.n	8002586 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	2203      	movs	r2, #3
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d123      	bne.n	80025da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	6939      	ldr	r1, [r7, #16]
 80025d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0203 	and.w	r2, r3, #3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80b2 	beq.w	8002780 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261c:	4b61      	ldr	r3, [pc, #388]	@ (80027a4 <HAL_GPIO_Init+0x2fc>)
 800261e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002620:	4a60      	ldr	r2, [pc, #384]	@ (80027a4 <HAL_GPIO_Init+0x2fc>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6613      	str	r3, [r2, #96]	@ 0x60
 8002628:	4b5e      	ldr	r3, [pc, #376]	@ (80027a4 <HAL_GPIO_Init+0x2fc>)
 800262a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002634:	4a5c      	ldr	r2, [pc, #368]	@ (80027a8 <HAL_GPIO_Init+0x300>)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800265e:	d02b      	beq.n	80026b8 <HAL_GPIO_Init+0x210>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a52      	ldr	r2, [pc, #328]	@ (80027ac <HAL_GPIO_Init+0x304>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d025      	beq.n	80026b4 <HAL_GPIO_Init+0x20c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a51      	ldr	r2, [pc, #324]	@ (80027b0 <HAL_GPIO_Init+0x308>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d01f      	beq.n	80026b0 <HAL_GPIO_Init+0x208>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a50      	ldr	r2, [pc, #320]	@ (80027b4 <HAL_GPIO_Init+0x30c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d019      	beq.n	80026ac <HAL_GPIO_Init+0x204>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <HAL_GPIO_Init+0x310>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <HAL_GPIO_Init+0x200>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_GPIO_Init+0x314>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00d      	beq.n	80026a4 <HAL_GPIO_Init+0x1fc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a4d      	ldr	r2, [pc, #308]	@ (80027c0 <HAL_GPIO_Init+0x318>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x1f8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a4c      	ldr	r2, [pc, #304]	@ (80027c4 <HAL_GPIO_Init+0x31c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_GPIO_Init+0x1f4>
 8002698:	2307      	movs	r3, #7
 800269a:	e00e      	b.n	80026ba <HAL_GPIO_Init+0x212>
 800269c:	2308      	movs	r3, #8
 800269e:	e00c      	b.n	80026ba <HAL_GPIO_Init+0x212>
 80026a0:	2306      	movs	r3, #6
 80026a2:	e00a      	b.n	80026ba <HAL_GPIO_Init+0x212>
 80026a4:	2305      	movs	r3, #5
 80026a6:	e008      	b.n	80026ba <HAL_GPIO_Init+0x212>
 80026a8:	2304      	movs	r3, #4
 80026aa:	e006      	b.n	80026ba <HAL_GPIO_Init+0x212>
 80026ac:	2303      	movs	r3, #3
 80026ae:	e004      	b.n	80026ba <HAL_GPIO_Init+0x212>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_Init+0x212>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_GPIO_Init+0x212>
 80026b8:	2300      	movs	r3, #0
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	f002 0203 	and.w	r2, r2, #3
 80026c0:	0092      	lsls	r2, r2, #2
 80026c2:	4093      	lsls	r3, r2
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ca:	4937      	ldr	r1, [pc, #220]	@ (80027a8 <HAL_GPIO_Init+0x300>)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026d8:	4b3b      	ldr	r3, [pc, #236]	@ (80027c8 <HAL_GPIO_Init+0x320>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026fc:	4a32      	ldr	r2, [pc, #200]	@ (80027c8 <HAL_GPIO_Init+0x320>)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002702:	4b31      	ldr	r3, [pc, #196]	@ (80027c8 <HAL_GPIO_Init+0x320>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002726:	4a28      	ldr	r2, [pc, #160]	@ (80027c8 <HAL_GPIO_Init+0x320>)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800272c:	4b26      	ldr	r3, [pc, #152]	@ (80027c8 <HAL_GPIO_Init+0x320>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	43db      	mvns	r3, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002750:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <HAL_GPIO_Init+0x320>)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002756:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <HAL_GPIO_Init+0x320>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	43db      	mvns	r3, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800277a:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <HAL_GPIO_Init+0x320>)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3301      	adds	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	f47f ae91 	bne.w	80024b8 <HAL_GPIO_Init+0x10>
  }
}
 8002796:	bf00      	nop
 8002798:	bf00      	nop
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010000 	.word	0x40010000
 80027ac:	48000400 	.word	0x48000400
 80027b0:	48000800 	.word	0x48000800
 80027b4:	48000c00 	.word	0x48000c00
 80027b8:	48001000 	.word	0x48001000
 80027bc:	48001400 	.word	0x48001400
 80027c0:	48001800 	.word	0x48001800
 80027c4:	48001c00 	.word	0x48001c00
 80027c8:	40010400 	.word	0x40010400

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002812:	4a05      	ldr	r2, [pc, #20]	@ (8002828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe f826 	bl	800086c <HAL_GPIO_EXTI_Callback>
  }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40010400 	.word	0x40010400

0800282c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002830:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283c:	d102      	bne.n	8002844 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800283e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002842:	e00b      	b.n	800285c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002844:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002852:	d102      	bne.n	800285a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002858:	e000      	b.n	800285c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800285a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40007000 	.word	0x40007000

0800286c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d141      	bne.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800287a:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002886:	d131      	bne.n	80028ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002888:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800288e:	4a46      	ldr	r2, [pc, #280]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002894:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002898:	4b43      	ldr	r3, [pc, #268]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028a0:	4a41      	ldr	r2, [pc, #260]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80028a8:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2232      	movs	r2, #50	@ 0x32
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	4a3f      	ldr	r2, [pc, #252]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	0c9b      	lsrs	r3, r3, #18
 80028ba:	3301      	adds	r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028be:	e002      	b.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028c6:	4b38      	ldr	r3, [pc, #224]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d2:	d102      	bne.n	80028da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f2      	bne.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028da:	4b33      	ldr	r3, [pc, #204]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e6:	d158      	bne.n	800299a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e057      	b.n	800299c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028ec:	4b2e      	ldr	r3, [pc, #184]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028f2:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028fc:	e04d      	b.n	800299a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002904:	d141      	bne.n	800298a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002906:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002912:	d131      	bne.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002914:	4b24      	ldr	r3, [pc, #144]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800291a:	4a23      	ldr	r2, [pc, #140]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002924:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800292c:	4a1e      	ldr	r2, [pc, #120]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002932:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002934:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2232      	movs	r2, #50	@ 0x32
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	0c9b      	lsrs	r3, r3, #18
 8002946:	3301      	adds	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294a:	e002      	b.n	8002952 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3b01      	subs	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295e:	d102      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f2      	bne.n	800294c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002972:	d112      	bne.n	800299a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e011      	b.n	800299c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800297e:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002988:	e007      	b.n	800299a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800298a:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002992:	4a05      	ldr	r2, [pc, #20]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002994:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002998:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40007000 	.word	0x40007000
 80029ac:	20000000 	.word	0x20000000
 80029b0:	431bde83 	.word	0x431bde83

080029b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f000 bc08 	b.w	80031d8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c8:	4b96      	ldr	r3, [pc, #600]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d2:	4b94      	ldr	r3, [pc, #592]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80e4 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4c>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	f040 808b 	bne.w	8002b0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	f040 8087 	bne.w	8002b0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a00:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_OscConfig+0x64>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e3df      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1a      	ldr	r2, [r3, #32]
 8002a1c:	4b81      	ldr	r3, [pc, #516]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_RCC_OscConfig+0x7e>
 8002a28:	4b7e      	ldr	r3, [pc, #504]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a30:	e005      	b.n	8002a3e <HAL_RCC_OscConfig+0x8a>
 8002a32:	4b7c      	ldr	r3, [pc, #496]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d223      	bcs.n	8002a8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fd94 	bl	8003574 <RCC_SetFlashLatencyFromMSIRange>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e3c0      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a56:	4b73      	ldr	r3, [pc, #460]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a72      	ldr	r2, [pc, #456]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b70      	ldr	r3, [pc, #448]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	496d      	ldr	r1, [pc, #436]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a74:	4b6b      	ldr	r3, [pc, #428]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	4968      	ldr	r1, [pc, #416]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	e025      	b.n	8002ad6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8a:	4b66      	ldr	r3, [pc, #408]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a65      	ldr	r2, [pc, #404]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4960      	ldr	r1, [pc, #384]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	495b      	ldr	r1, [pc, #364]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fd54 	bl	8003574 <RCC_SetFlashLatencyFromMSIRange>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e380      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ad6:	f000 fcc1 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4b51      	ldr	r3, [pc, #324]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	4950      	ldr	r1, [pc, #320]	@ (8002c28 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	5ccb      	ldrb	r3, [r1, r3]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	4a4e      	ldr	r2, [pc, #312]	@ (8002c2c <HAL_RCC_OscConfig+0x278>)
 8002af4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002af6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c30 <HAL_RCC_OscConfig+0x27c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f9b2 	bl	8000e64 <HAL_InitTick>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d052      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	e364      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d032      	beq.n	8002b7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b16:	4b43      	ldr	r3, [pc, #268]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a42      	ldr	r2, [pc, #264]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b22:	f7fe f9ef 	bl	8000f04 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b2a:	f7fe f9eb 	bl	8000f04 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e34d      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b48:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a35      	ldr	r2, [pc, #212]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4930      	ldr	r1, [pc, #192]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b66:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	492b      	ldr	r1, [pc, #172]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
 8002b7a:	e01a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b7c:	4b29      	ldr	r3, [pc, #164]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b88:	f7fe f9bc 	bl	8000f04 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b90:	f7fe f9b8 	bl	8000f04 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e31a      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1dc>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d073      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x21c>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d10e      	bne.n	8002be8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d063      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x2f0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d15f      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e2f7      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x24c>
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e025      	b.n	8002c4c <HAL_RCC_OscConfig+0x298>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c08:	d114      	bne.n	8002c34 <HAL_RCC_OscConfig+0x280>
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a05      	ldr	r2, [pc, #20]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b03      	ldr	r3, [pc, #12]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a02      	ldr	r2, [pc, #8]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e013      	b.n	8002c4c <HAL_RCC_OscConfig+0x298>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08004194 	.word	0x08004194
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004
 8002c34:	4ba0      	ldr	r3, [pc, #640]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a9f      	ldr	r2, [pc, #636]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b9d      	ldr	r3, [pc, #628]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a9c      	ldr	r2, [pc, #624]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe f956 	bl	8000f04 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe f952 	bl	8000f04 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	@ 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e2b4      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6e:	4b92      	ldr	r3, [pc, #584]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x2a8>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe f942 	bl	8000f04 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe f93e 	bl	8000f04 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	@ 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e2a0      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c96:	4b88      	ldr	r3, [pc, #544]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x2d0>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d060      	beq.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x310>
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d119      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d116      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc4:	4b7c      	ldr	r3, [pc, #496]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x328>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e27d      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cdc:	4b76      	ldr	r3, [pc, #472]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	4973      	ldr	r1, [pc, #460]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf0:	e040      	b.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d023      	beq.n	8002d42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7fe f8fd 	bl	8000f04 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fe f8f9 	bl	8000f04 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e25b      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d20:	4b65      	ldr	r3, [pc, #404]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b62      	ldr	r3, [pc, #392]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	495f      	ldr	r1, [pc, #380]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
 8002d40:	e018      	b.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d42:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe f8d9 	bl	8000f04 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe f8d5 	bl	8000f04 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e237      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d68:	4b53      	ldr	r3, [pc, #332]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d03c      	beq.n	8002dfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d88:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe f8b4 	bl	8000f04 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da0:	f7fe f8b0 	bl	8000f04 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e212      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db2:	4b41      	ldr	r3, [pc, #260]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ef      	beq.n	8002da0 <HAL_RCC_OscConfig+0x3ec>
 8002dc0:	e01b      	b.n	8002dfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc8:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe f897 	bl	8000f04 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fe f893 	bl	8000f04 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e1f5      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dec:	4b32      	ldr	r3, [pc, #200]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ef      	bne.n	8002dda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80a6 	beq.w	8002f54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	4a26      	ldr	r2, [pc, #152]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e24:	4b24      	ldr	r3, [pc, #144]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e34:	4b21      	ldr	r3, [pc, #132]	@ (8002ebc <HAL_RCC_OscConfig+0x508>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d118      	bne.n	8002e72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e40:	4b1e      	ldr	r3, [pc, #120]	@ (8002ebc <HAL_RCC_OscConfig+0x508>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1d      	ldr	r2, [pc, #116]	@ (8002ebc <HAL_RCC_OscConfig+0x508>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe f85a 	bl	8000f04 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fe f856 	bl	8000f04 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e1b8      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e66:	4b15      	ldr	r3, [pc, #84]	@ (8002ebc <HAL_RCC_OscConfig+0x508>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_OscConfig+0x4d8>
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e80:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e8a:	e029      	b.n	8002ee0 <HAL_RCC_OscConfig+0x52c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d115      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x50c>
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9a:	4a07      	ldr	r2, [pc, #28]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	4a03      	ldr	r2, [pc, #12]	@ (8002eb8 <HAL_RCC_OscConfig+0x504>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eb4:	e014      	b.n	8002ee0 <HAL_RCC_OscConfig+0x52c>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	4b9d      	ldr	r3, [pc, #628]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	4a9c      	ldr	r2, [pc, #624]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed0:	4b99      	ldr	r3, [pc, #612]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	4a98      	ldr	r2, [pc, #608]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d016      	beq.n	8002f16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe f80c 	bl	8000f04 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fe f808 	bl	8000f04 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e168      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	4b8c      	ldr	r3, [pc, #560]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ed      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x53c>
 8002f14:	e015      	b.n	8002f42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fd fff5 	bl	8000f04 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fd fff1 	bl	8000f04 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e151      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f34:	4b80      	ldr	r3, [pc, #512]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ed      	bne.n	8002f1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f42:	7ffb      	ldrb	r3, [r7, #31]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f48:	4b7b      	ldr	r3, [pc, #492]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	4a7a      	ldr	r2, [pc, #488]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d03c      	beq.n	8002fda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f68:	4b73      	ldr	r3, [pc, #460]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f6e:	4a72      	ldr	r2, [pc, #456]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fd ffc4 	bl	8000f04 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f80:	f7fd ffc0 	bl	8000f04 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e122      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f92:	4b69      	ldr	r3, [pc, #420]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ef      	beq.n	8002f80 <HAL_RCC_OscConfig+0x5cc>
 8002fa0:	e01b      	b.n	8002fda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fa2:	4b65      	ldr	r3, [pc, #404]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa8:	4a63      	ldr	r2, [pc, #396]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fd ffa7 	bl	8000f04 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fba:	f7fd ffa3 	bl	8000f04 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e105      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ef      	bne.n	8002fba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80f9 	beq.w	80031d6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	f040 80cf 	bne.w	800318c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fee:	4b52      	ldr	r3, [pc, #328]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0203 	and.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d12c      	bne.n	800305c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	3b01      	subs	r3, #1
 800300e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d123      	bne.n	800305c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d11b      	bne.n	800305c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d113      	bne.n	800305c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	3b01      	subs	r3, #1
 8003042:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d109      	bne.n	800305c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	3b01      	subs	r3, #1
 8003056:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d071      	beq.n	8003140 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d068      	beq.n	8003134 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003062:	4b35      	ldr	r3, [pc, #212]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800306e:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0ac      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800307e:	4b2e      	ldr	r3, [pc, #184]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2d      	ldr	r2, [pc, #180]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8003084:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003088:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800308a:	f7fd ff3b 	bl	8000f04 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003092:	f7fd ff37 	bl	8000f04 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e099      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a4:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b0:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <HAL_RCC_OscConfig+0x788>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030ca:	0212      	lsls	r2, r2, #8
 80030cc:	4311      	orrs	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030d2:	0852      	lsrs	r2, r2, #1
 80030d4:	3a01      	subs	r2, #1
 80030d6:	0552      	lsls	r2, r2, #21
 80030d8:	4311      	orrs	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030de:	0852      	lsrs	r2, r2, #1
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0652      	lsls	r2, r2, #25
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030ea:	06d2      	lsls	r2, r2, #27
 80030ec:	430a      	orrs	r2, r1
 80030ee:	4912      	ldr	r1, [pc, #72]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030f4:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003100:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a0c      	ldr	r2, [pc, #48]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800310a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800310c:	f7fd fefa 	bl	8000f04 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fd fef6 	bl	8000f04 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e058      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	4b04      	ldr	r3, [pc, #16]	@ (8003138 <HAL_RCC_OscConfig+0x784>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003132:	e050      	b.n	80031d6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e04f      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
 8003138:	40021000 	.word	0x40021000
 800313c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003140:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d144      	bne.n	80031d6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800314c:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a23      	ldr	r2, [pc, #140]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003156:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003158:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a20      	ldr	r2, [pc, #128]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003162:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003164:	f7fd fece 	bl	8000f04 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fd feca 	bl	8000f04 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e02c      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x7b8>
 800318a:	e024      	b.n	80031d6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d01f      	beq.n	80031d2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 8003198:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fd feb1 	bl	8000f04 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fd fead 	bl	8000f04 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e00f      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b8:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031c4:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	4905      	ldr	r1, [pc, #20]	@ (80031e0 <HAL_RCC_OscConfig+0x82c>)
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_OscConfig+0x830>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60cb      	str	r3, [r1, #12]
 80031d0:	e001      	b.n	80031d6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	feeefffc 	.word	0xfeeefffc

080031e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e11d      	b.n	800343c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b90      	ldr	r3, [pc, #576]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b8d      	ldr	r3, [pc, #564]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	498b      	ldr	r1, [pc, #556]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b89      	ldr	r3, [pc, #548]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e105      	b.n	800343c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	4b81      	ldr	r3, [pc, #516]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003248:	429a      	cmp	r2, r3
 800324a:	d908      	bls.n	800325e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b7e      	ldr	r3, [pc, #504]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	497b      	ldr	r1, [pc, #492]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d079      	beq.n	800335e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d11e      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	4b75      	ldr	r3, [pc, #468]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0dc      	b.n	800343c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003282:	f000 f9d1 	bl	8003628 <RCC_GetSysClockFreqFromPLLSource>
 8003286:	4603      	mov	r3, r0
 8003288:	4a70      	ldr	r2, [pc, #448]	@ (800344c <HAL_RCC_ClockConfig+0x264>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d946      	bls.n	800331c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800328e:	4b6e      	ldr	r3, [pc, #440]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d140      	bne.n	800331c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800329a:	4b6b      	ldr	r3, [pc, #428]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032a2:	4a69      	ldr	r2, [pc, #420]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e035      	b.n	800331c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b8:	4b63      	ldr	r3, [pc, #396]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b9      	b.n	800343c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0ad      	b.n	800343c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	4b59      	ldr	r3, [pc, #356]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0a5      	b.n	800343c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80032f0:	f000 f8b4 	bl	800345c <HAL_RCC_GetSysClockFreq>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4a55      	ldr	r2, [pc, #340]	@ (800344c <HAL_RCC_ClockConfig+0x264>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d90f      	bls.n	800331c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032fc:	4b52      	ldr	r3, [pc, #328]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003308:	4b4f      	ldr	r3, [pc, #316]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003310:	4a4d      	ldr	r2, [pc, #308]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003316:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003318:	2380      	movs	r3, #128	@ 0x80
 800331a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800331c:	4b4a      	ldr	r3, [pc, #296]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f023 0203 	bic.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4947      	ldr	r1, [pc, #284]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332e:	f7fd fde9 	bl	8000f04 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003334:	e00a      	b.n	800334c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003336:	f7fd fde5 	bl	8000f04 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e077      	b.n	800343c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334c:	4b3e      	ldr	r3, [pc, #248]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 020c 	and.w	r2, r3, #12
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	429a      	cmp	r2, r3
 800335c:	d1eb      	bne.n	8003336 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b80      	cmp	r3, #128	@ 0x80
 8003362:	d105      	bne.n	8003370 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003364:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a37      	ldr	r2, [pc, #220]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800336a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800336e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4b31      	ldr	r3, [pc, #196]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003388:	429a      	cmp	r2, r3
 800338a:	d208      	bcs.n	800339e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b2e      	ldr	r3, [pc, #184]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	492b      	ldr	r1, [pc, #172]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339e:	4b29      	ldr	r3, [pc, #164]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d210      	bcs.n	80033ce <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ac:	4b25      	ldr	r3, [pc, #148]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 020f 	bic.w	r2, r3, #15
 80033b4:	4923      	ldr	r1, [pc, #140]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033bc:	4b21      	ldr	r3, [pc, #132]	@ (8003444 <HAL_RCC_ClockConfig+0x25c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e036      	b.n	800343c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033da:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4918      	ldr	r1, [pc, #96]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f8:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4910      	ldr	r1, [pc, #64]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800340c:	f000 f826 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <HAL_RCC_ClockConfig+0x260>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	490c      	ldr	r1, [pc, #48]	@ (8003450 <HAL_RCC_ClockConfig+0x268>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
 8003428:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <HAL_RCC_ClockConfig+0x26c>)
 800342a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <HAL_RCC_ClockConfig+0x270>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd fd17 	bl	8000e64 <HAL_InitTick>
 8003436:	4603      	mov	r3, r0
 8003438:	73fb      	strb	r3, [r7, #15]

  return status;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	04c4b400 	.word	0x04c4b400
 8003450:	08004194 	.word	0x08004194
 8003454:	20000000 	.word	0x20000000
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	@ 0x24
 8003460:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346a:	4b3e      	ldr	r3, [pc, #248]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003474:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x34>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d121      	bne.n	80034ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d11e      	bne.n	80034ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003490:	4b34      	ldr	r3, [pc, #208]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800349c:	4b31      	ldr	r3, [pc, #196]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 800349e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	e005      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d102      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d4:	4b25      	ldr	r3, [pc, #148]	@ (800356c <HAL_RCC_GetSysClockFreq+0x110>)
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	e004      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e0:	4b23      	ldr	r3, [pc, #140]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x114>)
 80034e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d134      	bne.n	8003554 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0xa6>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d003      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0xac>
 8003500:	e005      	b.n	800350e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003502:	4b1a      	ldr	r3, [pc, #104]	@ (800356c <HAL_RCC_GetSysClockFreq+0x110>)
 8003504:	617b      	str	r3, [r7, #20]
      break;
 8003506:	e005      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x114>)
 800350a:	617b      	str	r3, [r7, #20]
      break;
 800350c:	e002      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	617b      	str	r3, [r7, #20]
      break;
 8003512:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003514:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3301      	adds	r3, #1
 8003520:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003522:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	fb03 f202 	mul.w	r2, r3, r2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800353a:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x108>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	0e5b      	lsrs	r3, r3, #25
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	3301      	adds	r3, #1
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003554:	69bb      	ldr	r3, [r7, #24]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3724      	adds	r7, #36	@ 0x24
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	080041a4 	.word	0x080041a4
 800356c:	00f42400 	.word	0x00f42400
 8003570:	007a1200 	.word	0x007a1200

08003574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003580:	4b27      	ldr	r3, [pc, #156]	@ (8003620 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff f94e 	bl	800282c <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
 8003592:	e014      	b.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	4b22      	ldr	r3, [pc, #136]	@ (8003620 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003598:	4a21      	ldr	r2, [pc, #132]	@ (8003620 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359e:	6593      	str	r3, [r2, #88]	@ 0x58
 80035a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003620 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035ac:	f7ff f93e 	bl	800282c <HAL_PWREx_GetVoltageRange>
 80035b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003620 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c4:	d10b      	bne.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	@ 0x80
 80035ca:	d913      	bls.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80035d0:	d902      	bls.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d2:	2302      	movs	r3, #2
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e00d      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e00a      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80035e2:	d902      	bls.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80035e4:	2302      	movs	r3, #2
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e004      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b70      	cmp	r3, #112	@ 0x70
 80035ee:	d101      	bne.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f0:	2301      	movs	r3, #1
 80035f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 020f 	bic.w	r2, r3, #15
 80035fc:	4909      	ldr	r1, [pc, #36]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003604:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	429a      	cmp	r2, r3
 8003610:	d001      	beq.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	40022000 	.word	0x40022000

08003628 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800362e:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d00b      	beq.n	8003656 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d825      	bhi.n	8003690 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d008      	beq.n	800365c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d11f      	bne.n	8003690 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003650:	4b25      	ldr	r3, [pc, #148]	@ (80036e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003652:	613b      	str	r3, [r7, #16]
    break;
 8003654:	e01f      	b.n	8003696 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003656:	4b25      	ldr	r3, [pc, #148]	@ (80036ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003658:	613b      	str	r3, [r7, #16]
    break;
 800365a:	e01c      	b.n	8003696 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800365c:	4b21      	ldr	r3, [pc, #132]	@ (80036e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003668:	4b1e      	ldr	r3, [pc, #120]	@ (80036e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e005      	b.n	8003684 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003678:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003684:	4a1a      	ldr	r2, [pc, #104]	@ (80036f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368c:	613b      	str	r3, [r7, #16]
    break;
 800368e:	e002      	b.n	8003696 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
    break;
 8003694:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003696:	4b13      	ldr	r3, [pc, #76]	@ (80036e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	3301      	adds	r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036a4:	4b0f      	ldr	r3, [pc, #60]	@ (80036e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	fb03 f202 	mul.w	r2, r3, r2
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036bc:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0e5b      	lsrs	r3, r3, #25
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	3301      	adds	r3, #1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80036d6:	683b      	ldr	r3, [r7, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40021000 	.word	0x40021000
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	007a1200 	.word	0x007a1200
 80036f0:	080041a4 	.word	0x080041a4

080036f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036fc:	2300      	movs	r3, #0
 80036fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003700:	2300      	movs	r3, #0
 8003702:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800370c:	2b00      	cmp	r3, #0
 800370e:	d040      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003714:	2b80      	cmp	r3, #128	@ 0x80
 8003716:	d02a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003718:	2b80      	cmp	r3, #128	@ 0x80
 800371a:	d825      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800371c:	2b60      	cmp	r3, #96	@ 0x60
 800371e:	d026      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003720:	2b60      	cmp	r3, #96	@ 0x60
 8003722:	d821      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003724:	2b40      	cmp	r3, #64	@ 0x40
 8003726:	d006      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d81d      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003730:	2b20      	cmp	r3, #32
 8003732:	d010      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003734:	e018      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003736:	4b89      	ldr	r3, [pc, #548]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	4a88      	ldr	r2, [pc, #544]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003740:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003742:	e015      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fb02 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003754:	e00c      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3320      	adds	r3, #32
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fbed 	bl	8003f3c <RCCEx_PLLSAI2_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003766:	e003      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	74fb      	strb	r3, [r7, #19]
      break;
 800376c:	e000      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800376e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003776:	4b79      	ldr	r3, [pc, #484]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003778:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800377c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003784:	4975      	ldr	r1, [pc, #468]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800378c:	e001      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d047      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a6:	d030      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80037a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ac:	d82a      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80037ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037b2:	d02a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80037b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037b8:	d824      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80037ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80037c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c4:	d81e      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ce:	d010      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037d0:	e018      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037d2:	4b62      	ldr	r3, [pc, #392]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4a61      	ldr	r2, [pc, #388]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037de:	e015      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fab4 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037f0:	e00c      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3320      	adds	r3, #32
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fb9f 	bl	8003f3c <RCCEx_PLLSAI2_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003802:	e003      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	74fb      	strb	r3, [r7, #19]
      break;
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800380a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003812:	4b52      	ldr	r3, [pc, #328]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003814:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003818:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	494e      	ldr	r1, [pc, #312]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003828:	e001      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 809f 	beq.w	800397a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383c:	2300      	movs	r3, #0
 800383e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003840:	4b46      	ldr	r3, [pc, #280]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	4b41      	ldr	r3, [pc, #260]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	4a40      	ldr	r2, [pc, #256]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	@ 0x58
 8003862:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386e:	2301      	movs	r3, #1
 8003870:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003872:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3a      	ldr	r2, [pc, #232]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800387c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800387e:	f7fd fb41 	bl	8000f04 <HAL_GetTick>
 8003882:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003884:	e009      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fd fb3d 	bl	8000f04 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d902      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	74fb      	strb	r3, [r7, #19]
        break;
 8003898:	e005      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800389a:	4b31      	ldr	r3, [pc, #196]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ef      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d15b      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ac:	4b2b      	ldr	r3, [pc, #172]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01f      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d019      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ca:	4b24      	ldr	r3, [pc, #144]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038d6:	4b21      	ldr	r3, [pc, #132]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038dc:	4a1f      	ldr	r2, [pc, #124]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e6:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038f6:	4a19      	ldr	r2, [pc, #100]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d016      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd fafc 	bl	8000f04 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390e:	e00b      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fd faf8 	bl	8000f04 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d902      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	74fb      	strb	r3, [r7, #19]
            break;
 8003926:	e006      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003928:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ec      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10c      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800393c:	4b07      	ldr	r3, [pc, #28]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003942:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394c:	4903      	ldr	r1, [pc, #12]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003954:	e008      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	74bb      	strb	r3, [r7, #18]
 800395a:	e005      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800395c:	40021000 	.word	0x40021000
 8003960:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003968:	7c7b      	ldrb	r3, [r7, #17]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396e:	4ba0      	ldr	r3, [pc, #640]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003972:	4a9f      	ldr	r2, [pc, #636]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003978:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003986:	4b9a      	ldr	r3, [pc, #616]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f023 0203 	bic.w	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	4996      	ldr	r1, [pc, #600]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039a8:	4b91      	ldr	r3, [pc, #580]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f023 020c 	bic.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	498e      	ldr	r1, [pc, #568]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039ca:	4b89      	ldr	r3, [pc, #548]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d8:	4985      	ldr	r1, [pc, #532]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039ec:	4b80      	ldr	r3, [pc, #512]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fa:	497d      	ldr	r1, [pc, #500]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a0e:	4b78      	ldr	r3, [pc, #480]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1c:	4974      	ldr	r1, [pc, #464]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a30:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3e:	496c      	ldr	r1, [pc, #432]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a52:	4b67      	ldr	r3, [pc, #412]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a60:	4963      	ldr	r1, [pc, #396]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a74:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a82:	495b      	ldr	r1, [pc, #364]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a96:	4b56      	ldr	r3, [pc, #344]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	4952      	ldr	r1, [pc, #328]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac6:	494a      	ldr	r1, [pc, #296]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ada:	4b45      	ldr	r3, [pc, #276]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	4941      	ldr	r1, [pc, #260]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003afc:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	4939      	ldr	r1, [pc, #228]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b1e:	4b34      	ldr	r3, [pc, #208]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2c:	4930      	ldr	r1, [pc, #192]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b48:	60d3      	str	r3, [r2, #12]
 8003b4a:	e011      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f8f9 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d04d      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b84:	d108      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003b86:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b8c:	4a18      	ldr	r2, [pc, #96]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b92:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003b96:	e012      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003b98:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b9e:	4a14      	ldr	r2, [pc, #80]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ba4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bb6:	490e      	ldr	r1, [pc, #56]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bd2:	60d3      	str	r3, [r2, #12]
 8003bd4:	e020      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bde:	d109      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be0:	4b03      	ldr	r3, [pc, #12]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a02      	ldr	r2, [pc, #8]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bea:	60d3      	str	r3, [r2, #12]
 8003bec:	e014      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3304      	adds	r3, #4
 8003c02:	2101      	movs	r1, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f8a5 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d028      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c24:	4b4a      	ldr	r3, [pc, #296]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c32:	4947      	ldr	r1, [pc, #284]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c42:	d106      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c44:	4b42      	ldr	r3, [pc, #264]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a41      	ldr	r2, [pc, #260]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c4e:	60d3      	str	r3, [r2, #12]
 8003c50:	e011      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c5a:	d10c      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	2101      	movs	r1, #1
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f876 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01e      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c82:	4b33      	ldr	r3, [pc, #204]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c92:	492f      	ldr	r1, [pc, #188]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2102      	movs	r1, #2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f851 	bl	8003d54 <RCCEx_PLLSAI1_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00b      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ccc:	4b20      	ldr	r3, [pc, #128]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cd2:	f023 0204 	bic.w	r2, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cdc:	491c      	ldr	r1, [pc, #112]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cf0:	4b17      	ldr	r3, [pc, #92]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cf6:	f023 0218 	bic.w	r2, r3, #24
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d00:	4913      	ldr	r1, [pc, #76]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d017      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d14:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d24:	490a      	ldr	r1, [pc, #40]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d36:	d105      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d38:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a04      	ldr	r2, [pc, #16]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d44:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000

08003d54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d62:	4b72      	ldr	r3, [pc, #456]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d103      	bne.n	8003d86 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
       ||
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d142      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e03f      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d018      	beq.n	8003dc6 <RCCEx_PLLSAI1_Config+0x72>
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d825      	bhi.n	8003de4 <RCCEx_PLLSAI1_Config+0x90>
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d002      	beq.n	8003da2 <RCCEx_PLLSAI1_Config+0x4e>
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d009      	beq.n	8003db4 <RCCEx_PLLSAI1_Config+0x60>
 8003da0:	e020      	b.n	8003de4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da2:	4b62      	ldr	r3, [pc, #392]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11d      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db2:	e01a      	b.n	8003dea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db4:	4b5d      	ldr	r3, [pc, #372]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e013      	b.n	8003dee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc6:	4b59      	ldr	r3, [pc, #356]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dd2:	4b56      	ldr	r3, [pc, #344]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003de2:	e006      	b.n	8003df2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e004      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f023 0203 	bic.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4949      	ldr	r1, [pc, #292]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 8086 	bne.w	8003f20 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e14:	4b45      	ldr	r3, [pc, #276]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a44      	ldr	r2, [pc, #272]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fd f870 	bl	8000f04 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e26:	e009      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e28:	f7fd f86c 	bl	8000f04 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d902      	bls.n	8003e3c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3a:	e005      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ef      	bne.n	8003e28 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d168      	bne.n	8003f20 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d113      	bne.n	8003e7c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e54:	4b35      	ldr	r3, [pc, #212]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	4b35      	ldr	r3, [pc, #212]	@ (8003f30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6892      	ldr	r2, [r2, #8]
 8003e60:	0211      	lsls	r1, r2, #8
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68d2      	ldr	r2, [r2, #12]
 8003e66:	06d2      	lsls	r2, r2, #27
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	3a01      	subs	r2, #1
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	430a      	orrs	r2, r1
 8003e74:	492d      	ldr	r1, [pc, #180]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	610b      	str	r3, [r1, #16]
 8003e7a:	e02d      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d115      	bne.n	8003eae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e82:	4b2a      	ldr	r3, [pc, #168]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	4b2b      	ldr	r3, [pc, #172]	@ (8003f34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6892      	ldr	r2, [r2, #8]
 8003e8e:	0211      	lsls	r1, r2, #8
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6912      	ldr	r2, [r2, #16]
 8003e94:	0852      	lsrs	r2, r2, #1
 8003e96:	3a01      	subs	r2, #1
 8003e98:	0552      	lsls	r2, r2, #21
 8003e9a:	4311      	orrs	r1, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6852      	ldr	r2, [r2, #4]
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	0112      	lsls	r2, r2, #4
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	4921      	ldr	r1, [pc, #132]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	610b      	str	r3, [r1, #16]
 8003eac:	e014      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eae:	4b1f      	ldr	r3, [pc, #124]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	4b21      	ldr	r3, [pc, #132]	@ (8003f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6892      	ldr	r2, [r2, #8]
 8003eba:	0211      	lsls	r1, r2, #8
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6952      	ldr	r2, [r2, #20]
 8003ec0:	0852      	lsrs	r2, r2, #1
 8003ec2:	3a01      	subs	r2, #1
 8003ec4:	0652      	lsls	r2, r2, #25
 8003ec6:	4311      	orrs	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6852      	ldr	r2, [r2, #4]
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	0112      	lsls	r2, r2, #4
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	4916      	ldr	r1, [pc, #88]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ed8:	4b14      	ldr	r3, [pc, #80]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ede:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fd f80e 	bl	8000f04 <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eea:	e009      	b.n	8003f00 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eec:	f7fd f80a 	bl	8000f04 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d902      	bls.n	8003f00 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	73fb      	strb	r3, [r7, #15]
          break;
 8003efe:	e005      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f00:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ef      	beq.n	8003eec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f12:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	07ff800f 	.word	0x07ff800f
 8003f34:	ff9f800f 	.word	0xff9f800f
 8003f38:	f9ff800f 	.word	0xf9ff800f

08003f3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4a:	4b72      	ldr	r3, [pc, #456]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f56:	4b6f      	ldr	r3, [pc, #444]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d103      	bne.n	8003f6e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d142      	bne.n	8003ff4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	e03f      	b.n	8003ff4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d018      	beq.n	8003fae <RCCEx_PLLSAI2_Config+0x72>
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d825      	bhi.n	8003fcc <RCCEx_PLLSAI2_Config+0x90>
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d002      	beq.n	8003f8a <RCCEx_PLLSAI2_Config+0x4e>
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d009      	beq.n	8003f9c <RCCEx_PLLSAI2_Config+0x60>
 8003f88:	e020      	b.n	8003fcc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f8a:	4b62      	ldr	r3, [pc, #392]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d11d      	bne.n	8003fd2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9a:	e01a      	b.n	8003fd2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f9c:	4b5d      	ldr	r3, [pc, #372]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d116      	bne.n	8003fd6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fac:	e013      	b.n	8003fd6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fae:	4b59      	ldr	r3, [pc, #356]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fba:	4b56      	ldr	r3, [pc, #344]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fca:	e006      	b.n	8003fda <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd0:	e004      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003fda:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d108      	bne.n	8003ff4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f023 0203 	bic.w	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4949      	ldr	r1, [pc, #292]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f040 8086 	bne.w	8004108 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ffc:	4b45      	ldr	r3, [pc, #276]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a44      	ldr	r2, [pc, #272]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004008:	f7fc ff7c 	bl	8000f04 <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800400e:	e009      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004010:	f7fc ff78 	bl	8000f04 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d902      	bls.n	8004024 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	73fb      	strb	r3, [r7, #15]
        break;
 8004022:	e005      	b.n	8004030 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004024:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ef      	bne.n	8004010 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d168      	bne.n	8004108 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d113      	bne.n	8004064 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800403c:	4b35      	ldr	r3, [pc, #212]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	4b35      	ldr	r3, [pc, #212]	@ (8004118 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6892      	ldr	r2, [r2, #8]
 8004048:	0211      	lsls	r1, r2, #8
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68d2      	ldr	r2, [r2, #12]
 800404e:	06d2      	lsls	r2, r2, #27
 8004050:	4311      	orrs	r1, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6852      	ldr	r2, [r2, #4]
 8004056:	3a01      	subs	r2, #1
 8004058:	0112      	lsls	r2, r2, #4
 800405a:	430a      	orrs	r2, r1
 800405c:	492d      	ldr	r1, [pc, #180]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 800405e:	4313      	orrs	r3, r2
 8004060:	614b      	str	r3, [r1, #20]
 8004062:	e02d      	b.n	80040c0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d115      	bne.n	8004096 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800406a:	4b2a      	ldr	r3, [pc, #168]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	4b2b      	ldr	r3, [pc, #172]	@ (800411c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004070:	4013      	ands	r3, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6892      	ldr	r2, [r2, #8]
 8004076:	0211      	lsls	r1, r2, #8
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6912      	ldr	r2, [r2, #16]
 800407c:	0852      	lsrs	r2, r2, #1
 800407e:	3a01      	subs	r2, #1
 8004080:	0552      	lsls	r2, r2, #21
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6852      	ldr	r2, [r2, #4]
 8004088:	3a01      	subs	r2, #1
 800408a:	0112      	lsls	r2, r2, #4
 800408c:	430a      	orrs	r2, r1
 800408e:	4921      	ldr	r1, [pc, #132]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004090:	4313      	orrs	r3, r2
 8004092:	614b      	str	r3, [r1, #20]
 8004094:	e014      	b.n	80040c0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004096:	4b1f      	ldr	r3, [pc, #124]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	4b21      	ldr	r3, [pc, #132]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1e4>)
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6892      	ldr	r2, [r2, #8]
 80040a2:	0211      	lsls	r1, r2, #8
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6952      	ldr	r2, [r2, #20]
 80040a8:	0852      	lsrs	r2, r2, #1
 80040aa:	3a01      	subs	r2, #1
 80040ac:	0652      	lsls	r2, r2, #25
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6852      	ldr	r2, [r2, #4]
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	430a      	orrs	r2, r1
 80040ba:	4916      	ldr	r1, [pc, #88]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040c0:	4b14      	ldr	r3, [pc, #80]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a13      	ldr	r2, [pc, #76]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fc ff1a 	bl	8000f04 <HAL_GetTick>
 80040d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040d2:	e009      	b.n	80040e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040d4:	f7fc ff16 	bl	8000f04 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d902      	bls.n	80040e8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	73fb      	strb	r3, [r7, #15]
          break;
 80040e6:	e005      	b.n	80040f4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ef      	beq.n	80040d4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040fa:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	4904      	ldr	r1, [pc, #16]	@ (8004114 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004104:	4313      	orrs	r3, r2
 8004106:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	07ff800f 	.word	0x07ff800f
 800411c:	ff9f800f 	.word	0xff9f800f
 8004120:	f9ff800f 	.word	0xf9ff800f

08004124 <memset>:
 8004124:	4402      	add	r2, r0
 8004126:	4603      	mov	r3, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	d100      	bne.n	800412e <memset+0xa>
 800412c:	4770      	bx	lr
 800412e:	f803 1b01 	strb.w	r1, [r3], #1
 8004132:	e7f9      	b.n	8004128 <memset+0x4>

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	@ (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	@ (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	@ (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	@ (8004178 <__libc_init_array+0x44>)
 8004148:	f000 f818 	bl	800417c <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	080041d4 	.word	0x080041d4
 8004170:	080041d4 	.word	0x080041d4
 8004174:	080041d4 	.word	0x080041d4
 8004178:	080041d8 	.word	0x080041d8

0800417c <_init>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	bf00      	nop
 8004180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004182:	bc08      	pop	{r3}
 8004184:	469e      	mov	lr, r3
 8004186:	4770      	bx	lr

08004188 <_fini>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr
