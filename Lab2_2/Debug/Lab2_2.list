
Lab2_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004180  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800433c  0800433c  0000533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800437c  0800437c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  0800437c  0800437c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800437c  0800437c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800437c  0800437c  0000537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004380  08004380  00005380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004384  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08004390  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08004390  000060a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a91e  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8b  00000000  00000000  0001095a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  000123e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e2  00000000  00000000  00012e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d19  00000000  00000000  00013652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae8a  00000000  00000000  0003d36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065ca  00000000  00000000  000481f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e7bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  0014e804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00151408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004324 	.word	0x08004324

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004324 	.word	0x08004324

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	@ 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//This is the interrupt function that is called when the button is pressed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
	LEDState = !LEDState;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <HAL_GPIO_EXTI_Callback+0x40>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_GPIO_EXTI_Callback+0x40>)
 8000a5e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LEDState);
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <HAL_GPIO_EXTI_Callback+0x40>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a6a:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0x44>)
 8000a6c:	f001 ff82 	bl	8002974 <HAL_GPIO_WritePin>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000090 	.word	0x20000090
 8000a7c:	48000400 	.word	0x48000400

08000a80 <MX_ADC1_Init>:
/**
  * @brief  The application entry point.
  * @retval int
  */
static void MX_ADC1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

/* USER CODE END ADC1_Init 1 */

/** Common config
*/
	hadc1.Instance = ADC1;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000a86:	4a1d      	ldr	r2, [pc, #116]	@ (8000afc <MX_ADC1_Init+0x7c>)
 8000a88:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000aae:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_ADC1_Init+0x78>)
 8000ae6:	f000 fced 	bl	80014c4 <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x74>
	{
		Error_Handler();
 8000af0:	f000 f992 	bl	8000e18 <Error_Handler>

/* USER CODE BEGIN ADC1_Init 2 */

/* USER CODE END ADC1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000028 	.word	0x20000028
 8000afc:	50040000 	.word	0x50040000

08000b00 <main>:
int main(void)
{
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b090      	sub	sp, #64	@ 0x40
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f000 fa68 	bl	8000fda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f8db 	bl	8000cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f000 f92b 	bl	8000d68 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b12:	f7ff ffb5 	bl	8000a80 <MX_ADC1_Init>
  while(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK);
 8000b16:	bf00      	nop
 8000b18:	217f      	movs	r1, #127	@ 0x7f
 8000b1a:	485d      	ldr	r0, [pc, #372]	@ (8000c90 <main+0x190>)
 8000b1c:	f001 fc26 	bl	800236c <HAL_ADCEx_Calibration_Start>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f8      	bne.n	8000b18 <main+0x18>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b26:	2306      	movs	r3, #6
 8000b28:	607b      	str	r3, [r7, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b32:	237f      	movs	r3, #127	@ 0x7f
 8000b34:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (LEDState){
 8000b36:	4b57      	ldr	r3, [pc, #348]	@ (8000c94 <main+0x194>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d06d      	beq.n	8000c1a <main+0x11a>
		  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b3e:	4b56      	ldr	r3, [pc, #344]	@ (8000c98 <main+0x198>)
 8000b40:	603b      	str	r3, [r7, #0]
		  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]

		  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4851      	ldr	r0, [pc, #324]	@ (8000c90 <main+0x190>)
 8000b4c:	f000 ff00 	bl	8001950 <HAL_ADC_ConfigChannel>
		  HAL_ADC_Start(&hadc1);
 8000b50:	484f      	ldr	r0, [pc, #316]	@ (8000c90 <main+0x190>)
 8000b52:	f000 fdfd 	bl	8001750 <HAL_ADC_Start>
		  while(HAL_ADC_PollForConversion(&hadc1, 1000000) != HAL_OK);
 8000b56:	bf00      	nop
 8000b58:	4950      	ldr	r1, [pc, #320]	@ (8000c9c <main+0x19c>)
 8000b5a:	484d      	ldr	r0, [pc, #308]	@ (8000c90 <main+0x190>)
 8000b5c:	f000 fe5b 	bl	8001816 <HAL_ADC_PollForConversion>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1f8      	bne.n	8000b58 <main+0x58>
		  uint16_t TS_Data = HAL_ADC_GetValue(&hadc1);
 8000b66:	484a      	ldr	r0, [pc, #296]	@ (8000c90 <main+0x190>)
 8000b68:	f000 fee4 	bl	8001934 <HAL_ADC_GetValue>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	867b      	strh	r3, [r7, #50]	@ 0x32
		  float calibratedTS_Data = (float) TS_Data;
 8000b70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b7a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		  calibratedTS_Data = calibratedTS_Data*(VREF/3.0); //scale ADC data according to reference voltage
 8000b7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000b80:	f7ff fca0 	bl	80004c4 <__aeabi_f2d>
 8000b84:	4604      	mov	r4, r0
 8000b86:	460d      	mov	r5, r1
 8000b88:	4b45      	ldr	r3, [pc, #276]	@ (8000ca0 <main+0x1a0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fc99 	bl	80004c4 <__aeabi_f2d>
 8000b92:	f04f 0200 	mov.w	r2, #0
 8000b96:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <main+0x1a4>)
 8000b98:	f7ff fe16 	bl	80007c8 <__aeabi_ddiv>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	f7ff fce6 	bl	8000574 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4610      	mov	r0, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff fef2 	bl	8000998 <__aeabi_d2f>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  //get calibration data from memory
		  int32_t TS_CAL2 = (int32_t) *((uint16_t *) 0x1FFF75CA);
 8000bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca8 <main+0x1a8>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
		  int32_t TS_CAL1 = (int32_t) *((uint16_t *) 0x1FFF75A8);
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000cac <main+0x1ac>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
		  //temperatures at which calibration data was collected according to Datasheet
		  int TS_CAL2_TEMP = 130;
 8000bc4:	2382      	movs	r3, #130	@ 0x82
 8000bc6:	623b      	str	r3, [r7, #32]
		  int TS_CAL1_TEMP = 30;
 8000bc8:	231e      	movs	r3, #30
 8000bca:	61fb      	str	r3, [r7, #28]

		  //calculate avgSlope
		  float avgSlope = (TS_CAL2 - TS_CAL1)/(TS_CAL2_TEMP - TS_CAL1_TEMP);
 8000bcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	1ad2      	subs	r2, r2, r3
 8000bd2:	6a39      	ldr	r1, [r7, #32]
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	1acb      	subs	r3, r1, r3
 8000bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000be4:	edc7 7a06 	vstr	s15, [r7, #24]
		  //calculate temperature in Celsius
		  temp = (calibratedTS_Data - TS_CAL1)/avgSlope + 30.0f;
 8000be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000bf6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000bfa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c02:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c0a:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <main+0x1b0>)
 8000c0c:	edc3 7a00 	vstr	s15, [r3]
		  output = temp;
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <main+0x1b0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a27      	ldr	r2, [pc, #156]	@ (8000cb4 <main+0x1b4>)
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e78d      	b.n	8000b36 <main+0x36>

	  }else{
		  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c1a:	4b27      	ldr	r3, [pc, #156]	@ (8000cb8 <main+0x1b8>)
 8000c1c:	603b      	str	r3, [r7, #0]

		  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]

		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) Error_Handler();
 8000c22:	463b      	mov	r3, r7
 8000c24:	4619      	mov	r1, r3
 8000c26:	481a      	ldr	r0, [pc, #104]	@ (8000c90 <main+0x190>)
 8000c28:	f000 fe92 	bl	8001950 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <main+0x136>
 8000c32:	f000 f8f1 	bl	8000e18 <Error_Handler>

		  HAL_ADC_Start(&hadc1);
 8000c36:	4816      	ldr	r0, [pc, #88]	@ (8000c90 <main+0x190>)
 8000c38:	f000 fd8a 	bl	8001750 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 8000c3c:	4917      	ldr	r1, [pc, #92]	@ (8000c9c <main+0x19c>)
 8000c3e:	4814      	ldr	r0, [pc, #80]	@ (8000c90 <main+0x190>)
 8000c40:	f000 fde9 	bl	8001816 <HAL_ADC_PollForConversion>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f47f af75 	bne.w	8000b36 <main+0x36>
			  int32_t ADCValue = (int32_t) HAL_ADC_GetValue(&hadc1);
 8000c4c:	4810      	ldr	r0, [pc, #64]	@ (8000c90 <main+0x190>)
 8000c4e:	f000 fe71 	bl	8001934 <HAL_ADC_GetValue>
 8000c52:	4603      	mov	r3, r0
 8000c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
			  int32_t VREFINT_CAL =(int32_t) *((uint16_t *) 0x1FFF75AA); //the calibration value
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <main+0x1bc>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
			  float VREF_Charac = 3.0; //voltage characterized at VREFINT during manufacturing, specified in datasheet
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <main+0x1c0>)
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
			  VREF = VREF_Charac*((float) VREFINT_CAL/ADCValue); //calculate VREF
 8000c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c6c:	ee07 3a90 	vmov	s15, r3
 8000c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c78:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <main+0x1a0>)
 8000c82:	edc3 7a00 	vstr	s15, [r3]
			  output = VREF;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <main+0x1a0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <main+0x1b4>)
 8000c8c:	6013      	str	r3, [r2, #0]
	  if (LEDState){
 8000c8e:	e752      	b.n	8000b36 <main+0x36>
 8000c90:	20000028 	.word	0x20000028
 8000c94:	20000090 	.word	0x20000090
 8000c98:	c7520000 	.word	0xc7520000
 8000c9c:	000f4240 	.word	0x000f4240
 8000ca0:	20000098 	.word	0x20000098
 8000ca4:	40080000 	.word	0x40080000
 8000ca8:	1fff75ca 	.word	0x1fff75ca
 8000cac:	1fff75a8 	.word	0x1fff75a8
 8000cb0:	2000009c 	.word	0x2000009c
 8000cb4:	20000094 	.word	0x20000094
 8000cb8:	80000001 	.word	0x80000001
 8000cbc:	1fff75aa 	.word	0x1fff75aa
 8000cc0:	40400000 	.word	0x40400000

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b096      	sub	sp, #88	@ 0x58
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	2244      	movs	r2, #68	@ 0x44
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fafa 	bl	80042cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f001 fe94 	bl	8002a14 <HAL_PWREx_ControlVoltageScaling>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000cf2:	f000 f891 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d02:	2360      	movs	r3, #96	@ 0x60
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d12:	233c      	movs	r3, #60	@ 0x3c
 8000d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 ff18 	bl	8002b5c <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d32:	f000 f871 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fb1e 	bl	8003390 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d5a:	f000 f85d 	bl	8000e18 <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3758      	adds	r7, #88	@ 0x58
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <MX_GPIO_Init+0xa4>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4a22      	ldr	r2, [pc, #136]	@ (8000e0c <MX_GPIO_Init+0xa4>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <MX_GPIO_Init+0xa4>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <MX_GPIO_Init+0xa4>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e0c <MX_GPIO_Init+0xa4>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_GPIO_Init+0xa4>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db4:	4816      	ldr	r0, [pc, #88]	@ (8000e10 <MX_GPIO_Init+0xa8>)
 8000db6:	f001 fddd 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000dba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4810      	ldr	r0, [pc, #64]	@ (8000e14 <MX_GPIO_Init+0xac>)
 8000dd2:	f001 fc3d 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	4808      	ldr	r0, [pc, #32]	@ (8000e10 <MX_GPIO_Init+0xa8>)
 8000df0:	f001 fc2e 	bl	8002650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2028      	movs	r0, #40	@ 0x28
 8000dfa:	f001 fbf2 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dfe:	2028      	movs	r0, #40	@ 0x28
 8000e00:	f001 fc0b 	bl	800261a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e04:	bf00      	nop
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400
 8000e14:	48000800 	.word	0x48000800

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <Error_Handler+0x8>

08000e24 <HAL_MspInit>:
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e46:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_MspInit+0x44>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_ADC_MspInit>:
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0a8      	sub	sp, #160	@ 0xa0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2294      	movs	r2, #148	@ 0x94
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fa25 	bl	80042cc <memset>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a19      	ldr	r2, [pc, #100]	@ (8000eec <HAL_ADC_MspInit+0x80>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d12b      	bne.n	8000ee4 <HAL_ADC_MspInit+0x78>
 8000e8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	2318      	movs	r3, #24
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	2302      	movs	r3, #2
 8000eac:	623b      	str	r3, [r7, #32]
 8000eae:	2302      	movs	r3, #2
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fced 	bl	800389c <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_ADC_MspInit+0x60>
 8000ec8:	f7ff ffa6 	bl	8000e18 <Error_Handler>
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <HAL_ADC_MspInit+0x84>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	4a07      	ldr	r2, [pc, #28]	@ (8000ef0 <HAL_ADC_MspInit+0x84>)
 8000ed2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_ADC_MspInit+0x84>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	bf00      	nop
 8000ee6:	37a0      	adds	r7, #160	@ 0xa0
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	50040000 	.word	0x50040000
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <NMI_Handler>:
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <SVC_Handler>:
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <PendSV_Handler>:
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	f000 f89b 	bl	8001084 <HAL_IncTick>
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <EXTI15_10_IRQHandler>:
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f5a:	f001 fd23 	bl	80029a4 <HAL_GPIO_EXTI_IRQHandler>
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <SystemInit>:
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc0 <LoopForever+0x2>
 8000f8c:	f7ff ffea 	bl	8000f64 <SystemInit>
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <LoopForever+0x6>)
 8000f92:	490d      	ldr	r1, [pc, #52]	@ (8000fc8 <LoopForever+0xa>)
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <LoopForever+0xe>)
 8000f96:	2300      	movs	r3, #0
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:
 8000f9a:	58d4      	ldr	r4, [r2, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:
 8000fa0:	18c4      	adds	r4, r0, r3
 8000fa2:	428c      	cmp	r4, r1
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <LoopForever+0x12>)
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd4 <LoopForever+0x16>)
 8000faa:	2300      	movs	r3, #0
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:
 8000fb2:	42a2      	cmp	r2, r4
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>
 8000fb6:	f003 f991 	bl	80042dc <__libc_init_array>
 8000fba:	f7ff fda1 	bl	8000b00 <main>

08000fbe <LoopForever>:
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
 8000fc0:	200a0000 	.word	0x200a0000
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	2000000c 	.word	0x2000000c
 8000fcc:	08004384 	.word	0x08004384
 8000fd0:	2000000c 	.word	0x2000000c
 8000fd4:	200000a4 	.word	0x200000a4

08000fd8 <ADC1_IRQHandler>:
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_IRQHandler>

08000fda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f001 faf1 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f80e 	bl	800100c <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	e001      	b.n	8001000 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ffc:	f7ff ff12 	bl	8000e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001000:	79fb      	ldrb	r3, [r7, #7]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <HAL_InitTick+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d023      	beq.n	8001068 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_InitTick+0x70>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <HAL_InitTick+0x6c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fafd 	bl	8002636 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d809      	bhi.n	800105c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f001 fac7 	bl	80025e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001054:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_InitTick+0x74>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e007      	b.n	800106c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e004      	b.n	800106c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e001      	b.n	800106c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	20000000 	.word	0x20000000
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	200000a0 	.word	0x200000a0

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200000a0 	.word	0x200000a0

080010c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3360      	adds	r3, #96	@ 0x60
 800113e:	461a      	mov	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <LL_ADC_SetOffset+0x44>)
 800114e:	4013      	ands	r3, r2
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	4313      	orrs	r3, r2
 800115c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	03fff000 	.word	0x03fff000

08001174 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3360      	adds	r3, #96	@ 0x60
 8001182:	461a      	mov	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3360      	adds	r3, #96	@ 0x60
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	615a      	str	r2, [r3, #20]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001222:	b480      	push	{r7}
 8001224:	b087      	sub	sp, #28
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3330      	adds	r3, #48	@ 0x30
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	211f      	movs	r1, #31
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	0e9b      	lsrs	r3, r3, #26
 800125a:	f003 011f 	and.w	r1, r3, #31
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800127a:	b480      	push	{r7}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3314      	adds	r3, #20
 800128a:	461a      	mov	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	0e5b      	lsrs	r3, r3, #25
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	0d1b      	lsrs	r3, r3, #20
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	2107      	movs	r1, #7
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	0d1b      	lsrs	r3, r3, #20
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0318 	and.w	r3, r3, #24
 80012f2:	4908      	ldr	r1, [pc, #32]	@ (8001314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012f4:	40d9      	lsrs	r1, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	400b      	ands	r3, r1
 80012fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fe:	431a      	orrs	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	0007ffff 	.word	0x0007ffff

08001318 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001328:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6093      	str	r3, [r2, #8]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800134c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001350:	d101      	bne.n	8001356 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001374:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001378:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80013a0:	d101      	bne.n	80013a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <LL_ADC_IsEnabled+0x18>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <LL_ADC_IsEnabled+0x1a>
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b02      	cmp	r3, #2
 800143c:	d101      	bne.n	8001442 <LL_ADC_IsDisableOngoing+0x18>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <LL_ADC_IsDisableOngoing+0x1a>
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001464:	f043 0204 	orr.w	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b04      	cmp	r3, #4
 800148a:	d101      	bne.n	8001490 <LL_ADC_REG_IsConversionOngoing+0x18>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e129      	b.n	8001732 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fcbd 	bl	8000e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff19 	bl	800133c <LL_ADC_IsDeepPowerDownEnabled>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff feff 	bl	8001318 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff34 	bl	800138c <LL_ADC_IsInternalRegulatorEnabled>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d115      	bne.n	8001556 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff18 	bl	8001364 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001534:	4b81      	ldr	r3, [pc, #516]	@ (800173c <HAL_ADC_Init+0x278>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	4a81      	ldr	r2, [pc, #516]	@ (8001740 <HAL_ADC_Init+0x27c>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	099b      	lsrs	r3, r3, #6
 8001542:	3301      	adds	r3, #1
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001548:	e002      	b.n	8001550 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3b01      	subs	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f9      	bne.n	800154a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff16 	bl	800138c <LL_ADC_IsInternalRegulatorEnabled>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10d      	bne.n	8001582 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	f043 0210 	orr.w	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff76 	bl	8001478 <LL_ADC_REG_IsConversionOngoing>
 800158c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 80c2 	bne.w	8001720 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80be 	bne.w	8001720 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015ac:	f043 0202 	orr.w	r2, r3, #2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff23 	bl	8001404 <LL_ADC_IsEnabled>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015c4:	485f      	ldr	r0, [pc, #380]	@ (8001744 <HAL_ADC_Init+0x280>)
 80015c6:	f7ff ff1d 	bl	8001404 <LL_ADC_IsEnabled>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4619      	mov	r1, r3
 80015d6:	485c      	ldr	r0, [pc, #368]	@ (8001748 <HAL_ADC_Init+0x284>)
 80015d8:	f7ff fd74 	bl	80010c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e5b      	ldrb	r3, [r3, #25]
 80015e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80015ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80015f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d106      	bne.n	8001618 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	3b01      	subs	r3, #1
 8001610:	045b      	lsls	r3, r3, #17
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d009      	beq.n	8001634 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001624:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	4b44      	ldr	r3, [pc, #272]	@ (800174c <HAL_ADC_Init+0x288>)
 800163c:	4013      	ands	r3, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	69b9      	ldr	r1, [r7, #24]
 8001644:	430b      	orrs	r3, r1
 8001646:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff26 	bl	800149e <LL_ADC_INJ_IsConversionOngoing>
 8001652:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d140      	bne.n	80016dc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d13d      	bne.n	80016dc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e1b      	ldrb	r3, [r3, #24]
 8001668:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800166a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001672:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001682:	f023 0306 	bic.w	r3, r3, #6
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	430b      	orrs	r3, r1
 800168e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001696:	2b01      	cmp	r3, #1
 8001698:	d118      	bne.n	80016cc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016b0:	4311      	orrs	r1, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80016b6:	4311      	orrs	r1, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016bc:	430a      	orrs	r2, r1
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	e007      	b.n	80016dc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d10c      	bne.n	80016fe <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f023 010f 	bic.w	r1, r3, #15
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	1e5a      	subs	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80016fc:	e007      	b.n	800170e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 020f 	bic.w	r2, r2, #15
 800170c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	659a      	str	r2, [r3, #88]	@ 0x58
 800171e:	e007      	b.n	8001730 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	f043 0210 	orr.w	r2, r3, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001730:	7ffb      	ldrb	r3, [r7, #31]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000
 8001740:	053e2d63 	.word	0x053e2d63
 8001744:	50040000 	.word	0x50040000
 8001748:	50040300 	.word	0x50040300
 800174c:	fff0c007 	.word	0xfff0c007

08001750 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe8b 	bl	8001478 <LL_ADC_REG_IsConversionOngoing>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d14f      	bne.n	8001808 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_ADC_Start+0x26>
 8001772:	2302      	movs	r3, #2
 8001774:	e04b      	b.n	800180e <HAL_ADC_Start+0xbe>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fce2 	bl	8002148 <ADC_Enable>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d137      	bne.n	80017fe <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001792:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017ae:	d106      	bne.n	80017be <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b4:	f023 0206 	bic.w	r2, r3, #6
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	221c      	movs	r2, #28
 80017ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fe2a 	bl	8001450 <LL_ADC_REG_StartConversion>
 80017fc:	e006      	b.n	800180c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001806:	e001      	b.n	800180c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001808:	2302      	movs	r3, #2
 800180a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d102      	bne.n	800182e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001828:	2308      	movs	r3, #8
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e010      	b.n	8001850 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	f043 0220 	orr.w	r2, r3, #32
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e06f      	b.n	800192c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800184c:	2304      	movs	r3, #4
 800184e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001850:	f7ff fc2c 	bl	80010ac <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001856:	e021      	b.n	800189c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185e:	d01d      	beq.n	800189c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001860:	f7ff fc24 	bl	80010ac <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d302      	bcc.n	8001876 <HAL_ADC_PollForConversion+0x60>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d112      	bne.n	800189c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	f043 0204 	orr.w	r2, r3, #4
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e047      	b.n	800192c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0d6      	beq.n	8001858 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fc9e 	bl	80011fc <LL_ADC_REG_IsTriggerSourceSWStart>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01c      	beq.n	8001900 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e5b      	ldrb	r3, [r3, #25]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d118      	bne.n	8001900 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d111      	bne.n	8001900 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2b08      	cmp	r3, #8
 800190c:	d104      	bne.n	8001918 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2208      	movs	r2, #8
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e008      	b.n	800192a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0b6      	sub	sp, #216	@ 0xd8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x22>
 800196e:	2302      	movs	r3, #2
 8001970:	e3d5      	b.n	800211e <HAL_ADC_ConfigChannel+0x7ce>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fd7a 	bl	8001478 <LL_ADC_REG_IsConversionOngoing>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 83ba 	bne.w	8002100 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d824      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	3b02      	subs	r3, #2
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d81b      	bhi.n	80019de <HAL_ADC_ConfigChannel+0x8e>
 80019a6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <HAL_ADC_ConfigChannel+0x5c>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	080019bd 	.word	0x080019bd
 80019b0:	080019c5 	.word	0x080019c5
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019d5 	.word	0x080019d5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80019bc:	230c      	movs	r3, #12
 80019be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019c2:	e010      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80019c4:	2312      	movs	r3, #18
 80019c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019ca:	e00c      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80019cc:	2318      	movs	r3, #24
 80019ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019d2:	e008      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80019d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019dc:	e003      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80019de:	2306      	movs	r3, #6
 80019e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80019e4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80019f4:	f7ff fc15 	bl	8001222 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fd3b 	bl	8001478 <LL_ADC_REG_IsConversionOngoing>
 8001a02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd47 	bl	800149e <LL_ADC_INJ_IsConversionOngoing>
 8001a10:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 81bf 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 81ba 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a30:	d10f      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff fc1c 	bl	800127a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fbc3 	bl	80011d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001a50:	e00e      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f7ff fc0b 	bl	800127a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fbb3 	bl	80011d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	08db      	lsrs	r3, r3, #3
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d00a      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6919      	ldr	r1, [r3, #16]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001aa2:	f7ff fb43 	bl	800112c <LL_ADC_SetOffset>
 8001aa6:	e179      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fb60 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10a      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x184>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fb55 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	f003 021f 	and.w	r2, r3, #31
 8001ad2:	e01e      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x1c2>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fb4a 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001af6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001afa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001b02:	2320      	movs	r3, #32
 8001b04:	e004      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001b06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x1da>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	e018      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x20c>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001b3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001b46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	e004      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d106      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fb19 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2101      	movs	r1, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fafd 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10a      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x24a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff faf2 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	0e9b      	lsrs	r3, r3, #26
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	e01e      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x288>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fae7 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001bc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e004      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001bcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x2a0>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	e018      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x2d2>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e004      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d106      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fab6 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fa9a 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x310>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2102      	movs	r1, #2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa8f 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	f003 021f 	and.w	r2, r3, #31
 8001c5e:	e01e      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x34e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2102      	movs	r1, #2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fa84 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e004      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x366>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	e014      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x390>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	e004      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001cd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2102      	movs	r1, #2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fa57 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fa3b 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x3ce>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fa30 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	e017      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x3fe>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2103      	movs	r1, #3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fa25 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d38:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001d40:	2320      	movs	r3, #32
 8001d42:	e003      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d105      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x416>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0e9b      	lsrs	r3, r3, #26
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	e011      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x43a>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001d74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d76:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e003      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001d82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d106      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	2103      	movs	r1, #3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fa02 	bl	80011a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fb2f 	bl	8001404 <LL_ADC_IsEnabled>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f040 813f 	bne.w	800202c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f7ff fa88 	bl	80012d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a8e      	ldr	r2, [pc, #568]	@ (8002000 <HAL_ADC_ConfigChannel+0x6b0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f040 8130 	bne.w	800202c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x4a4>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e019      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x4d8>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	e003      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	bf94      	ite	ls
 8001e22:	2301      	movls	r3, #1
 8001e24:	2300      	movhi	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d079      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x4f8>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	3301      	adds	r3, #1
 8001e40:	069b      	lsls	r3, r3, #26
 8001e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e46:	e015      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x524>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e003      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x544>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	3301      	adds	r3, #1
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	e017      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x574>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	ea42 0103 	orr.w	r1, r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x59a>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	3301      	adds	r3, #1
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	051b      	lsls	r3, r3, #20
 8001ee8:	e018      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x5cc>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e003      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	e080      	b.n	8002022 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x5ec>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	3301      	adds	r3, #1
 8001f34:	069b      	lsls	r3, r3, #26
 8001f36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f3a:	e015      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x618>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e003      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	069b      	lsls	r3, r3, #26
 8001f64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x638>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	e017      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x668>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	61bb      	str	r3, [r7, #24]
  return result;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	ea42 0103 	orr.w	r1, r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x694>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b1e      	subs	r3, #30
 8001fdc:	051b      	lsls	r3, r3, #20
 8001fde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	e01d      	b.n	8002020 <HAL_ADC_ConfigChannel+0x6d0>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	60fb      	str	r3, [r7, #12]
  return result;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d103      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e005      	b.n	800200c <HAL_ADC_ConfigChannel+0x6bc>
 8002000:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f003 021f 	and.w	r2, r3, #31
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	3b1e      	subs	r3, #30
 800201a:	051b      	lsls	r3, r3, #20
 800201c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002020:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002026:	4619      	mov	r1, r3
 8002028:	f7ff f927 	bl	800127a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <HAL_ADC_ConfigChannel+0x7d8>)
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d06c      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002038:	483c      	ldr	r0, [pc, #240]	@ (800212c <HAL_ADC_ConfigChannel+0x7dc>)
 800203a:	f7ff f869 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 800203e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a3a      	ldr	r2, [pc, #232]	@ (8002130 <HAL_ADC_ConfigChannel+0x7e0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d127      	bne.n	800209c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800204c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d121      	bne.n	800209c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a35      	ldr	r2, [pc, #212]	@ (8002134 <HAL_ADC_ConfigChannel+0x7e4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d157      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002066:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800206a:	4619      	mov	r1, r3
 800206c:	482f      	ldr	r0, [pc, #188]	@ (800212c <HAL_ADC_ConfigChannel+0x7dc>)
 800206e:	f7ff f83c 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002072:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_ADC_ConfigChannel+0x7e8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	4a30      	ldr	r2, [pc, #192]	@ (800213c <HAL_ADC_ConfigChannel+0x7ec>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800208c:	e002      	b.n	8002094 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3b01      	subs	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209a:	e03a      	b.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <HAL_ADC_ConfigChannel+0x7f0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d113      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002134 <HAL_ADC_ConfigChannel+0x7e4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d12a      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c4:	4619      	mov	r1, r3
 80020c6:	4819      	ldr	r0, [pc, #100]	@ (800212c <HAL_ADC_ConfigChannel+0x7dc>)
 80020c8:	f7ff f80f 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020cc:	e021      	b.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <HAL_ADC_ConfigChannel+0x7f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d11c      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d116      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <HAL_ADC_ConfigChannel+0x7e4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d111      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <HAL_ADC_ConfigChannel+0x7dc>)
 80020fa:	f7fe fff6 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
 80020fe:	e008      	b.n	8002112 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800211a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800211e:	4618      	mov	r0, r3
 8002120:	37d8      	adds	r7, #216	@ 0xd8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	80080000 	.word	0x80080000
 800212c:	50040300 	.word	0x50040300
 8002130:	c7520000 	.word	0xc7520000
 8002134:	50040000 	.word	0x50040000
 8002138:	20000000 	.word	0x20000000
 800213c:	053e2d63 	.word	0x053e2d63
 8002140:	cb840000 	.word	0xcb840000
 8002144:	80000001 	.word	0x80000001

08002148 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff f953 	bl	8001404 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d169      	bne.n	8002238 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <ADC_Enable+0xfc>)
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e055      	b.n	800223a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f90e 	bl	80013b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002198:	482b      	ldr	r0, [pc, #172]	@ (8002248 <ADC_Enable+0x100>)
 800219a:	f7fe ffb9 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 800219e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a8:	4b28      	ldr	r3, [pc, #160]	@ (800224c <ADC_Enable+0x104>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	4a28      	ldr	r2, [pc, #160]	@ (8002250 <ADC_Enable+0x108>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021c2:	e002      	b.n	80021ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f9      	bne.n	80021c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021d0:	f7fe ff6c 	bl	80010ac <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d6:	e028      	b.n	800222a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff f911 	bl	8001404 <LL_ADC_IsEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f8e1 	bl	80013b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021f2:	f7fe ff5b 	bl	80010ac <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d914      	bls.n	800222a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d00d      	beq.n	800222a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	f043 0210 	orr.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e007      	b.n	800223a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d1cf      	bne.n	80021d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	8000003f 	.word	0x8000003f
 8002248:	50040300 	.word	0x50040300
 800224c:	20000000 	.word	0x20000000
 8002250:	053e2d63 	.word	0x053e2d63

08002254 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f8e2 	bl	800142a <LL_ADC_IsDisableOngoing>
 8002266:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f8c9 	bl	8001404 <LL_ADC_IsEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d047      	beq.n	8002308 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d144      	bne.n	8002308 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030d 	and.w	r3, r3, #13
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10c      	bne.n	80022a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f8a3 	bl	80013dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2203      	movs	r2, #3
 800229c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800229e:	f7fe ff05 	bl	80010ac <HAL_GetTick>
 80022a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022a4:	e029      	b.n	80022fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	f043 0210 	orr.w	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e023      	b.n	800230a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022c2:	f7fe fef3 	bl	80010ac <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d914      	bls.n	80022fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e007      	b.n	800230a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1dc      	bne.n	80022c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <LL_ADC_StartCalibration>:
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002324:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800232e:	4313      	orrs	r3, r2
 8002330:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_IsCalibrationOnGoing>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002358:	d101      	bne.n	800235e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_ADCEx_Calibration_Start+0x1c>
 8002384:	2302      	movs	r3, #2
 8002386:	e04d      	b.n	8002424 <HAL_ADCEx_Calibration_Start+0xb8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff5f 	bl	8002254 <ADC_Disable>
 8002396:	4603      	mov	r3, r0
 8002398:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d136      	bne.n	800240e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023a8:	f023 0302 	bic.w	r3, r3, #2
 80023ac:	f043 0202 	orr.w	r2, r3, #2
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6839      	ldr	r1, [r7, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ffa9 	bl	8002312 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023c0:	e014      	b.n	80023ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3301      	adds	r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80023ce:	d30d      	bcc.n	80023ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	f023 0312 	bic.w	r3, r3, #18
 80023d8:	f043 0210 	orr.w	r2, r3, #16
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e01b      	b.n	8002424 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ffa7 	bl	8002344 <LL_ADC_IsCalibrationOnGoing>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e2      	bne.n	80023c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	f023 0303 	bic.w	r3, r3, #3
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	@ 0x58
 800240c:	e005      	b.n	800241a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002412:	f043 0210 	orr.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	@ (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	@ (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	@ (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff3e 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff31 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	e166      	b.n	800292e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	4013      	ands	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8158 	beq.w	8002928 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d005      	beq.n	8002690 <HAL_GPIO_Init+0x40>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d130      	bne.n	80026f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c6:	2201      	movs	r2, #1
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 0201 	and.w	r2, r3, #1
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d017      	beq.n	800272e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d123      	bne.n	8002782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	6939      	ldr	r1, [r7, #16]
 800277e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0203 	and.w	r2, r3, #3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80b2 	beq.w	8002928 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c4:	4b61      	ldr	r3, [pc, #388]	@ (800294c <HAL_GPIO_Init+0x2fc>)
 80027c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c8:	4a60      	ldr	r2, [pc, #384]	@ (800294c <HAL_GPIO_Init+0x2fc>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80027d0:	4b5e      	ldr	r3, [pc, #376]	@ (800294c <HAL_GPIO_Init+0x2fc>)
 80027d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002950 <HAL_GPIO_Init+0x300>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002806:	d02b      	beq.n	8002860 <HAL_GPIO_Init+0x210>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a52      	ldr	r2, [pc, #328]	@ (8002954 <HAL_GPIO_Init+0x304>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d025      	beq.n	800285c <HAL_GPIO_Init+0x20c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a51      	ldr	r2, [pc, #324]	@ (8002958 <HAL_GPIO_Init+0x308>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d01f      	beq.n	8002858 <HAL_GPIO_Init+0x208>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a50      	ldr	r2, [pc, #320]	@ (800295c <HAL_GPIO_Init+0x30c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d019      	beq.n	8002854 <HAL_GPIO_Init+0x204>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a4f      	ldr	r2, [pc, #316]	@ (8002960 <HAL_GPIO_Init+0x310>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <HAL_GPIO_Init+0x200>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a4e      	ldr	r2, [pc, #312]	@ (8002964 <HAL_GPIO_Init+0x314>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00d      	beq.n	800284c <HAL_GPIO_Init+0x1fc>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a4d      	ldr	r2, [pc, #308]	@ (8002968 <HAL_GPIO_Init+0x318>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d007      	beq.n	8002848 <HAL_GPIO_Init+0x1f8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a4c      	ldr	r2, [pc, #304]	@ (800296c <HAL_GPIO_Init+0x31c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_GPIO_Init+0x1f4>
 8002840:	2307      	movs	r3, #7
 8002842:	e00e      	b.n	8002862 <HAL_GPIO_Init+0x212>
 8002844:	2308      	movs	r3, #8
 8002846:	e00c      	b.n	8002862 <HAL_GPIO_Init+0x212>
 8002848:	2306      	movs	r3, #6
 800284a:	e00a      	b.n	8002862 <HAL_GPIO_Init+0x212>
 800284c:	2305      	movs	r3, #5
 800284e:	e008      	b.n	8002862 <HAL_GPIO_Init+0x212>
 8002850:	2304      	movs	r3, #4
 8002852:	e006      	b.n	8002862 <HAL_GPIO_Init+0x212>
 8002854:	2303      	movs	r3, #3
 8002856:	e004      	b.n	8002862 <HAL_GPIO_Init+0x212>
 8002858:	2302      	movs	r3, #2
 800285a:	e002      	b.n	8002862 <HAL_GPIO_Init+0x212>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_GPIO_Init+0x212>
 8002860:	2300      	movs	r3, #0
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	f002 0203 	and.w	r2, r2, #3
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	4093      	lsls	r3, r2
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002872:	4937      	ldr	r1, [pc, #220]	@ (8002950 <HAL_GPIO_Init+0x300>)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002880:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <HAL_GPIO_Init+0x320>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028a4:	4a32      	ldr	r2, [pc, #200]	@ (8002970 <HAL_GPIO_Init+0x320>)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028aa:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_GPIO_Init+0x320>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ce:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <HAL_GPIO_Init+0x320>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028d4:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <HAL_GPIO_Init+0x320>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002970 <HAL_GPIO_Init+0x320>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <HAL_GPIO_Init+0x320>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002922:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <HAL_GPIO_Init+0x320>)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3301      	adds	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f ae91 	bne.w	8002660 <HAL_GPIO_Init+0x10>
  }
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40021000 	.word	0x40021000
 8002950:	40010000 	.word	0x40010000
 8002954:	48000400 	.word	0x48000400
 8002958:	48000800 	.word	0x48000800
 800295c:	48000c00 	.word	0x48000c00
 8002960:	48001000 	.word	0x48001000
 8002964:	48001400 	.word	0x48001400
 8002968:	48001800 	.word	0x48001800
 800296c:	48001c00 	.word	0x48001c00
 8002970:	40010400 	.word	0x40010400

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002990:	e002      	b.n	8002998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029ae:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ba:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f838 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40010400 	.word	0x40010400

080029d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e4:	d102      	bne.n	80029ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029ea:	e00b      	b.n	8002a04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029ec:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029fa:	d102      	bne.n	8002a02 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80029fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a00:	e000      	b.n	8002a04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002a02:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d141      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a22:	4b4b      	ldr	r3, [pc, #300]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2e:	d131      	bne.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a30:	4b47      	ldr	r3, [pc, #284]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a36:	4a46      	ldr	r2, [pc, #280]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a40:	4b43      	ldr	r3, [pc, #268]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a48:	4a41      	ldr	r2, [pc, #260]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a50:	4b40      	ldr	r3, [pc, #256]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2232      	movs	r2, #50	@ 0x32
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	0c9b      	lsrs	r3, r3, #18
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a66:	e002      	b.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a6e:	4b38      	ldr	r3, [pc, #224]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7a:	d102      	bne.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f2      	bne.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a82:	4b33      	ldr	r3, [pc, #204]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a8e:	d158      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e057      	b.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a94:	4b2e      	ldr	r3, [pc, #184]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002aa4:	e04d      	b.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aac:	d141      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aae:	4b28      	ldr	r3, [pc, #160]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aba:	d131      	bne.n	8002b20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002abc:	4b24      	ldr	r3, [pc, #144]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ac2:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002acc:	4b20      	ldr	r3, [pc, #128]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2232      	movs	r2, #50	@ 0x32
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	3301      	adds	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af2:	e002      	b.n	8002afa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b06:	d102      	bne.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f2      	bne.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1a:	d112      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e011      	b.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b30:	e007      	b.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b32:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b3a:	4a05      	ldr	r2, [pc, #20]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b40:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40007000 	.word	0x40007000
 8002b54:	20000000 	.word	0x20000000
 8002b58:	431bde83 	.word	0x431bde83

08002b5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f000 bc08 	b.w	8003380 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b70:	4b96      	ldr	r3, [pc, #600]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b7a:	4b94      	ldr	r3, [pc, #592]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80e4 	beq.w	8002d5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4c>
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	f040 808b 	bne.w	8002cb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	f040 8087 	bne.w	8002cb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ba8:	4b88      	ldr	r3, [pc, #544]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x64>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e3df      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	4b81      	ldr	r3, [pc, #516]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_RCC_OscConfig+0x7e>
 8002bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd8:	e005      	b.n	8002be6 <HAL_RCC_OscConfig+0x8a>
 8002bda:	4b7c      	ldr	r3, [pc, #496]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d223      	bcs.n	8002c32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fd94 	bl	800371c <RCC_SetFlashLatencyFromMSIRange>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e3c0      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bfe:	4b73      	ldr	r3, [pc, #460]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a72      	ldr	r2, [pc, #456]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c04:	f043 0308 	orr.w	r3, r3, #8
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b70      	ldr	r3, [pc, #448]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	496d      	ldr	r1, [pc, #436]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	4968      	ldr	r1, [pc, #416]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	e025      	b.n	8002c7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c32:	4b66      	ldr	r3, [pc, #408]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a65      	ldr	r2, [pc, #404]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b63      	ldr	r3, [pc, #396]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4960      	ldr	r1, [pc, #384]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c50:	4b5e      	ldr	r3, [pc, #376]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	495b      	ldr	r1, [pc, #364]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fd54 	bl	800371c <RCC_SetFlashLatencyFromMSIRange>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e380      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c7e:	f000 fcc1 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b51      	ldr	r3, [pc, #324]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	4950      	ldr	r1, [pc, #320]	@ (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd4 <HAL_RCC_OscConfig+0x278>)
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe f9b2 	bl	800100c <HAL_InitTick>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d052      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	e364      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d032      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cbe:	4b43      	ldr	r3, [pc, #268]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a42      	ldr	r2, [pc, #264]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cca:	f7fe f9ef 	bl	80010ac <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd2:	f7fe f9eb 	bl	80010ac <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e34d      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce4:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf0:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a35      	ldr	r2, [pc, #212]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f043 0308 	orr.w	r3, r3, #8
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b33      	ldr	r3, [pc, #204]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4930      	ldr	r1, [pc, #192]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	492b      	ldr	r1, [pc, #172]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
 8002d22:	e01a      	b.n	8002d5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d24:	4b29      	ldr	r3, [pc, #164]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a28      	ldr	r2, [pc, #160]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d30:	f7fe f9bc 	bl	80010ac <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d38:	f7fe f9b8 	bl	80010ac <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e31a      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d4a:	4b20      	ldr	r3, [pc, #128]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x1dc>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d073      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_OscConfig+0x21c>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d10e      	bne.n	8002d90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d10b      	bne.n	8002d90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d063      	beq.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d15f      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e2f7      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d98:	d106      	bne.n	8002da8 <HAL_RCC_OscConfig+0x24c>
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e025      	b.n	8002df4 <HAL_RCC_OscConfig+0x298>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db0:	d114      	bne.n	8002ddc <HAL_RCC_OscConfig+0x280>
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a05      	ldr	r2, [pc, #20]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a02      	ldr	r2, [pc, #8]	@ (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e013      	b.n	8002df4 <HAL_RCC_OscConfig+0x298>
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	0800433c 	.word	0x0800433c
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	4ba0      	ldr	r3, [pc, #640]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a9f      	ldr	r2, [pc, #636]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b9d      	ldr	r3, [pc, #628]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a9c      	ldr	r2, [pc, #624]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f956 	bl	80010ac <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe f952 	bl	80010ac <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	@ 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e2b4      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e16:	4b92      	ldr	r3, [pc, #584]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2a8>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe f942 	bl	80010ac <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f93e 	bl	80010ac <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	@ 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e2a0      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e3e:	4b88      	ldr	r3, [pc, #544]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2d0>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d060      	beq.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x310>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d119      	bne.n	8002e9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d116      	bne.n	8002e9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6c:	4b7c      	ldr	r3, [pc, #496]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_OscConfig+0x328>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e27d      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b76      	ldr	r3, [pc, #472]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	4973      	ldr	r1, [pc, #460]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e98:	e040      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d023      	beq.n	8002eea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe f8fd 	bl	80010ac <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7fe f8f9 	bl	80010ac <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e25b      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec8:	4b65      	ldr	r3, [pc, #404]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b62      	ldr	r3, [pc, #392]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	495f      	ldr	r1, [pc, #380]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	e018      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b5d      	ldr	r3, [pc, #372]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5c      	ldr	r2, [pc, #368]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe f8d9 	bl	80010ac <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe f8d5 	bl	80010ac <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e237      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f10:	4b53      	ldr	r3, [pc, #332]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f30:	4b4b      	ldr	r3, [pc, #300]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f36:	4a4a      	ldr	r2, [pc, #296]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe f8b4 	bl	80010ac <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f48:	f7fe f8b0 	bl	80010ac <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e212      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f5a:	4b41      	ldr	r3, [pc, #260]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ef      	beq.n	8002f48 <HAL_RCC_OscConfig+0x3ec>
 8002f68:	e01b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f70:	4a3b      	ldr	r2, [pc, #236]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f897 	bl	80010ac <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f82:	f7fe f893 	bl	80010ac <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e1f5      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f94:	4b32      	ldr	r3, [pc, #200]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ef      	bne.n	8002f82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a6 	beq.w	80030fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10d      	bne.n	8002fdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b27      	ldr	r3, [pc, #156]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc4:	4a26      	ldr	r2, [pc, #152]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fcc:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	4b21      	ldr	r3, [pc, #132]	@ (8003064 <HAL_RCC_OscConfig+0x508>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d118      	bne.n	800301a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <HAL_RCC_OscConfig+0x508>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1d      	ldr	r2, [pc, #116]	@ (8003064 <HAL_RCC_OscConfig+0x508>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f85a 	bl	80010ac <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffc:	f7fe f856 	bl	80010ac <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1b8      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300e:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <HAL_RCC_OscConfig+0x508>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d108      	bne.n	8003034 <HAL_RCC_OscConfig+0x4d8>
 8003022:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003028:	4a0d      	ldr	r2, [pc, #52]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003032:	e029      	b.n	8003088 <HAL_RCC_OscConfig+0x52c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b05      	cmp	r3, #5
 800303a:	d115      	bne.n	8003068 <HAL_RCC_OscConfig+0x50c>
 800303c:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003042:	4a07      	ldr	r2, [pc, #28]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	4a03      	ldr	r2, [pc, #12]	@ (8003060 <HAL_RCC_OscConfig+0x504>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x52c>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	4b9d      	ldr	r3, [pc, #628]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	4a9c      	ldr	r2, [pc, #624]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003078:	4b99      	ldr	r3, [pc, #612]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	4a98      	ldr	r2, [pc, #608]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d016      	beq.n	80030be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe f80c 	bl	80010ac <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fe f808 	bl	80010ac <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e168      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ae:	4b8c      	ldr	r3, [pc, #560]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ed      	beq.n	8003098 <HAL_RCC_OscConfig+0x53c>
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fd fff5 	bl	80010ac <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fd fff1 	bl	80010ac <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e151      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030dc:	4b80      	ldr	r3, [pc, #512]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ed      	bne.n	80030c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ea:	7ffb      	ldrb	r3, [r7, #31]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b7b      	ldr	r3, [pc, #492]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	4a7a      	ldr	r2, [pc, #488]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03c      	beq.n	8003182 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01c      	beq.n	800314a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003110:	4b73      	ldr	r3, [pc, #460]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003116:	4a72      	ldr	r2, [pc, #456]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fd ffc4 	bl	80010ac <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003128:	f7fd ffc0 	bl	80010ac <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e122      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800313a:	4b69      	ldr	r3, [pc, #420]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800313c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ef      	beq.n	8003128 <HAL_RCC_OscConfig+0x5cc>
 8003148:	e01b      	b.n	8003182 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800314a:	4b65      	ldr	r3, [pc, #404]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800314c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003150:	4a63      	ldr	r2, [pc, #396]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd ffa7 	bl	80010ac <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003162:	f7fd ffa3 	bl	80010ac <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e105      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003174:	4b5a      	ldr	r3, [pc, #360]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003176:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ef      	bne.n	8003162 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80f9 	beq.w	800337e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	2b02      	cmp	r3, #2
 8003192:	f040 80cf 	bne.w	8003334 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003196:	4b52      	ldr	r3, [pc, #328]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0203 	and.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d12c      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	3b01      	subs	r3, #1
 80031b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d123      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d11b      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d113      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	3b01      	subs	r3, #1
 80031ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d109      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d071      	beq.n	80032e8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d068      	beq.n	80032dc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800320a:	4b35      	ldr	r3, [pc, #212]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003216:	4b32      	ldr	r3, [pc, #200]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0ac      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003226:	4b2e      	ldr	r3, [pc, #184]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800322c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003230:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003232:	f7fd ff3b 	bl	80010ac <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fd ff37 	bl	80010ac <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e099      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324c:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003258:	4b21      	ldr	r3, [pc, #132]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	4b21      	ldr	r3, [pc, #132]	@ (80032e4 <HAL_RCC_OscConfig+0x788>)
 800325e:	4013      	ands	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003268:	3a01      	subs	r2, #1
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003272:	0212      	lsls	r2, r2, #8
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800327a:	0852      	lsrs	r2, r2, #1
 800327c:	3a01      	subs	r2, #1
 800327e:	0552      	lsls	r2, r2, #21
 8003280:	4311      	orrs	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003286:	0852      	lsrs	r2, r2, #1
 8003288:	3a01      	subs	r2, #1
 800328a:	0652      	lsls	r2, r2, #25
 800328c:	4311      	orrs	r1, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003292:	06d2      	lsls	r2, r2, #27
 8003294:	430a      	orrs	r2, r1
 8003296:	4912      	ldr	r1, [pc, #72]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003298:	4313      	orrs	r3, r2
 800329a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800329c:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0f      	ldr	r2, [pc, #60]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 80032a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032a8:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b4:	f7fd fefa 	bl	80010ac <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fef6 	bl	80010ac <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e058      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <HAL_RCC_OscConfig+0x784>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032da:	e050      	b.n	800337e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e04f      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
 80032e0:	40021000 	.word	0x40021000
 80032e4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e8:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d144      	bne.n	800337e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032f4:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a23      	ldr	r2, [pc, #140]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003300:	4b21      	ldr	r3, [pc, #132]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a20      	ldr	r2, [pc, #128]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800330a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800330c:	f7fd fece 	bl	80010ac <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd feca 	bl	80010ac <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e02c      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	4b18      	ldr	r3, [pc, #96]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x7b8>
 8003332:	e024      	b.n	800337e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d01f      	beq.n	800337a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 8003340:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd feb1 	bl	80010ac <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fd fead 	bl	80010ac <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e00f      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	4905      	ldr	r1, [pc, #20]	@ (8003388 <HAL_RCC_OscConfig+0x82c>)
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_RCC_OscConfig+0x830>)
 8003374:	4013      	ands	r3, r2
 8003376:	60cb      	str	r3, [r1, #12]
 8003378:	e001      	b.n	800337e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	feeefffc 	.word	0xfeeefffc

08003390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e11d      	b.n	80035e4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b90      	ldr	r3, [pc, #576]	@ (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d910      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b8d      	ldr	r3, [pc, #564]	@ (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 020f 	bic.w	r2, r3, #15
 80033be:	498b      	ldr	r1, [pc, #556]	@ (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b89      	ldr	r3, [pc, #548]	@ (80035ec <HAL_RCC_ClockConfig+0x25c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e105      	b.n	80035e4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	4b81      	ldr	r3, [pc, #516]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d908      	bls.n	8003406 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	497b      	ldr	r1, [pc, #492]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d079      	beq.n	8003506 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d11e      	bne.n	8003458 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341a:	4b75      	ldr	r3, [pc, #468]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0dc      	b.n	80035e4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800342a:	f000 f9d1 	bl	80037d0 <RCC_GetSysClockFreqFromPLLSource>
 800342e:	4603      	mov	r3, r0
 8003430:	4a70      	ldr	r2, [pc, #448]	@ (80035f4 <HAL_RCC_ClockConfig+0x264>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d946      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003436:	4b6e      	ldr	r3, [pc, #440]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d140      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003442:	4b6b      	ldr	r3, [pc, #428]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800344a:	4a69      	ldr	r2, [pc, #420]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800344c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003450:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003452:	2380      	movs	r3, #128	@ 0x80
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e035      	b.n	80034c4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d107      	bne.n	8003470 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003460:	4b63      	ldr	r3, [pc, #396]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d115      	bne.n	8003498 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0b9      	b.n	80035e4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003478:	4b5d      	ldr	r3, [pc, #372]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0ad      	b.n	80035e4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003488:	4b59      	ldr	r3, [pc, #356]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0a5      	b.n	80035e4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003498:	f000 f8b4 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 800349c:	4603      	mov	r3, r0
 800349e:	4a55      	ldr	r2, [pc, #340]	@ (80035f4 <HAL_RCC_ClockConfig+0x264>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d90f      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034a4:	4b52      	ldr	r3, [pc, #328]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034b0:	4b4f      	ldr	r3, [pc, #316]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034b8:	4a4d      	ldr	r2, [pc, #308]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034be:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034c0:	2380      	movs	r3, #128	@ 0x80
 80034c2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c4:	4b4a      	ldr	r3, [pc, #296]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 0203 	bic.w	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4947      	ldr	r1, [pc, #284]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d6:	f7fd fde9 	bl	80010ac <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034de:	f7fd fde5 	bl	80010ac <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e077      	b.n	80035e4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f4:	4b3e      	ldr	r3, [pc, #248]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 020c 	and.w	r2, r3, #12
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	429a      	cmp	r2, r3
 8003504:	d1eb      	bne.n	80034de <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b80      	cmp	r3, #128	@ 0x80
 800350a:	d105      	bne.n	8003518 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800350c:	4b38      	ldr	r3, [pc, #224]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a37      	ldr	r2, [pc, #220]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003516:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003530:	429a      	cmp	r2, r3
 8003532:	d208      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003534:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	492b      	ldr	r1, [pc, #172]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003546:	4b29      	ldr	r3, [pc, #164]	@ (80035ec <HAL_RCC_ClockConfig+0x25c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d210      	bcs.n	8003576 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003554:	4b25      	ldr	r3, [pc, #148]	@ (80035ec <HAL_RCC_ClockConfig+0x25c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 020f 	bic.w	r2, r3, #15
 800355c:	4923      	ldr	r1, [pc, #140]	@ (80035ec <HAL_RCC_ClockConfig+0x25c>)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003564:	4b21      	ldr	r3, [pc, #132]	@ (80035ec <HAL_RCC_ClockConfig+0x25c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e036      	b.n	80035e4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003582:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4918      	ldr	r1, [pc, #96]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a0:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4910      	ldr	r1, [pc, #64]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035b4:	f000 f826 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	490c      	ldr	r1, [pc, #48]	@ (80035f8 <HAL_RCC_ClockConfig+0x268>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
 80035d0:	4a0a      	ldr	r2, [pc, #40]	@ (80035fc <HAL_RCC_ClockConfig+0x26c>)
 80035d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <HAL_RCC_ClockConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fd17 	bl	800100c <HAL_InitTick>
 80035de:	4603      	mov	r3, r0
 80035e0:	73fb      	strb	r3, [r7, #15]

  return status;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40022000 	.word	0x40022000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	04c4b400 	.word	0x04c4b400
 80035f8:	0800433c 	.word	0x0800433c
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	b089      	sub	sp, #36	@ 0x24
 8003608:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003612:	4b3e      	ldr	r3, [pc, #248]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800361c:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x34>
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d121      	bne.n	8003676 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d11e      	bne.n	8003676 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003638:	4b34      	ldr	r3, [pc, #208]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003644:	4b31      	ldr	r3, [pc, #196]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 8003646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	e005      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003654:	4b2d      	ldr	r3, [pc, #180]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003660:	4a2b      	ldr	r2, [pc, #172]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003668:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10d      	bne.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003674:	e00a      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d102      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800367c:	4b25      	ldr	r3, [pc, #148]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x110>)
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	e004      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d101      	bne.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003688:	4b23      	ldr	r3, [pc, #140]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x114>)
 800368a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d134      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003692:	4b1e      	ldr	r3, [pc, #120]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0xa6>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d003      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0xac>
 80036a8:	e005      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ac:	617b      	str	r3, [r7, #20]
      break;
 80036ae:	e005      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036b0:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x114>)
 80036b2:	617b      	str	r3, [r7, #20]
      break;
 80036b4:	e002      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	617b      	str	r3, [r7, #20]
      break;
 80036ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036bc:	4b13      	ldr	r3, [pc, #76]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3301      	adds	r3, #1
 80036c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036ca:	4b10      	ldr	r3, [pc, #64]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	fb03 f202 	mul.w	r2, r3, r2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	0e5b      	lsrs	r3, r3, #25
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	3301      	adds	r3, #1
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036fc:	69bb      	ldr	r3, [r7, #24]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	@ 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	0800434c 	.word	0x0800434c
 8003714:	00f42400 	.word	0x00f42400
 8003718:	007a1200 	.word	0x007a1200

0800371c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003728:	4b27      	ldr	r3, [pc, #156]	@ (80037c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003734:	f7ff f94e 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 8003738:	6178      	str	r0, [r7, #20]
 800373a:	e014      	b.n	8003766 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b22      	ldr	r3, [pc, #136]	@ (80037c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003740:	4a21      	ldr	r2, [pc, #132]	@ (80037c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003746:	6593      	str	r3, [r2, #88]	@ 0x58
 8003748:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003754:	f7ff f93e 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 8003758:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375e:	4a1a      	ldr	r2, [pc, #104]	@ (80037c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003764:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800376c:	d10b      	bne.n	8003786 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b80      	cmp	r3, #128	@ 0x80
 8003772:	d913      	bls.n	800379c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2ba0      	cmp	r3, #160	@ 0xa0
 8003778:	d902      	bls.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800377a:	2302      	movs	r3, #2
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	e00d      	b.n	800379c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003780:	2301      	movs	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	e00a      	b.n	800379c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b7f      	cmp	r3, #127	@ 0x7f
 800378a:	d902      	bls.n	8003792 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800378c:	2302      	movs	r3, #2
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	e004      	b.n	800379c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b70      	cmp	r3, #112	@ 0x70
 8003796:	d101      	bne.n	800379c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003798:	2301      	movs	r3, #1
 800379a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800379c:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f023 020f 	bic.w	r2, r3, #15
 80037a4:	4909      	ldr	r1, [pc, #36]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037ac:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40022000 	.word	0x40022000

080037d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037d6:	4b2d      	ldr	r3, [pc, #180]	@ (800388c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d00b      	beq.n	80037fe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d825      	bhi.n	8003838 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d008      	beq.n	8003804 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d11f      	bne.n	8003838 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80037f8:	4b25      	ldr	r3, [pc, #148]	@ (8003890 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80037fa:	613b      	str	r3, [r7, #16]
    break;
 80037fc:	e01f      	b.n	800383e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80037fe:	4b25      	ldr	r3, [pc, #148]	@ (8003894 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003800:	613b      	str	r3, [r7, #16]
    break;
 8003802:	e01c      	b.n	800383e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003804:	4b21      	ldr	r3, [pc, #132]	@ (800388c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003810:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e005      	b.n	800382c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003820:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800382c:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	613b      	str	r3, [r7, #16]
    break;
 8003836:	e002      	b.n	800383e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]
    break;
 800383c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800383e:	4b13      	ldr	r3, [pc, #76]	@ (800388c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	3301      	adds	r3, #1
 800384a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800384c:	4b0f      	ldr	r3, [pc, #60]	@ (800388c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	fb03 f202 	mul.w	r2, r3, r2
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0e5b      	lsrs	r3, r3, #25
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800387e:	683b      	ldr	r3, [r7, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40021000 	.word	0x40021000
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200
 8003898:	0800434c 	.word	0x0800434c

0800389c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a4:	2300      	movs	r3, #0
 80038a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a8:	2300      	movs	r3, #0
 80038aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d040      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038bc:	2b80      	cmp	r3, #128	@ 0x80
 80038be:	d02a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80038c0:	2b80      	cmp	r3, #128	@ 0x80
 80038c2:	d825      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80038c4:	2b60      	cmp	r3, #96	@ 0x60
 80038c6:	d026      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80038c8:	2b60      	cmp	r3, #96	@ 0x60
 80038ca:	d821      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	d006      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x42>
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d81d      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x50>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d010      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x62>
 80038dc:	e018      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038de:	4b89      	ldr	r3, [pc, #548]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4a88      	ldr	r2, [pc, #544]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ea:	e015      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fb02 	bl	8003efc <RCCEx_PLLSAI1_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038fc:	e00c      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3320      	adds	r3, #32
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fbed 	bl	80040e4 <RCCEx_PLLSAI2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800390e:	e003      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	74fb      	strb	r3, [r7, #19]
      break;
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800391e:	4b79      	ldr	r3, [pc, #484]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003920:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003924:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800392c:	4975      	ldr	r1, [pc, #468]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003934:	e001      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d047      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394e:	d030      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003954:	d82a      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800395a:	d02a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800395c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003960:	d824      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003966:	d008      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800396c:	d81e      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003976:	d010      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003978:	e018      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800397a:	4b62      	ldr	r3, [pc, #392]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a61      	ldr	r2, [pc, #388]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003986:	e015      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fab4 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3320      	adds	r3, #32
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fb9f 	bl	80040e4 <RCCEx_PLLSAI2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039aa:	e003      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	74fb      	strb	r3, [r7, #19]
      break;
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ba:	4b52      	ldr	r3, [pc, #328]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c8:	494e      	ldr	r1, [pc, #312]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80039d0:	e001      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 809f 	beq.w	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039e8:	4b46      	ldr	r3, [pc, #280]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b41      	ldr	r3, [pc, #260]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	4a40      	ldr	r2, [pc, #256]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a16:	2301      	movs	r3, #1
 8003a18:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3a      	ldr	r2, [pc, #232]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a26:	f7fd fb41 	bl	80010ac <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a2c:	e009      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fd fb3d 	bl	80010ac <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a40:	e005      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a42:	4b31      	ldr	r3, [pc, #196]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ef      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d15b      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a54:	4b2b      	ldr	r3, [pc, #172]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01f      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d019      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a72:	4b24      	ldr	r3, [pc, #144]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7e:	4b21      	ldr	r3, [pc, #132]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a84:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a94:	4a1b      	ldr	r2, [pc, #108]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a9e:	4a19      	ldr	r2, [pc, #100]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d016      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fafc 	bl	80010ac <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fd faf8 	bl	80010ac <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d902      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ace:	e006      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ec      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003ade:	7cfb      	ldrb	r3, [r7, #19]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae4:	4b07      	ldr	r3, [pc, #28]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	4903      	ldr	r1, [pc, #12]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003afc:	e008      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	74bb      	strb	r3, [r7, #18]
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b10:	7c7b      	ldrb	r3, [r7, #17]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	4ba0      	ldr	r3, [pc, #640]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1a:	4a9f      	ldr	r2, [pc, #636]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2e:	4b9a      	ldr	r3, [pc, #616]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b34:	f023 0203 	bic.w	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	4996      	ldr	r1, [pc, #600]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b50:	4b91      	ldr	r3, [pc, #580]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b56:	f023 020c 	bic.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	498e      	ldr	r1, [pc, #568]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b72:	4b89      	ldr	r3, [pc, #548]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b80:	4985      	ldr	r1, [pc, #532]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b94:	4b80      	ldr	r3, [pc, #512]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba2:	497d      	ldr	r1, [pc, #500]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb6:	4b78      	ldr	r3, [pc, #480]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc4:	4974      	ldr	r1, [pc, #464]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be6:	496c      	ldr	r1, [pc, #432]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bfa:	4b67      	ldr	r3, [pc, #412]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c08:	4963      	ldr	r1, [pc, #396]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2a:	495b      	ldr	r1, [pc, #364]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3e:	4b56      	ldr	r3, [pc, #344]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	4952      	ldr	r1, [pc, #328]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c60:	4b4d      	ldr	r3, [pc, #308]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	494a      	ldr	r1, [pc, #296]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c82:	4b45      	ldr	r3, [pc, #276]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c90:	4941      	ldr	r1, [pc, #260]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb2:	4939      	ldr	r1, [pc, #228]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d028      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cc6:	4b34      	ldr	r3, [pc, #208]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd4:	4930      	ldr	r1, [pc, #192]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ce4:	d106      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4a2b      	ldr	r2, [pc, #172]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf0:	60d3      	str	r3, [r2, #12]
 8003cf2:	e011      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f8f9 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d04d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d34:	4a18      	ldr	r2, [pc, #96]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d3a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003d3e:	e012      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003d40:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d46:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d4c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003d50:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d5e:	490e      	ldr	r1, [pc, #56]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d70:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a08      	ldr	r2, [pc, #32]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d7a:	60d3      	str	r3, [r2, #12]
 8003d7c:	e020      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d86:	d109      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d88:	4b03      	ldr	r3, [pc, #12]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a02      	ldr	r2, [pc, #8]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d92:	60d3      	str	r3, [r2, #12]
 8003d94:	e014      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f8a5 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d028      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dda:	4947      	ldr	r1, [pc, #284]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dea:	d106      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dec:	4b42      	ldr	r3, [pc, #264]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a41      	ldr	r2, [pc, #260]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df6:	60d3      	str	r3, [r2, #12]
 8003df8:	e011      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f876 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01e      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e2a:	4b33      	ldr	r3, [pc, #204]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e30:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3a:	492f      	ldr	r1, [pc, #188]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f851 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e74:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e7a:	f023 0204 	bic.w	r2, r3, #4
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e84:	491c      	ldr	r1, [pc, #112]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e98:	4b17      	ldr	r3, [pc, #92]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e9e:	f023 0218 	bic.w	r2, r3, #24
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea8:	4913      	ldr	r1, [pc, #76]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ecc:	490a      	ldr	r1, [pc, #40]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ede:	d105      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a04      	ldr	r2, [pc, #16]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000

08003efc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f0a:	4b72      	ldr	r3, [pc, #456]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f16:	4b6f      	ldr	r3, [pc, #444]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d103      	bne.n	8003f2e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
       ||
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d142      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e03f      	b.n	8003fb4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d018      	beq.n	8003f6e <RCCEx_PLLSAI1_Config+0x72>
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d825      	bhi.n	8003f8c <RCCEx_PLLSAI1_Config+0x90>
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d002      	beq.n	8003f4a <RCCEx_PLLSAI1_Config+0x4e>
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d009      	beq.n	8003f5c <RCCEx_PLLSAI1_Config+0x60>
 8003f48:	e020      	b.n	8003f8c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f4a:	4b62      	ldr	r3, [pc, #392]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11d      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5a:	e01a      	b.n	8003f92 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f5c:	4b5d      	ldr	r3, [pc, #372]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d116      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6c:	e013      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f6e:	4b59      	ldr	r3, [pc, #356]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f7a:	4b56      	ldr	r3, [pc, #344]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f8a:	e006      	b.n	8003f9a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	e004      	b.n	8003f9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003f9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4949      	ldr	r1, [pc, #292]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 8086 	bne.w	80040c8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fbc:	4b45      	ldr	r3, [pc, #276]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a44      	ldr	r2, [pc, #272]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc8:	f7fd f870 	bl	80010ac <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fce:	e009      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd0:	f7fd f86c 	bl	80010ac <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d902      	bls.n	8003fe4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fe2:	e005      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1ef      	bne.n	8003fd0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d168      	bne.n	80040c8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d113      	bne.n	8004024 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffc:	4b35      	ldr	r3, [pc, #212]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	4b35      	ldr	r3, [pc, #212]	@ (80040d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6892      	ldr	r2, [r2, #8]
 8004008:	0211      	lsls	r1, r2, #8
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68d2      	ldr	r2, [r2, #12]
 800400e:	06d2      	lsls	r2, r2, #27
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6852      	ldr	r2, [r2, #4]
 8004016:	3a01      	subs	r2, #1
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	430a      	orrs	r2, r1
 800401c:	492d      	ldr	r1, [pc, #180]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	610b      	str	r3, [r1, #16]
 8004022:	e02d      	b.n	8004080 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d115      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800402a:	4b2a      	ldr	r3, [pc, #168]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	4b2b      	ldr	r3, [pc, #172]	@ (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004030:	4013      	ands	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6892      	ldr	r2, [r2, #8]
 8004036:	0211      	lsls	r1, r2, #8
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6912      	ldr	r2, [r2, #16]
 800403c:	0852      	lsrs	r2, r2, #1
 800403e:	3a01      	subs	r2, #1
 8004040:	0552      	lsls	r2, r2, #21
 8004042:	4311      	orrs	r1, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6852      	ldr	r2, [r2, #4]
 8004048:	3a01      	subs	r2, #1
 800404a:	0112      	lsls	r2, r2, #4
 800404c:	430a      	orrs	r2, r1
 800404e:	4921      	ldr	r1, [pc, #132]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004050:	4313      	orrs	r3, r2
 8004052:	610b      	str	r3, [r1, #16]
 8004054:	e014      	b.n	8004080 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004056:	4b1f      	ldr	r3, [pc, #124]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	4b21      	ldr	r3, [pc, #132]	@ (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6892      	ldr	r2, [r2, #8]
 8004062:	0211      	lsls	r1, r2, #8
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6952      	ldr	r2, [r2, #20]
 8004068:	0852      	lsrs	r2, r2, #1
 800406a:	3a01      	subs	r2, #1
 800406c:	0652      	lsls	r2, r2, #25
 800406e:	4311      	orrs	r1, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6852      	ldr	r2, [r2, #4]
 8004074:	3a01      	subs	r2, #1
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	430a      	orrs	r2, r1
 800407a:	4916      	ldr	r1, [pc, #88]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800407c:	4313      	orrs	r3, r2
 800407e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a13      	ldr	r2, [pc, #76]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004086:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800408a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fd f80e 	bl	80010ac <HAL_GetTick>
 8004090:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004092:	e009      	b.n	80040a8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004094:	f7fd f80a 	bl	80010ac <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d902      	bls.n	80040a8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	73fb      	strb	r3, [r7, #15]
          break;
 80040a6:	e005      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040a8:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ef      	beq.n	8004094 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	4904      	ldr	r1, [pc, #16]	@ (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
 80040d8:	07ff800f 	.word	0x07ff800f
 80040dc:	ff9f800f 	.word	0xff9f800f
 80040e0:	f9ff800f 	.word	0xf9ff800f

080040e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040f2:	4b72      	ldr	r3, [pc, #456]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040fe:	4b6f      	ldr	r3, [pc, #444]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0203 	and.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d103      	bne.n	8004116 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
       ||
 8004112:	2b00      	cmp	r3, #0
 8004114:	d142      	bne.n	800419c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
 800411a:	e03f      	b.n	800419c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d018      	beq.n	8004156 <RCCEx_PLLSAI2_Config+0x72>
 8004124:	2b03      	cmp	r3, #3
 8004126:	d825      	bhi.n	8004174 <RCCEx_PLLSAI2_Config+0x90>
 8004128:	2b01      	cmp	r3, #1
 800412a:	d002      	beq.n	8004132 <RCCEx_PLLSAI2_Config+0x4e>
 800412c:	2b02      	cmp	r3, #2
 800412e:	d009      	beq.n	8004144 <RCCEx_PLLSAI2_Config+0x60>
 8004130:	e020      	b.n	8004174 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004132:	4b62      	ldr	r3, [pc, #392]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11d      	bne.n	800417a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004142:	e01a      	b.n	800417a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004144:	4b5d      	ldr	r3, [pc, #372]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d116      	bne.n	800417e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004154:	e013      	b.n	800417e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004156:	4b59      	ldr	r3, [pc, #356]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10f      	bne.n	8004182 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004162:	4b56      	ldr	r3, [pc, #344]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004172:	e006      	b.n	8004182 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      break;
 8004178:	e004      	b.n	8004184 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004182:	bf00      	nop
    }

    if(status == HAL_OK)
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d108      	bne.n	800419c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800418a:	4b4c      	ldr	r3, [pc, #304]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4949      	ldr	r1, [pc, #292]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004198:	4313      	orrs	r3, r2
 800419a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 8086 	bne.w	80042b0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041a4:	4b45      	ldr	r3, [pc, #276]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a44      	ldr	r2, [pc, #272]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80041aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fc ff7c 	bl	80010ac <HAL_GetTick>
 80041b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041b6:	e009      	b.n	80041cc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041b8:	f7fc ff78 	bl	80010ac <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d902      	bls.n	80041cc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ca:	e005      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041cc:	4b3b      	ldr	r3, [pc, #236]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ef      	bne.n	80041b8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d168      	bne.n	80042b0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d113      	bne.n	800420c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041e4:	4b35      	ldr	r3, [pc, #212]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	4b35      	ldr	r3, [pc, #212]	@ (80042c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6892      	ldr	r2, [r2, #8]
 80041f0:	0211      	lsls	r1, r2, #8
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68d2      	ldr	r2, [r2, #12]
 80041f6:	06d2      	lsls	r2, r2, #27
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6852      	ldr	r2, [r2, #4]
 80041fe:	3a01      	subs	r2, #1
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	430a      	orrs	r2, r1
 8004204:	492d      	ldr	r1, [pc, #180]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	614b      	str	r3, [r1, #20]
 800420a:	e02d      	b.n	8004268 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d115      	bne.n	800423e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004212:	4b2a      	ldr	r3, [pc, #168]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	4b2b      	ldr	r3, [pc, #172]	@ (80042c4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	0211      	lsls	r1, r2, #8
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6912      	ldr	r2, [r2, #16]
 8004224:	0852      	lsrs	r2, r2, #1
 8004226:	3a01      	subs	r2, #1
 8004228:	0552      	lsls	r2, r2, #21
 800422a:	4311      	orrs	r1, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6852      	ldr	r2, [r2, #4]
 8004230:	3a01      	subs	r2, #1
 8004232:	0112      	lsls	r2, r2, #4
 8004234:	430a      	orrs	r2, r1
 8004236:	4921      	ldr	r1, [pc, #132]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004238:	4313      	orrs	r3, r2
 800423a:	614b      	str	r3, [r1, #20]
 800423c:	e014      	b.n	8004268 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800423e:	4b1f      	ldr	r3, [pc, #124]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	4b21      	ldr	r3, [pc, #132]	@ (80042c8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6892      	ldr	r2, [r2, #8]
 800424a:	0211      	lsls	r1, r2, #8
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6952      	ldr	r2, [r2, #20]
 8004250:	0852      	lsrs	r2, r2, #1
 8004252:	3a01      	subs	r2, #1
 8004254:	0652      	lsls	r2, r2, #25
 8004256:	4311      	orrs	r1, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6852      	ldr	r2, [r2, #4]
 800425c:	3a01      	subs	r2, #1
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	430a      	orrs	r2, r1
 8004262:	4916      	ldr	r1, [pc, #88]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004268:	4b14      	ldr	r3, [pc, #80]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a13      	ldr	r2, [pc, #76]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800426e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004272:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fc ff1a 	bl	80010ac <HAL_GetTick>
 8004278:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800427a:	e009      	b.n	8004290 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800427c:	f7fc ff16 	bl	80010ac <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d902      	bls.n	8004290 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	73fb      	strb	r3, [r7, #15]
          break;
 800428e:	e005      	b.n	800429c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004290:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	4904      	ldr	r1, [pc, #16]	@ (80042bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	07ff800f 	.word	0x07ff800f
 80042c4:	ff9f800f 	.word	0xff9f800f
 80042c8:	f9ff800f 	.word	0xf9ff800f

080042cc <memset>:
 80042cc:	4402      	add	r2, r0
 80042ce:	4603      	mov	r3, r0
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d100      	bne.n	80042d6 <memset+0xa>
 80042d4:	4770      	bx	lr
 80042d6:	f803 1b01 	strb.w	r1, [r3], #1
 80042da:	e7f9      	b.n	80042d0 <memset+0x4>

080042dc <__libc_init_array>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4d0d      	ldr	r5, [pc, #52]	@ (8004314 <__libc_init_array+0x38>)
 80042e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004318 <__libc_init_array+0x3c>)
 80042e2:	1b64      	subs	r4, r4, r5
 80042e4:	10a4      	asrs	r4, r4, #2
 80042e6:	2600      	movs	r6, #0
 80042e8:	42a6      	cmp	r6, r4
 80042ea:	d109      	bne.n	8004300 <__libc_init_array+0x24>
 80042ec:	4d0b      	ldr	r5, [pc, #44]	@ (800431c <__libc_init_array+0x40>)
 80042ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004320 <__libc_init_array+0x44>)
 80042f0:	f000 f818 	bl	8004324 <_init>
 80042f4:	1b64      	subs	r4, r4, r5
 80042f6:	10a4      	asrs	r4, r4, #2
 80042f8:	2600      	movs	r6, #0
 80042fa:	42a6      	cmp	r6, r4
 80042fc:	d105      	bne.n	800430a <__libc_init_array+0x2e>
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	f855 3b04 	ldr.w	r3, [r5], #4
 8004304:	4798      	blx	r3
 8004306:	3601      	adds	r6, #1
 8004308:	e7ee      	b.n	80042e8 <__libc_init_array+0xc>
 800430a:	f855 3b04 	ldr.w	r3, [r5], #4
 800430e:	4798      	blx	r3
 8004310:	3601      	adds	r6, #1
 8004312:	e7f2      	b.n	80042fa <__libc_init_array+0x1e>
 8004314:	0800437c 	.word	0x0800437c
 8004318:	0800437c 	.word	0x0800437c
 800431c:	0800437c 	.word	0x0800437c
 8004320:	08004380 	.word	0x08004380

08004324 <_init>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	bf00      	nop
 8004328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432a:	bc08      	pop	{r3}
 800432c:	469e      	mov	lr, r3
 800432e:	4770      	bx	lr

08004330 <_fini>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr
