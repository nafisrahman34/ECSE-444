
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020cc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08002288  08002288  00003288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002acc  08002acc  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002acc  08002acc  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002acc  08002acc  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002acc  08002acc  00003acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ad0  08002ad0  00003ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002ad4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000014  08002ae8  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08002ae8  00004058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096d7  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188e  00000000  00000000  0000d71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f5  00000000  00000000  0000f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291e7  00000000  00000000  0000fb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007516  00000000  00000000  00038d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbdde  00000000  00000000  0004029a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0013c078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ac  00000000  00000000  0013c130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0013dadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0013db36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0013dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002270 	.word	0x08002270

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	08002270 	.word	0x08002270

080001fc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
	LEDState = !LEDState;
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <HAL_GPIO_EXTI_Callback+0x40>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	bf14      	ite	ne
 800020e:	2301      	movne	r3, #1
 8000210:	2300      	moveq	r3, #0
 8000212:	b2db      	uxtb	r3, r3
 8000214:	f083 0301 	eor.w	r3, r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <HAL_GPIO_EXTI_Callback+0x40>)
 8000222:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LEDState);
 8000224:	4b05      	ldr	r3, [pc, #20]	@ (800023c <HAL_GPIO_EXTI_Callback+0x40>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800022e:	4804      	ldr	r0, [pc, #16]	@ (8000240 <HAL_GPIO_EXTI_Callback+0x44>)
 8000230:	f001 f80c 	bl	800124c <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000044 	.word	0x20000044
 8000240:	48000400 	.word	0x48000400

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 fadf 	bl	800080a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f90c 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f99c 	bl	800058c <MX_GPIO_Init>
  MX_DAC1_Init();
 8000254:	f000 f95a 	bl	800050c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000258:	2100      	movs	r1, #0
 800025a:	4824      	ldr	r0, [pc, #144]	@ (80002ec <main+0xa8>)
 800025c:	f000 fca1 	bl	8000ba2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000260:	2110      	movs	r1, #16
 8000262:	4822      	ldr	r0, [pc, #136]	@ (80002ec <main+0xa8>)
 8000264:	f000 fc9d 	bl	8000ba2 <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(LEDState){
 8000268:	4b21      	ldr	r3, [pc, #132]	@ (80002f0 <main+0xac>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d024      	beq.n	80002ba <main+0x76>
		  tri_wave();
 8000270:	f000 f846 	bl	8000300 <tri_wave>
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, triangular);
 8000274:	4b1f      	ldr	r3, [pc, #124]	@ (80002f4 <main+0xb0>)
 8000276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800027a:	2200      	movs	r2, #0
 800027c:	2100      	movs	r1, #0
 800027e:	481b      	ldr	r0, [pc, #108]	@ (80002ec <main+0xa8>)
 8000280:	f000 fce1 	bl	8000c46 <HAL_DAC_SetValue>
		  HAL_Delay(0.5);
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fb35 	bl	80008f4 <HAL_Delay>
		  tri_wave();
 800028a:	f000 f839 	bl	8000300 <tri_wave>
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, triangular);
 800028e:	4b19      	ldr	r3, [pc, #100]	@ (80002f4 <main+0xb0>)
 8000290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000294:	2200      	movs	r2, #0
 8000296:	2100      	movs	r1, #0
 8000298:	4814      	ldr	r0, [pc, #80]	@ (80002ec <main+0xa8>)
 800029a:	f000 fcd4 	bl	8000c46 <HAL_DAC_SetValue>
		  sawtth_wave();
 800029e:	f000 f873 	bl	8000388 <sawtth_wave>
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sawtooth);
 80002a2:	4b15      	ldr	r3, [pc, #84]	@ (80002f8 <main+0xb4>)
 80002a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002a8:	2200      	movs	r2, #0
 80002aa:	2110      	movs	r1, #16
 80002ac:	480f      	ldr	r0, [pc, #60]	@ (80002ec <main+0xa8>)
 80002ae:	f000 fcca 	bl	8000c46 <HAL_DAC_SetValue>
		  HAL_Delay(0.5);
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 fb1e 	bl	80008f4 <HAL_Delay>
 80002b8:	e7d6      	b.n	8000268 <main+0x24>
	  }else{
		  sine_wave();
 80002ba:	f000 f88f 	bl	80003dc <sine_wave>
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, Asinx);
 80002be:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <main+0xb8>)
 80002c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002c4:	2200      	movs	r2, #0
 80002c6:	2100      	movs	r1, #0
 80002c8:	4808      	ldr	r0, [pc, #32]	@ (80002ec <main+0xa8>)
 80002ca:	f000 fcbc 	bl	8000c46 <HAL_DAC_SetValue>
		  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Asinx);
		  sawtth_wave();
 80002ce:	f000 f85b 	bl	8000388 <sawtth_wave>
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sawtooth);
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <main+0xb4>)
 80002d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002d8:	2200      	movs	r2, #0
 80002da:	2110      	movs	r1, #16
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <main+0xa8>)
 80002de:	f000 fcb2 	bl	8000c46 <HAL_DAC_SetValue>
		  HAL_Delay(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fb06 	bl	80008f4 <HAL_Delay>
	  if(LEDState){
 80002e8:	e7be      	b.n	8000268 <main+0x24>
 80002ea:	bf00      	nop
 80002ec:	20000030 	.word	0x20000030
 80002f0:	20000044 	.word	0x20000044
 80002f4:	20000046 	.word	0x20000046
 80002f8:	20000048 	.word	0x20000048
 80002fc:	20000050 	.word	0x20000050

08000300 <tri_wave>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void tri_wave(void){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
	int16_t t = triangular + direction * step ;
 8000306:	4b1d      	ldr	r3, [pc, #116]	@ (800037c <tri_wave+0x7c>)
 8000308:	f993 3000 	ldrsb.w	r3, [r3]
 800030c:	b29a      	uxth	r2, r3
 800030e:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <tri_wave+0x80>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	fb12 f303 	smulbb	r3, r2, r3
 8000316:	b29a      	uxth	r2, r3
 8000318:	4b1a      	ldr	r3, [pc, #104]	@ (8000384 <tri_wave+0x84>)
 800031a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800031e:	b29b      	uxth	r3, r3
 8000320:	4413      	add	r3, r2
 8000322:	b29b      	uxth	r3, r3
 8000324:	80fb      	strh	r3, [r7, #6]

	if ( t >= precision || t  <= 0){
 8000326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800032a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800032e:	4293      	cmp	r3, r2
 8000330:	dc03      	bgt.n	800033a <tri_wave+0x3a>
 8000332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000336:	2b00      	cmp	r3, #0
 8000338:	dc15      	bgt.n	8000366 <tri_wave+0x66>

		if(t <= 0) triangular = 0;
 800033a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800033e:	2b00      	cmp	r3, #0
 8000340:	dc03      	bgt.n	800034a <tri_wave+0x4a>
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <tri_wave+0x84>)
 8000344:	2200      	movs	r2, #0
 8000346:	801a      	strh	r2, [r3, #0]
 8000348:	e003      	b.n	8000352 <tri_wave+0x52>
		else triangular = precision;
 800034a:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <tri_wave+0x84>)
 800034c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000350:	801a      	strh	r2, [r3, #0]

		direction = -direction;
 8000352:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <tri_wave+0x7c>)
 8000354:	f993 3000 	ldrsb.w	r3, [r3]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	425b      	negs	r3, r3
 800035c:	b2db      	uxtb	r3, r3
 800035e:	b25a      	sxtb	r2, r3
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <tri_wave+0x7c>)
 8000362:	701a      	strb	r2, [r3, #0]
 8000364:	e003      	b.n	800036e <tri_wave+0x6e>

	}else triangular = t;
 8000366:	4a07      	ldr	r2, [pc, #28]	@ (8000384 <tri_wave+0x84>)
 8000368:	88fb      	ldrh	r3, [r7, #6]
 800036a:	8013      	strh	r3, [r2, #0]

}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	20000002 	.word	0x20000002
 8000380:	20000000 	.word	0x20000000
 8000384:	20000046 	.word	0x20000046

08000388 <sawtth_wave>:

void sawtth_wave(void){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

	if(sawtooth == precision) sawtooth = 0;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <sawtth_wave+0x4c>)
 800038e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000392:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000396:	4293      	cmp	r3, r2
 8000398:	d102      	bne.n	80003a0 <sawtth_wave+0x18>
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <sawtth_wave+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	801a      	strh	r2, [r3, #0]
	sawtooth += step;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <sawtth_wave+0x4c>)
 80003a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <sawtth_wave+0x50>)
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	4413      	add	r3, r2
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	b21a      	sxth	r2, r3
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <sawtth_wave+0x4c>)
 80003b4:	801a      	strh	r2, [r3, #0]
	if ( sawtooth > precision){
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <sawtth_wave+0x4c>)
 80003b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80003c0:	db03      	blt.n	80003ca <sawtth_wave+0x42>
		sawtooth = precision;
 80003c2:	4b04      	ldr	r3, [pc, #16]	@ (80003d4 <sawtth_wave+0x4c>)
 80003c4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80003c8:	801a      	strh	r2, [r3, #0]
	 }

}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	20000048 	.word	0x20000048
 80003d8:	20000000 	.word	0x20000000

080003dc <sine_wave>:

void sine_wave(void){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	angle += rad_step;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000454 <sine_wave+0x78>)
 80003e2:	ed93 7a00 	vldr	s14, [r3]
 80003e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000458 <sine_wave+0x7c>)
 80003e8:	edd3 7a00 	vldr	s15, [r3]
 80003ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003f0:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <sine_wave+0x78>)
 80003f2:	edc3 7a00 	vstr	s15, [r3]
	if (angle > PI) angle = 0;
 80003f6:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <sine_wave+0x78>)
 80003f8:	edd3 7a00 	vldr	s15, [r3]
 80003fc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800045c <sine_wave+0x80>
 8000400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000408:	dd03      	ble.n	8000412 <sine_wave+0x36>
 800040a:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <sine_wave+0x78>)
 800040c:	f04f 0200 	mov.w	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	Asinx = (int)(precision * arm_sin_f32(angle));
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <sine_wave+0x78>)
 8000414:	edd3 7a00 	vldr	s15, [r3]
 8000418:	eeb0 0a67 	vmov.f32	s0, s15
 800041c:	f001 feb6 	bl	800218c <arm_sin_f32>
 8000420:	eef0 7a40 	vmov.f32	s15, s0
 8000424:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000460 <sine_wave+0x84>
 8000428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800042c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000430:	ee17 3a90 	vmov	r3, s15
 8000434:	b21a      	sxth	r2, r3
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <sine_wave+0x88>)
 8000438:	801a      	strh	r2, [r3, #0]
	if (Asinx > precision) Asinx = precision;
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <sine_wave+0x88>)
 800043c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000444:	db03      	blt.n	800044e <sine_wave+0x72>
 8000446:	4b07      	ldr	r3, [pc, #28]	@ (8000464 <sine_wave+0x88>)
 8000448:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800044c:	801a      	strh	r2, [r3, #0]
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000004c 	.word	0x2000004c
 8000458:	20000004 	.word	0x20000004
 800045c:	40490fdb 	.word	0x40490fdb
 8000460:	457ff000 	.word	0x457ff000
 8000464:	20000050 	.word	0x20000050

08000468 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b096      	sub	sp, #88	@ 0x58
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2244      	movs	r2, #68	@ 0x44
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f001 fece 	bl	8002218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	463b      	mov	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800048a:	2000      	movs	r0, #0
 800048c:	f000 ff2e 	bl	80012ec <HAL_PWREx_ControlVoltageScaling>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000496:	f000 f8dd 	bl	8000654 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800049a:	2310      	movs	r3, #16
 800049c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800049e:	2301      	movs	r3, #1
 80004a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004a6:	2360      	movs	r3, #96	@ 0x60
 80004a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004ae:	2301      	movs	r3, #1
 80004b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80004b6:	233c      	movs	r3, #60	@ 0x3c
 80004b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004be:	2302      	movs	r3, #2
 80004c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 ffb2 	bl	8001434 <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004d6:	f000 f8bd 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	2303      	movs	r3, #3
 80004e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004ee:	463b      	mov	r3, r7
 80004f0:	2105      	movs	r1, #5
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fbb8 	bl	8001c68 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004fe:	f000 f8a9 	bl	8000654 <Error_Handler>
  }
}
 8000502:	bf00      	nop
 8000504:	3758      	adds	r7, #88	@ 0x58
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	@ 0x28
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000512:	463b      	mov	r3, r7
 8000514:	2228      	movs	r2, #40	@ 0x28
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f001 fe7d 	bl	8002218 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800051e:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <MX_DAC1_Init+0x78>)
 8000520:	4a19      	ldr	r2, [pc, #100]	@ (8000588 <MX_DAC1_Init+0x7c>)
 8000522:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000524:	4817      	ldr	r0, [pc, #92]	@ (8000584 <MX_DAC1_Init+0x78>)
 8000526:	f000 fb1a 	bl	8000b5e <HAL_DAC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000530:	f000 f890 	bl	8000654 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800053c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000540:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800054e:	463b      	mov	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	480b      	ldr	r0, [pc, #44]	@ (8000584 <MX_DAC1_Init+0x78>)
 8000556:	f000 fb9b 	bl	8000c90 <HAL_DAC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 f878 	bl	8000654 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	2210      	movs	r2, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	@ (8000584 <MX_DAC1_Init+0x78>)
 800056c:	f000 fb90 	bl	8000c90 <HAL_DAC_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000576:	f000 f86d 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3728      	adds	r7, #40	@ 0x28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000030 	.word	0x20000030
 8000588:	40007400 	.word	0x40007400

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	4a28      	ldr	r2, [pc, #160]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ae:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b23      	ldr	r3, [pc, #140]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	4a22      	ldr	r2, [pc, #136]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c6:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_GPIO_Init+0xbc>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f0:	4816      	ldr	r0, [pc, #88]	@ (800064c <MX_GPIO_Init+0xc0>)
 80005f2:	f000 fe2b 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	@ (8000650 <MX_GPIO_Init+0xc4>)
 800060e:	f000 fc8b 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000612:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	4808      	ldr	r0, [pc, #32]	@ (800064c <MX_GPIO_Init+0xc0>)
 800062c:	f000 fc7c 	bl	8000f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2028      	movs	r0, #40	@ 0x28
 8000636:	f000 fa5c 	bl	8000af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800063a:	2028      	movs	r0, #40	@ 0x28
 800063c:	f000 fa75 	bl	8000b2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48000400 	.word	0x48000400
 8000650:	48000800 	.word	0x48000800

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <Error_Handler+0x8>

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <HAL_MspInit+0x44>)
 8000668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800066a:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <HAL_MspInit+0x44>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6613      	str	r3, [r2, #96]	@ 0x60
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <HAL_MspInit+0x44>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <HAL_MspInit+0x44>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000682:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <HAL_MspInit+0x44>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000688:	6593      	str	r3, [r2, #88]	@ 0x58
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_MspInit+0x44>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800068e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a15      	ldr	r2, [pc, #84]	@ (800071c <HAL_DAC_MspInit+0x74>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d124      	bne.n	8000714 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <HAL_DAC_MspInit+0x78>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ce:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <HAL_DAC_MspInit+0x78>)
 80006d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80006d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_DAC_MspInit+0x78>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <HAL_DAC_MspInit+0x78>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000720 <HAL_DAC_MspInit+0x78>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <HAL_DAC_MspInit+0x78>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006fa:	2330      	movs	r3, #48	@ 0x30
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	2303      	movs	r3, #3
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000710:	f000 fc0a 	bl	8000f28 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	@ 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40007400 	.word	0x40007400
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <NMI_Handler+0x4>

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <MemManage_Handler+0x4>

0800073c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <UsageFault_Handler+0x4>

0800074c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f89b 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}

08000782 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000786:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800078a:	f000 fd77 	bl	800127c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <SystemInit+0x20>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800079e:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <SystemInit+0x20>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007bc:	f7ff ffea 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	@ (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e6:	f001 fd1f 	bl	8002228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ea:	f7ff fd2b 	bl	8000244 <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80007fc:	08002ad4 	.word	0x08002ad4
  ldr r2, =_sbss
 8000800:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000804:	20000058 	.word	0x20000058

08000808 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_IRQHandler>

0800080a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000810:	2300      	movs	r3, #0
 8000812:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f961 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f80e 	bl	800083c <HAL_InitTick>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	e001      	b.n	8000830 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800082c:	f7ff ff18 	bl	8000660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000830:	79fb      	ldrb	r3, [r7, #7]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000844:	2300      	movs	r3, #0
 8000846:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <HAL_InitTick+0x6c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d023      	beq.n	8000898 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_InitTick+0x70>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_InitTick+0x6c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f96d 	bl	8000b46 <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10f      	bne.n	8000892 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d809      	bhi.n	800088c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f937 	bl	8000af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <HAL_InitTick+0x74>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e007      	b.n	800089c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e004      	b.n	800089c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	e001      	b.n	800089c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000010 	.word	0x20000010
 80008ac:	20000008 	.word	0x20000008
 80008b0:	2000000c 	.word	0x2000000c

080008b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_IncTick+0x20>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_IncTick+0x24>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_IncTick+0x24>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000010 	.word	0x20000010
 80008d8:	20000054 	.word	0x20000054

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <HAL_GetTick+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000054 	.word	0x20000054

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff ffee 	bl	80008dc <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800091a:	bf00      	nop
 800091c:	f7ff ffde 	bl	80008dc <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000010 	.word	0x20000010

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4907      	ldr	r1, [pc, #28]	@ (80009d8 <__NVIC_EnableIRQ+0x38>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	@ (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	@ (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	@ 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	@ 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f7ff ff8e 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	@ (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff29 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff3e 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff8e 	bl	8000a30 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5d 	bl	80009dc <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff31 	bl	80009a0 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa2 	bl	8000a98 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e014      	b.n	8000b9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d105      	bne.n	8000b86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fd91 	bl	80006a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2202      	movs	r2, #2
 8000b8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	795b      	ldrb	r3, [r3, #5]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <HAL_DAC_Start+0x16>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e040      	b.n	8000c3a <HAL_DAC_Start+0x98>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6819      	ldr	r1, [r3, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10f      	bne.n	8000c02 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d11d      	bne.n	8000c2c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f042 0201 	orr.w	r2, r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	e014      	b.n	8000c2c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	2102      	movs	r1, #2
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d107      	bne.n	8000c2c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0202 	orr.w	r2, r2, #2
 8000c2a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b087      	sub	sp, #28
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d105      	bne.n	8000c70 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	e004      	b.n	8000c7a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	3314      	adds	r3, #20
 8000c78:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	795b      	ldrb	r3, [r3, #5]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d101      	bne.n	8000cac <HAL_DAC_ConfigChannel+0x1c>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e137      	b.n	8000f1c <HAL_DAC_ConfigChannel+0x28c>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	f040 8081 	bne.w	8000dc4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000cc2:	f7ff fe0b 	bl	80008dc <HAL_GetTick>
 8000cc6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d140      	bne.n	8000d50 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000cce:	e018      	b.n	8000d02 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000cd0:	f7ff fe04 	bl	80008dc <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d911      	bls.n	8000d02 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00a      	beq.n	8000d02 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	f043 0208 	orr.w	r2, r3, #8
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e10c      	b.n	8000f1c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1df      	bne.n	8000cd0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fdef 	bl	80008f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	69d2      	ldr	r2, [r2, #28]
 8000d1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d20:	e023      	b.n	8000d6a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000d22:	f7ff fddb 	bl	80008dc <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d90f      	bls.n	8000d50 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da0a      	bge.n	8000d50 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	f043 0208 	orr.w	r2, r3, #8
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2203      	movs	r2, #3
 8000d4a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e0e5      	b.n	8000f1c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	dbe3      	blt.n	8000d22 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff fdca 	bl	80008f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	69d2      	ldr	r2, [r2, #28]
 8000d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	ea02 0103 	and.w	r1, r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	6a1a      	ldr	r2, [r3, #32]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	21ff      	movs	r1, #255	@ 0xff
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	ea02 0103 	and.w	r1, r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d11d      	bne.n	8000e08 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dd2:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	221f      	movs	r2, #31
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e0e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	2207      	movs	r2, #7
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43da      	mvns	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000eac:	d104      	bne.n	8000eb8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e018      	b.n	8000eea <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	e00f      	b.n	8000eea <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000eca:	f001 f893 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8000ece:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <HAL_DAC_ConfigChannel+0x294>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d904      	bls.n	8000ee2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	e003      	b.n	8000eea <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ee8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	22c0      	movs	r2, #192	@ 0xc0
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43da      	mvns	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2201      	movs	r2, #1
 8000f12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2200      	movs	r2, #0
 8000f18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	04c4b400 	.word	0x04c4b400

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e166      	b.n	8001206 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8158 	beq.w	8001200 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d017      	beq.n	8001006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d123      	bne.n	800105a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	6939      	ldr	r1, [r7, #16]
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0203 	and.w	r2, r3, #3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80b2 	beq.w	8001200 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109c:	4b61      	ldr	r3, [pc, #388]	@ (8001224 <HAL_GPIO_Init+0x2fc>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a0:	4a60      	ldr	r2, [pc, #384]	@ (8001224 <HAL_GPIO_Init+0x2fc>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001224 <HAL_GPIO_Init+0x2fc>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010b4:	4a5c      	ldr	r2, [pc, #368]	@ (8001228 <HAL_GPIO_Init+0x300>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010de:	d02b      	beq.n	8001138 <HAL_GPIO_Init+0x210>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a52      	ldr	r2, [pc, #328]	@ (800122c <HAL_GPIO_Init+0x304>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d025      	beq.n	8001134 <HAL_GPIO_Init+0x20c>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a51      	ldr	r2, [pc, #324]	@ (8001230 <HAL_GPIO_Init+0x308>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d01f      	beq.n	8001130 <HAL_GPIO_Init+0x208>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a50      	ldr	r2, [pc, #320]	@ (8001234 <HAL_GPIO_Init+0x30c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d019      	beq.n	800112c <HAL_GPIO_Init+0x204>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001238 <HAL_GPIO_Init+0x310>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x200>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4e      	ldr	r2, [pc, #312]	@ (800123c <HAL_GPIO_Init+0x314>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1fc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4d      	ldr	r2, [pc, #308]	@ (8001240 <HAL_GPIO_Init+0x318>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1f8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4c      	ldr	r2, [pc, #304]	@ (8001244 <HAL_GPIO_Init+0x31c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1f4>
 8001118:	2307      	movs	r3, #7
 800111a:	e00e      	b.n	800113a <HAL_GPIO_Init+0x212>
 800111c:	2308      	movs	r3, #8
 800111e:	e00c      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001120:	2306      	movs	r3, #6
 8001122:	e00a      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001124:	2305      	movs	r3, #5
 8001126:	e008      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001128:	2304      	movs	r3, #4
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x212>
 800112c:	2303      	movs	r3, #3
 800112e:	e004      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001130:	2302      	movs	r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001138:	2300      	movs	r3, #0
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800114a:	4937      	ldr	r1, [pc, #220]	@ (8001228 <HAL_GPIO_Init+0x300>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001158:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <HAL_GPIO_Init+0x320>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117c:	4a32      	ldr	r2, [pc, #200]	@ (8001248 <HAL_GPIO_Init+0x320>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <HAL_GPIO_Init+0x320>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a6:	4a28      	ldr	r2, [pc, #160]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fa:	4a13      	ldr	r2, [pc, #76]	@ (8001248 <HAL_GPIO_Init+0x320>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	f47f ae91 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800
 8001234:	48000c00 	.word	0x48000c00
 8001238:	48001000 	.word	0x48001000
 800123c:	48001400 	.word	0x48001400
 8001240:	48001800 	.word	0x48001800
 8001244:	48001c00 	.word	0x48001c00
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001268:	e002      	b.n	8001270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f7fe ffae 	bl	80001fc <HAL_GPIO_EXTI_Callback>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012bc:	d102      	bne.n	80012c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80012be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c2:	e00b      	b.n	80012dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012d2:	d102      	bne.n	80012da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80012d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012d8:	e000      	b.n	80012dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80012da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40007000 	.word	0x40007000

080012ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d141      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001306:	d131      	bne.n	800136c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001308:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800130e:	4a46      	ldr	r2, [pc, #280]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001318:	4b43      	ldr	r3, [pc, #268]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001320:	4a41      	ldr	r2, [pc, #260]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001328:	4b40      	ldr	r3, [pc, #256]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2232      	movs	r2, #50	@ 0x32
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	4a3f      	ldr	r2, [pc, #252]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	0c9b      	lsrs	r3, r3, #18
 800133a:	3301      	adds	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800133e:	e002      	b.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3b01      	subs	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001346:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001352:	d102      	bne.n	800135a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f2      	bne.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800135a:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001366:	d158      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e057      	b.n	800141c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800136c:	4b2e      	ldr	r3, [pc, #184]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001372:	4a2d      	ldr	r2, [pc, #180]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800137c:	e04d      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001384:	d141      	bne.n	800140a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001386:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800138e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001392:	d131      	bne.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139a:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2232      	movs	r2, #50	@ 0x32
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	4a1c      	ldr	r2, [pc, #112]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	3301      	adds	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ca:	e002      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013de:	d102      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f2      	bne.n	80013cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f2:	d112      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e011      	b.n	800141c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001408:	e007      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001418:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40007000 	.word	0x40007000
 800142c:	20000008 	.word	0x20000008
 8001430:	431bde83 	.word	0x431bde83

08001434 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	f000 bc08 	b.w	8001c58 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001448:	4b96      	ldr	r3, [pc, #600]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001452:	4b94      	ldr	r3, [pc, #592]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80e4 	beq.w	8001632 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_RCC_OscConfig+0x4c>
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	f040 808b 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	f040 8087 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001480:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x64>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e3df      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_RCC_OscConfig+0x7e>
 80014a8:	4b7e      	ldr	r3, [pc, #504]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b0:	e005      	b.n	80014be <HAL_RCC_OscConfig+0x8a>
 80014b2:	4b7c      	ldr	r3, [pc, #496]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014be:	4293      	cmp	r3, r2
 80014c0:	d223      	bcs.n	800150a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fda0 	bl	800200c <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e3c0      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d6:	4b73      	ldr	r3, [pc, #460]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a72      	ldr	r2, [pc, #456]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b70      	ldr	r3, [pc, #448]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	496d      	ldr	r1, [pc, #436]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4b6b      	ldr	r3, [pc, #428]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4968      	ldr	r1, [pc, #416]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e025      	b.n	8001556 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150a:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b63      	ldr	r3, [pc, #396]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4960      	ldr	r1, [pc, #384]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001528:	4b5e      	ldr	r3, [pc, #376]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	495b      	ldr	r1, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fd60 	bl	800200c <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e380      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001556:	f000 fcc1 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b51      	ldr	r3, [pc, #324]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4950      	ldr	r1, [pc, #320]	@ (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a4e      	ldr	r2, [pc, #312]	@ (80016ac <HAL_RCC_OscConfig+0x278>)
 8001574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001576:	4b4e      	ldr	r3, [pc, #312]	@ (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f95e 	bl	800083c <HAL_InitTick>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d052      	beq.n	8001630 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	e364      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d032      	beq.n	80015fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001596:	4b43      	ldr	r3, [pc, #268]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a42      	ldr	r2, [pc, #264]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a2:	f7ff f99b 	bl	80008dc <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015aa:	f7ff f997 	bl	80008dc <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e34d      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015bc:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b36      	ldr	r3, [pc, #216]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a35      	ldr	r2, [pc, #212]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b33      	ldr	r3, [pc, #204]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4930      	ldr	r1, [pc, #192]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	492b      	ldr	r1, [pc, #172]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e01a      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a28      	ldr	r2, [pc, #160]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001608:	f7ff f968 	bl	80008dc <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001610:	f7ff f964 	bl	80008dc <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e31a      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1dc>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d073      	beq.n	8001726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x21c>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d10e      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d063      	beq.n	8001724 <HAL_RCC_OscConfig+0x2f0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d15f      	bne.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e2f7      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x24c>
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e025      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001688:	d114      	bne.n	80016b4 <HAL_RCC_OscConfig+0x280>
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a02      	ldr	r2, [pc, #8]	@ (80016a4 <HAL_RCC_OscConfig+0x270>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e013      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08002288 	.word	0x08002288
 80016ac:	20000008 	.word	0x20000008
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9f      	ldr	r2, [pc, #636]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a9c      	ldr	r2, [pc, #624]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff f902 	bl	80008dc <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff f8fe 	bl	80008dc <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	@ 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e2b4      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2a8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff f8ee 	bl	80008dc <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff f8ea 	bl	80008dc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	@ 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e2a0      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001716:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x310>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d119      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b7c      	ldr	r3, [pc, #496]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x328>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e27d      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4973      	ldr	r1, [pc, #460]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b6f      	ldr	r3, [pc, #444]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff f8a9 	bl	80008dc <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff f8a5 	bl	80008dc <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e25b      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b62      	ldr	r3, [pc, #392]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	495f      	ldr	r1, [pc, #380]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f885 	bl	80008dc <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff f881 	bl	80008dc <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e237      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4b      	ldr	r3, [pc, #300]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180e:	4a4a      	ldr	r2, [pc, #296]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f860 	bl	80008dc <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff f85c 	bl	80008dc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e212      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x3ec>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001848:	4a3b      	ldr	r2, [pc, #236]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff f843 	bl	80008dc <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff f83f 	bl	80008dc <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1f5      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	4a26      	ldr	r2, [pc, #152]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	4b21      	ldr	r3, [pc, #132]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7ff f806 	bl	80008dc <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff f802 	bl	80008dc <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1b8      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190a:	e029      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192a:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	4b9d      	ldr	r3, [pc, #628]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001946:	4a9c      	ldr	r2, [pc, #624]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001950:	4b99      	ldr	r3, [pc, #612]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001956:	4a98      	ldr	r2, [pc, #608]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7fe ffb8 	bl	80008dc <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7fe ffb4 	bl	80008dc <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e168      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b8c      	ldr	r3, [pc, #560]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ed      	beq.n	8001970 <HAL_RCC_OscConfig+0x53c>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7fe ffa1 	bl	80008dc <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7fe ff9d 	bl	80008dc <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e151      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	4b80      	ldr	r3, [pc, #512]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ed      	bne.n	800199e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b7b      	ldr	r3, [pc, #492]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	4a7a      	ldr	r2, [pc, #488]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d03c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019e8:	4b73      	ldr	r3, [pc, #460]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ee:	4a72      	ldr	r2, [pc, #456]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7fe ff70 	bl	80008dc <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a00:	f7fe ff6c 	bl	80008dc <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e122      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a12:	4b69      	ldr	r3, [pc, #420]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ef      	beq.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
 8001a20:	e01b      	b.n	8001a5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a22:	4b65      	ldr	r3, [pc, #404]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a28:	4a63      	ldr	r2, [pc, #396]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7fe ff53 	bl	80008dc <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3a:	f7fe ff4f 	bl	80008dc <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e105      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ef      	bne.n	8001a3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80f9 	beq.w	8001c56 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 80cf 	bne.w	8001c0c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a6e:	4b52      	ldr	r3, [pc, #328]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d12c      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d123      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11b      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d113      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d109      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d071      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d068      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ae2:	4b35      	ldr	r3, [pc, #212]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001aee:	4b32      	ldr	r3, [pc, #200]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0ac      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001afe:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b0a:	f7fe fee7 	bl	80008dc <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7fe fee3 	bl	80008dc <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e099      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b24:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b30:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	4b21      	ldr	r3, [pc, #132]	@ (8001bbc <HAL_RCC_OscConfig+0x788>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b40:	3a01      	subs	r2, #1
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	4311      	orrs	r1, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b4a:	0212      	lsls	r2, r2, #8
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b52:	0852      	lsrs	r2, r2, #1
 8001b54:	3a01      	subs	r2, #1
 8001b56:	0552      	lsls	r2, r2, #21
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b5e:	0852      	lsrs	r2, r2, #1
 8001b60:	3a01      	subs	r2, #1
 8001b62:	0652      	lsls	r2, r2, #25
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b6a:	06d2      	lsls	r2, r2, #27
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	4912      	ldr	r1, [pc, #72]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b74:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b8c:	f7fe fea6 	bl	80008dc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe fea2 	bl	80008dc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e058      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <HAL_RCC_OscConfig+0x784>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb2:	e050      	b.n	8001c56 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e04f      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc0:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d144      	bne.n	8001c56 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bcc:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a23      	ldr	r2, [pc, #140]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd8:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a20      	ldr	r2, [pc, #128]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001be4:	f7fe fe7a 	bl	80008dc <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7fe fe76 	bl	80008dc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e02c      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x7b8>
 8001c0a:	e024      	b.n	8001c56 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d01f      	beq.n	8001c52 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001c18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7fe fe5d 	bl	80008dc <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7fe fe59 	bl	80008dc <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e00f      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f0      	bne.n	8001c26 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	4905      	ldr	r1, [pc, #20]	@ (8001c60 <HAL_RCC_OscConfig+0x82c>)
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_RCC_OscConfig+0x830>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
 8001c50:	e001      	b.n	8001c56 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	feeefffc 	.word	0xfeeefffc

08001c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e11d      	b.n	8001ebc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b90      	ldr	r3, [pc, #576]	@ (8001ec4 <HAL_RCC_ClockConfig+0x25c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d910      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b8d      	ldr	r3, [pc, #564]	@ (8001ec4 <HAL_RCC_ClockConfig+0x25c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 020f 	bic.w	r2, r3, #15
 8001c96:	498b      	ldr	r1, [pc, #556]	@ (8001ec4 <HAL_RCC_ClockConfig+0x25c>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b89      	ldr	r3, [pc, #548]	@ (8001ec4 <HAL_RCC_ClockConfig+0x25c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e105      	b.n	8001ebc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d010      	beq.n	8001cde <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	4b81      	ldr	r3, [pc, #516]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d908      	bls.n	8001cde <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	497b      	ldr	r1, [pc, #492]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d079      	beq.n	8001dde <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d11e      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b75      	ldr	r3, [pc, #468]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0dc      	b.n	8001ebc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d02:	f000 f9dd 	bl	80020c0 <RCC_GetSysClockFreqFromPLLSource>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a70      	ldr	r2, [pc, #448]	@ (8001ecc <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d946      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d140      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d22:	4a69      	ldr	r2, [pc, #420]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e035      	b.n	8001d9c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d38:	4b63      	ldr	r3, [pc, #396]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d115      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b9      	b.n	8001ebc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d50:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0ad      	b.n	8001ebc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d60:	4b59      	ldr	r3, [pc, #356]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0a5      	b.n	8001ebc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001d70:	f000 f8b4 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a55      	ldr	r2, [pc, #340]	@ (8001ecc <HAL_RCC_ClockConfig+0x264>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d90f      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d7c:	4b52      	ldr	r3, [pc, #328]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d88:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d90:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d96:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 0203 	bic.w	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4947      	ldr	r1, [pc, #284]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dae:	f7fe fd95 	bl	80008dc <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db6:	f7fe fd91 	bl	80008dc <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e077      	b.n	8001ebc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 020c 	and.w	r2, r3, #12
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d1eb      	bne.n	8001db6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b80      	cmp	r3, #128	@ 0x80
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001de4:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a37      	ldr	r2, [pc, #220]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d010      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	4b31      	ldr	r3, [pc, #196]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d208      	bcs.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	492b      	ldr	r1, [pc, #172]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d210      	bcs.n	8001e4e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <HAL_RCC_ClockConfig+0x25c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 020f 	bic.w	r2, r3, #15
 8001e34:	4923      	ldr	r1, [pc, #140]	@ (8001ec4 <HAL_RCC_ClockConfig+0x25c>)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <HAL_RCC_ClockConfig+0x25c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e036      	b.n	8001ebc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	4918      	ldr	r1, [pc, #96]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e78:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4910      	ldr	r1, [pc, #64]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e8c:	f000 f826 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	490c      	ldr	r1, [pc, #48]	@ (8001ed0 <HAL_RCC_ClockConfig+0x268>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <HAL_RCC_ClockConfig+0x26c>)
 8001eaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_RCC_ClockConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fcc3 	bl	800083c <HAL_InitTick>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	73fb      	strb	r3, [r7, #15]

  return status;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	04c4b400 	.word	0x04c4b400
 8001ed0:	08002288 	.word	0x08002288
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	2000000c 	.word	0x2000000c

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	@ 0x24
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eea:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x34>
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d121      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d11e      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f10:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f1c:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e005      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f38:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10d      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d102      	bne.n	8001f5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f54:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x110>)
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	e004      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f60:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d134      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d003      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0xac>
 8001f80:	e005      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x110>)
 8001f84:	617b      	str	r3, [r7, #20]
      break;
 8001f86:	e005      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f8a:	617b      	str	r3, [r7, #20]
      break;
 8001f8c:	e002      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	617b      	str	r3, [r7, #20]
      break;
 8001f92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	fb03 f202 	mul.w	r2, r3, r2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	0e5b      	lsrs	r3, r3, #25
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08002298 	.word	0x08002298
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	007a1200 	.word	0x007a1200

08001ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000008 	.word	0x20000008

0800200c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002018:	4b27      	ldr	r3, [pc, #156]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002024:	f7ff f942 	bl	80012ac <HAL_PWREx_GetVoltageRange>
 8002028:	6178      	str	r0, [r7, #20]
 800202a:	e014      	b.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	4a21      	ldr	r2, [pc, #132]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002036:	6593      	str	r3, [r2, #88]	@ 0x58
 8002038:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002044:	f7ff f932 	bl	80012ac <HAL_PWREx_GetVoltageRange>
 8002048:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204e:	4a1a      	ldr	r2, [pc, #104]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002054:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800205c:	d10b      	bne.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b80      	cmp	r3, #128	@ 0x80
 8002062:	d913      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2ba0      	cmp	r3, #160	@ 0xa0
 8002068:	d902      	bls.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800206a:	2302      	movs	r3, #2
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e00d      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b7f      	cmp	r3, #127	@ 0x7f
 800207a:	d902      	bls.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b70      	cmp	r3, #112	@ 0x70
 8002086:	d101      	bne.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 020f 	bic.w	r2, r3, #15
 8002094:	4909      	ldr	r1, [pc, #36]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40022000 	.word	0x40022000

080020c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d00b      	beq.n	80020ee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d825      	bhi.n	8002128 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d008      	beq.n	80020f4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d11f      	bne.n	8002128 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80020ea:	613b      	str	r3, [r7, #16]
    break;
 80020ec:	e01f      	b.n	800212e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80020ee:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80020f0:	613b      	str	r3, [r7, #16]
    break;
 80020f2:	e01c      	b.n	800212e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f4:	4b21      	ldr	r3, [pc, #132]	@ (800217c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002100:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e005      	b.n	800211c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002110:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800211c:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	613b      	str	r3, [r7, #16]
    break;
 8002126:	e002      	b.n	800212e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
    break;
 800212c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800212e:	4b13      	ldr	r3, [pc, #76]	@ (800217c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	3301      	adds	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	fb03 f202 	mul.w	r2, r3, r2
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0e5b      	lsrs	r3, r3, #25
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	3301      	adds	r3, #1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	fbb2 f3f3 	udiv	r3, r2, r3
 800216c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800216e:	683b      	ldr	r3, [r7, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40021000 	.word	0x40021000
 8002180:	00f42400 	.word	0x00f42400
 8002184:	007a1200 	.word	0x007a1200
 8002188:	08002298 	.word	0x08002298

0800218c <arm_sin_f32>:
 800218c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800220c <arm_sin_f32+0x80>
 8002190:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002194:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80021a0:	d504      	bpl.n	80021ac <arm_sin_f32+0x20>
 80021a2:	ee17 3a90 	vmov	r3, s15
 80021a6:	3b01      	subs	r3, #1
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002210 <arm_sin_f32+0x84>
 80021b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80021b8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80021bc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80021c0:	ee17 3a90 	vmov	r3, s15
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ca:	d21a      	bcs.n	8002202 <arm_sin_f32+0x76>
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d4:	1c59      	adds	r1, r3, #1
 80021d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80021da:	4a0e      	ldr	r2, [pc, #56]	@ (8002214 <arm_sin_f32+0x88>)
 80021dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80021e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80021e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80021e8:	ed93 7a00 	vldr	s14, [r3]
 80021ec:	edd2 6a00 	vldr	s13, [r2]
 80021f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80021f4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80021f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002200:	4770      	bx	lr
 8002202:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002206:	2101      	movs	r1, #1
 8002208:	2300      	movs	r3, #0
 800220a:	e7e6      	b.n	80021da <arm_sin_f32+0x4e>
 800220c:	3e22f983 	.word	0x3e22f983
 8002210:	44000000 	.word	0x44000000
 8002214:	080022c8 	.word	0x080022c8

08002218 <memset>:
 8002218:	4402      	add	r2, r0
 800221a:	4603      	mov	r3, r0
 800221c:	4293      	cmp	r3, r2
 800221e:	d100      	bne.n	8002222 <memset+0xa>
 8002220:	4770      	bx	lr
 8002222:	f803 1b01 	strb.w	r1, [r3], #1
 8002226:	e7f9      	b.n	800221c <memset+0x4>

08002228 <__libc_init_array>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	4d0d      	ldr	r5, [pc, #52]	@ (8002260 <__libc_init_array+0x38>)
 800222c:	4c0d      	ldr	r4, [pc, #52]	@ (8002264 <__libc_init_array+0x3c>)
 800222e:	1b64      	subs	r4, r4, r5
 8002230:	10a4      	asrs	r4, r4, #2
 8002232:	2600      	movs	r6, #0
 8002234:	42a6      	cmp	r6, r4
 8002236:	d109      	bne.n	800224c <__libc_init_array+0x24>
 8002238:	4d0b      	ldr	r5, [pc, #44]	@ (8002268 <__libc_init_array+0x40>)
 800223a:	4c0c      	ldr	r4, [pc, #48]	@ (800226c <__libc_init_array+0x44>)
 800223c:	f000 f818 	bl	8002270 <_init>
 8002240:	1b64      	subs	r4, r4, r5
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	2600      	movs	r6, #0
 8002246:	42a6      	cmp	r6, r4
 8002248:	d105      	bne.n	8002256 <__libc_init_array+0x2e>
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002250:	4798      	blx	r3
 8002252:	3601      	adds	r6, #1
 8002254:	e7ee      	b.n	8002234 <__libc_init_array+0xc>
 8002256:	f855 3b04 	ldr.w	r3, [r5], #4
 800225a:	4798      	blx	r3
 800225c:	3601      	adds	r6, #1
 800225e:	e7f2      	b.n	8002246 <__libc_init_array+0x1e>
 8002260:	08002acc 	.word	0x08002acc
 8002264:	08002acc 	.word	0x08002acc
 8002268:	08002acc 	.word	0x08002acc
 800226c:	08002ad0 	.word	0x08002ad0

08002270 <_init>:
 8002270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002272:	bf00      	nop
 8002274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002276:	bc08      	pop	{r3}
 8002278:	469e      	mov	lr, r3
 800227a:	4770      	bx	lr

0800227c <_fini>:
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	bf00      	nop
 8002280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002282:	bc08      	pop	{r3}
 8002284:	469e      	mov	lr, r3
 8002286:	4770      	bx	lr
