
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5b4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800a778  0800a778  0000b778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac80  0800ac80  0000c258  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac80  0800ac80  0000bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac88  0800ac88  0000c258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac88  0800ac88  0000bc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac8c  0800ac8c  0000bc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800ac90  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000258  0800aee8  0000c258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800aee8  0000c57c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f0b  00000000  00000000  0000c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003035  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  000231c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdd  00000000  00000000  000242a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cab1  00000000  00000000  00024f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167b2  00000000  00000000  00051a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001090c2  00000000  00000000  000681e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001712aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005874  00000000  00000000  001712f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00176b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000258 	.word	0x20000258
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a75c 	.word	0x0800a75c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000025c 	.word	0x2000025c
 80001fc:	0800a75c 	.word	0x0800a75c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f001 fa11 	bl	8002440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 f847 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 f917 	bl	8001254 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001026:	f000 f889 	bl	800113c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800102a:	f000 f8c7 	bl	80011bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t s1 = BSP_TSENSOR_Init();
 800102e:	f000 fc27 	bl	8001880 <BSP_TSENSOR_Init>
 8001032:	60f8      	str	r0, [r7, #12]
  if(s1 != TSENSOR_OK)Error_Handler();
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <main+0x2a>
 800103a:	f000 fa03 	bl	8001444 <Error_Handler>

  ACCELERO_StatusTypeDef s2 = BSP_ACCELERO_Init();
 800103e:	f000 fb57 	bl	80016f0 <BSP_ACCELERO_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	72fb      	strb	r3, [r7, #11]
  if(s2 != ACCELERO_OK)Error_Handler();
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <main+0x3c>
 800104c:	f000 f9fa 	bl	8001444 <Error_Handler>

  MAGNETO_StatusTypeDef s3 = BSP_MAGNETO_Init();
 8001050:	f000 fba4 	bl	800179c <BSP_MAGNETO_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	72bb      	strb	r3, [r7, #10]
  if(s3 != MAGNETO_OK)Error_Handler();
 8001058:	7abb      	ldrb	r3, [r7, #10]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <main+0x4e>
 800105e:	f000 f9f1 	bl	8001444 <Error_Handler>


  uint32_t s4 = BSP_PSENSOR_Init();
 8001062:	f000 fbdf 	bl	8001824 <BSP_PSENSOR_Init>
 8001066:	6078      	str	r0, [r7, #4]
  if(s4 != PSENSOR_OK)Error_Handler();
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <main+0x5e>
 800106e:	f000 f9e9 	bl	8001444 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (currentSensor) {
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <main+0x98>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b03      	cmp	r3, #3
 8001078:	d8fb      	bhi.n	8001072 <main+0x5e>
 800107a:	a201      	add	r2, pc, #4	@ (adr r2, 8001080 <main+0x6c>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	08001091 	.word	0x08001091
 8001084:	08001097 	.word	0x08001097
 8001088:	0800109d 	.word	0x0800109d
 800108c:	080010a3 	.word	0x080010a3
	  		  case 0:
	  			  showTemp();
 8001090:	f000 f93c 	bl	800130c <showTemp>
	  			  break;
 8001094:	e009      	b.n	80010aa <main+0x96>
	  		  case 1:
	  			  showPressure();
 8001096:	f000 f95f 	bl	8001358 <showPressure>
	  			  break;
 800109a:	e006      	b.n	80010aa <main+0x96>
	  		  case 2:
	  			  showMagneto();
 800109c:	f000 f982 	bl	80013a4 <showMagneto>
	  			  break;
 80010a0:	e003      	b.n	80010aa <main+0x96>
	  		  case 3:
	  			  showAcc();
 80010a2:	f000 f9a7 	bl	80013f4 <showAcc>
	  			  break;
 80010a6:	bf00      	nop
 80010a8:	e7e3      	b.n	8001072 <main+0x5e>
	  switch (currentSensor) {
 80010aa:	e7e2      	b.n	8001072 <main+0x5e>
 80010ac:	2000035c 	.word	0x2000035c

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	@ 0x58
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2244      	movs	r2, #68	@ 0x44
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 ff73 	bl	8006faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010d6:	f002 fc47 	bl	8003968 <HAL_PWREx_ControlVoltageScaling>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e0:	f000 f9b0 	bl	8001444 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010e4:	2310      	movs	r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f0:	2360      	movs	r3, #96	@ 0x60
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fcd7 	bl	8003ab0 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001108:	f000 f99c 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f003 f8dd 	bl	80042e4 <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001130:	f000 f988 	bl	8001444 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3758      	adds	r7, #88	@ 0x58
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001142:	4a1c      	ldr	r2, [pc, #112]	@ (80011b4 <MX_I2C2_Init+0x78>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001148:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <MX_I2C2_Init+0x7c>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001176:	480e      	ldr	r0, [pc, #56]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001178:	f001 fd84 	bl	8002c84 <HAL_I2C_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001182:	f000 f95f 	bl	8001444 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4809      	ldr	r0, [pc, #36]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800118a:	f002 fb35 	bl	80037f8 <HAL_I2CEx_ConfigAnalogFilter>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001194:	f000 f956 	bl	8001444 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800119c:	f002 fb77 	bl	800388e <HAL_I2CEx_ConfigDigitalFilter>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 f94d 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000274 	.word	0x20000274
 80011b4:	40005800 	.word	0x40005800
 80011b8:	00100d14 	.word	0x00100d14

080011bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011c2:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <MX_USART1_UART_Init+0x94>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011da:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f8:	4b14      	ldr	r3, [pc, #80]	@ (800124c <MX_USART1_UART_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <MX_USART1_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001204:	4811      	ldr	r0, [pc, #68]	@ (800124c <MX_USART1_UART_Init+0x90>)
 8001206:	f004 f843 	bl	8005290 <HAL_UART_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001210:	f000 f918 	bl	8001444 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	480d      	ldr	r0, [pc, #52]	@ (800124c <MX_USART1_UART_Init+0x90>)
 8001218:	f004 fe6c 	bl	8005ef4 <HAL_UARTEx_SetTxFifoThreshold>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001222:	f000 f90f 	bl	8001444 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001226:	2100      	movs	r1, #0
 8001228:	4808      	ldr	r0, [pc, #32]	@ (800124c <MX_USART1_UART_Init+0x90>)
 800122a:	f004 fea1 	bl	8005f70 <HAL_UARTEx_SetRxFifoThreshold>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001234:	f000 f906 	bl	8001444 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_USART1_UART_Init+0x90>)
 800123a:	f004 fe22 	bl	8005e82 <HAL_UARTEx_DisableFifoMode>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001244:	f000 f8fe 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002c8 	.word	0x200002c8
 8001250:	40013800 	.word	0x40013800

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4b25      	ldr	r3, [pc, #148]	@ (8001300 <MX_GPIO_Init+0xac>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a24      	ldr	r2, [pc, #144]	@ (8001300 <MX_GPIO_Init+0xac>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <MX_GPIO_Init+0xac>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_GPIO_Init+0xac>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a1e      	ldr	r2, [pc, #120]	@ (8001300 <MX_GPIO_Init+0xac>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_GPIO_Init+0xac>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_GPIO_Init+0xac>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4a18      	ldr	r2, [pc, #96]	@ (8001300 <MX_GPIO_Init+0xac>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_GPIO_Init+0xac>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b8:	4812      	ldr	r0, [pc, #72]	@ (8001304 <MX_GPIO_Init+0xb0>)
 80012ba:	f001 fccb 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 80012be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <MX_GPIO_Init+0xb4>)
 80012d6:	f001 fa39 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80012da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_GPIO_Init+0xb0>)
 80012f4:	f001 fa2a 	bl	800274c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400
 8001308:	48000800 	.word	0x48000800

0800130c <showTemp>:

/* USER CODE BEGIN 4 */
void showTemp(){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	float temp = BSP_TSENSOR_ReadTemp();
 8001312:	f000 fad1 	bl	80018b8 <BSP_TSENSOR_ReadTemp>
 8001316:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(output, "Temperature: %.2f %%\r\n", temp);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff f92c 	bl	8000578 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4909      	ldr	r1, [pc, #36]	@ (800134c <showTemp+0x40>)
 8001326:	480a      	ldr	r0, [pc, #40]	@ (8001350 <showTemp+0x44>)
 8001328:	f005 fddc 	bl	8006ee4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), HAL_MAX_DELAY);
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <showTemp+0x44>)
 800132e:	f7fe ffb7 	bl	80002a0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	4905      	ldr	r1, [pc, #20]	@ (8001350 <showTemp+0x44>)
 800133c:	4805      	ldr	r0, [pc, #20]	@ (8001354 <showTemp+0x48>)
 800133e:	f003 fff7 	bl	8005330 <HAL_UART_Transmit>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0800a778 	.word	0x0800a778
 8001350:	20000360 	.word	0x20000360
 8001354:	200002c8 	.word	0x200002c8

08001358 <showPressure>:
void showPressure(){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
	float pressure = BSP_PSENSOR_ReadPressure();
 800135e:	f000 fa81 	bl	8001864 <BSP_PSENSOR_ReadPressure>
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(output, "Pressure: %.2f %%\r\n", pressure);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff f906 	bl	8000578 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4909      	ldr	r1, [pc, #36]	@ (8001398 <showPressure+0x40>)
 8001372:	480a      	ldr	r0, [pc, #40]	@ (800139c <showPressure+0x44>)
 8001374:	f005 fdb6 	bl	8006ee4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), HAL_MAX_DELAY);
 8001378:	4808      	ldr	r0, [pc, #32]	@ (800139c <showPressure+0x44>)
 800137a:	f7fe ff91 	bl	80002a0 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	4905      	ldr	r1, [pc, #20]	@ (800139c <showPressure+0x44>)
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <showPressure+0x48>)
 800138a:	f003 ffd1 	bl	8005330 <HAL_UART_Transmit>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0800a790 	.word	0x0800a790
 800139c:	20000360 	.word	0x20000360
 80013a0:	200002c8 	.word	0x200002c8

080013a4 <showMagneto>:
void showMagneto(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af02      	add	r7, sp, #8
	uint16_t mag[3];
	BSP_MAGNETO_GetXYZ(mag);
 80013aa:	463b      	mov	r3, r7
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fa21 	bl	80017f4 <BSP_MAGNETO_GetXYZ>
	sprintf(output, "Magnetometer: X=%d Y=%d Z=%d\r\n",mag[0], mag[1], mag[2]);
 80013b2:	883b      	ldrh	r3, [r7, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	4619      	mov	r1, r3
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	460b      	mov	r3, r1
 80013c0:	4909      	ldr	r1, [pc, #36]	@ (80013e8 <showMagneto+0x44>)
 80013c2:	480a      	ldr	r0, [pc, #40]	@ (80013ec <showMagneto+0x48>)
 80013c4:	f005 fd8e 	bl	8006ee4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), HAL_MAX_DELAY);
 80013c8:	4808      	ldr	r0, [pc, #32]	@ (80013ec <showMagneto+0x48>)
 80013ca:	f7fe ff69 	bl	80002a0 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	4905      	ldr	r1, [pc, #20]	@ (80013ec <showMagneto+0x48>)
 80013d8:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <showMagneto+0x4c>)
 80013da:	f003 ffa9 	bl	8005330 <HAL_UART_Transmit>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	0800a7a4 	.word	0x0800a7a4
 80013ec:	20000360 	.word	0x20000360
 80013f0:	200002c8 	.word	0x200002c8

080013f4 <showAcc>:
void showAcc(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af02      	add	r7, sp, #8
	uint16_t acc[3];
	BSP_ACCELERO_AccGetXYZ(acc);
 80013fa:	463b      	mov	r3, r7
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f9b5 	bl	800176c <BSP_ACCELERO_AccGetXYZ>
	sprintf(output, "Accelerator: X=%d Y=%d Z=%d\r\n",acc[0], acc[1], acc[2]);
 8001402:	883b      	ldrh	r3, [r7, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	4619      	mov	r1, r3
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	460b      	mov	r3, r1
 8001410:	4909      	ldr	r1, [pc, #36]	@ (8001438 <showAcc+0x44>)
 8001412:	480a      	ldr	r0, [pc, #40]	@ (800143c <showAcc+0x48>)
 8001414:	f005 fd66 	bl	8006ee4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), HAL_MAX_DELAY);
 8001418:	4808      	ldr	r0, [pc, #32]	@ (800143c <showAcc+0x48>)
 800141a:	f7fe ff41 	bl	80002a0 <strlen>
 800141e:	4603      	mov	r3, r0
 8001420:	b29a      	uxth	r2, r3
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4905      	ldr	r1, [pc, #20]	@ (800143c <showAcc+0x48>)
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <showAcc+0x4c>)
 800142a:	f003 ff81 	bl	8005330 <HAL_UART_Transmit>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	0800a7c4 	.word	0x0800a7c4
 800143c:	20000360 	.word	0x20000360
 8001440:	200002c8 	.word	0x200002c8

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <Error_Handler+0x8>

08001450 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001458:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	4a26      	ldr	r2, [pc, #152]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001470:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001474:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800147a:	2301      	movs	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001482:	2304      	movs	r3, #4
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	481b      	ldr	r0, [pc, #108]	@ (80014fc <I2Cx_MspInit+0xac>)
 800148e:	f001 f95d 	bl	800274c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4818      	ldr	r0, [pc, #96]	@ (80014fc <I2Cx_MspInit+0xac>)
 800149a:	f001 f957 	bl	800274c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 80014a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 80014b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ba:	4a0f      	ldr	r2, [pc, #60]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 80014bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014c0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <I2Cx_MspInit+0xa8>)
 80014c8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80014cc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	210f      	movs	r1, #15
 80014d2:	2021      	movs	r0, #33	@ 0x21
 80014d4:	f001 f903 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80014d8:	2021      	movs	r0, #33	@ 0x21
 80014da:	f001 f91c 	bl	8002716 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	210f      	movs	r1, #15
 80014e2:	2022      	movs	r0, #34	@ 0x22
 80014e4:	f001 f8fb 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80014e8:	2022      	movs	r0, #34	@ 0x22
 80014ea:	f001 f914 	bl	8002716 <HAL_NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	@ 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	48000400 	.word	0x48000400

08001500 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <I2Cx_Init+0x54>)
 800150c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a11      	ldr	r2, [pc, #68]	@ (8001558 <I2Cx_Init+0x58>)
 8001512:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff89 	bl	8001450 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f001 fba0 	bl	8002c84 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001544:	2100      	movs	r1, #0
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f002 f956 	bl	80037f8 <HAL_I2CEx_ConfigAnalogFilter>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40005800 	.word	0x40005800
 8001558:	00702681 	.word	0x00702681

0800155c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af04      	add	r7, sp, #16
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	4608      	mov	r0, r1
 8001566:	4611      	mov	r1, r2
 8001568:	461a      	mov	r2, r3
 800156a:	4603      	mov	r3, r0
 800156c:	72fb      	strb	r3, [r7, #11]
 800156e:	460b      	mov	r3, r1
 8001570:	813b      	strh	r3, [r7, #8]
 8001572:	4613      	mov	r3, r2
 8001574:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	b299      	uxth	r1, r3
 800157e:	88f8      	ldrh	r0, [r7, #6]
 8001580:	893a      	ldrh	r2, [r7, #8]
 8001582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4603      	mov	r3, r0
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f001 fd54 	bl	8003040 <HAL_I2C_Mem_Read>
 8001598:	4603      	mov	r3, r0
 800159a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	4619      	mov	r1, r3
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 f832 	bl	8001610 <I2Cx_Error>
  }
  return status;
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b08a      	sub	sp, #40	@ 0x28
 80015ba:	af04      	add	r7, sp, #16
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	4608      	mov	r0, r1
 80015c0:	4611      	mov	r1, r2
 80015c2:	461a      	mov	r2, r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	72fb      	strb	r3, [r7, #11]
 80015c8:	460b      	mov	r3, r1
 80015ca:	813b      	strh	r3, [r7, #8]
 80015cc:	4613      	mov	r3, r2
 80015ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	b299      	uxth	r1, r3
 80015d8:	88f8      	ldrh	r0, [r7, #6]
 80015da:	893a      	ldrh	r2, [r7, #8]
 80015dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	4603      	mov	r3, r0
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f001 fc13 	bl	8002e18 <HAL_I2C_Mem_Write>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	4619      	mov	r1, r3
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f805 	bl	8001610 <I2Cx_Error>
  }
  return status;
 8001606:	7dfb      	ldrb	r3, [r7, #23]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 fbcc 	bl	8002dba <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff6c 	bl	8001500 <I2Cx_Init>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <SENSOR_IO_Init+0x10>)
 8001636:	f7ff ff63 	bl	8001500 <I2Cx_Init>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200003c4 	.word	0x200003c4

08001644 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	460b      	mov	r3, r1
 8001650:	71bb      	strb	r3, [r7, #6]
 8001652:	4613      	mov	r3, r2
 8001654:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	b29a      	uxth	r2, r3
 800165a:	79f9      	ldrb	r1, [r7, #7]
 800165c:	2301      	movs	r3, #1
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	1d7b      	adds	r3, r7, #5
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	4803      	ldr	r0, [pc, #12]	@ (8001674 <SENSOR_IO_Write+0x30>)
 8001668:	f7ff ffa5 	bl	80015b6 <I2Cx_WriteMultiple>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200003c4 	.word	0x200003c4

08001678 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af02      	add	r7, sp, #8
 800167e:	4603      	mov	r3, r0
 8001680:	460a      	mov	r2, r1
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	4613      	mov	r3, r2
 8001686:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	b29a      	uxth	r2, r3
 8001690:	79f9      	ldrb	r1, [r7, #7]
 8001692:	2301      	movs	r3, #1
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	f107 030f 	add.w	r3, r7, #15
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <SENSOR_IO_Read+0x38>)
 80016a0:	f7ff ff5c 	bl	800155c <I2Cx_ReadMultiple>

  return read_value;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200003c4 	.word	0x200003c4

080016b4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	603a      	str	r2, [r7, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	460b      	mov	r3, r1
 80016c4:	71bb      	strb	r3, [r7, #6]
 80016c6:	4613      	mov	r3, r2
 80016c8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	79f9      	ldrb	r1, [r7, #7]
 80016d0:	88bb      	ldrh	r3, [r7, #4]
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	4804      	ldr	r0, [pc, #16]	@ (80016ec <SENSOR_IO_ReadMultiple+0x38>)
 80016dc:	f7ff ff3e 	bl	800155c <I2Cx_ReadMultiple>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200003c4 	.word	0x200003c4

080016f0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80016fa:	2300      	movs	r3, #0
 80016fc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <BSP_ACCELERO_Init+0x74>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	4798      	blx	r3
 8001704:	4603      	mov	r3, r0
 8001706:	2b6a      	cmp	r3, #106	@ 0x6a
 8001708:	d002      	beq.n	8001710 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	e024      	b.n	800175a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <BSP_ACCELERO_Init+0x78>)
 8001712:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <BSP_ACCELERO_Init+0x74>)
 8001714:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001716:	2330      	movs	r3, #48	@ 0x30
 8001718:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800171e:	2300      	movs	r3, #0
 8001720:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001722:	2340      	movs	r3, #64	@ 0x40
 8001724:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800172e:	797a      	ldrb	r2, [r7, #5]
 8001730:	7abb      	ldrb	r3, [r7, #10]
 8001732:	4313      	orrs	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001738:	7a3b      	ldrb	r3, [r7, #8]
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	b2db      	uxtb	r3, r3
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	b21b      	sxth	r3, r3
 800174c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <BSP_ACCELERO_Init+0x78>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	89ba      	ldrh	r2, [r7, #12]
 8001756:	4610      	mov	r0, r2
 8001758:	4798      	blx	r3
  }  

  return ret;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000054 	.word	0x20000054
 8001768:	20000418 	.word	0x20000418

0800176c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d009      	beq.n	8001790 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
    }
  }
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000418 	.word	0x20000418

0800179c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <BSP_MAGNETO_Init+0x50>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4798      	blx	r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b3d      	cmp	r3, #61	@ 0x3d
 80017b0:	d002      	beq.n	80017b8 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	e013      	b.n	80017e0 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <BSP_MAGNETO_Init+0x54>)
 80017ba:	4a0c      	ldr	r2, [pc, #48]	@ (80017ec <BSP_MAGNETO_Init+0x50>)
 80017bc:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80017be:	2358      	movs	r3, #88	@ 0x58
 80017c0:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80017c2:	2300      	movs	r3, #0
 80017c4:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80017ca:	2308      	movs	r3, #8
 80017cc:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80017ce:	2340      	movs	r3, #64	@ 0x40
 80017d0:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <BSP_MAGNETO_Init+0x54>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	463a      	mov	r2, r7
 80017da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017de:	4798      	blx	r3
  } 

  return ret;  
 80017e0:	79fb      	ldrb	r3, [r7, #7]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000014 	.word	0x20000014
 80017f0:	2000041c 	.word	0x2000041c

080017f4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <BSP_MAGNETO_GetXYZ+0x2c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
    }
  }
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000041c 	.word	0x2000041c

08001824 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <BSP_PSENSOR_Init+0x38>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	20ba      	movs	r0, #186	@ 0xba
 8001830:	4798      	blx	r3
 8001832:	4603      	mov	r3, r0
 8001834:	2bb1      	cmp	r3, #177	@ 0xb1
 8001836:	d002      	beq.n	800183e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	e009      	b.n	8001852 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <BSP_PSENSOR_Init+0x3c>)
 8001840:	4a06      	ldr	r2, [pc, #24]	@ (800185c <BSP_PSENSOR_Init+0x38>)
 8001842:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <BSP_PSENSOR_Init+0x3c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	20ba      	movs	r0, #186	@ 0xba
 800184c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000048 	.word	0x20000048
 8001860:	20000420 	.word	0x20000420

08001864 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <BSP_PSENSOR_ReadPressure+0x18>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	20ba      	movs	r0, #186	@ 0xba
 8001870:	4798      	blx	r3
 8001872:	eef0 7a40 	vmov.f32	s15, s0
}
 8001876:	eeb0 0a67 	vmov.f32	s0, s15
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000420 	.word	0x20000420

08001880 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <BSP_TSENSOR_Init+0x30>)
 800188c:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <BSP_TSENSOR_Init+0x34>)
 800188e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001890:	f7ff fece 	bl	8001630 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <BSP_TSENSOR_Init+0x30>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2100      	movs	r1, #0
 800189c:	20be      	movs	r0, #190	@ 0xbe
 800189e:	4798      	blx	r3

  ret = TSENSOR_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000424 	.word	0x20000424
 80018b4:	20000004 	.word	0x20000004

080018b8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <BSP_TSENSOR_ReadTemp+0x18>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	20be      	movs	r0, #190	@ 0xbe
 80018c4:	4798      	blx	r3
 80018c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000424 	.word	0x20000424

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_MspInit+0x44>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018de:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <HAL_MspInit+0x44>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_MspInit+0x44>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x44>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x44>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x44>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0ae      	sub	sp, #184	@ 0xb8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2294      	movs	r2, #148	@ 0x94
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f005 fb34 	bl	8006faa <memset>
  if(hi2c->Instance==I2C2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a21      	ldr	r2, [pc, #132]	@ (80019cc <HAL_I2C_MspInit+0xb0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d13b      	bne.n	80019c4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001950:	2300      	movs	r3, #0
 8001952:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4618      	mov	r0, r3
 800195a:	f002 ff81 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001964:	f7ff fd6e 	bl	8001444 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_I2C_MspInit+0xb4>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	4a18      	ldr	r2, [pc, #96]	@ (80019d0 <HAL_I2C_MspInit+0xb4>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_I2C_MspInit+0xb4>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001980:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001984:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001988:	2312      	movs	r3, #18
 800198a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800199a:	2304      	movs	r3, #4
 800199c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019a4:	4619      	mov	r1, r3
 80019a6:	480b      	ldr	r0, [pc, #44]	@ (80019d4 <HAL_I2C_MspInit+0xb8>)
 80019a8:	f000 fed0 	bl	800274c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_I2C_MspInit+0xb4>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b0:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <HAL_I2C_MspInit+0xb4>)
 80019b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <HAL_I2C_MspInit+0xb4>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80019c4:	bf00      	nop
 80019c6:	37b8      	adds	r7, #184	@ 0xb8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40005800 	.word	0x40005800
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000400 	.word	0x48000400

080019d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <HAL_I2C_MspDeInit+0x3c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10f      	bne.n	8001a0a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_I2C_MspDeInit+0x40>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <HAL_I2C_MspDeInit+0x40>)
 80019f0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80019f4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80019f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019fa:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <HAL_I2C_MspDeInit+0x44>)
 80019fc:	f001 f838 	bl	8002a70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001a00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a04:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <HAL_I2C_MspDeInit+0x44>)
 8001a06:	f001 f833 	bl	8002a70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40005800 	.word	0x40005800
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	48000400 	.word	0x48000400

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0ae      	sub	sp, #184	@ 0xb8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2294      	movs	r2, #148	@ 0x94
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 fab2 	bl	8006faa <memset>
  if(huart->Instance==USART1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a22      	ldr	r2, [pc, #136]	@ (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d13c      	bne.n	8001aca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 feff 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a68:	f7ff fcec 	bl	8001444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a70:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a76:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a88:	4a13      	ldr	r2, [pc, #76]	@ (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac6:	f000 fe41 	bl	800274c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001aca:	bf00      	nop
 8001acc:	37b8      	adds	r7, #184	@ 0xb8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	40021000 	.word	0x40021000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <MemManage_Handler+0x4>

08001af4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b32:	f000 fcd9 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  return 1;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_kill>:

int _kill(int pid, int sig)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b54:	f005 fa7c 	bl	8007050 <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2216      	movs	r2, #22
 8001b5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_exit>:

void _exit (int status)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b72:	f04f 31ff 	mov.w	r1, #4294967295
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffe7 	bl	8001b4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <_exit+0x12>

08001b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e00a      	b.n	8001ba8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b92:	f3af 8000 	nop.w
 8001b96:	4601      	mov	r1, r0
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	b2ca      	uxtb	r2, r1
 8001ba0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dbf0      	blt.n	8001b92 <_read+0x12>
  }

  return len;
 8001bb0:	687b      	ldr	r3, [r7, #4]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e009      	b.n	8001be0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbf1      	blt.n	8001bcc <_write+0x12>
  }
  return len;
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_close>:

int _close(int file)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <_isatty>:

int _isatty(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f005 f9e0 	bl	8007050 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200a0000 	.word	0x200a0000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	20000428 	.word	0x20000428
 8001cc4:	20000580 	.word	0x20000580

08001cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf0:	f7ff ffea 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf6:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <LoopForever+0xe>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d38 <LoopForever+0x16>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f005 f99f 	bl	800705c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d1e:	f7ff f979 	bl	8001014 <main>

08001d22 <LoopForever>:

LoopForever:
    b LoopForever
 8001d22:	e7fe      	b.n	8001d22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8001d30:	0800ac90 	.word	0x0800ac90
  ldr r2, =_sbss
 8001d34:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8001d38:	2000057c 	.word	0x2000057c

08001d3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC1_IRQHandler>

08001d3e <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	6039      	str	r1, [r7, #0]
 8001d48:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2120      	movs	r1, #32
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fc91 	bl	8001678 <SENSOR_IO_Read>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	f023 0303 	bic.w	r3, r3, #3
 8001d70:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d80:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	2120      	movs	r1, #32
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fc5a 	bl	8001644 <SENSOR_IO_Write>
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	b2d8      	uxtb	r0, r3
 8001da6:	f107 0208 	add.w	r2, r7, #8
 8001daa:	2302      	movs	r3, #2
 8001dac:	21b2      	movs	r1, #178	@ 0xb2
 8001dae:	f7ff fc81 	bl	80016b4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2135      	movs	r1, #53	@ 0x35
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fc5d 	bl	8001678 <SENSOR_IO_Read>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001dc2:	7ffb      	ldrb	r3, [r7, #31]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	7a3b      	ldrb	r3, [r7, #8]
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	7a7b      	ldrb	r3, [r7, #9]
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	4313      	orrs	r3, r2
 8001de8:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001dea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dee:	10db      	asrs	r3, r3, #3
 8001df0:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001df2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001df6:	10db      	asrs	r3, r3, #3
 8001df8:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	b2d8      	uxtb	r0, r3
 8001dfe:	f107 0208 	add.w	r2, r7, #8
 8001e02:	2304      	movs	r3, #4
 8001e04:	21bc      	movs	r1, #188	@ 0xbc
 8001e06:	f7ff fc55 	bl	80016b4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e0a:	7a7b      	ldrb	r3, [r7, #9]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	b21a      	sxth	r2, r3
 8001e10:	7a3b      	ldrb	r3, [r7, #8]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	7abb      	ldrb	r3, [r7, #10]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	b2d8      	uxtb	r0, r3
 8001e2a:	f107 0208 	add.w	r2, r7, #8
 8001e2e:	2302      	movs	r3, #2
 8001e30:	21aa      	movs	r1, #170	@ 0xaa
 8001e32:	f7ff fc3f 	bl	80016b4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e36:	7a7b      	ldrb	r3, [r7, #9]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	b21a      	sxth	r2, r3
 8001e3c:	7a3b      	ldrb	r3, [r7, #8]
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001e44:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	ee07 3a90 	vmov	s15, r3
 8001e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e68:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e6c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e82:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	ee07 3a90 	vmov	s15, r3
}
 8001e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	463b      	mov	r3, r7
 8001eae:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001eb2:	783b      	ldrb	r3, [r7, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	203c      	movs	r0, #60	@ 0x3c
 8001eba:	f7ff fbc3 	bl	8001644 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001ebe:	787b      	ldrb	r3, [r7, #1]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2121      	movs	r1, #33	@ 0x21
 8001ec4:	203c      	movs	r0, #60	@ 0x3c
 8001ec6:	f7ff fbbd 	bl	8001644 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001eca:	78bb      	ldrb	r3, [r7, #2]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2122      	movs	r1, #34	@ 0x22
 8001ed0:	203c      	movs	r0, #60	@ 0x3c
 8001ed2:	f7ff fbb7 	bl	8001644 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2123      	movs	r1, #35	@ 0x23
 8001edc:	203c      	movs	r0, #60	@ 0x3c
 8001ede:	f7ff fbb1 	bl	8001644 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001ee2:	793b      	ldrb	r3, [r7, #4]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2124      	movs	r1, #36	@ 0x24
 8001ee8:	203c      	movs	r0, #60	@ 0x3c
 8001eea:	f7ff fbab 	bl	8001644 <SENSOR_IO_Write>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001efc:	2300      	movs	r3, #0
 8001efe:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001f00:	2122      	movs	r1, #34	@ 0x22
 8001f02:	203c      	movs	r0, #60	@ 0x3c
 8001f04:	f7ff fbb8 	bl	8001678 <SENSOR_IO_Read>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f023 0303 	bic.w	r3, r3, #3
 8001f12:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f043 0303 	orr.w	r3, r3, #3
 8001f1a:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2122      	movs	r1, #34	@ 0x22
 8001f22:	203c      	movs	r0, #60	@ 0x3c
 8001f24:	f7ff fb8e 	bl	8001644 <SENSOR_IO_Write>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001f34:	f7ff fb7c 	bl	8001630 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001f38:	210f      	movs	r1, #15
 8001f3a:	203c      	movs	r0, #60	@ 0x3c
 8001f3c:	f7ff fb9c 	bl	8001678 <SENSOR_IO_Read>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001f54:	2122      	movs	r1, #34	@ 0x22
 8001f56:	203c      	movs	r0, #60	@ 0x3c
 8001f58:	f7ff fb8e 	bl	8001678 <SENSOR_IO_Read>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	f023 0320 	bic.w	r3, r3, #32
 8001f66:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	f043 0320 	orr.w	r3, r3, #32
 8001f74:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2122      	movs	r1, #34	@ 0x22
 8001f7c:	203c      	movs	r0, #60	@ 0x3c
 8001f7e:	f7ff fb61 	bl	8001644 <SENSOR_IO_Write>
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001fa2:	2121      	movs	r1, #33	@ 0x21
 8001fa4:	203c      	movs	r0, #60	@ 0x3c
 8001fa6:	f7ff fb67 	bl	8001678 <SENSOR_IO_Read>
 8001faa:	4603      	mov	r3, r0
 8001fac:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001fae:	f107 0208 	add.w	r2, r7, #8
 8001fb2:	2306      	movs	r3, #6
 8001fb4:	21a8      	movs	r1, #168	@ 0xa8
 8001fb6:	203c      	movs	r0, #60	@ 0x3c
 8001fb8:	f7ff fb7c 	bl	80016b4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	77fb      	strb	r3, [r7, #31]
 8001fc0:	e01a      	b.n	8001ff8 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	3320      	adds	r3, #32
 8001fca:	443b      	add	r3, r7
 8001fcc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	7ffa      	ldrb	r2, [r7, #31]
 8001fd6:	0052      	lsls	r2, r2, #1
 8001fd8:	3220      	adds	r2, #32
 8001fda:	443a      	add	r2, r7
 8001fdc:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	b212      	sxth	r2, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	3320      	adds	r3, #32
 8001fec:	443b      	add	r3, r7
 8001fee:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	77fb      	strb	r3, [r7, #31]
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d9e1      	bls.n	8001fc2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002004:	2b60      	cmp	r3, #96	@ 0x60
 8002006:	d013      	beq.n	8002030 <LIS3MDL_MagReadXYZ+0xa4>
 8002008:	2b60      	cmp	r3, #96	@ 0x60
 800200a:	dc14      	bgt.n	8002036 <LIS3MDL_MagReadXYZ+0xaa>
 800200c:	2b40      	cmp	r3, #64	@ 0x40
 800200e:	d00c      	beq.n	800202a <LIS3MDL_MagReadXYZ+0x9e>
 8002010:	2b40      	cmp	r3, #64	@ 0x40
 8002012:	dc10      	bgt.n	8002036 <LIS3MDL_MagReadXYZ+0xaa>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <LIS3MDL_MagReadXYZ+0x92>
 8002018:	2b20      	cmp	r3, #32
 800201a:	d003      	beq.n	8002024 <LIS3MDL_MagReadXYZ+0x98>
 800201c:	e00b      	b.n	8002036 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800201e:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <LIS3MDL_MagReadXYZ+0xf8>)
 8002020:	61bb      	str	r3, [r7, #24]
    break;
 8002022:	e008      	b.n	8002036 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002024:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <LIS3MDL_MagReadXYZ+0xfc>)
 8002026:	61bb      	str	r3, [r7, #24]
    break;
 8002028:	e005      	b.n	8002036 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800202a:	4b18      	ldr	r3, [pc, #96]	@ (800208c <LIS3MDL_MagReadXYZ+0x100>)
 800202c:	61bb      	str	r3, [r7, #24]
    break;
 800202e:	e002      	b.n	8002036 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <LIS3MDL_MagReadXYZ+0x104>)
 8002032:	61bb      	str	r3, [r7, #24]
    break;    
 8002034:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	77fb      	strb	r3, [r7, #31]
 800203a:	e01a      	b.n	8002072 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800203c:	7ffb      	ldrb	r3, [r7, #31]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	3320      	adds	r3, #32
 8002042:	443b      	add	r3, r7
 8002044:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002050:	edd7 7a06 	vldr	s15, [r7, #24]
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	7ffb      	ldrb	r3, [r7, #31]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002064:	ee17 2a90 	vmov	r2, s15
 8002068:	b212      	sxth	r2, r2
 800206a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800206c:	7ffb      	ldrb	r3, [r7, #31]
 800206e:	3301      	adds	r3, #1
 8002070:	77fb      	strb	r3, [r7, #31]
 8002072:	7ffb      	ldrb	r3, [r7, #31]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d9e1      	bls.n	800203c <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	3e0f5c29 	.word	0x3e0f5c29
 8002088:	3e947ae1 	.word	0x3e947ae1
 800208c:	3edc28f6 	.word	0x3edc28f6
 8002090:	3f147ae1 	.word	0x3f147ae1

08002094 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 f879 	bl	8002198 <LPS22HB_Init>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80020bc:	f7ff fab8 	bl	8001630 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	210f      	movs	r1, #15
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fad6 	bl	8001678 <SENSOR_IO_Read>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	74fb      	strb	r3, [r7, #19]
 80020ee:	e013      	b.n	8002118 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	3328      	adds	r3, #40	@ 0x28
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	7cfc      	ldrb	r4, [r7, #19]
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f7ff faba 	bl	8001678 <SENSOR_IO_Read>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	f104 0318 	add.w	r3, r4, #24
 800210c:	443b      	add	r3, r7
 800210e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	3301      	adds	r3, #1
 8002116:	74fb      	strb	r3, [r7, #19]
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d9e8      	bls.n	80020f0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	74fb      	strb	r3, [r7, #19]
 8002122:	e00f      	b.n	8002144 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	3318      	adds	r3, #24
 8002128:	443b      	add	r3, r7
 800212a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800212e:	461a      	mov	r2, r3
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	3301      	adds	r3, #1
 8002142:	74fb      	strb	r3, [r7, #19]
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d9ec      	bls.n	8002124 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800215a:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2264      	movs	r2, #100	@ 0x64
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	da01      	bge.n	8002170 <LPS22HB_P_ReadPressure+0x94>
 800216c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002170:	131b      	asrs	r3, r3, #12
 8002172:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002194 <LPS22HB_P_ReadPressure+0xb8>
 8002182:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002186:	eef0 7a66 	vmov.f32	s15, s13
}
 800218a:	eeb0 0a67 	vmov.f32	s0, s15
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	42c80000 	.word	0x42c80000

08002198 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	211a      	movs	r1, #26
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fa65 	bl	8001678 <SENSOR_IO_Read>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	211a      	movs	r1, #26
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fa3a 	bl	8001644 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2110      	movs	r1, #16
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fa4e 	bl	8001678 <SENSOR_IO_Read>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80021ee:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	2110      	movs	r1, #16
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fa1b 	bl	8001644 <SENSOR_IO_Write>
}  
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002224:	2110      	movs	r1, #16
 8002226:	20d4      	movs	r0, #212	@ 0xd4
 8002228:	f7ff fa26 	bl	8001678 <SENSOR_IO_Read>
 800222c:	4603      	mov	r3, r0
 800222e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800223c:	7bba      	ldrb	r2, [r7, #14]
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	4313      	orrs	r3, r2
 8002242:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	461a      	mov	r2, r3
 8002248:	2110      	movs	r1, #16
 800224a:	20d4      	movs	r0, #212	@ 0xd4
 800224c:	f7ff f9fa 	bl	8001644 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002250:	2112      	movs	r1, #18
 8002252:	20d4      	movs	r0, #212	@ 0xd4
 8002254:	f7ff fa10 	bl	8001678 <SENSOR_IO_Read>
 8002258:	4603      	mov	r3, r0
 800225a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800226a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800226c:	7bba      	ldrb	r2, [r7, #14]
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	4313      	orrs	r3, r2
 8002272:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002274:	7bbb      	ldrb	r3, [r7, #14]
 8002276:	461a      	mov	r2, r3
 8002278:	2112      	movs	r1, #18
 800227a:	20d4      	movs	r0, #212	@ 0xd4
 800227c:	f7ff f9e2 	bl	8001644 <SENSOR_IO_Write>
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800228e:	2300      	movs	r3, #0
 8002290:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002292:	2110      	movs	r1, #16
 8002294:	20d4      	movs	r0, #212	@ 0xd4
 8002296:	f7ff f9ef 	bl	8001678 <SENSOR_IO_Read>
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	461a      	mov	r2, r3
 80022aa:	2110      	movs	r1, #16
 80022ac:	20d4      	movs	r0, #212	@ 0xd4
 80022ae:	f7ff f9c9 	bl	8001644 <SENSOR_IO_Write>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80022ba:	b580      	push	{r7, lr}
 80022bc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80022be:	f7ff f9b7 	bl	8001630 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80022c2:	210f      	movs	r1, #15
 80022c4:	20d4      	movs	r0, #212	@ 0xd4
 80022c6:	f7ff f9d7 	bl	8001678 <SENSOR_IO_Read>
 80022ca:	4603      	mov	r3, r0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80022de:	2115      	movs	r1, #21
 80022e0:	20d4      	movs	r0, #212	@ 0xd4
 80022e2:	f7ff f9c9 	bl	8001678 <SENSOR_IO_Read>
 80022e6:	4603      	mov	r3, r0
 80022e8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	f023 0310 	bic.w	r3, r3, #16
 80022f0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	461a      	mov	r2, r3
 8002304:	2115      	movs	r1, #21
 8002306:	20d4      	movs	r0, #212	@ 0xd4
 8002308:	f7ff f99c 	bl	8001644 <SENSOR_IO_Write>
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800231c:	2300      	movs	r3, #0
 800231e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800232a:	2110      	movs	r1, #16
 800232c:	20d4      	movs	r0, #212	@ 0xd4
 800232e:	f7ff f9a3 	bl	8001678 <SENSOR_IO_Read>
 8002332:	4603      	mov	r3, r0
 8002334:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002336:	f107 0208 	add.w	r2, r7, #8
 800233a:	2306      	movs	r3, #6
 800233c:	2128      	movs	r1, #40	@ 0x28
 800233e:	20d4      	movs	r0, #212	@ 0xd4
 8002340:	f7ff f9b8 	bl	80016b4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002344:	2300      	movs	r3, #0
 8002346:	77fb      	strb	r3, [r7, #31]
 8002348:	e01a      	b.n	8002380 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	3301      	adds	r3, #1
 8002350:	3320      	adds	r3, #32
 8002352:	443b      	add	r3, r7
 8002354:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	b29b      	uxth	r3, r3
 800235c:	7ffa      	ldrb	r2, [r7, #31]
 800235e:	0052      	lsls	r2, r2, #1
 8002360:	3220      	adds	r2, #32
 8002362:	443a      	add	r2, r7
 8002364:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002368:	4413      	add	r3, r2
 800236a:	b29a      	uxth	r2, r3
 800236c:	7ffb      	ldrb	r3, [r7, #31]
 800236e:	b212      	sxth	r2, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	3320      	adds	r3, #32
 8002374:	443b      	add	r3, r7
 8002376:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	3301      	adds	r3, #1
 800237e:	77fb      	strb	r3, [r7, #31]
 8002380:	7ffb      	ldrb	r3, [r7, #31]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d9e1      	bls.n	800234a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b0c      	cmp	r3, #12
 800238e:	d829      	bhi.n	80023e4 <LSM6DSL_AccReadXYZ+0xd0>
 8002390:	a201      	add	r2, pc, #4	@ (adr r2, 8002398 <LSM6DSL_AccReadXYZ+0x84>)
 8002392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002396:	bf00      	nop
 8002398:	080023cd 	.word	0x080023cd
 800239c:	080023e5 	.word	0x080023e5
 80023a0:	080023e5 	.word	0x080023e5
 80023a4:	080023e5 	.word	0x080023e5
 80023a8:	080023df 	.word	0x080023df
 80023ac:	080023e5 	.word	0x080023e5
 80023b0:	080023e5 	.word	0x080023e5
 80023b4:	080023e5 	.word	0x080023e5
 80023b8:	080023d3 	.word	0x080023d3
 80023bc:	080023e5 	.word	0x080023e5
 80023c0:	080023e5 	.word	0x080023e5
 80023c4:	080023e5 	.word	0x080023e5
 80023c8:	080023d9 	.word	0x080023d9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <LSM6DSL_AccReadXYZ+0x11c>)
 80023ce:	61bb      	str	r3, [r7, #24]
    break;
 80023d0:	e008      	b.n	80023e4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80023d2:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <LSM6DSL_AccReadXYZ+0x120>)
 80023d4:	61bb      	str	r3, [r7, #24]
    break;
 80023d6:	e005      	b.n	80023e4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80023d8:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <LSM6DSL_AccReadXYZ+0x124>)
 80023da:	61bb      	str	r3, [r7, #24]
    break;
 80023dc:	e002      	b.n	80023e4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80023de:	4b17      	ldr	r3, [pc, #92]	@ (800243c <LSM6DSL_AccReadXYZ+0x128>)
 80023e0:	61bb      	str	r3, [r7, #24]
    break;    
 80023e2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]
 80023e8:	e01a      	b.n	8002420 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	3320      	adds	r3, #32
 80023f0:	443b      	add	r3, r7
 80023f2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002406:	7ffb      	ldrb	r3, [r7, #31]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002412:	ee17 2a90 	vmov	r2, s15
 8002416:	b212      	sxth	r2, r2
 8002418:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800241a:	7ffb      	ldrb	r3, [r7, #31]
 800241c:	3301      	adds	r3, #1
 800241e:	77fb      	strb	r3, [r7, #31]
 8002420:	7ffb      	ldrb	r3, [r7, #31]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d9e1      	bls.n	80023ea <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	3d79db23 	.word	0x3d79db23
 8002434:	3df9db23 	.word	0x3df9db23
 8002438:	3e79db23 	.word	0x3e79db23
 800243c:	3ef9db23 	.word	0x3ef9db23

08002440 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244a:	2003      	movs	r0, #3
 800244c:	f000 f93c 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002450:	200f      	movs	r0, #15
 8002452:	f000 f80d 	bl	8002470 <HAL_InitTick>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	71fb      	strb	r3, [r7, #7]
 8002460:	e001      	b.n	8002466 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002462:	f7ff fa37 	bl	80018d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002466:	79fb      	ldrb	r3, [r7, #7]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800247c:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <HAL_InitTick+0x6c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d023      	beq.n	80024cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002484:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <HAL_InitTick+0x70>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_InitTick+0x6c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f949 	bl	8002732 <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d809      	bhi.n	80024c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ac:	2200      	movs	r2, #0
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f000 f913 	bl	80026de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024b8:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <HAL_InitTick+0x74>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e007      	b.n	80024d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e004      	b.n	80024d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e001      	b.n	80024d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000008c 	.word	0x2000008c
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000088 	.word	0x20000088

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_IncTick+0x20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_IncTick+0x24>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <HAL_IncTick+0x24>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	2000008c 	.word	0x2000008c
 800250c:	2000042c 	.word	0x2000042c

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000042c 	.word	0x2000042c

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	@ (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff3e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff8e 	bl	800261c <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5d 	bl	80025c8 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff31 	bl	800258c <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275a:	e166      	b.n	8002a2a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8158 	beq.w	8002a24 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d005      	beq.n	800278c <HAL_GPIO_Init+0x40>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c2:	2201      	movs	r2, #1
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d017      	beq.n	800282a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d123      	bne.n	800287e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	6939      	ldr	r1, [r7, #16]
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80b2 	beq.w	8002a24 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c0:	4b61      	ldr	r3, [pc, #388]	@ (8002a48 <HAL_GPIO_Init+0x2fc>)
 80028c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c4:	4a60      	ldr	r2, [pc, #384]	@ (8002a48 <HAL_GPIO_Init+0x2fc>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80028cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a48 <HAL_GPIO_Init+0x2fc>)
 80028ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028d8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a4c <HAL_GPIO_Init+0x300>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	220f      	movs	r2, #15
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002902:	d02b      	beq.n	800295c <HAL_GPIO_Init+0x210>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a52      	ldr	r2, [pc, #328]	@ (8002a50 <HAL_GPIO_Init+0x304>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d025      	beq.n	8002958 <HAL_GPIO_Init+0x20c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a51      	ldr	r2, [pc, #324]	@ (8002a54 <HAL_GPIO_Init+0x308>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d01f      	beq.n	8002954 <HAL_GPIO_Init+0x208>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a50      	ldr	r2, [pc, #320]	@ (8002a58 <HAL_GPIO_Init+0x30c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d019      	beq.n	8002950 <HAL_GPIO_Init+0x204>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a4f      	ldr	r2, [pc, #316]	@ (8002a5c <HAL_GPIO_Init+0x310>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d013      	beq.n	800294c <HAL_GPIO_Init+0x200>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a4e      	ldr	r2, [pc, #312]	@ (8002a60 <HAL_GPIO_Init+0x314>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00d      	beq.n	8002948 <HAL_GPIO_Init+0x1fc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a4d      	ldr	r2, [pc, #308]	@ (8002a64 <HAL_GPIO_Init+0x318>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <HAL_GPIO_Init+0x1f8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a4c      	ldr	r2, [pc, #304]	@ (8002a68 <HAL_GPIO_Init+0x31c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <HAL_GPIO_Init+0x1f4>
 800293c:	2307      	movs	r3, #7
 800293e:	e00e      	b.n	800295e <HAL_GPIO_Init+0x212>
 8002940:	2308      	movs	r3, #8
 8002942:	e00c      	b.n	800295e <HAL_GPIO_Init+0x212>
 8002944:	2306      	movs	r3, #6
 8002946:	e00a      	b.n	800295e <HAL_GPIO_Init+0x212>
 8002948:	2305      	movs	r3, #5
 800294a:	e008      	b.n	800295e <HAL_GPIO_Init+0x212>
 800294c:	2304      	movs	r3, #4
 800294e:	e006      	b.n	800295e <HAL_GPIO_Init+0x212>
 8002950:	2303      	movs	r3, #3
 8002952:	e004      	b.n	800295e <HAL_GPIO_Init+0x212>
 8002954:	2302      	movs	r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x212>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_GPIO_Init+0x212>
 800295c:	2300      	movs	r3, #0
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	4093      	lsls	r3, r2
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800296e:	4937      	ldr	r1, [pc, #220]	@ (8002a4c <HAL_GPIO_Init+0x300>)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800297c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <HAL_GPIO_Init+0x320>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029a0:	4a32      	ldr	r2, [pc, #200]	@ (8002a6c <HAL_GPIO_Init+0x320>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029a6:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_GPIO_Init+0x320>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ca:	4a28      	ldr	r2, [pc, #160]	@ (8002a6c <HAL_GPIO_Init+0x320>)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029d0:	4b26      	ldr	r3, [pc, #152]	@ (8002a6c <HAL_GPIO_Init+0x320>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029f4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a6c <HAL_GPIO_Init+0x320>)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <HAL_GPIO_Init+0x320>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a1e:	4a13      	ldr	r2, [pc, #76]	@ (8002a6c <HAL_GPIO_Init+0x320>)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f47f ae91 	bne.w	800275c <HAL_GPIO_Init+0x10>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	48000400 	.word	0x48000400
 8002a54:	48000800 	.word	0x48000800
 8002a58:	48000c00 	.word	0x48000c00
 8002a5c:	48001000 	.word	0x48001000
 8002a60:	48001400 	.word	0x48001400
 8002a64:	48001800 	.word	0x48001800
 8002a68:	48001c00 	.word	0x48001c00
 8002a6c:	40010400 	.word	0x40010400

08002a70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a7e:	e0c9      	b.n	8002c14 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a80:	2201      	movs	r2, #1
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80bc 	beq.w	8002c0e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002a96:	4a66      	ldr	r2, [pc, #408]	@ (8002c30 <HAL_GPIO_DeInit+0x1c0>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002abe:	d02b      	beq.n	8002b18 <HAL_GPIO_DeInit+0xa8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c34 <HAL_GPIO_DeInit+0x1c4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d025      	beq.n	8002b14 <HAL_GPIO_DeInit+0xa4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a5b      	ldr	r2, [pc, #364]	@ (8002c38 <HAL_GPIO_DeInit+0x1c8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01f      	beq.n	8002b10 <HAL_GPIO_DeInit+0xa0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c3c <HAL_GPIO_DeInit+0x1cc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d019      	beq.n	8002b0c <HAL_GPIO_DeInit+0x9c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a59      	ldr	r2, [pc, #356]	@ (8002c40 <HAL_GPIO_DeInit+0x1d0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_GPIO_DeInit+0x98>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a58      	ldr	r2, [pc, #352]	@ (8002c44 <HAL_GPIO_DeInit+0x1d4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00d      	beq.n	8002b04 <HAL_GPIO_DeInit+0x94>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a57      	ldr	r2, [pc, #348]	@ (8002c48 <HAL_GPIO_DeInit+0x1d8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <HAL_GPIO_DeInit+0x90>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a56      	ldr	r2, [pc, #344]	@ (8002c4c <HAL_GPIO_DeInit+0x1dc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_GPIO_DeInit+0x8c>
 8002af8:	2307      	movs	r3, #7
 8002afa:	e00e      	b.n	8002b1a <HAL_GPIO_DeInit+0xaa>
 8002afc:	2308      	movs	r3, #8
 8002afe:	e00c      	b.n	8002b1a <HAL_GPIO_DeInit+0xaa>
 8002b00:	2306      	movs	r3, #6
 8002b02:	e00a      	b.n	8002b1a <HAL_GPIO_DeInit+0xaa>
 8002b04:	2305      	movs	r3, #5
 8002b06:	e008      	b.n	8002b1a <HAL_GPIO_DeInit+0xaa>
 8002b08:	2304      	movs	r3, #4
 8002b0a:	e006      	b.n	8002b1a <HAL_GPIO_DeInit+0xaa>
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e004      	b.n	8002b1a <HAL_GPIO_DeInit+0xaa>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e002      	b.n	8002b1a <HAL_GPIO_DeInit+0xaa>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_GPIO_DeInit+0xaa>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	f002 0203 	and.w	r2, r2, #3
 8002b20:	0092      	lsls	r2, r2, #2
 8002b22:	4093      	lsls	r3, r2
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d132      	bne.n	8002b90 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002b2a:	4b49      	ldr	r3, [pc, #292]	@ (8002c50 <HAL_GPIO_DeInit+0x1e0>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4947      	ldr	r1, [pc, #284]	@ (8002c50 <HAL_GPIO_DeInit+0x1e0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002b38:	4b45      	ldr	r3, [pc, #276]	@ (8002c50 <HAL_GPIO_DeInit+0x1e0>)
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	4943      	ldr	r1, [pc, #268]	@ (8002c50 <HAL_GPIO_DeInit+0x1e0>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002b46:	4b42      	ldr	r3, [pc, #264]	@ (8002c50 <HAL_GPIO_DeInit+0x1e0>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4940      	ldr	r1, [pc, #256]	@ (8002c50 <HAL_GPIO_DeInit+0x1e0>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002b54:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <HAL_GPIO_DeInit+0x1e0>)
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	493c      	ldr	r1, [pc, #240]	@ (8002c50 <HAL_GPIO_DeInit+0x1e0>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002b72:	4a2f      	ldr	r2, [pc, #188]	@ (8002c30 <HAL_GPIO_DeInit+0x1c0>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	482b      	ldr	r0, [pc, #172]	@ (8002c30 <HAL_GPIO_DeInit+0x1c0>)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	400a      	ands	r2, r1
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2103      	movs	r1, #3
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	08d2      	lsrs	r2, r2, #3
 8002bc4:	4019      	ands	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3208      	adds	r2, #8
 8002bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	2101      	movs	r1, #1
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2103      	movs	r1, #3
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3301      	adds	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f af2f 	bne.w	8002a80 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40010000 	.word	0x40010000
 8002c34:	48000400 	.word	0x48000400
 8002c38:	48000800 	.word	0x48000800
 8002c3c:	48000c00 	.word	0x48000c00
 8002c40:	48001000 	.word	0x48001000
 8002c44:	48001400 	.word	0x48001400
 8002c48:	48001800 	.word	0x48001800
 8002c4c:	48001c00 	.word	0x48001c00
 8002c50:	40010400 	.word	0x40010400

08002c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
 8002c60:	4613      	mov	r3, r2
 8002c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c64:	787b      	ldrb	r3, [r7, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e08d      	b.n	8002db2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fe36 	bl	800191c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	@ 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e006      	b.n	8002d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d108      	bne.n	8002d26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	e007      	b.n	8002d36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69d9      	ldr	r1, [r3, #28]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e021      	b.n	8002e10 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	@ 0x24
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe fdf7 	bl	80019d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	817b      	strh	r3, [r7, #10]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	813b      	strh	r3, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	f040 80f9 	bne.w	8003032 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_I2C_Mem_Write+0x34>
 8002e46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0ed      	b.n	8003034 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_I2C_Mem_Write+0x4e>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0e6      	b.n	8003034 <HAL_I2C_Mem_Write+0x21c>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e6e:	f7ff fb4f 	bl	8002510 <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2319      	movs	r3, #25
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fac3 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0d1      	b.n	8003034 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2221      	movs	r2, #33	@ 0x21
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2240      	movs	r2, #64	@ 0x40
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eb8:	88f8      	ldrh	r0, [r7, #6]
 8002eba:	893a      	ldrh	r2, [r7, #8]
 8002ebc:	8979      	ldrh	r1, [r7, #10]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f9d3 	bl	8003274 <I2C_RequestMemoryWrite>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0a9      	b.n	8003034 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2bff      	cmp	r3, #255	@ 0xff
 8002ee8:	d90e      	bls.n	8002f08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	22ff      	movs	r2, #255	@ 0xff
 8002eee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	8979      	ldrh	r1, [r7, #10]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fc47 	bl	8003794 <I2C_TransferConfig>
 8002f06:	e00f      	b.n	8002f28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	8979      	ldrh	r1, [r7, #10]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fc36 	bl	8003794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fac6 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e07b      	b.n	8003034 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d034      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0x1c8>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d130      	bne.n	8002fe0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f84:	2200      	movs	r2, #0
 8002f86:	2180      	movs	r1, #128	@ 0x80
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fa3f 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e04d      	b.n	8003034 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2bff      	cmp	r3, #255	@ 0xff
 8002fa0:	d90e      	bls.n	8002fc0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	22ff      	movs	r2, #255	@ 0xff
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	8979      	ldrh	r1, [r7, #10]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fbeb 	bl	8003794 <I2C_TransferConfig>
 8002fbe:	e00f      	b.n	8002fe0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	8979      	ldrh	r1, [r7, #10]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fbda 	bl	8003794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d19e      	bne.n	8002f28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 faac 	bl	800354c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e01a      	b.n	8003034 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2220      	movs	r2, #32
 8003004:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <HAL_I2C_Mem_Write+0x224>)
 8003012:	400b      	ands	r3, r1
 8003014:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003032:	2302      	movs	r3, #2
  }
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	fe00e800 	.word	0xfe00e800

08003040 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	817b      	strh	r3, [r7, #10]
 8003052:	460b      	mov	r3, r1
 8003054:	813b      	strh	r3, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	f040 80fd 	bne.w	8003262 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_I2C_Mem_Read+0x34>
 800306e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800307a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0f1      	b.n	8003264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_I2C_Mem_Read+0x4e>
 800308a:	2302      	movs	r3, #2
 800308c:	e0ea      	b.n	8003264 <HAL_I2C_Mem_Read+0x224>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003096:	f7ff fa3b 	bl	8002510 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2319      	movs	r3, #25
 80030a2:	2201      	movs	r2, #1
 80030a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f9af 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0d5      	b.n	8003264 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2222      	movs	r2, #34	@ 0x22
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2240      	movs	r2, #64	@ 0x40
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a3a      	ldr	r2, [r7, #32]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e0:	88f8      	ldrh	r0, [r7, #6]
 80030e2:	893a      	ldrh	r2, [r7, #8]
 80030e4:	8979      	ldrh	r1, [r7, #10]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	4603      	mov	r3, r0
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f913 	bl	800331c <I2C_RequestMemoryRead>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0ad      	b.n	8003264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2bff      	cmp	r3, #255	@ 0xff
 8003110:	d90e      	bls.n	8003130 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	b2da      	uxtb	r2, r3
 800311e:	8979      	ldrh	r1, [r7, #10]
 8003120:	4b52      	ldr	r3, [pc, #328]	@ (800326c <HAL_I2C_Mem_Read+0x22c>)
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fb33 	bl	8003794 <I2C_TransferConfig>
 800312e:	e00f      	b.n	8003150 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313e:	b2da      	uxtb	r2, r3
 8003140:	8979      	ldrh	r1, [r7, #10]
 8003142:	4b4a      	ldr	r3, [pc, #296]	@ (800326c <HAL_I2C_Mem_Read+0x22c>)
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fb22 	bl	8003794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	2200      	movs	r2, #0
 8003158:	2104      	movs	r1, #4
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f956 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07c      	b.n	8003264 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d034      	beq.n	8003210 <HAL_I2C_Mem_Read+0x1d0>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d130      	bne.n	8003210 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	@ 0x80
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f927 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04d      	b.n	8003264 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2bff      	cmp	r3, #255	@ 0xff
 80031d0:	d90e      	bls.n	80031f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	8979      	ldrh	r1, [r7, #10]
 80031e0:	2300      	movs	r3, #0
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fad3 	bl	8003794 <I2C_TransferConfig>
 80031ee:	e00f      	b.n	8003210 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	2300      	movs	r3, #0
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fac2 	bl	8003794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d19a      	bne.n	8003150 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f994 	bl	800354c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e01a      	b.n	8003264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2220      	movs	r2, #32
 8003234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_I2C_Mem_Read+0x230>)
 8003242:	400b      	ands	r3, r1
 8003244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	80002400 	.word	0x80002400
 8003270:	fe00e800 	.word	0xfe00e800

08003274 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4603      	mov	r3, r0
 8003284:	817b      	strh	r3, [r7, #10]
 8003286:	460b      	mov	r3, r1
 8003288:	813b      	strh	r3, [r7, #8]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	8979      	ldrh	r1, [r7, #10]
 8003294:	4b20      	ldr	r3, [pc, #128]	@ (8003318 <I2C_RequestMemoryWrite+0xa4>)
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fa79 	bl	8003794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	69b9      	ldr	r1, [r7, #24]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f909 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e02c      	b.n	8003310 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032bc:	893b      	ldrh	r3, [r7, #8]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80032c6:	e015      	b.n	80032f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032c8:	893b      	ldrh	r3, [r7, #8]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	69b9      	ldr	r1, [r7, #24]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8ef 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e012      	b.n	8003310 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ea:	893b      	ldrh	r3, [r7, #8]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2200      	movs	r2, #0
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f884 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	80002000 	.word	0x80002000

0800331c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4603      	mov	r3, r0
 800332c:	817b      	strh	r3, [r7, #10]
 800332e:	460b      	mov	r3, r1
 8003330:	813b      	strh	r3, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	8979      	ldrh	r1, [r7, #10]
 800333c:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <I2C_RequestMemoryRead+0xa4>)
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fa26 	bl	8003794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f8b6 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e02c      	b.n	80033b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003362:	893b      	ldrh	r3, [r7, #8]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
 800336c:	e015      	b.n	800339a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	b29b      	uxth	r3, r3
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f89c 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e012      	b.n	80033b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003390:	893b      	ldrh	r3, [r7, #8]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2140      	movs	r1, #64	@ 0x40
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f831 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	80002000 	.word	0x80002000

080033c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d103      	bne.n	80033e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d007      	beq.n	8003400 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	619a      	str	r2, [r3, #24]
  }
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800341c:	e03b      	b.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f8d6 	bl	80035d4 <I2C_IsErrorOccurred>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e041      	b.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d02d      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7ff f869 	bl	8002510 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_WaitOnFlagUntilTimeout+0x44>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d122      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d113      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	f043 0220 	orr.w	r2, r3, #32
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d0b4      	beq.n	800341e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034ca:	e033      	b.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f87f 	bl	80035d4 <I2C_IsErrorOccurred>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e031      	b.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d025      	beq.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7ff f812 	bl	8002510 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11a      	bne.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d013      	beq.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d1c4      	bne.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003558:	e02f      	b.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f838 	bl	80035d4 <I2C_IsErrorOccurred>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e02d      	b.n	80035ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe ffcf 	bl	8002510 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11a      	bne.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d013      	beq.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e007      	b.n	80035ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d1c8      	bne.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	@ 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d068      	beq.n	80036d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2210      	movs	r2, #16
 8003606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003608:	e049      	b.n	800369e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d045      	beq.n	800369e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7fe ff7d 	bl	8002510 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d302      	bcc.n	8003628 <I2C_IsErrorOccurred+0x54>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d13a      	bne.n	800369e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800363a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800364a:	d121      	bne.n	8003690 <I2C_IsErrorOccurred+0xbc>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003652:	d01d      	beq.n	8003690 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d01a      	beq.n	8003690 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003668:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800366a:	f7fe ff51 	bl	8002510 <HAL_GetTick>
 800366e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003670:	e00e      	b.n	8003690 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003672:	f7fe ff4d 	bl	8002510 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b19      	cmp	r3, #25
 800367e:	d907      	bls.n	8003690 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800368e:	e006      	b.n	800369e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b20      	cmp	r3, #32
 800369c:	d1e9      	bne.n	8003672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d003      	beq.n	80036b4 <I2C_IsErrorOccurred+0xe0>
 80036ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0aa      	beq.n	800360a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2220      	movs	r2, #32
 80036c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	f043 0304 	orr.w	r3, r3, #4
 80036ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01c      	beq.n	8003782 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fe3b 	bl	80033c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <I2C_IsErrorOccurred+0x1bc>)
 800375a:	400b      	ands	r3, r1
 800375c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003786:	4618      	mov	r0, r3
 8003788:	3728      	adds	r7, #40	@ 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	fe00e800 	.word	0xfe00e800

08003794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	4613      	mov	r3, r2
 80037a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037a6:	897b      	ldrh	r3, [r7, #10]
 80037a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ac:	7a7b      	ldrb	r3, [r7, #9]
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	4313      	orrs	r3, r2
 80037be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	0d5b      	lsrs	r3, r3, #21
 80037ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <I2C_TransferConfig+0x60>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	43db      	mvns	r3, r3
 80037d8:	ea02 0103 	and.w	r1, r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	03ff63ff 	.word	0x03ff63ff

080037f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d138      	bne.n	8003880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003818:	2302      	movs	r3, #2
 800381a:	e032      	b.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	@ 0x24
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800384a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d139      	bne.n	8003918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e033      	b.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2224      	movs	r2, #36	@ 0x24
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800392c:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <HAL_PWREx_GetVoltageRange+0x3c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003938:	d102      	bne.n	8003940 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800393a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800393e:	e00b      	b.n	8003958 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003940:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394e:	d102      	bne.n	8003956 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003954:	e000      	b.n	8003958 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003956:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40007000 	.word	0x40007000

08003968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d141      	bne.n	80039fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003976:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003982:	d131      	bne.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003984:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800398a:	4a46      	ldr	r2, [pc, #280]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003994:	4b43      	ldr	r3, [pc, #268]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800399c:	4a41      	ldr	r2, [pc, #260]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80039a4:	4b40      	ldr	r3, [pc, #256]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2232      	movs	r2, #50	@ 0x32
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	4a3f      	ldr	r2, [pc, #252]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9b      	lsrs	r3, r3, #18
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ba:	e002      	b.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c2:	4b38      	ldr	r3, [pc, #224]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ce:	d102      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f2      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d6:	4b33      	ldr	r3, [pc, #204]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e2:	d158      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e057      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e8:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ee:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039f8:	e04d      	b.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a00:	d141      	bne.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a02:	4b28      	ldr	r3, [pc, #160]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0e:	d131      	bne.n	8003a74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a10:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a16:	4a23      	ldr	r2, [pc, #140]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a20:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a28:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a30:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2232      	movs	r2, #50	@ 0x32
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	0c9b      	lsrs	r3, r3, #18
 8003a42:	3301      	adds	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a46:	e002      	b.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5a:	d102      	bne.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f2      	bne.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a62:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6e:	d112      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e011      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a84:	e007      	b.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a86:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a8e:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a94:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	431bde83 	.word	0x431bde83

08003ab0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f000 bc08 	b.w	80042d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac4:	4b96      	ldr	r3, [pc, #600]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ace:	4b94      	ldr	r3, [pc, #592]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80e4 	beq.w	8003cae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <HAL_RCC_OscConfig+0x4c>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	f040 808b 	bne.w	8003c0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	f040 8087 	bne.w	8003c0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003afc:	4b88      	ldr	r3, [pc, #544]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_OscConfig+0x64>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e3df      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	4b81      	ldr	r3, [pc, #516]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_RCC_OscConfig+0x7e>
 8003b24:	4b7e      	ldr	r3, [pc, #504]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b2c:	e005      	b.n	8003b3a <HAL_RCC_OscConfig+0x8a>
 8003b2e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d223      	bcs.n	8003b86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fdcc 	bl	80046e0 <RCC_SetFlashLatencyFromMSIRange>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e3c0      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b52:	4b73      	ldr	r3, [pc, #460]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a72      	ldr	r2, [pc, #456]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b58:	f043 0308 	orr.w	r3, r3, #8
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b70      	ldr	r3, [pc, #448]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	496d      	ldr	r1, [pc, #436]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b70:	4b6b      	ldr	r3, [pc, #428]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	4968      	ldr	r1, [pc, #416]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
 8003b84:	e025      	b.n	8003bd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b86:	4b66      	ldr	r3, [pc, #408]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a65      	ldr	r2, [pc, #404]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	f043 0308 	orr.w	r3, r3, #8
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b63      	ldr	r3, [pc, #396]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4960      	ldr	r1, [pc, #384]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	495b      	ldr	r1, [pc, #364]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fd8c 	bl	80046e0 <RCC_SetFlashLatencyFromMSIRange>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e380      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bd2:	f000 fcc1 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b51      	ldr	r3, [pc, #324]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	4950      	ldr	r1, [pc, #320]	@ (8003d24 <HAL_RCC_OscConfig+0x274>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	fa22 f303 	lsr.w	r3, r2, r3
 8003bee:	4a4e      	ldr	r2, [pc, #312]	@ (8003d28 <HAL_RCC_OscConfig+0x278>)
 8003bf0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8003d2c <HAL_RCC_OscConfig+0x27c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fc3a 	bl	8002470 <HAL_InitTick>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d052      	beq.n	8003cac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	e364      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d032      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c12:	4b43      	ldr	r3, [pc, #268]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a42      	ldr	r2, [pc, #264]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c1e:	f7fe fc77 	bl	8002510 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c26:	f7fe fc73 	bl	8002510 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e34d      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c38:	4b39      	ldr	r3, [pc, #228]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c44:	4b36      	ldr	r3, [pc, #216]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a35      	ldr	r2, [pc, #212]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	f043 0308 	orr.w	r3, r3, #8
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b33      	ldr	r3, [pc, #204]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4930      	ldr	r1, [pc, #192]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	492b      	ldr	r1, [pc, #172]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
 8003c76:	e01a      	b.n	8003cae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c78:	4b29      	ldr	r3, [pc, #164]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a28      	ldr	r2, [pc, #160]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c84:	f7fe fc44 	bl	8002510 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c8c:	f7fe fc40 	bl	8002510 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e31a      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c9e:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1dc>
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d073      	beq.n	8003da2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_OscConfig+0x21c>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d063      	beq.n	8003da0 <HAL_RCC_OscConfig+0x2f0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d15f      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e2f7      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cec:	d106      	bne.n	8003cfc <HAL_RCC_OscConfig+0x24c>
 8003cee:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e025      	b.n	8003d48 <HAL_RCC_OscConfig+0x298>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d04:	d114      	bne.n	8003d30 <HAL_RCC_OscConfig+0x280>
 8003d06:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a05      	ldr	r2, [pc, #20]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b03      	ldr	r3, [pc, #12]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a02      	ldr	r2, [pc, #8]	@ (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e013      	b.n	8003d48 <HAL_RCC_OscConfig+0x298>
 8003d20:	40021000 	.word	0x40021000
 8003d24:	0800a7e4 	.word	0x0800a7e4
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000088 	.word	0x20000088
 8003d30:	4ba0      	ldr	r3, [pc, #640]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a9f      	ldr	r2, [pc, #636]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b9d      	ldr	r3, [pc, #628]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a9c      	ldr	r2, [pc, #624]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fbde 	bl	8002510 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fe fbda 	bl	8002510 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	@ 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e2b4      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6a:	4b92      	ldr	r3, [pc, #584]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x2a8>
 8003d76:	e014      	b.n	8003da2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fe fbca 	bl	8002510 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fe fbc6 	bl	8002510 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	@ 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e2a0      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d92:	4b88      	ldr	r3, [pc, #544]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x2d0>
 8003d9e:	e000      	b.n	8003da2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d060      	beq.n	8003e70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x310>
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d119      	bne.n	8003dee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d116      	bne.n	8003dee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc0:	4b7c      	ldr	r3, [pc, #496]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x328>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e27d      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd8:	4b76      	ldr	r3, [pc, #472]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	4973      	ldr	r1, [pc, #460]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dec:	e040      	b.n	8003e70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d023      	beq.n	8003e3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df6:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e02:	f7fe fb85 	bl	8002510 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0a:	f7fe fb81 	bl	8002510 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e25b      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e1c:	4b65      	ldr	r3, [pc, #404]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e28:	4b62      	ldr	r3, [pc, #392]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	495f      	ldr	r1, [pc, #380]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
 8003e3c:	e018      	b.n	8003e70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5c      	ldr	r2, [pc, #368]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fb61 	bl	8002510 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fe fb5d 	bl	8002510 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e237      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e64:	4b53      	ldr	r3, [pc, #332]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d03c      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01c      	beq.n	8003ebe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e84:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e8a:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fe fb3c 	bl	8002510 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9c:	f7fe fb38 	bl	8002510 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e212      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eae:	4b41      	ldr	r3, [pc, #260]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ef      	beq.n	8003e9c <HAL_RCC_OscConfig+0x3ec>
 8003ebc:	e01b      	b.n	8003ef6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec4:	4a3b      	ldr	r2, [pc, #236]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe fb1f 	bl	8002510 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed6:	f7fe fb1b 	bl	8002510 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e1f5      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee8:	4b32      	ldr	r3, [pc, #200]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1ef      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80a6 	beq.w	8004050 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f04:	2300      	movs	r3, #0
 8003f06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f08:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f14:	4b27      	ldr	r3, [pc, #156]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f18:	4a26      	ldr	r2, [pc, #152]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f20:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f30:	4b21      	ldr	r3, [pc, #132]	@ (8003fb8 <HAL_RCC_OscConfig+0x508>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d118      	bne.n	8003f6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb8 <HAL_RCC_OscConfig+0x508>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <HAL_RCC_OscConfig+0x508>)
 8003f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f48:	f7fe fae2 	bl	8002510 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f50:	f7fe fade 	bl	8002510 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1b8      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HAL_RCC_OscConfig+0x508>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d108      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4d8>
 8003f76:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f86:	e029      	b.n	8003fdc <HAL_RCC_OscConfig+0x52c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b05      	cmp	r3, #5
 8003f8e:	d115      	bne.n	8003fbc <HAL_RCC_OscConfig+0x50c>
 8003f90:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f96:	4a07      	ldr	r2, [pc, #28]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fa0:	4b04      	ldr	r3, [pc, #16]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa6:	4a03      	ldr	r2, [pc, #12]	@ (8003fb4 <HAL_RCC_OscConfig+0x504>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fb0:	e014      	b.n	8003fdc <HAL_RCC_OscConfig+0x52c>
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	4b9d      	ldr	r3, [pc, #628]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc2:	4a9c      	ldr	r2, [pc, #624]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fcc:	4b99      	ldr	r3, [pc, #612]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd2:	4a98      	ldr	r2, [pc, #608]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d016      	beq.n	8004012 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fe fa94 	bl	8002510 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fe fa90 	bl	8002510 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e168      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004002:	4b8c      	ldr	r3, [pc, #560]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ed      	beq.n	8003fec <HAL_RCC_OscConfig+0x53c>
 8004010:	e015      	b.n	800403e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004012:	f7fe fa7d 	bl	8002510 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004018:	e00a      	b.n	8004030 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fe fa79 	bl	8002510 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e151      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004030:	4b80      	ldr	r3, [pc, #512]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ed      	bne.n	800401a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800403e:	7ffb      	ldrb	r3, [r7, #31]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	4b7b      	ldr	r3, [pc, #492]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004048:	4a7a      	ldr	r2, [pc, #488]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800404e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d03c      	beq.n	80040d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01c      	beq.n	800409e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004064:	4b73      	ldr	r3, [pc, #460]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004066:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800406a:	4a72      	ldr	r2, [pc, #456]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fe fa4c 	bl	8002510 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800407c:	f7fe fa48 	bl	8002510 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e122      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800408e:	4b69      	ldr	r3, [pc, #420]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004090:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ef      	beq.n	800407c <HAL_RCC_OscConfig+0x5cc>
 800409c:	e01b      	b.n	80040d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800409e:	4b65      	ldr	r3, [pc, #404]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80040a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040a4:	4a63      	ldr	r2, [pc, #396]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ae:	f7fe fa2f 	bl	8002510 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b6:	f7fe fa2b 	bl	8002510 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e105      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80040ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ef      	bne.n	80040b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80f9 	beq.w	80042d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	f040 80cf 	bne.w	8004288 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040ea:	4b52      	ldr	r3, [pc, #328]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 0203 	and.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d12c      	bne.n	8004158 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	3b01      	subs	r3, #1
 800410a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d123      	bne.n	8004158 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d11b      	bne.n	8004158 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d113      	bne.n	8004158 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	3b01      	subs	r3, #1
 800413e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d109      	bne.n	8004158 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	3b01      	subs	r3, #1
 8004152:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d071      	beq.n	800423c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d068      	beq.n	8004230 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800415e:	4b35      	ldr	r3, [pc, #212]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d105      	bne.n	8004176 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800416a:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e0ac      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800417a:	4b2e      	ldr	r3, [pc, #184]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2d      	ldr	r2, [pc, #180]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004184:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004186:	f7fe f9c3 	bl	8002510 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418e:	f7fe f9bf 	bl	8002510 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e099      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a0:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ac:	4b21      	ldr	r3, [pc, #132]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	4b21      	ldr	r3, [pc, #132]	@ (8004238 <HAL_RCC_OscConfig+0x788>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80041bc:	3a01      	subs	r2, #1
 80041be:	0112      	lsls	r2, r2, #4
 80041c0:	4311      	orrs	r1, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041c6:	0212      	lsls	r2, r2, #8
 80041c8:	4311      	orrs	r1, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041ce:	0852      	lsrs	r2, r2, #1
 80041d0:	3a01      	subs	r2, #1
 80041d2:	0552      	lsls	r2, r2, #21
 80041d4:	4311      	orrs	r1, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80041da:	0852      	lsrs	r2, r2, #1
 80041dc:	3a01      	subs	r2, #1
 80041de:	0652      	lsls	r2, r2, #25
 80041e0:	4311      	orrs	r1, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041e6:	06d2      	lsls	r2, r2, #27
 80041e8:	430a      	orrs	r2, r1
 80041ea:	4912      	ldr	r1, [pc, #72]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041f0:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80041f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a0c      	ldr	r2, [pc, #48]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004206:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004208:	f7fe f982 	bl	8002510 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe f97e 	bl	8002510 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e058      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004222:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <HAL_RCC_OscConfig+0x784>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800422e:	e050      	b.n	80042d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e04f      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
 8004234:	40021000 	.word	0x40021000
 8004238:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423c:	4b27      	ldr	r3, [pc, #156]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d144      	bne.n	80042d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004248:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a23      	ldr	r2, [pc, #140]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 800424e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004252:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004254:	4b21      	ldr	r3, [pc, #132]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a20      	ldr	r2, [pc, #128]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 800425a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800425e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004260:	f7fe f956 	bl	8002510 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004268:	f7fe f952 	bl	8002510 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e02c      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427a:	4b18      	ldr	r3, [pc, #96]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x7b8>
 8004286:	e024      	b.n	80042d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d01f      	beq.n	80042ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 8004294:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7fe f939 	bl	8002510 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fe f935 	bl	8002510 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e00f      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b4:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042c0:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4905      	ldr	r1, [pc, #20]	@ (80042dc <HAL_RCC_OscConfig+0x82c>)
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <HAL_RCC_OscConfig+0x830>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
 80042cc:	e001      	b.n	80042d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000
 80042e0:	feeefffc 	.word	0xfeeefffc

080042e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e11d      	b.n	8004538 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042fc:	4b90      	ldr	r3, [pc, #576]	@ (8004540 <HAL_RCC_ClockConfig+0x25c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d910      	bls.n	800432c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b8d      	ldr	r3, [pc, #564]	@ (8004540 <HAL_RCC_ClockConfig+0x25c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 020f 	bic.w	r2, r3, #15
 8004312:	498b      	ldr	r1, [pc, #556]	@ (8004540 <HAL_RCC_ClockConfig+0x25c>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b89      	ldr	r3, [pc, #548]	@ (8004540 <HAL_RCC_ClockConfig+0x25c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e105      	b.n	8004538 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d010      	beq.n	800435a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	4b81      	ldr	r3, [pc, #516]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004344:	429a      	cmp	r2, r3
 8004346:	d908      	bls.n	800435a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b7e      	ldr	r3, [pc, #504]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	497b      	ldr	r1, [pc, #492]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d079      	beq.n	800445a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d11e      	bne.n	80043ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	4b75      	ldr	r3, [pc, #468]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0dc      	b.n	8004538 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800437e:	f000 fa09 	bl	8004794 <RCC_GetSysClockFreqFromPLLSource>
 8004382:	4603      	mov	r3, r0
 8004384:	4a70      	ldr	r2, [pc, #448]	@ (8004548 <HAL_RCC_ClockConfig+0x264>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d946      	bls.n	8004418 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800438a:	4b6e      	ldr	r3, [pc, #440]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d140      	bne.n	8004418 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004396:	4b6b      	ldr	r3, [pc, #428]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800439e:	4a69      	ldr	r2, [pc, #420]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 80043a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043a6:	2380      	movs	r3, #128	@ 0x80
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e035      	b.n	8004418 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043b4:	4b63      	ldr	r3, [pc, #396]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d115      	bne.n	80043ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0b9      	b.n	8004538 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0ad      	b.n	8004538 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043dc:	4b59      	ldr	r3, [pc, #356]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0a5      	b.n	8004538 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80043ec:	f000 f8b4 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4a55      	ldr	r2, [pc, #340]	@ (8004548 <HAL_RCC_ClockConfig+0x264>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d90f      	bls.n	8004418 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80043f8:	4b52      	ldr	r3, [pc, #328]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004404:	4b4f      	ldr	r3, [pc, #316]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800440c:	4a4d      	ldr	r2, [pc, #308]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 800440e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004412:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004414:	2380      	movs	r3, #128	@ 0x80
 8004416:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004418:	4b4a      	ldr	r3, [pc, #296]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f023 0203 	bic.w	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4947      	ldr	r1, [pc, #284]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442a:	f7fe f871 	bl	8002510 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004430:	e00a      	b.n	8004448 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004432:	f7fe f86d 	bl	8002510 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e077      	b.n	8004538 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004448:	4b3e      	ldr	r3, [pc, #248]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 020c 	and.w	r2, r3, #12
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	429a      	cmp	r2, r3
 8004458:	d1eb      	bne.n	8004432 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b80      	cmp	r3, #128	@ 0x80
 800445e:	d105      	bne.n	800446c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004460:	4b38      	ldr	r3, [pc, #224]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a37      	ldr	r2, [pc, #220]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800446a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d010      	beq.n	800449a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	4b31      	ldr	r3, [pc, #196]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004484:	429a      	cmp	r2, r3
 8004486:	d208      	bcs.n	800449a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b2e      	ldr	r3, [pc, #184]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	492b      	ldr	r1, [pc, #172]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800449a:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <HAL_RCC_ClockConfig+0x25c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d210      	bcs.n	80044ca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a8:	4b25      	ldr	r3, [pc, #148]	@ (8004540 <HAL_RCC_ClockConfig+0x25c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f023 020f 	bic.w	r2, r3, #15
 80044b0:	4923      	ldr	r1, [pc, #140]	@ (8004540 <HAL_RCC_ClockConfig+0x25c>)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b8:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <HAL_RCC_ClockConfig+0x25c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d001      	beq.n	80044ca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e036      	b.n	8004538 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	4918      	ldr	r1, [pc, #96]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f4:	4b13      	ldr	r3, [pc, #76]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4910      	ldr	r1, [pc, #64]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004508:	f000 f826 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	490c      	ldr	r1, [pc, #48]	@ (800454c <HAL_RCC_ClockConfig+0x268>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
 8004524:	4a0a      	ldr	r2, [pc, #40]	@ (8004550 <HAL_RCC_ClockConfig+0x26c>)
 8004526:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004528:	4b0a      	ldr	r3, [pc, #40]	@ (8004554 <HAL_RCC_ClockConfig+0x270>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fd ff9f 	bl	8002470 <HAL_InitTick>
 8004532:	4603      	mov	r3, r0
 8004534:	73fb      	strb	r3, [r7, #15]

  return status;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40022000 	.word	0x40022000
 8004544:	40021000 	.word	0x40021000
 8004548:	04c4b400 	.word	0x04c4b400
 800454c:	0800a7e4 	.word	0x0800a7e4
 8004550:	20000000 	.word	0x20000000
 8004554:	20000088 	.word	0x20000088

08004558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	@ 0x24
 800455c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004566:	4b3e      	ldr	r3, [pc, #248]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004570:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x34>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0c      	cmp	r3, #12
 8004584:	d121      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d11e      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800458c:	4b34      	ldr	r3, [pc, #208]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004598:	4b31      	ldr	r3, [pc, #196]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e005      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10d      	bne.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d102      	bne.n	80045d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045d0:	4b25      	ldr	r3, [pc, #148]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x110>)
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e004      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045dc:	4b23      	ldr	r3, [pc, #140]	@ (800466c <HAL_RCC_GetSysClockFreq+0x114>)
 80045de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d134      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0xa6>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d003      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0xac>
 80045fc:	e005      	b.n	800460a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x110>)
 8004600:	617b      	str	r3, [r7, #20]
      break;
 8004602:	e005      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004604:	4b19      	ldr	r3, [pc, #100]	@ (800466c <HAL_RCC_GetSysClockFreq+0x114>)
 8004606:	617b      	str	r3, [r7, #20]
      break;
 8004608:	e002      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	617b      	str	r3, [r7, #20]
      break;
 800460e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3301      	adds	r3, #1
 800461c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	fb03 f202 	mul.w	r2, r3, r2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	0e5b      	lsrs	r3, r3, #25
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	3301      	adds	r3, #1
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004650:	69bb      	ldr	r3, [r7, #24]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3724      	adds	r7, #36	@ 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	0800a7fc 	.word	0x0800a7fc
 8004668:	00f42400 	.word	0x00f42400
 800466c:	007a1200 	.word	0x007a1200

08004670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004674:	4b03      	ldr	r3, [pc, #12]	@ (8004684 <HAL_RCC_GetHCLKFreq+0x14>)
 8004676:	681b      	ldr	r3, [r3, #0]
}
 8004678:	4618      	mov	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000000 	.word	0x20000000

08004688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800468c:	f7ff fff0 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4904      	ldr	r1, [pc, #16]	@ (80046b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	0800a7f4 	.word	0x0800a7f4

080046b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046b8:	f7ff ffda 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	0adb      	lsrs	r3, r3, #11
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4904      	ldr	r1, [pc, #16]	@ (80046dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046ca:	5ccb      	ldrb	r3, [r1, r3]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000
 80046dc:	0800a7f4 	.word	0x0800a7f4

080046e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046ec:	4b27      	ldr	r3, [pc, #156]	@ (800478c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046f8:	f7ff f916 	bl	8003928 <HAL_PWREx_GetVoltageRange>
 80046fc:	6178      	str	r0, [r7, #20]
 80046fe:	e014      	b.n	800472a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	4b22      	ldr	r3, [pc, #136]	@ (800478c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004704:	4a21      	ldr	r2, [pc, #132]	@ (800478c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470a:	6593      	str	r3, [r2, #88]	@ 0x58
 800470c:	4b1f      	ldr	r3, [pc, #124]	@ (800478c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004718:	f7ff f906 	bl	8003928 <HAL_PWREx_GetVoltageRange>
 800471c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800471e:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004722:	4a1a      	ldr	r2, [pc, #104]	@ (800478c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004728:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004730:	d10b      	bne.n	800474a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b80      	cmp	r3, #128	@ 0x80
 8004736:	d913      	bls.n	8004760 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2ba0      	cmp	r3, #160	@ 0xa0
 800473c:	d902      	bls.n	8004744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800473e:	2302      	movs	r3, #2
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e00d      	b.n	8004760 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004744:	2301      	movs	r3, #1
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	e00a      	b.n	8004760 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b7f      	cmp	r3, #127	@ 0x7f
 800474e:	d902      	bls.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004750:	2302      	movs	r3, #2
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	e004      	b.n	8004760 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b70      	cmp	r3, #112	@ 0x70
 800475a:	d101      	bne.n	8004760 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800475c:	2301      	movs	r3, #1
 800475e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004760:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 020f 	bic.w	r2, r3, #15
 8004768:	4909      	ldr	r1, [pc, #36]	@ (8004790 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004770:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40021000 	.word	0x40021000
 8004790:	40022000 	.word	0x40022000

08004794 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479a:	4b2d      	ldr	r3, [pc, #180]	@ (8004850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d00b      	beq.n	80047c2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d825      	bhi.n	80047fc <RCC_GetSysClockFreqFromPLLSource+0x68>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d008      	beq.n	80047c8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d11f      	bne.n	80047fc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80047bc:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80047be:	613b      	str	r3, [r7, #16]
    break;
 80047c0:	e01f      	b.n	8004802 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80047c2:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80047c4:	613b      	str	r3, [r7, #16]
    break;
 80047c6:	e01c      	b.n	8004802 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047c8:	4b21      	ldr	r3, [pc, #132]	@ (8004850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e005      	b.n	80047f0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80047f0:	4a1a      	ldr	r2, [pc, #104]	@ (800485c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	613b      	str	r3, [r7, #16]
    break;
 80047fa:	e002      	b.n	8004802 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
    break;
 8004800:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004802:	4b13      	ldr	r3, [pc, #76]	@ (8004850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	3301      	adds	r3, #1
 800480e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004810:	4b0f      	ldr	r3, [pc, #60]	@ (8004850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	fb03 f202 	mul.w	r2, r3, r2
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004828:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	0e5b      	lsrs	r3, r3, #25
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	3301      	adds	r3, #1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004842:	683b      	ldr	r3, [r7, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40021000 	.word	0x40021000
 8004854:	00f42400 	.word	0x00f42400
 8004858:	007a1200 	.word	0x007a1200
 800485c:	0800a7fc 	.word	0x0800a7fc

08004860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004868:	2300      	movs	r3, #0
 800486a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800486c:	2300      	movs	r3, #0
 800486e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004878:	2b00      	cmp	r3, #0
 800487a:	d040      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004880:	2b80      	cmp	r3, #128	@ 0x80
 8004882:	d02a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004884:	2b80      	cmp	r3, #128	@ 0x80
 8004886:	d825      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004888:	2b60      	cmp	r3, #96	@ 0x60
 800488a:	d026      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800488c:	2b60      	cmp	r3, #96	@ 0x60
 800488e:	d821      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004890:	2b40      	cmp	r3, #64	@ 0x40
 8004892:	d006      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	d81d      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d010      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80048a0:	e018      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048a2:	4b89      	ldr	r3, [pc, #548]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4a88      	ldr	r2, [pc, #544]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ae:	e015      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fb02 	bl	8004ec0 <RCCEx_PLLSAI1_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048c0:	e00c      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3320      	adds	r3, #32
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fbed 	bl	80050a8 <RCCEx_PLLSAI2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048d2:	e003      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	74fb      	strb	r3, [r7, #19]
      break;
 80048d8:	e000      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80048da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048e2:	4b79      	ldr	r3, [pc, #484]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048e8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048f0:	4975      	ldr	r1, [pc, #468]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80048f8:	e001      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d047      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004912:	d030      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004918:	d82a      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800491a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800491e:	d02a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004924:	d824      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800492a:	d008      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800492c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004930:	d81e      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800493a:	d010      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800493c:	e018      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800493e:	4b62      	ldr	r3, [pc, #392]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	4a61      	ldr	r2, [pc, #388]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004948:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800494a:	e015      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fab4 	bl	8004ec0 <RCCEx_PLLSAI1_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800495c:	e00c      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3320      	adds	r3, #32
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fb9f 	bl	80050a8 <RCCEx_PLLSAI2_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	74fb      	strb	r3, [r7, #19]
      break;
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004978:	7cfb      	ldrb	r3, [r7, #19]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800497e:	4b52      	ldr	r3, [pc, #328]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004980:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498c:	494e      	ldr	r1, [pc, #312]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004994:	e001      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 809f 	beq.w	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a8:	2300      	movs	r3, #0
 80049aa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ac:	4b46      	ldr	r3, [pc, #280]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c2:	4b41      	ldr	r3, [pc, #260]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	4a40      	ldr	r2, [pc, #256]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ce:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049da:	2301      	movs	r3, #1
 80049dc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049de:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a3a      	ldr	r2, [pc, #232]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80049e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049ea:	f7fd fd91 	bl	8002510 <HAL_GetTick>
 80049ee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049f0:	e009      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f2:	f7fd fd8d 	bl	8002510 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d902      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	74fb      	strb	r3, [r7, #19]
        break;
 8004a04:	e005      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a06:	4b31      	ldr	r3, [pc, #196]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0ef      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004a12:	7cfb      	ldrb	r3, [r7, #19]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d15b      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01f      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d019      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a36:	4b24      	ldr	r3, [pc, #144]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a42:	4b21      	ldr	r3, [pc, #132]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a48:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a52:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a62:	4a19      	ldr	r2, [pc, #100]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d016      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fd4c 	bl	8002510 <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fd fd48 	bl	8002510 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d902      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	74fb      	strb	r3, [r7, #19]
            break;
 8004a92:	e006      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0ec      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aa8:	4b07      	ldr	r3, [pc, #28]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab8:	4903      	ldr	r1, [pc, #12]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	74bb      	strb	r3, [r7, #18]
 8004ac6:	e005      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad4:	7c7b      	ldrb	r3, [r7, #17]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ada:	4ba0      	ldr	r3, [pc, #640]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ade:	4a9f      	ldr	r2, [pc, #636]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004af2:	4b9a      	ldr	r3, [pc, #616]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af8:	f023 0203 	bic.w	r2, r3, #3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b00:	4996      	ldr	r1, [pc, #600]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b14:	4b91      	ldr	r3, [pc, #580]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1a:	f023 020c 	bic.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	498e      	ldr	r1, [pc, #568]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b36:	4b89      	ldr	r3, [pc, #548]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b44:	4985      	ldr	r1, [pc, #532]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b58:	4b80      	ldr	r3, [pc, #512]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b66:	497d      	ldr	r1, [pc, #500]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b7a:	4b78      	ldr	r3, [pc, #480]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b88:	4974      	ldr	r1, [pc, #464]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004baa:	496c      	ldr	r1, [pc, #432]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bbe:	4b67      	ldr	r3, [pc, #412]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bcc:	4963      	ldr	r1, [pc, #396]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004be0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bee:	495b      	ldr	r1, [pc, #364]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c02:	4b56      	ldr	r3, [pc, #344]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c10:	4952      	ldr	r1, [pc, #328]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c24:	4b4d      	ldr	r3, [pc, #308]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c32:	494a      	ldr	r1, [pc, #296]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c46:	4b45      	ldr	r3, [pc, #276]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c54:	4941      	ldr	r1, [pc, #260]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c68:	4b3c      	ldr	r3, [pc, #240]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c76:	4939      	ldr	r1, [pc, #228]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d028      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8a:	4b34      	ldr	r3, [pc, #208]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c98:	4930      	ldr	r1, [pc, #192]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004caa:	4b2c      	ldr	r3, [pc, #176]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	4a2b      	ldr	r2, [pc, #172]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cb4:	60d3      	str	r3, [r2, #12]
 8004cb6:	e011      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 f8f9 	bl	8004ec0 <RCCEx_PLLSAI1_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cd2:	7cfb      	ldrb	r3, [r7, #19]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004cd8:	7cfb      	ldrb	r3, [r7, #19]
 8004cda:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d04d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cf0:	d108      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cf8:	4a18      	ldr	r2, [pc, #96]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cfe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d02:	e012      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d04:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d0a:	4a14      	ldr	r2, [pc, #80]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d10:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d14:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d22:	490e      	ldr	r1, [pc, #56]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d32:	d106      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d34:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a08      	ldr	r2, [pc, #32]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d3e:	60d3      	str	r3, [r2, #12]
 8004d40:	e020      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d4a:	d109      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d4c:	4b03      	ldr	r3, [pc, #12]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a02      	ldr	r2, [pc, #8]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d56:	60d3      	str	r3, [r2, #12]
 8004d58:	e014      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	2101      	movs	r1, #1
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 f8a5 	bl	8004ec0 <RCCEx_PLLSAI1_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d7a:	7cfb      	ldrb	r3, [r7, #19]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d028      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d90:	4b4a      	ldr	r3, [pc, #296]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9e:	4947      	ldr	r1, [pc, #284]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dae:	d106      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db0:	4b42      	ldr	r3, [pc, #264]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a41      	ldr	r2, [pc, #260]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dba:	60d3      	str	r3, [r2, #12]
 8004dbc:	e011      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dc6:	d10c      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f876 	bl	8004ec0 <RCCEx_PLLSAI1_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01e      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dee:	4b33      	ldr	r3, [pc, #204]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfe:	492f      	ldr	r1, [pc, #188]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2102      	movs	r1, #2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 f851 	bl	8004ec0 <RCCEx_PLLSAI1_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e22:	7cfb      	ldrb	r3, [r7, #19]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00b      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e38:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e3e:	f023 0204 	bic.w	r2, r3, #4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e48:	491c      	ldr	r1, [pc, #112]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00b      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e5c:	4b17      	ldr	r3, [pc, #92]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e62:	f023 0218 	bic.w	r2, r3, #24
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6c:	4913      	ldr	r1, [pc, #76]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d017      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e80:	4b0e      	ldr	r3, [pc, #56]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e90:	490a      	ldr	r1, [pc, #40]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a04      	ldr	r2, [pc, #16]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ece:	4b72      	ldr	r3, [pc, #456]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00e      	beq.n	8004ef8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004eda:	4b6f      	ldr	r3, [pc, #444]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0203 	and.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d103      	bne.n	8004ef2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
       ||
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d142      	bne.n	8004f78 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e03f      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d018      	beq.n	8004f32 <RCCEx_PLLSAI1_Config+0x72>
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d825      	bhi.n	8004f50 <RCCEx_PLLSAI1_Config+0x90>
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d002      	beq.n	8004f0e <RCCEx_PLLSAI1_Config+0x4e>
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d009      	beq.n	8004f20 <RCCEx_PLLSAI1_Config+0x60>
 8004f0c:	e020      	b.n	8004f50 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f0e:	4b62      	ldr	r3, [pc, #392]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11d      	bne.n	8004f56 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1e:	e01a      	b.n	8004f56 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f20:	4b5d      	ldr	r3, [pc, #372]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d116      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f30:	e013      	b.n	8004f5a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f32:	4b59      	ldr	r3, [pc, #356]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f3e:	4b56      	ldr	r3, [pc, #344]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f4e:	e006      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      break;
 8004f54:	e004      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004f56:	bf00      	nop
 8004f58:	e002      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e000      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004f66:	4b4c      	ldr	r3, [pc, #304]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4949      	ldr	r1, [pc, #292]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8086 	bne.w	800508c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f80:	4b45      	ldr	r3, [pc, #276]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a44      	ldr	r2, [pc, #272]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd fac0 	bl	8002510 <HAL_GetTick>
 8004f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f92:	e009      	b.n	8004fa8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f94:	f7fd fabc 	bl	8002510 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d902      	bls.n	8004fa8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fa6:	e005      	b.n	8004fb4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ef      	bne.n	8004f94 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d168      	bne.n	800508c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d113      	bne.n	8004fe8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc0:	4b35      	ldr	r3, [pc, #212]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	4b35      	ldr	r3, [pc, #212]	@ (800509c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6892      	ldr	r2, [r2, #8]
 8004fcc:	0211      	lsls	r1, r2, #8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68d2      	ldr	r2, [r2, #12]
 8004fd2:	06d2      	lsls	r2, r2, #27
 8004fd4:	4311      	orrs	r1, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6852      	ldr	r2, [r2, #4]
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	0112      	lsls	r2, r2, #4
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	492d      	ldr	r1, [pc, #180]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]
 8004fe6:	e02d      	b.n	8005044 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d115      	bne.n	800501a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fee:	4b2a      	ldr	r3, [pc, #168]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80050a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6892      	ldr	r2, [r2, #8]
 8004ffa:	0211      	lsls	r1, r2, #8
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6912      	ldr	r2, [r2, #16]
 8005000:	0852      	lsrs	r2, r2, #1
 8005002:	3a01      	subs	r2, #1
 8005004:	0552      	lsls	r2, r2, #21
 8005006:	4311      	orrs	r1, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6852      	ldr	r2, [r2, #4]
 800500c:	3a01      	subs	r2, #1
 800500e:	0112      	lsls	r2, r2, #4
 8005010:	430a      	orrs	r2, r1
 8005012:	4921      	ldr	r1, [pc, #132]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
 8005018:	e014      	b.n	8005044 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800501a:	4b1f      	ldr	r3, [pc, #124]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	4b21      	ldr	r3, [pc, #132]	@ (80050a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005020:	4013      	ands	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6892      	ldr	r2, [r2, #8]
 8005026:	0211      	lsls	r1, r2, #8
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6952      	ldr	r2, [r2, #20]
 800502c:	0852      	lsrs	r2, r2, #1
 800502e:	3a01      	subs	r2, #1
 8005030:	0652      	lsls	r2, r2, #25
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6852      	ldr	r2, [r2, #4]
 8005038:	3a01      	subs	r2, #1
 800503a:	0112      	lsls	r2, r2, #4
 800503c:	430a      	orrs	r2, r1
 800503e:	4916      	ldr	r1, [pc, #88]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005040:	4313      	orrs	r3, r2
 8005042:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005044:	4b14      	ldr	r3, [pc, #80]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a13      	ldr	r2, [pc, #76]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 800504a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800504e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005050:	f7fd fa5e 	bl	8002510 <HAL_GetTick>
 8005054:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005056:	e009      	b.n	800506c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005058:	f7fd fa5a 	bl	8002510 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d902      	bls.n	800506c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	73fb      	strb	r3, [r7, #15]
          break;
 800506a:	e005      	b.n	8005078 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ef      	beq.n	8005058 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	4904      	ldr	r1, [pc, #16]	@ (8005098 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000
 800509c:	07ff800f 	.word	0x07ff800f
 80050a0:	ff9f800f 	.word	0xff9f800f
 80050a4:	f9ff800f 	.word	0xf9ff800f

080050a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050b6:	4b72      	ldr	r3, [pc, #456]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00e      	beq.n	80050e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0203 	and.w	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d103      	bne.n	80050da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
       ||
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d142      	bne.n	8005160 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
 80050de:	e03f      	b.n	8005160 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d018      	beq.n	800511a <RCCEx_PLLSAI2_Config+0x72>
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d825      	bhi.n	8005138 <RCCEx_PLLSAI2_Config+0x90>
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d002      	beq.n	80050f6 <RCCEx_PLLSAI2_Config+0x4e>
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d009      	beq.n	8005108 <RCCEx_PLLSAI2_Config+0x60>
 80050f4:	e020      	b.n	8005138 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050f6:	4b62      	ldr	r3, [pc, #392]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d11d      	bne.n	800513e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005106:	e01a      	b.n	800513e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005108:	4b5d      	ldr	r3, [pc, #372]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005110:	2b00      	cmp	r3, #0
 8005112:	d116      	bne.n	8005142 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005118:	e013      	b.n	8005142 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800511a:	4b59      	ldr	r3, [pc, #356]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005126:	4b56      	ldr	r3, [pc, #344]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d109      	bne.n	8005146 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005136:	e006      	b.n	8005146 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      break;
 800513c:	e004      	b.n	8005148 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800513e:	bf00      	nop
 8005140:	e002      	b.n	8005148 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005146:	bf00      	nop
    }

    if(status == HAL_OK)
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800514e:	4b4c      	ldr	r3, [pc, #304]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f023 0203 	bic.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4949      	ldr	r1, [pc, #292]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800515c:	4313      	orrs	r3, r2
 800515e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 8086 	bne.w	8005274 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005168:	4b45      	ldr	r3, [pc, #276]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a44      	ldr	r2, [pc, #272]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005174:	f7fd f9cc 	bl	8002510 <HAL_GetTick>
 8005178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800517a:	e009      	b.n	8005190 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800517c:	f7fd f9c8 	bl	8002510 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d902      	bls.n	8005190 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	73fb      	strb	r3, [r7, #15]
        break;
 800518e:	e005      	b.n	800519c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005190:	4b3b      	ldr	r3, [pc, #236]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1ef      	bne.n	800517c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d168      	bne.n	8005274 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d113      	bne.n	80051d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051a8:	4b35      	ldr	r3, [pc, #212]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	4b35      	ldr	r3, [pc, #212]	@ (8005284 <RCCEx_PLLSAI2_Config+0x1dc>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	0211      	lsls	r1, r2, #8
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68d2      	ldr	r2, [r2, #12]
 80051ba:	06d2      	lsls	r2, r2, #27
 80051bc:	4311      	orrs	r1, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6852      	ldr	r2, [r2, #4]
 80051c2:	3a01      	subs	r2, #1
 80051c4:	0112      	lsls	r2, r2, #4
 80051c6:	430a      	orrs	r2, r1
 80051c8:	492d      	ldr	r1, [pc, #180]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	614b      	str	r3, [r1, #20]
 80051ce:	e02d      	b.n	800522c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d115      	bne.n	8005202 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	4b2b      	ldr	r3, [pc, #172]	@ (8005288 <RCCEx_PLLSAI2_Config+0x1e0>)
 80051dc:	4013      	ands	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6892      	ldr	r2, [r2, #8]
 80051e2:	0211      	lsls	r1, r2, #8
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6912      	ldr	r2, [r2, #16]
 80051e8:	0852      	lsrs	r2, r2, #1
 80051ea:	3a01      	subs	r2, #1
 80051ec:	0552      	lsls	r2, r2, #21
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6852      	ldr	r2, [r2, #4]
 80051f4:	3a01      	subs	r2, #1
 80051f6:	0112      	lsls	r2, r2, #4
 80051f8:	430a      	orrs	r2, r1
 80051fa:	4921      	ldr	r1, [pc, #132]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	614b      	str	r3, [r1, #20]
 8005200:	e014      	b.n	800522c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005202:	4b1f      	ldr	r3, [pc, #124]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	4b21      	ldr	r3, [pc, #132]	@ (800528c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005208:	4013      	ands	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6892      	ldr	r2, [r2, #8]
 800520e:	0211      	lsls	r1, r2, #8
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6952      	ldr	r2, [r2, #20]
 8005214:	0852      	lsrs	r2, r2, #1
 8005216:	3a01      	subs	r2, #1
 8005218:	0652      	lsls	r2, r2, #25
 800521a:	4311      	orrs	r1, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6852      	ldr	r2, [r2, #4]
 8005220:	3a01      	subs	r2, #1
 8005222:	0112      	lsls	r2, r2, #4
 8005224:	430a      	orrs	r2, r1
 8005226:	4916      	ldr	r1, [pc, #88]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005228:	4313      	orrs	r3, r2
 800522a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800522c:	4b14      	ldr	r3, [pc, #80]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a13      	ldr	r2, [pc, #76]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fd f96a 	bl	8002510 <HAL_GetTick>
 800523c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800523e:	e009      	b.n	8005254 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005240:	f7fd f966 	bl	8002510 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d902      	bls.n	8005254 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	73fb      	strb	r3, [r7, #15]
          break;
 8005252:	e005      	b.n	8005260 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005254:	4b0a      	ldr	r3, [pc, #40]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0ef      	beq.n	8005240 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	4904      	ldr	r1, [pc, #16]	@ (8005280 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005270:	4313      	orrs	r3, r2
 8005272:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
 8005284:	07ff800f 	.word	0x07ff800f
 8005288:	ff9f800f 	.word	0xff9f800f
 800528c:	f9ff800f 	.word	0xf9ff800f

08005290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e042      	b.n	8005328 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fc fbb3 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2224      	movs	r2, #36	@ 0x24
 80052be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fbb2 	bl	8005a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f8b3 	bl	800544c <UART_SetConfig>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e01b      	b.n	8005328 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800530e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fc31 	bl	8005b88 <UART_CheckIdleState>
 8005326:	4603      	mov	r3, r0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	@ 0x28
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005346:	2b20      	cmp	r3, #32
 8005348:	d17b      	bne.n	8005442 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_UART_Transmit+0x26>
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e074      	b.n	8005444 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2221      	movs	r2, #33	@ 0x21
 8005366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800536a:	f7fd f8d1 	bl	8002510 <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	88fa      	ldrh	r2, [r7, #6]
 8005374:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005388:	d108      	bne.n	800539c <HAL_UART_Transmit+0x6c>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	e003      	b.n	80053a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053a4:	e030      	b.n	8005408 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2180      	movs	r1, #128	@ 0x80
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fc93 	bl	8005cdc <UART_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e03d      	b.n	8005444 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10b      	bne.n	80053e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053da:	b292      	uxth	r2, r2
 80053dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	3302      	adds	r3, #2
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e007      	b.n	80053f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1c8      	bne.n	80053a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2200      	movs	r2, #0
 800541c:	2140      	movs	r1, #64	@ 0x40
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fc5c 	bl	8005cdc <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e006      	b.n	8005444 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	e000      	b.n	8005444 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800544c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005450:	b08c      	sub	sp, #48	@ 0x30
 8005452:	af00      	add	r7, sp, #0
 8005454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	431a      	orrs	r2, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	431a      	orrs	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	4313      	orrs	r3, r2
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	4baa      	ldr	r3, [pc, #680]	@ (8005724 <UART_SetConfig+0x2d8>)
 800547c:	4013      	ands	r3, r2
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005484:	430b      	orrs	r3, r1
 8005486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a9f      	ldr	r2, [pc, #636]	@ (8005728 <UART_SetConfig+0x2dc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b4:	4313      	orrs	r3, r2
 80054b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80054c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	f023 010f 	bic.w	r1, r3, #15
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a90      	ldr	r2, [pc, #576]	@ (800572c <UART_SetConfig+0x2e0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d125      	bne.n	800553c <UART_SetConfig+0xf0>
 80054f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005730 <UART_SetConfig+0x2e4>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d81a      	bhi.n	8005534 <UART_SetConfig+0xe8>
 80054fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <UART_SetConfig+0xb8>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005515 	.word	0x08005515
 8005508:	08005525 	.word	0x08005525
 800550c:	0800551d 	.word	0x0800551d
 8005510:	0800552d 	.word	0x0800552d
 8005514:	2301      	movs	r3, #1
 8005516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800551a:	e116      	b.n	800574a <UART_SetConfig+0x2fe>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005522:	e112      	b.n	800574a <UART_SetConfig+0x2fe>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552a:	e10e      	b.n	800574a <UART_SetConfig+0x2fe>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005532:	e10a      	b.n	800574a <UART_SetConfig+0x2fe>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e106      	b.n	800574a <UART_SetConfig+0x2fe>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a7c      	ldr	r2, [pc, #496]	@ (8005734 <UART_SetConfig+0x2e8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d138      	bne.n	80055b8 <UART_SetConfig+0x16c>
 8005546:	4b7a      	ldr	r3, [pc, #488]	@ (8005730 <UART_SetConfig+0x2e4>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	f003 030c 	and.w	r3, r3, #12
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d82d      	bhi.n	80055b0 <UART_SetConfig+0x164>
 8005554:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <UART_SetConfig+0x110>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005591 	.word	0x08005591
 8005560:	080055b1 	.word	0x080055b1
 8005564:	080055b1 	.word	0x080055b1
 8005568:	080055b1 	.word	0x080055b1
 800556c:	080055a1 	.word	0x080055a1
 8005570:	080055b1 	.word	0x080055b1
 8005574:	080055b1 	.word	0x080055b1
 8005578:	080055b1 	.word	0x080055b1
 800557c:	08005599 	.word	0x08005599
 8005580:	080055b1 	.word	0x080055b1
 8005584:	080055b1 	.word	0x080055b1
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055a9 	.word	0x080055a9
 8005590:	2300      	movs	r3, #0
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005596:	e0d8      	b.n	800574a <UART_SetConfig+0x2fe>
 8005598:	2302      	movs	r3, #2
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559e:	e0d4      	b.n	800574a <UART_SetConfig+0x2fe>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a6:	e0d0      	b.n	800574a <UART_SetConfig+0x2fe>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ae:	e0cc      	b.n	800574a <UART_SetConfig+0x2fe>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b6:	e0c8      	b.n	800574a <UART_SetConfig+0x2fe>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005738 <UART_SetConfig+0x2ec>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d125      	bne.n	800560e <UART_SetConfig+0x1c2>
 80055c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005730 <UART_SetConfig+0x2e4>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055cc:	2b30      	cmp	r3, #48	@ 0x30
 80055ce:	d016      	beq.n	80055fe <UART_SetConfig+0x1b2>
 80055d0:	2b30      	cmp	r3, #48	@ 0x30
 80055d2:	d818      	bhi.n	8005606 <UART_SetConfig+0x1ba>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d00a      	beq.n	80055ee <UART_SetConfig+0x1a2>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d814      	bhi.n	8005606 <UART_SetConfig+0x1ba>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <UART_SetConfig+0x19a>
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d008      	beq.n	80055f6 <UART_SetConfig+0x1aa>
 80055e4:	e00f      	b.n	8005606 <UART_SetConfig+0x1ba>
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ec:	e0ad      	b.n	800574a <UART_SetConfig+0x2fe>
 80055ee:	2302      	movs	r3, #2
 80055f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f4:	e0a9      	b.n	800574a <UART_SetConfig+0x2fe>
 80055f6:	2304      	movs	r3, #4
 80055f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fc:	e0a5      	b.n	800574a <UART_SetConfig+0x2fe>
 80055fe:	2308      	movs	r3, #8
 8005600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005604:	e0a1      	b.n	800574a <UART_SetConfig+0x2fe>
 8005606:	2310      	movs	r3, #16
 8005608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560c:	e09d      	b.n	800574a <UART_SetConfig+0x2fe>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4a      	ldr	r2, [pc, #296]	@ (800573c <UART_SetConfig+0x2f0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d125      	bne.n	8005664 <UART_SetConfig+0x218>
 8005618:	4b45      	ldr	r3, [pc, #276]	@ (8005730 <UART_SetConfig+0x2e4>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005622:	2bc0      	cmp	r3, #192	@ 0xc0
 8005624:	d016      	beq.n	8005654 <UART_SetConfig+0x208>
 8005626:	2bc0      	cmp	r3, #192	@ 0xc0
 8005628:	d818      	bhi.n	800565c <UART_SetConfig+0x210>
 800562a:	2b80      	cmp	r3, #128	@ 0x80
 800562c:	d00a      	beq.n	8005644 <UART_SetConfig+0x1f8>
 800562e:	2b80      	cmp	r3, #128	@ 0x80
 8005630:	d814      	bhi.n	800565c <UART_SetConfig+0x210>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <UART_SetConfig+0x1f0>
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d008      	beq.n	800564c <UART_SetConfig+0x200>
 800563a:	e00f      	b.n	800565c <UART_SetConfig+0x210>
 800563c:	2300      	movs	r3, #0
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005642:	e082      	b.n	800574a <UART_SetConfig+0x2fe>
 8005644:	2302      	movs	r3, #2
 8005646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564a:	e07e      	b.n	800574a <UART_SetConfig+0x2fe>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005652:	e07a      	b.n	800574a <UART_SetConfig+0x2fe>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565a:	e076      	b.n	800574a <UART_SetConfig+0x2fe>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005662:	e072      	b.n	800574a <UART_SetConfig+0x2fe>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a35      	ldr	r2, [pc, #212]	@ (8005740 <UART_SetConfig+0x2f4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d12a      	bne.n	80056c4 <UART_SetConfig+0x278>
 800566e:	4b30      	ldr	r3, [pc, #192]	@ (8005730 <UART_SetConfig+0x2e4>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800567c:	d01a      	beq.n	80056b4 <UART_SetConfig+0x268>
 800567e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005682:	d81b      	bhi.n	80056bc <UART_SetConfig+0x270>
 8005684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005688:	d00c      	beq.n	80056a4 <UART_SetConfig+0x258>
 800568a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568e:	d815      	bhi.n	80056bc <UART_SetConfig+0x270>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <UART_SetConfig+0x250>
 8005694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005698:	d008      	beq.n	80056ac <UART_SetConfig+0x260>
 800569a:	e00f      	b.n	80056bc <UART_SetConfig+0x270>
 800569c:	2300      	movs	r3, #0
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a2:	e052      	b.n	800574a <UART_SetConfig+0x2fe>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056aa:	e04e      	b.n	800574a <UART_SetConfig+0x2fe>
 80056ac:	2304      	movs	r3, #4
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b2:	e04a      	b.n	800574a <UART_SetConfig+0x2fe>
 80056b4:	2308      	movs	r3, #8
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ba:	e046      	b.n	800574a <UART_SetConfig+0x2fe>
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056c2:	e042      	b.n	800574a <UART_SetConfig+0x2fe>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <UART_SetConfig+0x2dc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d13a      	bne.n	8005744 <UART_SetConfig+0x2f8>
 80056ce:	4b18      	ldr	r3, [pc, #96]	@ (8005730 <UART_SetConfig+0x2e4>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056dc:	d01a      	beq.n	8005714 <UART_SetConfig+0x2c8>
 80056de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056e2:	d81b      	bhi.n	800571c <UART_SetConfig+0x2d0>
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e8:	d00c      	beq.n	8005704 <UART_SetConfig+0x2b8>
 80056ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ee:	d815      	bhi.n	800571c <UART_SetConfig+0x2d0>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <UART_SetConfig+0x2b0>
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f8:	d008      	beq.n	800570c <UART_SetConfig+0x2c0>
 80056fa:	e00f      	b.n	800571c <UART_SetConfig+0x2d0>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005702:	e022      	b.n	800574a <UART_SetConfig+0x2fe>
 8005704:	2302      	movs	r3, #2
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570a:	e01e      	b.n	800574a <UART_SetConfig+0x2fe>
 800570c:	2304      	movs	r3, #4
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005712:	e01a      	b.n	800574a <UART_SetConfig+0x2fe>
 8005714:	2308      	movs	r3, #8
 8005716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800571a:	e016      	b.n	800574a <UART_SetConfig+0x2fe>
 800571c:	2310      	movs	r3, #16
 800571e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005722:	e012      	b.n	800574a <UART_SetConfig+0x2fe>
 8005724:	cfff69f3 	.word	0xcfff69f3
 8005728:	40008000 	.word	0x40008000
 800572c:	40013800 	.word	0x40013800
 8005730:	40021000 	.word	0x40021000
 8005734:	40004400 	.word	0x40004400
 8005738:	40004800 	.word	0x40004800
 800573c:	40004c00 	.word	0x40004c00
 8005740:	40005000 	.word	0x40005000
 8005744:	2310      	movs	r3, #16
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4aae      	ldr	r2, [pc, #696]	@ (8005a08 <UART_SetConfig+0x5bc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	f040 8097 	bne.w	8005884 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005756:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800575a:	2b08      	cmp	r3, #8
 800575c:	d823      	bhi.n	80057a6 <UART_SetConfig+0x35a>
 800575e:	a201      	add	r2, pc, #4	@ (adr r2, 8005764 <UART_SetConfig+0x318>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005789 	.word	0x08005789
 8005768:	080057a7 	.word	0x080057a7
 800576c:	08005791 	.word	0x08005791
 8005770:	080057a7 	.word	0x080057a7
 8005774:	08005797 	.word	0x08005797
 8005778:	080057a7 	.word	0x080057a7
 800577c:	080057a7 	.word	0x080057a7
 8005780:	080057a7 	.word	0x080057a7
 8005784:	0800579f 	.word	0x0800579f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe ff7e 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 800578c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800578e:	e010      	b.n	80057b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005790:	4b9e      	ldr	r3, [pc, #632]	@ (8005a0c <UART_SetConfig+0x5c0>)
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005794:	e00d      	b.n	80057b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005796:	f7fe fedf 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 800579a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800579c:	e009      	b.n	80057b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057a4:	e005      	b.n	80057b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8130 	beq.w	8005a1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	4a94      	ldr	r2, [pc, #592]	@ (8005a10 <UART_SetConfig+0x5c4>)
 80057c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c4:	461a      	mov	r2, r3
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d305      	bcc.n	80057ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d903      	bls.n	80057f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057f0:	e113      	b.n	8005a1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	2200      	movs	r2, #0
 80057f6:	60bb      	str	r3, [r7, #8]
 80057f8:	60fa      	str	r2, [r7, #12]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	4a84      	ldr	r2, [pc, #528]	@ (8005a10 <UART_SetConfig+0x5c4>)
 8005800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005804:	b29b      	uxth	r3, r3
 8005806:	2200      	movs	r2, #0
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005814:	f7fb fa50 	bl	8000cb8 <__aeabi_uldivmod>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4610      	mov	r0, r2
 800581e:	4619      	mov	r1, r3
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	020b      	lsls	r3, r1, #8
 800582a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800582e:	0202      	lsls	r2, r0, #8
 8005830:	6979      	ldr	r1, [r7, #20]
 8005832:	6849      	ldr	r1, [r1, #4]
 8005834:	0849      	lsrs	r1, r1, #1
 8005836:	2000      	movs	r0, #0
 8005838:	460c      	mov	r4, r1
 800583a:	4605      	mov	r5, r0
 800583c:	eb12 0804 	adds.w	r8, r2, r4
 8005840:	eb43 0905 	adc.w	r9, r3, r5
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	469a      	mov	sl, r3
 800584c:	4693      	mov	fp, r2
 800584e:	4652      	mov	r2, sl
 8005850:	465b      	mov	r3, fp
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fb fa2f 	bl	8000cb8 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4613      	mov	r3, r2
 8005860:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005868:	d308      	bcc.n	800587c <UART_SetConfig+0x430>
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005870:	d204      	bcs.n	800587c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a3a      	ldr	r2, [r7, #32]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	e0ce      	b.n	8005a1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005882:	e0ca      	b.n	8005a1a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800588c:	d166      	bne.n	800595c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800588e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005892:	2b08      	cmp	r3, #8
 8005894:	d827      	bhi.n	80058e6 <UART_SetConfig+0x49a>
 8005896:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <UART_SetConfig+0x450>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	080058e7 	.word	0x080058e7
 80058ac:	080058d7 	.word	0x080058d7
 80058b0:	080058e7 	.word	0x080058e7
 80058b4:	080058e7 	.word	0x080058e7
 80058b8:	080058e7 	.word	0x080058e7
 80058bc:	080058df 	.word	0x080058df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c0:	f7fe fee2 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 80058c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058c6:	e014      	b.n	80058f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c8:	f7fe fef4 	bl	80046b4 <HAL_RCC_GetPCLK2Freq>
 80058cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ce:	e010      	b.n	80058f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d0:	4b4e      	ldr	r3, [pc, #312]	@ (8005a0c <UART_SetConfig+0x5c0>)
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058d4:	e00d      	b.n	80058f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d6:	f7fe fe3f 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80058da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058dc:	e009      	b.n	80058f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058e4:	e005      	b.n	80058f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8090 	beq.w	8005a1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	4a44      	ldr	r2, [pc, #272]	@ (8005a10 <UART_SetConfig+0x5c4>)
 8005900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005904:	461a      	mov	r2, r3
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	fbb3 f3f2 	udiv	r3, r3, r2
 800590c:	005a      	lsls	r2, r3, #1
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	441a      	add	r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2b0f      	cmp	r3, #15
 8005924:	d916      	bls.n	8005954 <UART_SetConfig+0x508>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800592c:	d212      	bcs.n	8005954 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f023 030f 	bic.w	r3, r3, #15
 8005936:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	b29b      	uxth	r3, r3
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	b29a      	uxth	r2, r3
 8005944:	8bfb      	ldrh	r3, [r7, #30]
 8005946:	4313      	orrs	r3, r2
 8005948:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	8bfa      	ldrh	r2, [r7, #30]
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	e062      	b.n	8005a1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800595a:	e05e      	b.n	8005a1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800595c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005960:	2b08      	cmp	r3, #8
 8005962:	d828      	bhi.n	80059b6 <UART_SetConfig+0x56a>
 8005964:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <UART_SetConfig+0x520>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	08005991 	.word	0x08005991
 8005970:	08005999 	.word	0x08005999
 8005974:	080059a1 	.word	0x080059a1
 8005978:	080059b7 	.word	0x080059b7
 800597c:	080059a7 	.word	0x080059a7
 8005980:	080059b7 	.word	0x080059b7
 8005984:	080059b7 	.word	0x080059b7
 8005988:	080059b7 	.word	0x080059b7
 800598c:	080059af 	.word	0x080059af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005990:	f7fe fe7a 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 8005994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005996:	e014      	b.n	80059c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005998:	f7fe fe8c 	bl	80046b4 <HAL_RCC_GetPCLK2Freq>
 800599c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800599e:	e010      	b.n	80059c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <UART_SetConfig+0x5c0>)
 80059a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059a4:	e00d      	b.n	80059c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a6:	f7fe fdd7 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80059aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059ac:	e009      	b.n	80059c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059b4:	e005      	b.n	80059c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059c0:	bf00      	nop
    }

    if (pclk != 0U)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d028      	beq.n	8005a1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	4a10      	ldr	r2, [pc, #64]	@ (8005a10 <UART_SetConfig+0x5c4>)
 80059ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d2:	461a      	mov	r2, r3
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	085b      	lsrs	r3, r3, #1
 80059e0:	441a      	add	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	d910      	bls.n	8005a14 <UART_SetConfig+0x5c8>
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f8:	d20c      	bcs.n	8005a14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x5ce>
 8005a06:	bf00      	nop
 8005a08:	40008000 	.word	0x40008000
 8005a0c:	00f42400 	.word	0x00f42400
 8005a10:	0800a82c 	.word	0x0800a82c
      }
      else
      {
        ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2200      	movs	r2, #0
 8005a34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3730      	adds	r7, #48	@ 0x30
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01a      	beq.n	8005b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b42:	d10a      	bne.n	8005b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b098      	sub	sp, #96	@ 0x60
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b98:	f7fc fcba 	bl	8002510 <HAL_GetTick>
 8005b9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d12f      	bne.n	8005c0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f88e 	bl	8005cdc <UART_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d022      	beq.n	8005c0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e6      	bne.n	8005bc6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e063      	b.n	8005cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d149      	bne.n	8005cae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c22:	2200      	movs	r2, #0
 8005c24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f857 	bl	8005cdc <UART_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d03c      	beq.n	8005cae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	623b      	str	r3, [r7, #32]
   return(result);
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c86:	61fa      	str	r2, [r7, #28]
 8005c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	69b9      	ldr	r1, [r7, #24]
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	617b      	str	r3, [r7, #20]
   return(result);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e012      	b.n	8005cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3758      	adds	r7, #88	@ 0x58
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cec:	e04f      	b.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d04b      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf6:	f7fc fc0b 	bl	8002510 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e04e      	b.n	8005dae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d037      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b80      	cmp	r3, #128	@ 0x80
 8005d22:	d034      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b40      	cmp	r3, #64	@ 0x40
 8005d28:	d031      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d110      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f838 	bl	8005db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2208      	movs	r2, #8
 8005d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e029      	b.n	8005dae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d68:	d111      	bne.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f81e 	bl	8005db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e00f      	b.n	8005dae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4013      	ands	r3, r2
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	bf0c      	ite	eq
 8005d9e:	2301      	moveq	r3, #1
 8005da0:	2300      	movne	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d0a0      	beq.n	8005cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b095      	sub	sp, #84	@ 0x54
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005de2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e6      	bne.n	8005dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e3      	bne.n	8005df0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d118      	bne.n	8005e62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f023 0310 	bic.w	r3, r3, #16
 8005e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6979      	ldr	r1, [r7, #20]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e76:	bf00      	nop
 8005e78:	3754      	adds	r7, #84	@ 0x54
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e027      	b.n	8005ee8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2224      	movs	r2, #36	@ 0x24
 8005ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ec6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e02d      	b.n	8005f68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2224      	movs	r2, #36	@ 0x24
 8005f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f84f 	bl	8005fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e02d      	b.n	8005fe4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	@ 0x24
 8005f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f811 	bl	8005fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d108      	bne.n	800600e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800600c:	e031      	b.n	8006072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800600e:	2308      	movs	r3, #8
 8006010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006012:	2308      	movs	r3, #8
 8006014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	0e5b      	lsrs	r3, r3, #25
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	0f5b      	lsrs	r3, r3, #29
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	7b3a      	ldrb	r2, [r7, #12]
 800603a:	4911      	ldr	r1, [pc, #68]	@ (8006080 <UARTEx_SetNbDataToProcess+0x94>)
 800603c:	5c8a      	ldrb	r2, [r1, r2]
 800603e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006042:	7b3a      	ldrb	r2, [r7, #12]
 8006044:	490f      	ldr	r1, [pc, #60]	@ (8006084 <UARTEx_SetNbDataToProcess+0x98>)
 8006046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006048:	fb93 f3f2 	sdiv	r3, r3, r2
 800604c:	b29a      	uxth	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	7b7a      	ldrb	r2, [r7, #13]
 8006058:	4909      	ldr	r1, [pc, #36]	@ (8006080 <UARTEx_SetNbDataToProcess+0x94>)
 800605a:	5c8a      	ldrb	r2, [r1, r2]
 800605c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006060:	7b7a      	ldrb	r2, [r7, #13]
 8006062:	4908      	ldr	r1, [pc, #32]	@ (8006084 <UARTEx_SetNbDataToProcess+0x98>)
 8006064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006066:	fb93 f3f2 	sdiv	r3, r3, r2
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	0800a844 	.word	0x0800a844
 8006084:	0800a84c 	.word	0x0800a84c

08006088 <__cvt>:
 8006088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	ec57 6b10 	vmov	r6, r7, d0
 8006090:	2f00      	cmp	r7, #0
 8006092:	460c      	mov	r4, r1
 8006094:	4619      	mov	r1, r3
 8006096:	463b      	mov	r3, r7
 8006098:	bfbb      	ittet	lt
 800609a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800609e:	461f      	movlt	r7, r3
 80060a0:	2300      	movge	r3, #0
 80060a2:	232d      	movlt	r3, #45	@ 0x2d
 80060a4:	700b      	strb	r3, [r1, #0]
 80060a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80060ac:	4691      	mov	r9, r2
 80060ae:	f023 0820 	bic.w	r8, r3, #32
 80060b2:	bfbc      	itt	lt
 80060b4:	4632      	movlt	r2, r6
 80060b6:	4616      	movlt	r6, r2
 80060b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060bc:	d005      	beq.n	80060ca <__cvt+0x42>
 80060be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80060c2:	d100      	bne.n	80060c6 <__cvt+0x3e>
 80060c4:	3401      	adds	r4, #1
 80060c6:	2102      	movs	r1, #2
 80060c8:	e000      	b.n	80060cc <__cvt+0x44>
 80060ca:	2103      	movs	r1, #3
 80060cc:	ab03      	add	r3, sp, #12
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	ab02      	add	r3, sp, #8
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	ec47 6b10 	vmov	d0, r6, r7
 80060d8:	4653      	mov	r3, sl
 80060da:	4622      	mov	r2, r4
 80060dc:	f001 f884 	bl	80071e8 <_dtoa_r>
 80060e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80060e4:	4605      	mov	r5, r0
 80060e6:	d119      	bne.n	800611c <__cvt+0x94>
 80060e8:	f019 0f01 	tst.w	r9, #1
 80060ec:	d00e      	beq.n	800610c <__cvt+0x84>
 80060ee:	eb00 0904 	add.w	r9, r0, r4
 80060f2:	2200      	movs	r2, #0
 80060f4:	2300      	movs	r3, #0
 80060f6:	4630      	mov	r0, r6
 80060f8:	4639      	mov	r1, r7
 80060fa:	f7fa fcfd 	bl	8000af8 <__aeabi_dcmpeq>
 80060fe:	b108      	cbz	r0, 8006104 <__cvt+0x7c>
 8006100:	f8cd 900c 	str.w	r9, [sp, #12]
 8006104:	2230      	movs	r2, #48	@ 0x30
 8006106:	9b03      	ldr	r3, [sp, #12]
 8006108:	454b      	cmp	r3, r9
 800610a:	d31e      	bcc.n	800614a <__cvt+0xc2>
 800610c:	9b03      	ldr	r3, [sp, #12]
 800610e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006110:	1b5b      	subs	r3, r3, r5
 8006112:	4628      	mov	r0, r5
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	b004      	add	sp, #16
 8006118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006120:	eb00 0904 	add.w	r9, r0, r4
 8006124:	d1e5      	bne.n	80060f2 <__cvt+0x6a>
 8006126:	7803      	ldrb	r3, [r0, #0]
 8006128:	2b30      	cmp	r3, #48	@ 0x30
 800612a:	d10a      	bne.n	8006142 <__cvt+0xba>
 800612c:	2200      	movs	r2, #0
 800612e:	2300      	movs	r3, #0
 8006130:	4630      	mov	r0, r6
 8006132:	4639      	mov	r1, r7
 8006134:	f7fa fce0 	bl	8000af8 <__aeabi_dcmpeq>
 8006138:	b918      	cbnz	r0, 8006142 <__cvt+0xba>
 800613a:	f1c4 0401 	rsb	r4, r4, #1
 800613e:	f8ca 4000 	str.w	r4, [sl]
 8006142:	f8da 3000 	ldr.w	r3, [sl]
 8006146:	4499      	add	r9, r3
 8006148:	e7d3      	b.n	80060f2 <__cvt+0x6a>
 800614a:	1c59      	adds	r1, r3, #1
 800614c:	9103      	str	r1, [sp, #12]
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	e7d9      	b.n	8006106 <__cvt+0x7e>

08006152 <__exponent>:
 8006152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006154:	2900      	cmp	r1, #0
 8006156:	bfba      	itte	lt
 8006158:	4249      	neglt	r1, r1
 800615a:	232d      	movlt	r3, #45	@ 0x2d
 800615c:	232b      	movge	r3, #43	@ 0x2b
 800615e:	2909      	cmp	r1, #9
 8006160:	7002      	strb	r2, [r0, #0]
 8006162:	7043      	strb	r3, [r0, #1]
 8006164:	dd29      	ble.n	80061ba <__exponent+0x68>
 8006166:	f10d 0307 	add.w	r3, sp, #7
 800616a:	461d      	mov	r5, r3
 800616c:	270a      	movs	r7, #10
 800616e:	461a      	mov	r2, r3
 8006170:	fbb1 f6f7 	udiv	r6, r1, r7
 8006174:	fb07 1416 	mls	r4, r7, r6, r1
 8006178:	3430      	adds	r4, #48	@ 0x30
 800617a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800617e:	460c      	mov	r4, r1
 8006180:	2c63      	cmp	r4, #99	@ 0x63
 8006182:	f103 33ff 	add.w	r3, r3, #4294967295
 8006186:	4631      	mov	r1, r6
 8006188:	dcf1      	bgt.n	800616e <__exponent+0x1c>
 800618a:	3130      	adds	r1, #48	@ 0x30
 800618c:	1e94      	subs	r4, r2, #2
 800618e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006192:	1c41      	adds	r1, r0, #1
 8006194:	4623      	mov	r3, r4
 8006196:	42ab      	cmp	r3, r5
 8006198:	d30a      	bcc.n	80061b0 <__exponent+0x5e>
 800619a:	f10d 0309 	add.w	r3, sp, #9
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	42ac      	cmp	r4, r5
 80061a2:	bf88      	it	hi
 80061a4:	2300      	movhi	r3, #0
 80061a6:	3302      	adds	r3, #2
 80061a8:	4403      	add	r3, r0
 80061aa:	1a18      	subs	r0, r3, r0
 80061ac:	b003      	add	sp, #12
 80061ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80061b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80061b8:	e7ed      	b.n	8006196 <__exponent+0x44>
 80061ba:	2330      	movs	r3, #48	@ 0x30
 80061bc:	3130      	adds	r1, #48	@ 0x30
 80061be:	7083      	strb	r3, [r0, #2]
 80061c0:	70c1      	strb	r1, [r0, #3]
 80061c2:	1d03      	adds	r3, r0, #4
 80061c4:	e7f1      	b.n	80061aa <__exponent+0x58>
	...

080061c8 <_printf_float>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	b08d      	sub	sp, #52	@ 0x34
 80061ce:	460c      	mov	r4, r1
 80061d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80061d4:	4616      	mov	r6, r2
 80061d6:	461f      	mov	r7, r3
 80061d8:	4605      	mov	r5, r0
 80061da:	f000 feef 	bl	8006fbc <_localeconv_r>
 80061de:	6803      	ldr	r3, [r0, #0]
 80061e0:	9304      	str	r3, [sp, #16]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fa f85c 	bl	80002a0 <strlen>
 80061e8:	2300      	movs	r3, #0
 80061ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80061ec:	f8d8 3000 	ldr.w	r3, [r8]
 80061f0:	9005      	str	r0, [sp, #20]
 80061f2:	3307      	adds	r3, #7
 80061f4:	f023 0307 	bic.w	r3, r3, #7
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006200:	f8d4 b000 	ldr.w	fp, [r4]
 8006204:	f8c8 2000 	str.w	r2, [r8]
 8006208:	e9d3 8900 	ldrd	r8, r9, [r3]
 800620c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006210:	9307      	str	r3, [sp, #28]
 8006212:	f8cd 8018 	str.w	r8, [sp, #24]
 8006216:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800621a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800621e:	4b9c      	ldr	r3, [pc, #624]	@ (8006490 <_printf_float+0x2c8>)
 8006220:	f04f 32ff 	mov.w	r2, #4294967295
 8006224:	f7fa fc9a 	bl	8000b5c <__aeabi_dcmpun>
 8006228:	bb70      	cbnz	r0, 8006288 <_printf_float+0xc0>
 800622a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800622e:	4b98      	ldr	r3, [pc, #608]	@ (8006490 <_printf_float+0x2c8>)
 8006230:	f04f 32ff 	mov.w	r2, #4294967295
 8006234:	f7fa fc74 	bl	8000b20 <__aeabi_dcmple>
 8006238:	bb30      	cbnz	r0, 8006288 <_printf_float+0xc0>
 800623a:	2200      	movs	r2, #0
 800623c:	2300      	movs	r3, #0
 800623e:	4640      	mov	r0, r8
 8006240:	4649      	mov	r1, r9
 8006242:	f7fa fc63 	bl	8000b0c <__aeabi_dcmplt>
 8006246:	b110      	cbz	r0, 800624e <_printf_float+0x86>
 8006248:	232d      	movs	r3, #45	@ 0x2d
 800624a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800624e:	4a91      	ldr	r2, [pc, #580]	@ (8006494 <_printf_float+0x2cc>)
 8006250:	4b91      	ldr	r3, [pc, #580]	@ (8006498 <_printf_float+0x2d0>)
 8006252:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006256:	bf94      	ite	ls
 8006258:	4690      	movls	r8, r2
 800625a:	4698      	movhi	r8, r3
 800625c:	2303      	movs	r3, #3
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	f02b 0304 	bic.w	r3, fp, #4
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	f04f 0900 	mov.w	r9, #0
 800626a:	9700      	str	r7, [sp, #0]
 800626c:	4633      	mov	r3, r6
 800626e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006270:	4621      	mov	r1, r4
 8006272:	4628      	mov	r0, r5
 8006274:	f000 f9d2 	bl	800661c <_printf_common>
 8006278:	3001      	adds	r0, #1
 800627a:	f040 808d 	bne.w	8006398 <_printf_float+0x1d0>
 800627e:	f04f 30ff 	mov.w	r0, #4294967295
 8006282:	b00d      	add	sp, #52	@ 0x34
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	4642      	mov	r2, r8
 800628a:	464b      	mov	r3, r9
 800628c:	4640      	mov	r0, r8
 800628e:	4649      	mov	r1, r9
 8006290:	f7fa fc64 	bl	8000b5c <__aeabi_dcmpun>
 8006294:	b140      	cbz	r0, 80062a8 <_printf_float+0xe0>
 8006296:	464b      	mov	r3, r9
 8006298:	2b00      	cmp	r3, #0
 800629a:	bfbc      	itt	lt
 800629c:	232d      	movlt	r3, #45	@ 0x2d
 800629e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80062a2:	4a7e      	ldr	r2, [pc, #504]	@ (800649c <_printf_float+0x2d4>)
 80062a4:	4b7e      	ldr	r3, [pc, #504]	@ (80064a0 <_printf_float+0x2d8>)
 80062a6:	e7d4      	b.n	8006252 <_printf_float+0x8a>
 80062a8:	6863      	ldr	r3, [r4, #4]
 80062aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80062ae:	9206      	str	r2, [sp, #24]
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	d13b      	bne.n	800632c <_printf_float+0x164>
 80062b4:	2306      	movs	r3, #6
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80062bc:	2300      	movs	r3, #0
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80062c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80062c8:	ab09      	add	r3, sp, #36	@ 0x24
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	6861      	ldr	r1, [r4, #4]
 80062ce:	ec49 8b10 	vmov	d0, r8, r9
 80062d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80062d6:	4628      	mov	r0, r5
 80062d8:	f7ff fed6 	bl	8006088 <__cvt>
 80062dc:	9b06      	ldr	r3, [sp, #24]
 80062de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062e0:	2b47      	cmp	r3, #71	@ 0x47
 80062e2:	4680      	mov	r8, r0
 80062e4:	d129      	bne.n	800633a <_printf_float+0x172>
 80062e6:	1cc8      	adds	r0, r1, #3
 80062e8:	db02      	blt.n	80062f0 <_printf_float+0x128>
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	4299      	cmp	r1, r3
 80062ee:	dd41      	ble.n	8006374 <_printf_float+0x1ac>
 80062f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80062f4:	fa5f fa8a 	uxtb.w	sl, sl
 80062f8:	3901      	subs	r1, #1
 80062fa:	4652      	mov	r2, sl
 80062fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006300:	9109      	str	r1, [sp, #36]	@ 0x24
 8006302:	f7ff ff26 	bl	8006152 <__exponent>
 8006306:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006308:	1813      	adds	r3, r2, r0
 800630a:	2a01      	cmp	r2, #1
 800630c:	4681      	mov	r9, r0
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	dc02      	bgt.n	8006318 <_printf_float+0x150>
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	07d2      	lsls	r2, r2, #31
 8006316:	d501      	bpl.n	800631c <_printf_float+0x154>
 8006318:	3301      	adds	r3, #1
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0a2      	beq.n	800626a <_printf_float+0xa2>
 8006324:	232d      	movs	r3, #45	@ 0x2d
 8006326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800632a:	e79e      	b.n	800626a <_printf_float+0xa2>
 800632c:	9a06      	ldr	r2, [sp, #24]
 800632e:	2a47      	cmp	r2, #71	@ 0x47
 8006330:	d1c2      	bne.n	80062b8 <_printf_float+0xf0>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1c0      	bne.n	80062b8 <_printf_float+0xf0>
 8006336:	2301      	movs	r3, #1
 8006338:	e7bd      	b.n	80062b6 <_printf_float+0xee>
 800633a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800633e:	d9db      	bls.n	80062f8 <_printf_float+0x130>
 8006340:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006344:	d118      	bne.n	8006378 <_printf_float+0x1b0>
 8006346:	2900      	cmp	r1, #0
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	dd0b      	ble.n	8006364 <_printf_float+0x19c>
 800634c:	6121      	str	r1, [r4, #16]
 800634e:	b913      	cbnz	r3, 8006356 <_printf_float+0x18e>
 8006350:	6822      	ldr	r2, [r4, #0]
 8006352:	07d0      	lsls	r0, r2, #31
 8006354:	d502      	bpl.n	800635c <_printf_float+0x194>
 8006356:	3301      	adds	r3, #1
 8006358:	440b      	add	r3, r1
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800635e:	f04f 0900 	mov.w	r9, #0
 8006362:	e7db      	b.n	800631c <_printf_float+0x154>
 8006364:	b913      	cbnz	r3, 800636c <_printf_float+0x1a4>
 8006366:	6822      	ldr	r2, [r4, #0]
 8006368:	07d2      	lsls	r2, r2, #31
 800636a:	d501      	bpl.n	8006370 <_printf_float+0x1a8>
 800636c:	3302      	adds	r3, #2
 800636e:	e7f4      	b.n	800635a <_printf_float+0x192>
 8006370:	2301      	movs	r3, #1
 8006372:	e7f2      	b.n	800635a <_printf_float+0x192>
 8006374:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800637a:	4299      	cmp	r1, r3
 800637c:	db05      	blt.n	800638a <_printf_float+0x1c2>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	6121      	str	r1, [r4, #16]
 8006382:	07d8      	lsls	r0, r3, #31
 8006384:	d5ea      	bpl.n	800635c <_printf_float+0x194>
 8006386:	1c4b      	adds	r3, r1, #1
 8006388:	e7e7      	b.n	800635a <_printf_float+0x192>
 800638a:	2900      	cmp	r1, #0
 800638c:	bfd4      	ite	le
 800638e:	f1c1 0202 	rsble	r2, r1, #2
 8006392:	2201      	movgt	r2, #1
 8006394:	4413      	add	r3, r2
 8006396:	e7e0      	b.n	800635a <_printf_float+0x192>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	055a      	lsls	r2, r3, #21
 800639c:	d407      	bmi.n	80063ae <_printf_float+0x1e6>
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	4642      	mov	r2, r8
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b8      	blx	r7
 80063a8:	3001      	adds	r0, #1
 80063aa:	d12b      	bne.n	8006404 <_printf_float+0x23c>
 80063ac:	e767      	b.n	800627e <_printf_float+0xb6>
 80063ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063b2:	f240 80dd 	bls.w	8006570 <_printf_float+0x3a8>
 80063b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063ba:	2200      	movs	r2, #0
 80063bc:	2300      	movs	r3, #0
 80063be:	f7fa fb9b 	bl	8000af8 <__aeabi_dcmpeq>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d033      	beq.n	800642e <_printf_float+0x266>
 80063c6:	4a37      	ldr	r2, [pc, #220]	@ (80064a4 <_printf_float+0x2dc>)
 80063c8:	2301      	movs	r3, #1
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f af54 	beq.w	800627e <_printf_float+0xb6>
 80063d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80063da:	4543      	cmp	r3, r8
 80063dc:	db02      	blt.n	80063e4 <_printf_float+0x21c>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	07d8      	lsls	r0, r3, #31
 80063e2:	d50f      	bpl.n	8006404 <_printf_float+0x23c>
 80063e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063e8:	4631      	mov	r1, r6
 80063ea:	4628      	mov	r0, r5
 80063ec:	47b8      	blx	r7
 80063ee:	3001      	adds	r0, #1
 80063f0:	f43f af45 	beq.w	800627e <_printf_float+0xb6>
 80063f4:	f04f 0900 	mov.w	r9, #0
 80063f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80063fc:	f104 0a1a 	add.w	sl, r4, #26
 8006400:	45c8      	cmp	r8, r9
 8006402:	dc09      	bgt.n	8006418 <_printf_float+0x250>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	079b      	lsls	r3, r3, #30
 8006408:	f100 8103 	bmi.w	8006612 <_printf_float+0x44a>
 800640c:	68e0      	ldr	r0, [r4, #12]
 800640e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006410:	4298      	cmp	r0, r3
 8006412:	bfb8      	it	lt
 8006414:	4618      	movlt	r0, r3
 8006416:	e734      	b.n	8006282 <_printf_float+0xba>
 8006418:	2301      	movs	r3, #1
 800641a:	4652      	mov	r2, sl
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f af2b 	beq.w	800627e <_printf_float+0xb6>
 8006428:	f109 0901 	add.w	r9, r9, #1
 800642c:	e7e8      	b.n	8006400 <_printf_float+0x238>
 800642e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	dc39      	bgt.n	80064a8 <_printf_float+0x2e0>
 8006434:	4a1b      	ldr	r2, [pc, #108]	@ (80064a4 <_printf_float+0x2dc>)
 8006436:	2301      	movs	r3, #1
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f af1d 	beq.w	800627e <_printf_float+0xb6>
 8006444:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006448:	ea59 0303 	orrs.w	r3, r9, r3
 800644c:	d102      	bne.n	8006454 <_printf_float+0x28c>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	07d9      	lsls	r1, r3, #31
 8006452:	d5d7      	bpl.n	8006404 <_printf_float+0x23c>
 8006454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	f43f af0d 	beq.w	800627e <_printf_float+0xb6>
 8006464:	f04f 0a00 	mov.w	sl, #0
 8006468:	f104 0b1a 	add.w	fp, r4, #26
 800646c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646e:	425b      	negs	r3, r3
 8006470:	4553      	cmp	r3, sl
 8006472:	dc01      	bgt.n	8006478 <_printf_float+0x2b0>
 8006474:	464b      	mov	r3, r9
 8006476:	e793      	b.n	80063a0 <_printf_float+0x1d8>
 8006478:	2301      	movs	r3, #1
 800647a:	465a      	mov	r2, fp
 800647c:	4631      	mov	r1, r6
 800647e:	4628      	mov	r0, r5
 8006480:	47b8      	blx	r7
 8006482:	3001      	adds	r0, #1
 8006484:	f43f aefb 	beq.w	800627e <_printf_float+0xb6>
 8006488:	f10a 0a01 	add.w	sl, sl, #1
 800648c:	e7ee      	b.n	800646c <_printf_float+0x2a4>
 800648e:	bf00      	nop
 8006490:	7fefffff 	.word	0x7fefffff
 8006494:	0800a854 	.word	0x0800a854
 8006498:	0800a858 	.word	0x0800a858
 800649c:	0800a85c 	.word	0x0800a85c
 80064a0:	0800a860 	.word	0x0800a860
 80064a4:	0800a864 	.word	0x0800a864
 80064a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064ae:	4553      	cmp	r3, sl
 80064b0:	bfa8      	it	ge
 80064b2:	4653      	movge	r3, sl
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	4699      	mov	r9, r3
 80064b8:	dc36      	bgt.n	8006528 <_printf_float+0x360>
 80064ba:	f04f 0b00 	mov.w	fp, #0
 80064be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064c2:	f104 021a 	add.w	r2, r4, #26
 80064c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064c8:	9306      	str	r3, [sp, #24]
 80064ca:	eba3 0309 	sub.w	r3, r3, r9
 80064ce:	455b      	cmp	r3, fp
 80064d0:	dc31      	bgt.n	8006536 <_printf_float+0x36e>
 80064d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d4:	459a      	cmp	sl, r3
 80064d6:	dc3a      	bgt.n	800654e <_printf_float+0x386>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	07da      	lsls	r2, r3, #31
 80064dc:	d437      	bmi.n	800654e <_printf_float+0x386>
 80064de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e0:	ebaa 0903 	sub.w	r9, sl, r3
 80064e4:	9b06      	ldr	r3, [sp, #24]
 80064e6:	ebaa 0303 	sub.w	r3, sl, r3
 80064ea:	4599      	cmp	r9, r3
 80064ec:	bfa8      	it	ge
 80064ee:	4699      	movge	r9, r3
 80064f0:	f1b9 0f00 	cmp.w	r9, #0
 80064f4:	dc33      	bgt.n	800655e <_printf_float+0x396>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064fe:	f104 0b1a 	add.w	fp, r4, #26
 8006502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006504:	ebaa 0303 	sub.w	r3, sl, r3
 8006508:	eba3 0309 	sub.w	r3, r3, r9
 800650c:	4543      	cmp	r3, r8
 800650e:	f77f af79 	ble.w	8006404 <_printf_float+0x23c>
 8006512:	2301      	movs	r3, #1
 8006514:	465a      	mov	r2, fp
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f aeae 	beq.w	800627e <_printf_float+0xb6>
 8006522:	f108 0801 	add.w	r8, r8, #1
 8006526:	e7ec      	b.n	8006502 <_printf_float+0x33a>
 8006528:	4642      	mov	r2, r8
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	d1c2      	bne.n	80064ba <_printf_float+0x2f2>
 8006534:	e6a3      	b.n	800627e <_printf_float+0xb6>
 8006536:	2301      	movs	r3, #1
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	9206      	str	r2, [sp, #24]
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f ae9c 	beq.w	800627e <_printf_float+0xb6>
 8006546:	9a06      	ldr	r2, [sp, #24]
 8006548:	f10b 0b01 	add.w	fp, fp, #1
 800654c:	e7bb      	b.n	80064c6 <_printf_float+0x2fe>
 800654e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006552:	4631      	mov	r1, r6
 8006554:	4628      	mov	r0, r5
 8006556:	47b8      	blx	r7
 8006558:	3001      	adds	r0, #1
 800655a:	d1c0      	bne.n	80064de <_printf_float+0x316>
 800655c:	e68f      	b.n	800627e <_printf_float+0xb6>
 800655e:	9a06      	ldr	r2, [sp, #24]
 8006560:	464b      	mov	r3, r9
 8006562:	4442      	add	r2, r8
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	47b8      	blx	r7
 800656a:	3001      	adds	r0, #1
 800656c:	d1c3      	bne.n	80064f6 <_printf_float+0x32e>
 800656e:	e686      	b.n	800627e <_printf_float+0xb6>
 8006570:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006574:	f1ba 0f01 	cmp.w	sl, #1
 8006578:	dc01      	bgt.n	800657e <_printf_float+0x3b6>
 800657a:	07db      	lsls	r3, r3, #31
 800657c:	d536      	bpl.n	80065ec <_printf_float+0x424>
 800657e:	2301      	movs	r3, #1
 8006580:	4642      	mov	r2, r8
 8006582:	4631      	mov	r1, r6
 8006584:	4628      	mov	r0, r5
 8006586:	47b8      	blx	r7
 8006588:	3001      	adds	r0, #1
 800658a:	f43f ae78 	beq.w	800627e <_printf_float+0xb6>
 800658e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006592:	4631      	mov	r1, r6
 8006594:	4628      	mov	r0, r5
 8006596:	47b8      	blx	r7
 8006598:	3001      	adds	r0, #1
 800659a:	f43f ae70 	beq.w	800627e <_printf_float+0xb6>
 800659e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065aa:	f7fa faa5 	bl	8000af8 <__aeabi_dcmpeq>
 80065ae:	b9c0      	cbnz	r0, 80065e2 <_printf_float+0x41a>
 80065b0:	4653      	mov	r3, sl
 80065b2:	f108 0201 	add.w	r2, r8, #1
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	d10c      	bne.n	80065da <_printf_float+0x412>
 80065c0:	e65d      	b.n	800627e <_printf_float+0xb6>
 80065c2:	2301      	movs	r3, #1
 80065c4:	465a      	mov	r2, fp
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b8      	blx	r7
 80065cc:	3001      	adds	r0, #1
 80065ce:	f43f ae56 	beq.w	800627e <_printf_float+0xb6>
 80065d2:	f108 0801 	add.w	r8, r8, #1
 80065d6:	45d0      	cmp	r8, sl
 80065d8:	dbf3      	blt.n	80065c2 <_printf_float+0x3fa>
 80065da:	464b      	mov	r3, r9
 80065dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065e0:	e6df      	b.n	80063a2 <_printf_float+0x1da>
 80065e2:	f04f 0800 	mov.w	r8, #0
 80065e6:	f104 0b1a 	add.w	fp, r4, #26
 80065ea:	e7f4      	b.n	80065d6 <_printf_float+0x40e>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4642      	mov	r2, r8
 80065f0:	e7e1      	b.n	80065b6 <_printf_float+0x3ee>
 80065f2:	2301      	movs	r3, #1
 80065f4:	464a      	mov	r2, r9
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	f43f ae3e 	beq.w	800627e <_printf_float+0xb6>
 8006602:	f108 0801 	add.w	r8, r8, #1
 8006606:	68e3      	ldr	r3, [r4, #12]
 8006608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800660a:	1a5b      	subs	r3, r3, r1
 800660c:	4543      	cmp	r3, r8
 800660e:	dcf0      	bgt.n	80065f2 <_printf_float+0x42a>
 8006610:	e6fc      	b.n	800640c <_printf_float+0x244>
 8006612:	f04f 0800 	mov.w	r8, #0
 8006616:	f104 0919 	add.w	r9, r4, #25
 800661a:	e7f4      	b.n	8006606 <_printf_float+0x43e>

0800661c <_printf_common>:
 800661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	4616      	mov	r6, r2
 8006622:	4698      	mov	r8, r3
 8006624:	688a      	ldr	r2, [r1, #8]
 8006626:	690b      	ldr	r3, [r1, #16]
 8006628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800662c:	4293      	cmp	r3, r2
 800662e:	bfb8      	it	lt
 8006630:	4613      	movlt	r3, r2
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006638:	4607      	mov	r7, r0
 800663a:	460c      	mov	r4, r1
 800663c:	b10a      	cbz	r2, 8006642 <_printf_common+0x26>
 800663e:	3301      	adds	r3, #1
 8006640:	6033      	str	r3, [r6, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	0699      	lsls	r1, r3, #26
 8006646:	bf42      	ittt	mi
 8006648:	6833      	ldrmi	r3, [r6, #0]
 800664a:	3302      	addmi	r3, #2
 800664c:	6033      	strmi	r3, [r6, #0]
 800664e:	6825      	ldr	r5, [r4, #0]
 8006650:	f015 0506 	ands.w	r5, r5, #6
 8006654:	d106      	bne.n	8006664 <_printf_common+0x48>
 8006656:	f104 0a19 	add.w	sl, r4, #25
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	6832      	ldr	r2, [r6, #0]
 800665e:	1a9b      	subs	r3, r3, r2
 8006660:	42ab      	cmp	r3, r5
 8006662:	dc26      	bgt.n	80066b2 <_printf_common+0x96>
 8006664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	3b00      	subs	r3, #0
 800666c:	bf18      	it	ne
 800666e:	2301      	movne	r3, #1
 8006670:	0692      	lsls	r2, r2, #26
 8006672:	d42b      	bmi.n	80066cc <_printf_common+0xb0>
 8006674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006678:	4641      	mov	r1, r8
 800667a:	4638      	mov	r0, r7
 800667c:	47c8      	blx	r9
 800667e:	3001      	adds	r0, #1
 8006680:	d01e      	beq.n	80066c0 <_printf_common+0xa4>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	6922      	ldr	r2, [r4, #16]
 8006686:	f003 0306 	and.w	r3, r3, #6
 800668a:	2b04      	cmp	r3, #4
 800668c:	bf02      	ittt	eq
 800668e:	68e5      	ldreq	r5, [r4, #12]
 8006690:	6833      	ldreq	r3, [r6, #0]
 8006692:	1aed      	subeq	r5, r5, r3
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	bf0c      	ite	eq
 8006698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800669c:	2500      	movne	r5, #0
 800669e:	4293      	cmp	r3, r2
 80066a0:	bfc4      	itt	gt
 80066a2:	1a9b      	subgt	r3, r3, r2
 80066a4:	18ed      	addgt	r5, r5, r3
 80066a6:	2600      	movs	r6, #0
 80066a8:	341a      	adds	r4, #26
 80066aa:	42b5      	cmp	r5, r6
 80066ac:	d11a      	bne.n	80066e4 <_printf_common+0xc8>
 80066ae:	2000      	movs	r0, #0
 80066b0:	e008      	b.n	80066c4 <_printf_common+0xa8>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4652      	mov	r2, sl
 80066b6:	4641      	mov	r1, r8
 80066b8:	4638      	mov	r0, r7
 80066ba:	47c8      	blx	r9
 80066bc:	3001      	adds	r0, #1
 80066be:	d103      	bne.n	80066c8 <_printf_common+0xac>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c8:	3501      	adds	r5, #1
 80066ca:	e7c6      	b.n	800665a <_printf_common+0x3e>
 80066cc:	18e1      	adds	r1, r4, r3
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	2030      	movs	r0, #48	@ 0x30
 80066d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066d6:	4422      	add	r2, r4
 80066d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066e0:	3302      	adds	r3, #2
 80066e2:	e7c7      	b.n	8006674 <_printf_common+0x58>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4622      	mov	r2, r4
 80066e8:	4641      	mov	r1, r8
 80066ea:	4638      	mov	r0, r7
 80066ec:	47c8      	blx	r9
 80066ee:	3001      	adds	r0, #1
 80066f0:	d0e6      	beq.n	80066c0 <_printf_common+0xa4>
 80066f2:	3601      	adds	r6, #1
 80066f4:	e7d9      	b.n	80066aa <_printf_common+0x8e>
	...

080066f8 <_printf_i>:
 80066f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	7e0f      	ldrb	r7, [r1, #24]
 80066fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006700:	2f78      	cmp	r7, #120	@ 0x78
 8006702:	4691      	mov	r9, r2
 8006704:	4680      	mov	r8, r0
 8006706:	460c      	mov	r4, r1
 8006708:	469a      	mov	sl, r3
 800670a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800670e:	d807      	bhi.n	8006720 <_printf_i+0x28>
 8006710:	2f62      	cmp	r7, #98	@ 0x62
 8006712:	d80a      	bhi.n	800672a <_printf_i+0x32>
 8006714:	2f00      	cmp	r7, #0
 8006716:	f000 80d2 	beq.w	80068be <_printf_i+0x1c6>
 800671a:	2f58      	cmp	r7, #88	@ 0x58
 800671c:	f000 80b9 	beq.w	8006892 <_printf_i+0x19a>
 8006720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006728:	e03a      	b.n	80067a0 <_printf_i+0xa8>
 800672a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800672e:	2b15      	cmp	r3, #21
 8006730:	d8f6      	bhi.n	8006720 <_printf_i+0x28>
 8006732:	a101      	add	r1, pc, #4	@ (adr r1, 8006738 <_printf_i+0x40>)
 8006734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006738:	08006791 	.word	0x08006791
 800673c:	080067a5 	.word	0x080067a5
 8006740:	08006721 	.word	0x08006721
 8006744:	08006721 	.word	0x08006721
 8006748:	08006721 	.word	0x08006721
 800674c:	08006721 	.word	0x08006721
 8006750:	080067a5 	.word	0x080067a5
 8006754:	08006721 	.word	0x08006721
 8006758:	08006721 	.word	0x08006721
 800675c:	08006721 	.word	0x08006721
 8006760:	08006721 	.word	0x08006721
 8006764:	080068a5 	.word	0x080068a5
 8006768:	080067cf 	.word	0x080067cf
 800676c:	0800685f 	.word	0x0800685f
 8006770:	08006721 	.word	0x08006721
 8006774:	08006721 	.word	0x08006721
 8006778:	080068c7 	.word	0x080068c7
 800677c:	08006721 	.word	0x08006721
 8006780:	080067cf 	.word	0x080067cf
 8006784:	08006721 	.word	0x08006721
 8006788:	08006721 	.word	0x08006721
 800678c:	08006867 	.word	0x08006867
 8006790:	6833      	ldr	r3, [r6, #0]
 8006792:	1d1a      	adds	r2, r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6032      	str	r2, [r6, #0]
 8006798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800679c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067a0:	2301      	movs	r3, #1
 80067a2:	e09d      	b.n	80068e0 <_printf_i+0x1e8>
 80067a4:	6833      	ldr	r3, [r6, #0]
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	1d19      	adds	r1, r3, #4
 80067aa:	6031      	str	r1, [r6, #0]
 80067ac:	0606      	lsls	r6, r0, #24
 80067ae:	d501      	bpl.n	80067b4 <_printf_i+0xbc>
 80067b0:	681d      	ldr	r5, [r3, #0]
 80067b2:	e003      	b.n	80067bc <_printf_i+0xc4>
 80067b4:	0645      	lsls	r5, r0, #25
 80067b6:	d5fb      	bpl.n	80067b0 <_printf_i+0xb8>
 80067b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067bc:	2d00      	cmp	r5, #0
 80067be:	da03      	bge.n	80067c8 <_printf_i+0xd0>
 80067c0:	232d      	movs	r3, #45	@ 0x2d
 80067c2:	426d      	negs	r5, r5
 80067c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067c8:	4859      	ldr	r0, [pc, #356]	@ (8006930 <_printf_i+0x238>)
 80067ca:	230a      	movs	r3, #10
 80067cc:	e011      	b.n	80067f2 <_printf_i+0xfa>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	0608      	lsls	r0, r1, #24
 80067d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067d8:	d402      	bmi.n	80067e0 <_printf_i+0xe8>
 80067da:	0649      	lsls	r1, r1, #25
 80067dc:	bf48      	it	mi
 80067de:	b2ad      	uxthmi	r5, r5
 80067e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80067e2:	4853      	ldr	r0, [pc, #332]	@ (8006930 <_printf_i+0x238>)
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	bf14      	ite	ne
 80067e8:	230a      	movne	r3, #10
 80067ea:	2308      	moveq	r3, #8
 80067ec:	2100      	movs	r1, #0
 80067ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067f2:	6866      	ldr	r6, [r4, #4]
 80067f4:	60a6      	str	r6, [r4, #8]
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	bfa2      	ittt	ge
 80067fa:	6821      	ldrge	r1, [r4, #0]
 80067fc:	f021 0104 	bicge.w	r1, r1, #4
 8006800:	6021      	strge	r1, [r4, #0]
 8006802:	b90d      	cbnz	r5, 8006808 <_printf_i+0x110>
 8006804:	2e00      	cmp	r6, #0
 8006806:	d04b      	beq.n	80068a0 <_printf_i+0x1a8>
 8006808:	4616      	mov	r6, r2
 800680a:	fbb5 f1f3 	udiv	r1, r5, r3
 800680e:	fb03 5711 	mls	r7, r3, r1, r5
 8006812:	5dc7      	ldrb	r7, [r0, r7]
 8006814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006818:	462f      	mov	r7, r5
 800681a:	42bb      	cmp	r3, r7
 800681c:	460d      	mov	r5, r1
 800681e:	d9f4      	bls.n	800680a <_printf_i+0x112>
 8006820:	2b08      	cmp	r3, #8
 8006822:	d10b      	bne.n	800683c <_printf_i+0x144>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07df      	lsls	r7, r3, #31
 8006828:	d508      	bpl.n	800683c <_printf_i+0x144>
 800682a:	6923      	ldr	r3, [r4, #16]
 800682c:	6861      	ldr	r1, [r4, #4]
 800682e:	4299      	cmp	r1, r3
 8006830:	bfde      	ittt	le
 8006832:	2330      	movle	r3, #48	@ 0x30
 8006834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800683c:	1b92      	subs	r2, r2, r6
 800683e:	6122      	str	r2, [r4, #16]
 8006840:	f8cd a000 	str.w	sl, [sp]
 8006844:	464b      	mov	r3, r9
 8006846:	aa03      	add	r2, sp, #12
 8006848:	4621      	mov	r1, r4
 800684a:	4640      	mov	r0, r8
 800684c:	f7ff fee6 	bl	800661c <_printf_common>
 8006850:	3001      	adds	r0, #1
 8006852:	d14a      	bne.n	80068ea <_printf_i+0x1f2>
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	b004      	add	sp, #16
 800685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	f043 0320 	orr.w	r3, r3, #32
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	4833      	ldr	r0, [pc, #204]	@ (8006934 <_printf_i+0x23c>)
 8006868:	2778      	movs	r7, #120	@ 0x78
 800686a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	6831      	ldr	r1, [r6, #0]
 8006872:	061f      	lsls	r7, r3, #24
 8006874:	f851 5b04 	ldr.w	r5, [r1], #4
 8006878:	d402      	bmi.n	8006880 <_printf_i+0x188>
 800687a:	065f      	lsls	r7, r3, #25
 800687c:	bf48      	it	mi
 800687e:	b2ad      	uxthmi	r5, r5
 8006880:	6031      	str	r1, [r6, #0]
 8006882:	07d9      	lsls	r1, r3, #31
 8006884:	bf44      	itt	mi
 8006886:	f043 0320 	orrmi.w	r3, r3, #32
 800688a:	6023      	strmi	r3, [r4, #0]
 800688c:	b11d      	cbz	r5, 8006896 <_printf_i+0x19e>
 800688e:	2310      	movs	r3, #16
 8006890:	e7ac      	b.n	80067ec <_printf_i+0xf4>
 8006892:	4827      	ldr	r0, [pc, #156]	@ (8006930 <_printf_i+0x238>)
 8006894:	e7e9      	b.n	800686a <_printf_i+0x172>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f023 0320 	bic.w	r3, r3, #32
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	e7f6      	b.n	800688e <_printf_i+0x196>
 80068a0:	4616      	mov	r6, r2
 80068a2:	e7bd      	b.n	8006820 <_printf_i+0x128>
 80068a4:	6833      	ldr	r3, [r6, #0]
 80068a6:	6825      	ldr	r5, [r4, #0]
 80068a8:	6961      	ldr	r1, [r4, #20]
 80068aa:	1d18      	adds	r0, r3, #4
 80068ac:	6030      	str	r0, [r6, #0]
 80068ae:	062e      	lsls	r6, r5, #24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0x1c0>
 80068b4:	6019      	str	r1, [r3, #0]
 80068b6:	e002      	b.n	80068be <_printf_i+0x1c6>
 80068b8:	0668      	lsls	r0, r5, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0x1bc>
 80068bc:	8019      	strh	r1, [r3, #0]
 80068be:	2300      	movs	r3, #0
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	4616      	mov	r6, r2
 80068c4:	e7bc      	b.n	8006840 <_printf_i+0x148>
 80068c6:	6833      	ldr	r3, [r6, #0]
 80068c8:	1d1a      	adds	r2, r3, #4
 80068ca:	6032      	str	r2, [r6, #0]
 80068cc:	681e      	ldr	r6, [r3, #0]
 80068ce:	6862      	ldr	r2, [r4, #4]
 80068d0:	2100      	movs	r1, #0
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7f9 fc94 	bl	8000200 <memchr>
 80068d8:	b108      	cbz	r0, 80068de <_printf_i+0x1e6>
 80068da:	1b80      	subs	r0, r0, r6
 80068dc:	6060      	str	r0, [r4, #4]
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	2300      	movs	r3, #0
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e8:	e7aa      	b.n	8006840 <_printf_i+0x148>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	4632      	mov	r2, r6
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	47d0      	blx	sl
 80068f4:	3001      	adds	r0, #1
 80068f6:	d0ad      	beq.n	8006854 <_printf_i+0x15c>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	079b      	lsls	r3, r3, #30
 80068fc:	d413      	bmi.n	8006926 <_printf_i+0x22e>
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	4298      	cmp	r0, r3
 8006904:	bfb8      	it	lt
 8006906:	4618      	movlt	r0, r3
 8006908:	e7a6      	b.n	8006858 <_printf_i+0x160>
 800690a:	2301      	movs	r3, #1
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	47d0      	blx	sl
 8006914:	3001      	adds	r0, #1
 8006916:	d09d      	beq.n	8006854 <_printf_i+0x15c>
 8006918:	3501      	adds	r5, #1
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	9903      	ldr	r1, [sp, #12]
 800691e:	1a5b      	subs	r3, r3, r1
 8006920:	42ab      	cmp	r3, r5
 8006922:	dcf2      	bgt.n	800690a <_printf_i+0x212>
 8006924:	e7eb      	b.n	80068fe <_printf_i+0x206>
 8006926:	2500      	movs	r5, #0
 8006928:	f104 0619 	add.w	r6, r4, #25
 800692c:	e7f5      	b.n	800691a <_printf_i+0x222>
 800692e:	bf00      	nop
 8006930:	0800a866 	.word	0x0800a866
 8006934:	0800a877 	.word	0x0800a877

08006938 <_scanf_float>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	b087      	sub	sp, #28
 800693e:	4617      	mov	r7, r2
 8006940:	9303      	str	r3, [sp, #12]
 8006942:	688b      	ldr	r3, [r1, #8]
 8006944:	1e5a      	subs	r2, r3, #1
 8006946:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800694a:	bf81      	itttt	hi
 800694c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006950:	eb03 0b05 	addhi.w	fp, r3, r5
 8006954:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006958:	608b      	strhi	r3, [r1, #8]
 800695a:	680b      	ldr	r3, [r1, #0]
 800695c:	460a      	mov	r2, r1
 800695e:	f04f 0500 	mov.w	r5, #0
 8006962:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006966:	f842 3b1c 	str.w	r3, [r2], #28
 800696a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800696e:	4680      	mov	r8, r0
 8006970:	460c      	mov	r4, r1
 8006972:	bf98      	it	ls
 8006974:	f04f 0b00 	movls.w	fp, #0
 8006978:	9201      	str	r2, [sp, #4]
 800697a:	4616      	mov	r6, r2
 800697c:	46aa      	mov	sl, r5
 800697e:	46a9      	mov	r9, r5
 8006980:	9502      	str	r5, [sp, #8]
 8006982:	68a2      	ldr	r2, [r4, #8]
 8006984:	b152      	cbz	r2, 800699c <_scanf_float+0x64>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b4e      	cmp	r3, #78	@ 0x4e
 800698c:	d864      	bhi.n	8006a58 <_scanf_float+0x120>
 800698e:	2b40      	cmp	r3, #64	@ 0x40
 8006990:	d83c      	bhi.n	8006a0c <_scanf_float+0xd4>
 8006992:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006996:	b2c8      	uxtb	r0, r1
 8006998:	280e      	cmp	r0, #14
 800699a:	d93a      	bls.n	8006a12 <_scanf_float+0xda>
 800699c:	f1b9 0f00 	cmp.w	r9, #0
 80069a0:	d003      	beq.n	80069aa <_scanf_float+0x72>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ae:	f1ba 0f01 	cmp.w	sl, #1
 80069b2:	f200 8117 	bhi.w	8006be4 <_scanf_float+0x2ac>
 80069b6:	9b01      	ldr	r3, [sp, #4]
 80069b8:	429e      	cmp	r6, r3
 80069ba:	f200 8108 	bhi.w	8006bce <_scanf_float+0x296>
 80069be:	2001      	movs	r0, #1
 80069c0:	b007      	add	sp, #28
 80069c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80069ca:	2a0d      	cmp	r2, #13
 80069cc:	d8e6      	bhi.n	800699c <_scanf_float+0x64>
 80069ce:	a101      	add	r1, pc, #4	@ (adr r1, 80069d4 <_scanf_float+0x9c>)
 80069d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069d4:	08006b1b 	.word	0x08006b1b
 80069d8:	0800699d 	.word	0x0800699d
 80069dc:	0800699d 	.word	0x0800699d
 80069e0:	0800699d 	.word	0x0800699d
 80069e4:	08006b7b 	.word	0x08006b7b
 80069e8:	08006b53 	.word	0x08006b53
 80069ec:	0800699d 	.word	0x0800699d
 80069f0:	0800699d 	.word	0x0800699d
 80069f4:	08006b29 	.word	0x08006b29
 80069f8:	0800699d 	.word	0x0800699d
 80069fc:	0800699d 	.word	0x0800699d
 8006a00:	0800699d 	.word	0x0800699d
 8006a04:	0800699d 	.word	0x0800699d
 8006a08:	08006ae1 	.word	0x08006ae1
 8006a0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006a10:	e7db      	b.n	80069ca <_scanf_float+0x92>
 8006a12:	290e      	cmp	r1, #14
 8006a14:	d8c2      	bhi.n	800699c <_scanf_float+0x64>
 8006a16:	a001      	add	r0, pc, #4	@ (adr r0, 8006a1c <_scanf_float+0xe4>)
 8006a18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a1c:	08006ad1 	.word	0x08006ad1
 8006a20:	0800699d 	.word	0x0800699d
 8006a24:	08006ad1 	.word	0x08006ad1
 8006a28:	08006b67 	.word	0x08006b67
 8006a2c:	0800699d 	.word	0x0800699d
 8006a30:	08006a79 	.word	0x08006a79
 8006a34:	08006ab7 	.word	0x08006ab7
 8006a38:	08006ab7 	.word	0x08006ab7
 8006a3c:	08006ab7 	.word	0x08006ab7
 8006a40:	08006ab7 	.word	0x08006ab7
 8006a44:	08006ab7 	.word	0x08006ab7
 8006a48:	08006ab7 	.word	0x08006ab7
 8006a4c:	08006ab7 	.word	0x08006ab7
 8006a50:	08006ab7 	.word	0x08006ab7
 8006a54:	08006ab7 	.word	0x08006ab7
 8006a58:	2b6e      	cmp	r3, #110	@ 0x6e
 8006a5a:	d809      	bhi.n	8006a70 <_scanf_float+0x138>
 8006a5c:	2b60      	cmp	r3, #96	@ 0x60
 8006a5e:	d8b2      	bhi.n	80069c6 <_scanf_float+0x8e>
 8006a60:	2b54      	cmp	r3, #84	@ 0x54
 8006a62:	d07b      	beq.n	8006b5c <_scanf_float+0x224>
 8006a64:	2b59      	cmp	r3, #89	@ 0x59
 8006a66:	d199      	bne.n	800699c <_scanf_float+0x64>
 8006a68:	2d07      	cmp	r5, #7
 8006a6a:	d197      	bne.n	800699c <_scanf_float+0x64>
 8006a6c:	2508      	movs	r5, #8
 8006a6e:	e02c      	b.n	8006aca <_scanf_float+0x192>
 8006a70:	2b74      	cmp	r3, #116	@ 0x74
 8006a72:	d073      	beq.n	8006b5c <_scanf_float+0x224>
 8006a74:	2b79      	cmp	r3, #121	@ 0x79
 8006a76:	e7f6      	b.n	8006a66 <_scanf_float+0x12e>
 8006a78:	6821      	ldr	r1, [r4, #0]
 8006a7a:	05c8      	lsls	r0, r1, #23
 8006a7c:	d51b      	bpl.n	8006ab6 <_scanf_float+0x17e>
 8006a7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006a82:	6021      	str	r1, [r4, #0]
 8006a84:	f109 0901 	add.w	r9, r9, #1
 8006a88:	f1bb 0f00 	cmp.w	fp, #0
 8006a8c:	d003      	beq.n	8006a96 <_scanf_float+0x15e>
 8006a8e:	3201      	adds	r2, #1
 8006a90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a94:	60a2      	str	r2, [r4, #8]
 8006a96:	68a3      	ldr	r3, [r4, #8]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	60a3      	str	r3, [r4, #8]
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	f340 8087 	ble.w	8006bbc <_scanf_float+0x284>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	e765      	b.n	8006982 <_scanf_float+0x4a>
 8006ab6:	eb1a 0105 	adds.w	r1, sl, r5
 8006aba:	f47f af6f 	bne.w	800699c <_scanf_float+0x64>
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006ac4:	6022      	str	r2, [r4, #0]
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	468a      	mov	sl, r1
 8006aca:	f806 3b01 	strb.w	r3, [r6], #1
 8006ace:	e7e2      	b.n	8006a96 <_scanf_float+0x15e>
 8006ad0:	6822      	ldr	r2, [r4, #0]
 8006ad2:	0610      	lsls	r0, r2, #24
 8006ad4:	f57f af62 	bpl.w	800699c <_scanf_float+0x64>
 8006ad8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006adc:	6022      	str	r2, [r4, #0]
 8006ade:	e7f4      	b.n	8006aca <_scanf_float+0x192>
 8006ae0:	f1ba 0f00 	cmp.w	sl, #0
 8006ae4:	d10e      	bne.n	8006b04 <_scanf_float+0x1cc>
 8006ae6:	f1b9 0f00 	cmp.w	r9, #0
 8006aea:	d10e      	bne.n	8006b0a <_scanf_float+0x1d2>
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006af2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006af6:	d108      	bne.n	8006b0a <_scanf_float+0x1d2>
 8006af8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006afc:	6022      	str	r2, [r4, #0]
 8006afe:	f04f 0a01 	mov.w	sl, #1
 8006b02:	e7e2      	b.n	8006aca <_scanf_float+0x192>
 8006b04:	f1ba 0f02 	cmp.w	sl, #2
 8006b08:	d055      	beq.n	8006bb6 <_scanf_float+0x27e>
 8006b0a:	2d01      	cmp	r5, #1
 8006b0c:	d002      	beq.n	8006b14 <_scanf_float+0x1dc>
 8006b0e:	2d04      	cmp	r5, #4
 8006b10:	f47f af44 	bne.w	800699c <_scanf_float+0x64>
 8006b14:	3501      	adds	r5, #1
 8006b16:	b2ed      	uxtb	r5, r5
 8006b18:	e7d7      	b.n	8006aca <_scanf_float+0x192>
 8006b1a:	f1ba 0f01 	cmp.w	sl, #1
 8006b1e:	f47f af3d 	bne.w	800699c <_scanf_float+0x64>
 8006b22:	f04f 0a02 	mov.w	sl, #2
 8006b26:	e7d0      	b.n	8006aca <_scanf_float+0x192>
 8006b28:	b97d      	cbnz	r5, 8006b4a <_scanf_float+0x212>
 8006b2a:	f1b9 0f00 	cmp.w	r9, #0
 8006b2e:	f47f af38 	bne.w	80069a2 <_scanf_float+0x6a>
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b3c:	f040 8108 	bne.w	8006d50 <_scanf_float+0x418>
 8006b40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b44:	6022      	str	r2, [r4, #0]
 8006b46:	2501      	movs	r5, #1
 8006b48:	e7bf      	b.n	8006aca <_scanf_float+0x192>
 8006b4a:	2d03      	cmp	r5, #3
 8006b4c:	d0e2      	beq.n	8006b14 <_scanf_float+0x1dc>
 8006b4e:	2d05      	cmp	r5, #5
 8006b50:	e7de      	b.n	8006b10 <_scanf_float+0x1d8>
 8006b52:	2d02      	cmp	r5, #2
 8006b54:	f47f af22 	bne.w	800699c <_scanf_float+0x64>
 8006b58:	2503      	movs	r5, #3
 8006b5a:	e7b6      	b.n	8006aca <_scanf_float+0x192>
 8006b5c:	2d06      	cmp	r5, #6
 8006b5e:	f47f af1d 	bne.w	800699c <_scanf_float+0x64>
 8006b62:	2507      	movs	r5, #7
 8006b64:	e7b1      	b.n	8006aca <_scanf_float+0x192>
 8006b66:	6822      	ldr	r2, [r4, #0]
 8006b68:	0591      	lsls	r1, r2, #22
 8006b6a:	f57f af17 	bpl.w	800699c <_scanf_float+0x64>
 8006b6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b78:	e7a7      	b.n	8006aca <_scanf_float+0x192>
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006b80:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006b84:	d006      	beq.n	8006b94 <_scanf_float+0x25c>
 8006b86:	0550      	lsls	r0, r2, #21
 8006b88:	f57f af08 	bpl.w	800699c <_scanf_float+0x64>
 8006b8c:	f1b9 0f00 	cmp.w	r9, #0
 8006b90:	f000 80de 	beq.w	8006d50 <_scanf_float+0x418>
 8006b94:	0591      	lsls	r1, r2, #22
 8006b96:	bf58      	it	pl
 8006b98:	9902      	ldrpl	r1, [sp, #8]
 8006b9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b9e:	bf58      	it	pl
 8006ba0:	eba9 0101 	subpl.w	r1, r9, r1
 8006ba4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ba8:	bf58      	it	pl
 8006baa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bae:	6022      	str	r2, [r4, #0]
 8006bb0:	f04f 0900 	mov.w	r9, #0
 8006bb4:	e789      	b.n	8006aca <_scanf_float+0x192>
 8006bb6:	f04f 0a03 	mov.w	sl, #3
 8006bba:	e786      	b.n	8006aca <_scanf_float+0x192>
 8006bbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	4798      	blx	r3
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f43f aedb 	beq.w	8006982 <_scanf_float+0x4a>
 8006bcc:	e6e6      	b.n	800699c <_scanf_float+0x64>
 8006bce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4798      	blx	r3
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	e6e8      	b.n	80069b6 <_scanf_float+0x7e>
 8006be4:	1e6b      	subs	r3, r5, #1
 8006be6:	2b06      	cmp	r3, #6
 8006be8:	d824      	bhi.n	8006c34 <_scanf_float+0x2fc>
 8006bea:	2d02      	cmp	r5, #2
 8006bec:	d836      	bhi.n	8006c5c <_scanf_float+0x324>
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	429e      	cmp	r6, r3
 8006bf2:	f67f aee4 	bls.w	80069be <_scanf_float+0x86>
 8006bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bfe:	463a      	mov	r2, r7
 8006c00:	4640      	mov	r0, r8
 8006c02:	4798      	blx	r3
 8006c04:	6923      	ldr	r3, [r4, #16]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	6123      	str	r3, [r4, #16]
 8006c0a:	e7f0      	b.n	8006bee <_scanf_float+0x2b6>
 8006c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006c14:	463a      	mov	r2, r7
 8006c16:	4640      	mov	r0, r8
 8006c18:	4798      	blx	r3
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c24:	fa5f fa8a 	uxtb.w	sl, sl
 8006c28:	f1ba 0f02 	cmp.w	sl, #2
 8006c2c:	d1ee      	bne.n	8006c0c <_scanf_float+0x2d4>
 8006c2e:	3d03      	subs	r5, #3
 8006c30:	b2ed      	uxtb	r5, r5
 8006c32:	1b76      	subs	r6, r6, r5
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	05da      	lsls	r2, r3, #23
 8006c38:	d530      	bpl.n	8006c9c <_scanf_float+0x364>
 8006c3a:	055b      	lsls	r3, r3, #21
 8006c3c:	d511      	bpl.n	8006c62 <_scanf_float+0x32a>
 8006c3e:	9b01      	ldr	r3, [sp, #4]
 8006c40:	429e      	cmp	r6, r3
 8006c42:	f67f aebc 	bls.w	80069be <_scanf_float+0x86>
 8006c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c4e:	463a      	mov	r2, r7
 8006c50:	4640      	mov	r0, r8
 8006c52:	4798      	blx	r3
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	6123      	str	r3, [r4, #16]
 8006c5a:	e7f0      	b.n	8006c3e <_scanf_float+0x306>
 8006c5c:	46aa      	mov	sl, r5
 8006c5e:	46b3      	mov	fp, r6
 8006c60:	e7de      	b.n	8006c20 <_scanf_float+0x2e8>
 8006c62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	2965      	cmp	r1, #101	@ 0x65
 8006c6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c72:	6123      	str	r3, [r4, #16]
 8006c74:	d00c      	beq.n	8006c90 <_scanf_float+0x358>
 8006c76:	2945      	cmp	r1, #69	@ 0x45
 8006c78:	d00a      	beq.n	8006c90 <_scanf_float+0x358>
 8006c7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c7e:	463a      	mov	r2, r7
 8006c80:	4640      	mov	r0, r8
 8006c82:	4798      	blx	r3
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	1eb5      	subs	r5, r6, #2
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c94:	463a      	mov	r2, r7
 8006c96:	4640      	mov	r0, r8
 8006c98:	4798      	blx	r3
 8006c9a:	462e      	mov	r6, r5
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	f012 0210 	ands.w	r2, r2, #16
 8006ca2:	d001      	beq.n	8006ca8 <_scanf_float+0x370>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e68b      	b.n	80069c0 <_scanf_float+0x88>
 8006ca8:	7032      	strb	r2, [r6, #0]
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cb4:	d11c      	bne.n	8006cf0 <_scanf_float+0x3b8>
 8006cb6:	9b02      	ldr	r3, [sp, #8]
 8006cb8:	454b      	cmp	r3, r9
 8006cba:	eba3 0209 	sub.w	r2, r3, r9
 8006cbe:	d123      	bne.n	8006d08 <_scanf_float+0x3d0>
 8006cc0:	9901      	ldr	r1, [sp, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	f002 fc07 	bl	80094d8 <_strtod_r>
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	6821      	ldr	r1, [r4, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f011 0f02 	tst.w	r1, #2
 8006cd4:	ec57 6b10 	vmov	r6, r7, d0
 8006cd8:	f103 0204 	add.w	r2, r3, #4
 8006cdc:	d01f      	beq.n	8006d1e <_scanf_float+0x3e6>
 8006cde:	9903      	ldr	r1, [sp, #12]
 8006ce0:	600a      	str	r2, [r1, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	e9c3 6700 	strd	r6, r7, [r3]
 8006ce8:	68e3      	ldr	r3, [r4, #12]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60e3      	str	r3, [r4, #12]
 8006cee:	e7d9      	b.n	8006ca4 <_scanf_float+0x36c>
 8006cf0:	9b04      	ldr	r3, [sp, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0e4      	beq.n	8006cc0 <_scanf_float+0x388>
 8006cf6:	9905      	ldr	r1, [sp, #20]
 8006cf8:	230a      	movs	r3, #10
 8006cfa:	3101      	adds	r1, #1
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	f002 fc6b 	bl	80095d8 <_strtol_r>
 8006d02:	9b04      	ldr	r3, [sp, #16]
 8006d04:	9e05      	ldr	r6, [sp, #20]
 8006d06:	1ac2      	subs	r2, r0, r3
 8006d08:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006d0c:	429e      	cmp	r6, r3
 8006d0e:	bf28      	it	cs
 8006d10:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006d14:	4910      	ldr	r1, [pc, #64]	@ (8006d58 <_scanf_float+0x420>)
 8006d16:	4630      	mov	r0, r6
 8006d18:	f000 f8e4 	bl	8006ee4 <siprintf>
 8006d1c:	e7d0      	b.n	8006cc0 <_scanf_float+0x388>
 8006d1e:	f011 0f04 	tst.w	r1, #4
 8006d22:	9903      	ldr	r1, [sp, #12]
 8006d24:	600a      	str	r2, [r1, #0]
 8006d26:	d1dc      	bne.n	8006ce2 <_scanf_float+0x3aa>
 8006d28:	681d      	ldr	r5, [r3, #0]
 8006d2a:	4632      	mov	r2, r6
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	4630      	mov	r0, r6
 8006d30:	4639      	mov	r1, r7
 8006d32:	f7f9 ff13 	bl	8000b5c <__aeabi_dcmpun>
 8006d36:	b128      	cbz	r0, 8006d44 <_scanf_float+0x40c>
 8006d38:	4808      	ldr	r0, [pc, #32]	@ (8006d5c <_scanf_float+0x424>)
 8006d3a:	f000 f9c5 	bl	80070c8 <nanf>
 8006d3e:	ed85 0a00 	vstr	s0, [r5]
 8006d42:	e7d1      	b.n	8006ce8 <_scanf_float+0x3b0>
 8006d44:	4630      	mov	r0, r6
 8006d46:	4639      	mov	r1, r7
 8006d48:	f7f9 ff66 	bl	8000c18 <__aeabi_d2f>
 8006d4c:	6028      	str	r0, [r5, #0]
 8006d4e:	e7cb      	b.n	8006ce8 <_scanf_float+0x3b0>
 8006d50:	f04f 0900 	mov.w	r9, #0
 8006d54:	e629      	b.n	80069aa <_scanf_float+0x72>
 8006d56:	bf00      	nop
 8006d58:	0800a888 	.word	0x0800a888
 8006d5c:	0800ac1d 	.word	0x0800ac1d

08006d60 <std>:
 8006d60:	2300      	movs	r3, #0
 8006d62:	b510      	push	{r4, lr}
 8006d64:	4604      	mov	r4, r0
 8006d66:	e9c0 3300 	strd	r3, r3, [r0]
 8006d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d6e:	6083      	str	r3, [r0, #8]
 8006d70:	8181      	strh	r1, [r0, #12]
 8006d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d74:	81c2      	strh	r2, [r0, #14]
 8006d76:	6183      	str	r3, [r0, #24]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	305c      	adds	r0, #92	@ 0x5c
 8006d7e:	f000 f914 	bl	8006faa <memset>
 8006d82:	4b0d      	ldr	r3, [pc, #52]	@ (8006db8 <std+0x58>)
 8006d84:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <std+0x5c>)
 8006d88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc0 <std+0x60>)
 8006d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <std+0x64>)
 8006d90:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d92:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc8 <std+0x68>)
 8006d94:	6224      	str	r4, [r4, #32]
 8006d96:	429c      	cmp	r4, r3
 8006d98:	d006      	beq.n	8006da8 <std+0x48>
 8006d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d9e:	4294      	cmp	r4, r2
 8006da0:	d002      	beq.n	8006da8 <std+0x48>
 8006da2:	33d0      	adds	r3, #208	@ 0xd0
 8006da4:	429c      	cmp	r4, r3
 8006da6:	d105      	bne.n	8006db4 <std+0x54>
 8006da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db0:	f000 b978 	b.w	80070a4 <__retarget_lock_init_recursive>
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	bf00      	nop
 8006db8:	08006f25 	.word	0x08006f25
 8006dbc:	08006f47 	.word	0x08006f47
 8006dc0:	08006f7f 	.word	0x08006f7f
 8006dc4:	08006fa3 	.word	0x08006fa3
 8006dc8:	20000430 	.word	0x20000430

08006dcc <stdio_exit_handler>:
 8006dcc:	4a02      	ldr	r2, [pc, #8]	@ (8006dd8 <stdio_exit_handler+0xc>)
 8006dce:	4903      	ldr	r1, [pc, #12]	@ (8006ddc <stdio_exit_handler+0x10>)
 8006dd0:	4803      	ldr	r0, [pc, #12]	@ (8006de0 <stdio_exit_handler+0x14>)
 8006dd2:	f000 b869 	b.w	8006ea8 <_fwalk_sglue>
 8006dd6:	bf00      	nop
 8006dd8:	20000090 	.word	0x20000090
 8006ddc:	08009995 	.word	0x08009995
 8006de0:	200000a0 	.word	0x200000a0

08006de4 <cleanup_stdio>:
 8006de4:	6841      	ldr	r1, [r0, #4]
 8006de6:	4b0c      	ldr	r3, [pc, #48]	@ (8006e18 <cleanup_stdio+0x34>)
 8006de8:	4299      	cmp	r1, r3
 8006dea:	b510      	push	{r4, lr}
 8006dec:	4604      	mov	r4, r0
 8006dee:	d001      	beq.n	8006df4 <cleanup_stdio+0x10>
 8006df0:	f002 fdd0 	bl	8009994 <_fflush_r>
 8006df4:	68a1      	ldr	r1, [r4, #8]
 8006df6:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <cleanup_stdio+0x38>)
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	d002      	beq.n	8006e02 <cleanup_stdio+0x1e>
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f002 fdc9 	bl	8009994 <_fflush_r>
 8006e02:	68e1      	ldr	r1, [r4, #12]
 8006e04:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <cleanup_stdio+0x3c>)
 8006e06:	4299      	cmp	r1, r3
 8006e08:	d004      	beq.n	8006e14 <cleanup_stdio+0x30>
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e10:	f002 bdc0 	b.w	8009994 <_fflush_r>
 8006e14:	bd10      	pop	{r4, pc}
 8006e16:	bf00      	nop
 8006e18:	20000430 	.word	0x20000430
 8006e1c:	20000498 	.word	0x20000498
 8006e20:	20000500 	.word	0x20000500

08006e24 <global_stdio_init.part.0>:
 8006e24:	b510      	push	{r4, lr}
 8006e26:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <global_stdio_init.part.0+0x30>)
 8006e28:	4c0b      	ldr	r4, [pc, #44]	@ (8006e58 <global_stdio_init.part.0+0x34>)
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e5c <global_stdio_init.part.0+0x38>)
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	2200      	movs	r2, #0
 8006e32:	2104      	movs	r1, #4
 8006e34:	f7ff ff94 	bl	8006d60 <std>
 8006e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	2109      	movs	r1, #9
 8006e40:	f7ff ff8e 	bl	8006d60 <std>
 8006e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e48:	2202      	movs	r2, #2
 8006e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e4e:	2112      	movs	r1, #18
 8006e50:	f7ff bf86 	b.w	8006d60 <std>
 8006e54:	20000568 	.word	0x20000568
 8006e58:	20000430 	.word	0x20000430
 8006e5c:	08006dcd 	.word	0x08006dcd

08006e60 <__sfp_lock_acquire>:
 8006e60:	4801      	ldr	r0, [pc, #4]	@ (8006e68 <__sfp_lock_acquire+0x8>)
 8006e62:	f000 b920 	b.w	80070a6 <__retarget_lock_acquire_recursive>
 8006e66:	bf00      	nop
 8006e68:	20000571 	.word	0x20000571

08006e6c <__sfp_lock_release>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	@ (8006e74 <__sfp_lock_release+0x8>)
 8006e6e:	f000 b91b 	b.w	80070a8 <__retarget_lock_release_recursive>
 8006e72:	bf00      	nop
 8006e74:	20000571 	.word	0x20000571

08006e78 <__sinit>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	f7ff fff0 	bl	8006e60 <__sfp_lock_acquire>
 8006e80:	6a23      	ldr	r3, [r4, #32]
 8006e82:	b11b      	cbz	r3, 8006e8c <__sinit+0x14>
 8006e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e88:	f7ff bff0 	b.w	8006e6c <__sfp_lock_release>
 8006e8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ea0 <__sinit+0x28>)
 8006e8e:	6223      	str	r3, [r4, #32]
 8006e90:	4b04      	ldr	r3, [pc, #16]	@ (8006ea4 <__sinit+0x2c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1f5      	bne.n	8006e84 <__sinit+0xc>
 8006e98:	f7ff ffc4 	bl	8006e24 <global_stdio_init.part.0>
 8006e9c:	e7f2      	b.n	8006e84 <__sinit+0xc>
 8006e9e:	bf00      	nop
 8006ea0:	08006de5 	.word	0x08006de5
 8006ea4:	20000568 	.word	0x20000568

08006ea8 <_fwalk_sglue>:
 8006ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eac:	4607      	mov	r7, r0
 8006eae:	4688      	mov	r8, r1
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb8:	f1b9 0901 	subs.w	r9, r9, #1
 8006ebc:	d505      	bpl.n	8006eca <_fwalk_sglue+0x22>
 8006ebe:	6824      	ldr	r4, [r4, #0]
 8006ec0:	2c00      	cmp	r4, #0
 8006ec2:	d1f7      	bne.n	8006eb4 <_fwalk_sglue+0xc>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eca:	89ab      	ldrh	r3, [r5, #12]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d907      	bls.n	8006ee0 <_fwalk_sglue+0x38>
 8006ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	d003      	beq.n	8006ee0 <_fwalk_sglue+0x38>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4638      	mov	r0, r7
 8006edc:	47c0      	blx	r8
 8006ede:	4306      	orrs	r6, r0
 8006ee0:	3568      	adds	r5, #104	@ 0x68
 8006ee2:	e7e9      	b.n	8006eb8 <_fwalk_sglue+0x10>

08006ee4 <siprintf>:
 8006ee4:	b40e      	push	{r1, r2, r3}
 8006ee6:	b500      	push	{lr}
 8006ee8:	b09c      	sub	sp, #112	@ 0x70
 8006eea:	ab1d      	add	r3, sp, #116	@ 0x74
 8006eec:	9002      	str	r0, [sp, #8]
 8006eee:	9006      	str	r0, [sp, #24]
 8006ef0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ef4:	4809      	ldr	r0, [pc, #36]	@ (8006f1c <siprintf+0x38>)
 8006ef6:	9107      	str	r1, [sp, #28]
 8006ef8:	9104      	str	r1, [sp, #16]
 8006efa:	4909      	ldr	r1, [pc, #36]	@ (8006f20 <siprintf+0x3c>)
 8006efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f00:	9105      	str	r1, [sp, #20]
 8006f02:	6800      	ldr	r0, [r0, #0]
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	a902      	add	r1, sp, #8
 8006f08:	f002 fbc4 	bl	8009694 <_svfiprintf_r>
 8006f0c:	9b02      	ldr	r3, [sp, #8]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	b01c      	add	sp, #112	@ 0x70
 8006f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f18:	b003      	add	sp, #12
 8006f1a:	4770      	bx	lr
 8006f1c:	2000009c 	.word	0x2000009c
 8006f20:	ffff0208 	.word	0xffff0208

08006f24 <__sread>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	460c      	mov	r4, r1
 8006f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2c:	f000 f86c 	bl	8007008 <_read_r>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	bfab      	itete	ge
 8006f34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f36:	89a3      	ldrhlt	r3, [r4, #12]
 8006f38:	181b      	addge	r3, r3, r0
 8006f3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f3e:	bfac      	ite	ge
 8006f40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f42:	81a3      	strhlt	r3, [r4, #12]
 8006f44:	bd10      	pop	{r4, pc}

08006f46 <__swrite>:
 8006f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4a:	461f      	mov	r7, r3
 8006f4c:	898b      	ldrh	r3, [r1, #12]
 8006f4e:	05db      	lsls	r3, r3, #23
 8006f50:	4605      	mov	r5, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	4616      	mov	r6, r2
 8006f56:	d505      	bpl.n	8006f64 <__swrite+0x1e>
 8006f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f000 f840 	bl	8006fe4 <_lseek_r>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f6e:	81a3      	strh	r3, [r4, #12]
 8006f70:	4632      	mov	r2, r6
 8006f72:	463b      	mov	r3, r7
 8006f74:	4628      	mov	r0, r5
 8006f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	f000 b857 	b.w	800702c <_write_r>

08006f7e <__sseek>:
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	460c      	mov	r4, r1
 8006f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f86:	f000 f82d 	bl	8006fe4 <_lseek_r>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	bf15      	itete	ne
 8006f90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f9a:	81a3      	strheq	r3, [r4, #12]
 8006f9c:	bf18      	it	ne
 8006f9e:	81a3      	strhne	r3, [r4, #12]
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <__sclose>:
 8006fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa6:	f000 b80d 	b.w	8006fc4 <_close_r>

08006faa <memset>:
 8006faa:	4402      	add	r2, r0
 8006fac:	4603      	mov	r3, r0
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d100      	bne.n	8006fb4 <memset+0xa>
 8006fb2:	4770      	bx	lr
 8006fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb8:	e7f9      	b.n	8006fae <memset+0x4>
	...

08006fbc <_localeconv_r>:
 8006fbc:	4800      	ldr	r0, [pc, #0]	@ (8006fc0 <_localeconv_r+0x4>)
 8006fbe:	4770      	bx	lr
 8006fc0:	200001dc 	.word	0x200001dc

08006fc4 <_close_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d06      	ldr	r5, [pc, #24]	@ (8006fe0 <_close_r+0x1c>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7fa fe0f 	bl	8001bf2 <_close>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_close_r+0x1a>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_close_r+0x1a>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	2000056c 	.word	0x2000056c

08006fe4 <_lseek_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	@ (8007004 <_lseek_r+0x20>)
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	4611      	mov	r1, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	602a      	str	r2, [r5, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7fa fe24 	bl	8001c40 <_lseek>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_lseek_r+0x1e>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_lseek_r+0x1e>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	2000056c 	.word	0x2000056c

08007008 <_read_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d07      	ldr	r5, [pc, #28]	@ (8007028 <_read_r+0x20>)
 800700c:	4604      	mov	r4, r0
 800700e:	4608      	mov	r0, r1
 8007010:	4611      	mov	r1, r2
 8007012:	2200      	movs	r2, #0
 8007014:	602a      	str	r2, [r5, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	f7fa fdb2 	bl	8001b80 <_read>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_read_r+0x1e>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_read_r+0x1e>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	2000056c 	.word	0x2000056c

0800702c <_write_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	@ (800704c <_write_r+0x20>)
 8007030:	4604      	mov	r4, r0
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7fa fdbd 	bl	8001bba <_write>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_write_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_write_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	2000056c 	.word	0x2000056c

08007050 <__errno>:
 8007050:	4b01      	ldr	r3, [pc, #4]	@ (8007058 <__errno+0x8>)
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	2000009c 	.word	0x2000009c

0800705c <__libc_init_array>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	4d0d      	ldr	r5, [pc, #52]	@ (8007094 <__libc_init_array+0x38>)
 8007060:	4c0d      	ldr	r4, [pc, #52]	@ (8007098 <__libc_init_array+0x3c>)
 8007062:	1b64      	subs	r4, r4, r5
 8007064:	10a4      	asrs	r4, r4, #2
 8007066:	2600      	movs	r6, #0
 8007068:	42a6      	cmp	r6, r4
 800706a:	d109      	bne.n	8007080 <__libc_init_array+0x24>
 800706c:	4d0b      	ldr	r5, [pc, #44]	@ (800709c <__libc_init_array+0x40>)
 800706e:	4c0c      	ldr	r4, [pc, #48]	@ (80070a0 <__libc_init_array+0x44>)
 8007070:	f003 fb74 	bl	800a75c <_init>
 8007074:	1b64      	subs	r4, r4, r5
 8007076:	10a4      	asrs	r4, r4, #2
 8007078:	2600      	movs	r6, #0
 800707a:	42a6      	cmp	r6, r4
 800707c:	d105      	bne.n	800708a <__libc_init_array+0x2e>
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	f855 3b04 	ldr.w	r3, [r5], #4
 8007084:	4798      	blx	r3
 8007086:	3601      	adds	r6, #1
 8007088:	e7ee      	b.n	8007068 <__libc_init_array+0xc>
 800708a:	f855 3b04 	ldr.w	r3, [r5], #4
 800708e:	4798      	blx	r3
 8007090:	3601      	adds	r6, #1
 8007092:	e7f2      	b.n	800707a <__libc_init_array+0x1e>
 8007094:	0800ac88 	.word	0x0800ac88
 8007098:	0800ac88 	.word	0x0800ac88
 800709c:	0800ac88 	.word	0x0800ac88
 80070a0:	0800ac8c 	.word	0x0800ac8c

080070a4 <__retarget_lock_init_recursive>:
 80070a4:	4770      	bx	lr

080070a6 <__retarget_lock_acquire_recursive>:
 80070a6:	4770      	bx	lr

080070a8 <__retarget_lock_release_recursive>:
 80070a8:	4770      	bx	lr

080070aa <memcpy>:
 80070aa:	440a      	add	r2, r1
 80070ac:	4291      	cmp	r1, r2
 80070ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b2:	d100      	bne.n	80070b6 <memcpy+0xc>
 80070b4:	4770      	bx	lr
 80070b6:	b510      	push	{r4, lr}
 80070b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c0:	4291      	cmp	r1, r2
 80070c2:	d1f9      	bne.n	80070b8 <memcpy+0xe>
 80070c4:	bd10      	pop	{r4, pc}
	...

080070c8 <nanf>:
 80070c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80070d0 <nanf+0x8>
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	7fc00000 	.word	0x7fc00000

080070d4 <quorem>:
 80070d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d8:	6903      	ldr	r3, [r0, #16]
 80070da:	690c      	ldr	r4, [r1, #16]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	4607      	mov	r7, r0
 80070e0:	db7e      	blt.n	80071e0 <quorem+0x10c>
 80070e2:	3c01      	subs	r4, #1
 80070e4:	f101 0814 	add.w	r8, r1, #20
 80070e8:	00a3      	lsls	r3, r4, #2
 80070ea:	f100 0514 	add.w	r5, r0, #20
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070fe:	3301      	adds	r3, #1
 8007100:	429a      	cmp	r2, r3
 8007102:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007106:	fbb2 f6f3 	udiv	r6, r2, r3
 800710a:	d32e      	bcc.n	800716a <quorem+0x96>
 800710c:	f04f 0a00 	mov.w	sl, #0
 8007110:	46c4      	mov	ip, r8
 8007112:	46ae      	mov	lr, r5
 8007114:	46d3      	mov	fp, sl
 8007116:	f85c 3b04 	ldr.w	r3, [ip], #4
 800711a:	b298      	uxth	r0, r3
 800711c:	fb06 a000 	mla	r0, r6, r0, sl
 8007120:	0c02      	lsrs	r2, r0, #16
 8007122:	0c1b      	lsrs	r3, r3, #16
 8007124:	fb06 2303 	mla	r3, r6, r3, r2
 8007128:	f8de 2000 	ldr.w	r2, [lr]
 800712c:	b280      	uxth	r0, r0
 800712e:	b292      	uxth	r2, r2
 8007130:	1a12      	subs	r2, r2, r0
 8007132:	445a      	add	r2, fp
 8007134:	f8de 0000 	ldr.w	r0, [lr]
 8007138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800713c:	b29b      	uxth	r3, r3
 800713e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007142:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007146:	b292      	uxth	r2, r2
 8007148:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800714c:	45e1      	cmp	r9, ip
 800714e:	f84e 2b04 	str.w	r2, [lr], #4
 8007152:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007156:	d2de      	bcs.n	8007116 <quorem+0x42>
 8007158:	9b00      	ldr	r3, [sp, #0]
 800715a:	58eb      	ldr	r3, [r5, r3]
 800715c:	b92b      	cbnz	r3, 800716a <quorem+0x96>
 800715e:	9b01      	ldr	r3, [sp, #4]
 8007160:	3b04      	subs	r3, #4
 8007162:	429d      	cmp	r5, r3
 8007164:	461a      	mov	r2, r3
 8007166:	d32f      	bcc.n	80071c8 <quorem+0xf4>
 8007168:	613c      	str	r4, [r7, #16]
 800716a:	4638      	mov	r0, r7
 800716c:	f001 f9c4 	bl	80084f8 <__mcmp>
 8007170:	2800      	cmp	r0, #0
 8007172:	db25      	blt.n	80071c0 <quorem+0xec>
 8007174:	4629      	mov	r1, r5
 8007176:	2000      	movs	r0, #0
 8007178:	f858 2b04 	ldr.w	r2, [r8], #4
 800717c:	f8d1 c000 	ldr.w	ip, [r1]
 8007180:	fa1f fe82 	uxth.w	lr, r2
 8007184:	fa1f f38c 	uxth.w	r3, ip
 8007188:	eba3 030e 	sub.w	r3, r3, lr
 800718c:	4403      	add	r3, r0
 800718e:	0c12      	lsrs	r2, r2, #16
 8007190:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007194:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007198:	b29b      	uxth	r3, r3
 800719a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800719e:	45c1      	cmp	r9, r8
 80071a0:	f841 3b04 	str.w	r3, [r1], #4
 80071a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071a8:	d2e6      	bcs.n	8007178 <quorem+0xa4>
 80071aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071b2:	b922      	cbnz	r2, 80071be <quorem+0xea>
 80071b4:	3b04      	subs	r3, #4
 80071b6:	429d      	cmp	r5, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	d30b      	bcc.n	80071d4 <quorem+0x100>
 80071bc:	613c      	str	r4, [r7, #16]
 80071be:	3601      	adds	r6, #1
 80071c0:	4630      	mov	r0, r6
 80071c2:	b003      	add	sp, #12
 80071c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	3b04      	subs	r3, #4
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	d1cb      	bne.n	8007168 <quorem+0x94>
 80071d0:	3c01      	subs	r4, #1
 80071d2:	e7c6      	b.n	8007162 <quorem+0x8e>
 80071d4:	6812      	ldr	r2, [r2, #0]
 80071d6:	3b04      	subs	r3, #4
 80071d8:	2a00      	cmp	r2, #0
 80071da:	d1ef      	bne.n	80071bc <quorem+0xe8>
 80071dc:	3c01      	subs	r4, #1
 80071de:	e7ea      	b.n	80071b6 <quorem+0xe2>
 80071e0:	2000      	movs	r0, #0
 80071e2:	e7ee      	b.n	80071c2 <quorem+0xee>
 80071e4:	0000      	movs	r0, r0
	...

080071e8 <_dtoa_r>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	69c7      	ldr	r7, [r0, #28]
 80071ee:	b099      	sub	sp, #100	@ 0x64
 80071f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071f4:	ec55 4b10 	vmov	r4, r5, d0
 80071f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80071fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80071fc:	4683      	mov	fp, r0
 80071fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007200:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007202:	b97f      	cbnz	r7, 8007224 <_dtoa_r+0x3c>
 8007204:	2010      	movs	r0, #16
 8007206:	f000 fdfd 	bl	8007e04 <malloc>
 800720a:	4602      	mov	r2, r0
 800720c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007210:	b920      	cbnz	r0, 800721c <_dtoa_r+0x34>
 8007212:	4ba7      	ldr	r3, [pc, #668]	@ (80074b0 <_dtoa_r+0x2c8>)
 8007214:	21ef      	movs	r1, #239	@ 0xef
 8007216:	48a7      	ldr	r0, [pc, #668]	@ (80074b4 <_dtoa_r+0x2cc>)
 8007218:	f002 fc2a 	bl	8009a70 <__assert_func>
 800721c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007220:	6007      	str	r7, [r0, #0]
 8007222:	60c7      	str	r7, [r0, #12]
 8007224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	b159      	cbz	r1, 8007244 <_dtoa_r+0x5c>
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	604a      	str	r2, [r1, #4]
 8007230:	2301      	movs	r3, #1
 8007232:	4093      	lsls	r3, r2
 8007234:	608b      	str	r3, [r1, #8]
 8007236:	4658      	mov	r0, fp
 8007238:	f000 feda 	bl	8007ff0 <_Bfree>
 800723c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	1e2b      	subs	r3, r5, #0
 8007246:	bfb9      	ittee	lt
 8007248:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800724c:	9303      	strlt	r3, [sp, #12]
 800724e:	2300      	movge	r3, #0
 8007250:	6033      	strge	r3, [r6, #0]
 8007252:	9f03      	ldr	r7, [sp, #12]
 8007254:	4b98      	ldr	r3, [pc, #608]	@ (80074b8 <_dtoa_r+0x2d0>)
 8007256:	bfbc      	itt	lt
 8007258:	2201      	movlt	r2, #1
 800725a:	6032      	strlt	r2, [r6, #0]
 800725c:	43bb      	bics	r3, r7
 800725e:	d112      	bne.n	8007286 <_dtoa_r+0x9e>
 8007260:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007262:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800726c:	4323      	orrs	r3, r4
 800726e:	f000 854d 	beq.w	8007d0c <_dtoa_r+0xb24>
 8007272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007274:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074cc <_dtoa_r+0x2e4>
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 854f 	beq.w	8007d1c <_dtoa_r+0xb34>
 800727e:	f10a 0303 	add.w	r3, sl, #3
 8007282:	f000 bd49 	b.w	8007d18 <_dtoa_r+0xb30>
 8007286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	ec51 0b17 	vmov	r0, r1, d7
 8007290:	2300      	movs	r3, #0
 8007292:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007296:	f7f9 fc2f 	bl	8000af8 <__aeabi_dcmpeq>
 800729a:	4680      	mov	r8, r0
 800729c:	b158      	cbz	r0, 80072b6 <_dtoa_r+0xce>
 800729e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072a0:	2301      	movs	r3, #1
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072a6:	b113      	cbz	r3, 80072ae <_dtoa_r+0xc6>
 80072a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072aa:	4b84      	ldr	r3, [pc, #528]	@ (80074bc <_dtoa_r+0x2d4>)
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074d0 <_dtoa_r+0x2e8>
 80072b2:	f000 bd33 	b.w	8007d1c <_dtoa_r+0xb34>
 80072b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072ba:	aa16      	add	r2, sp, #88	@ 0x58
 80072bc:	a917      	add	r1, sp, #92	@ 0x5c
 80072be:	4658      	mov	r0, fp
 80072c0:	f001 fa3a 	bl	8008738 <__d2b>
 80072c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072c8:	4681      	mov	r9, r0
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d077      	beq.n	80073be <_dtoa_r+0x1d6>
 80072ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072e8:	4619      	mov	r1, r3
 80072ea:	2200      	movs	r2, #0
 80072ec:	4b74      	ldr	r3, [pc, #464]	@ (80074c0 <_dtoa_r+0x2d8>)
 80072ee:	f7f8 ffe3 	bl	80002b8 <__aeabi_dsub>
 80072f2:	a369      	add	r3, pc, #420	@ (adr r3, 8007498 <_dtoa_r+0x2b0>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f7f9 f996 	bl	8000628 <__aeabi_dmul>
 80072fc:	a368      	add	r3, pc, #416	@ (adr r3, 80074a0 <_dtoa_r+0x2b8>)
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f7f8 ffdb 	bl	80002bc <__adddf3>
 8007306:	4604      	mov	r4, r0
 8007308:	4630      	mov	r0, r6
 800730a:	460d      	mov	r5, r1
 800730c:	f7f9 f922 	bl	8000554 <__aeabi_i2d>
 8007310:	a365      	add	r3, pc, #404	@ (adr r3, 80074a8 <_dtoa_r+0x2c0>)
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	f7f9 f987 	bl	8000628 <__aeabi_dmul>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4620      	mov	r0, r4
 8007320:	4629      	mov	r1, r5
 8007322:	f7f8 ffcb 	bl	80002bc <__adddf3>
 8007326:	4604      	mov	r4, r0
 8007328:	460d      	mov	r5, r1
 800732a:	f7f9 fc2d 	bl	8000b88 <__aeabi_d2iz>
 800732e:	2200      	movs	r2, #0
 8007330:	4607      	mov	r7, r0
 8007332:	2300      	movs	r3, #0
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	f7f9 fbe8 	bl	8000b0c <__aeabi_dcmplt>
 800733c:	b140      	cbz	r0, 8007350 <_dtoa_r+0x168>
 800733e:	4638      	mov	r0, r7
 8007340:	f7f9 f908 	bl	8000554 <__aeabi_i2d>
 8007344:	4622      	mov	r2, r4
 8007346:	462b      	mov	r3, r5
 8007348:	f7f9 fbd6 	bl	8000af8 <__aeabi_dcmpeq>
 800734c:	b900      	cbnz	r0, 8007350 <_dtoa_r+0x168>
 800734e:	3f01      	subs	r7, #1
 8007350:	2f16      	cmp	r7, #22
 8007352:	d851      	bhi.n	80073f8 <_dtoa_r+0x210>
 8007354:	4b5b      	ldr	r3, [pc, #364]	@ (80074c4 <_dtoa_r+0x2dc>)
 8007356:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007362:	f7f9 fbd3 	bl	8000b0c <__aeabi_dcmplt>
 8007366:	2800      	cmp	r0, #0
 8007368:	d048      	beq.n	80073fc <_dtoa_r+0x214>
 800736a:	3f01      	subs	r7, #1
 800736c:	2300      	movs	r3, #0
 800736e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007370:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007372:	1b9b      	subs	r3, r3, r6
 8007374:	1e5a      	subs	r2, r3, #1
 8007376:	bf44      	itt	mi
 8007378:	f1c3 0801 	rsbmi	r8, r3, #1
 800737c:	2300      	movmi	r3, #0
 800737e:	9208      	str	r2, [sp, #32]
 8007380:	bf54      	ite	pl
 8007382:	f04f 0800 	movpl.w	r8, #0
 8007386:	9308      	strmi	r3, [sp, #32]
 8007388:	2f00      	cmp	r7, #0
 800738a:	db39      	blt.n	8007400 <_dtoa_r+0x218>
 800738c:	9b08      	ldr	r3, [sp, #32]
 800738e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007390:	443b      	add	r3, r7
 8007392:	9308      	str	r3, [sp, #32]
 8007394:	2300      	movs	r3, #0
 8007396:	930a      	str	r3, [sp, #40]	@ 0x28
 8007398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739a:	2b09      	cmp	r3, #9
 800739c:	d864      	bhi.n	8007468 <_dtoa_r+0x280>
 800739e:	2b05      	cmp	r3, #5
 80073a0:	bfc4      	itt	gt
 80073a2:	3b04      	subgt	r3, #4
 80073a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a8:	f1a3 0302 	sub.w	r3, r3, #2
 80073ac:	bfcc      	ite	gt
 80073ae:	2400      	movgt	r4, #0
 80073b0:	2401      	movle	r4, #1
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d863      	bhi.n	800747e <_dtoa_r+0x296>
 80073b6:	e8df f003 	tbb	[pc, r3]
 80073ba:	372a      	.short	0x372a
 80073bc:	5535      	.short	0x5535
 80073be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073c2:	441e      	add	r6, r3
 80073c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	bfc1      	itttt	gt
 80073cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073d0:	409f      	lslgt	r7, r3
 80073d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073da:	bfd6      	itet	le
 80073dc:	f1c3 0320 	rsble	r3, r3, #32
 80073e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80073e4:	fa04 f003 	lslle.w	r0, r4, r3
 80073e8:	f7f9 f8a4 	bl	8000534 <__aeabi_ui2d>
 80073ec:	2201      	movs	r2, #1
 80073ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073f2:	3e01      	subs	r6, #1
 80073f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80073f6:	e777      	b.n	80072e8 <_dtoa_r+0x100>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e7b8      	b.n	800736e <_dtoa_r+0x186>
 80073fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80073fe:	e7b7      	b.n	8007370 <_dtoa_r+0x188>
 8007400:	427b      	negs	r3, r7
 8007402:	930a      	str	r3, [sp, #40]	@ 0x28
 8007404:	2300      	movs	r3, #0
 8007406:	eba8 0807 	sub.w	r8, r8, r7
 800740a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800740c:	e7c4      	b.n	8007398 <_dtoa_r+0x1b0>
 800740e:	2300      	movs	r3, #0
 8007410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	dc35      	bgt.n	8007484 <_dtoa_r+0x29c>
 8007418:	2301      	movs	r3, #1
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	9307      	str	r3, [sp, #28]
 800741e:	461a      	mov	r2, r3
 8007420:	920e      	str	r2, [sp, #56]	@ 0x38
 8007422:	e00b      	b.n	800743c <_dtoa_r+0x254>
 8007424:	2301      	movs	r3, #1
 8007426:	e7f3      	b.n	8007410 <_dtoa_r+0x228>
 8007428:	2300      	movs	r3, #0
 800742a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800742c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	3301      	adds	r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	9307      	str	r3, [sp, #28]
 8007438:	bfb8      	it	lt
 800743a:	2301      	movlt	r3, #1
 800743c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007440:	2100      	movs	r1, #0
 8007442:	2204      	movs	r2, #4
 8007444:	f102 0514 	add.w	r5, r2, #20
 8007448:	429d      	cmp	r5, r3
 800744a:	d91f      	bls.n	800748c <_dtoa_r+0x2a4>
 800744c:	6041      	str	r1, [r0, #4]
 800744e:	4658      	mov	r0, fp
 8007450:	f000 fd8e 	bl	8007f70 <_Balloc>
 8007454:	4682      	mov	sl, r0
 8007456:	2800      	cmp	r0, #0
 8007458:	d13c      	bne.n	80074d4 <_dtoa_r+0x2ec>
 800745a:	4b1b      	ldr	r3, [pc, #108]	@ (80074c8 <_dtoa_r+0x2e0>)
 800745c:	4602      	mov	r2, r0
 800745e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007462:	e6d8      	b.n	8007216 <_dtoa_r+0x2e>
 8007464:	2301      	movs	r3, #1
 8007466:	e7e0      	b.n	800742a <_dtoa_r+0x242>
 8007468:	2401      	movs	r4, #1
 800746a:	2300      	movs	r3, #0
 800746c:	9309      	str	r3, [sp, #36]	@ 0x24
 800746e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007470:	f04f 33ff 	mov.w	r3, #4294967295
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	2200      	movs	r2, #0
 800747a:	2312      	movs	r3, #18
 800747c:	e7d0      	b.n	8007420 <_dtoa_r+0x238>
 800747e:	2301      	movs	r3, #1
 8007480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007482:	e7f5      	b.n	8007470 <_dtoa_r+0x288>
 8007484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	e7d7      	b.n	800743c <_dtoa_r+0x254>
 800748c:	3101      	adds	r1, #1
 800748e:	0052      	lsls	r2, r2, #1
 8007490:	e7d8      	b.n	8007444 <_dtoa_r+0x25c>
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
 8007498:	636f4361 	.word	0x636f4361
 800749c:	3fd287a7 	.word	0x3fd287a7
 80074a0:	8b60c8b3 	.word	0x8b60c8b3
 80074a4:	3fc68a28 	.word	0x3fc68a28
 80074a8:	509f79fb 	.word	0x509f79fb
 80074ac:	3fd34413 	.word	0x3fd34413
 80074b0:	0800a89a 	.word	0x0800a89a
 80074b4:	0800a8b1 	.word	0x0800a8b1
 80074b8:	7ff00000 	.word	0x7ff00000
 80074bc:	0800a865 	.word	0x0800a865
 80074c0:	3ff80000 	.word	0x3ff80000
 80074c4:	0800a9a8 	.word	0x0800a9a8
 80074c8:	0800a909 	.word	0x0800a909
 80074cc:	0800a896 	.word	0x0800a896
 80074d0:	0800a864 	.word	0x0800a864
 80074d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074d8:	6018      	str	r0, [r3, #0]
 80074da:	9b07      	ldr	r3, [sp, #28]
 80074dc:	2b0e      	cmp	r3, #14
 80074de:	f200 80a4 	bhi.w	800762a <_dtoa_r+0x442>
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	f000 80a1 	beq.w	800762a <_dtoa_r+0x442>
 80074e8:	2f00      	cmp	r7, #0
 80074ea:	dd33      	ble.n	8007554 <_dtoa_r+0x36c>
 80074ec:	4bad      	ldr	r3, [pc, #692]	@ (80077a4 <_dtoa_r+0x5bc>)
 80074ee:	f007 020f 	and.w	r2, r7, #15
 80074f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f6:	ed93 7b00 	vldr	d7, [r3]
 80074fa:	05f8      	lsls	r0, r7, #23
 80074fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007504:	d516      	bpl.n	8007534 <_dtoa_r+0x34c>
 8007506:	4ba8      	ldr	r3, [pc, #672]	@ (80077a8 <_dtoa_r+0x5c0>)
 8007508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800750c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007510:	f7f9 f9b4 	bl	800087c <__aeabi_ddiv>
 8007514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007518:	f004 040f 	and.w	r4, r4, #15
 800751c:	2603      	movs	r6, #3
 800751e:	4da2      	ldr	r5, [pc, #648]	@ (80077a8 <_dtoa_r+0x5c0>)
 8007520:	b954      	cbnz	r4, 8007538 <_dtoa_r+0x350>
 8007522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800752a:	f7f9 f9a7 	bl	800087c <__aeabi_ddiv>
 800752e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007532:	e028      	b.n	8007586 <_dtoa_r+0x39e>
 8007534:	2602      	movs	r6, #2
 8007536:	e7f2      	b.n	800751e <_dtoa_r+0x336>
 8007538:	07e1      	lsls	r1, r4, #31
 800753a:	d508      	bpl.n	800754e <_dtoa_r+0x366>
 800753c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007544:	f7f9 f870 	bl	8000628 <__aeabi_dmul>
 8007548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800754c:	3601      	adds	r6, #1
 800754e:	1064      	asrs	r4, r4, #1
 8007550:	3508      	adds	r5, #8
 8007552:	e7e5      	b.n	8007520 <_dtoa_r+0x338>
 8007554:	f000 80d2 	beq.w	80076fc <_dtoa_r+0x514>
 8007558:	427c      	negs	r4, r7
 800755a:	4b92      	ldr	r3, [pc, #584]	@ (80077a4 <_dtoa_r+0x5bc>)
 800755c:	4d92      	ldr	r5, [pc, #584]	@ (80077a8 <_dtoa_r+0x5c0>)
 800755e:	f004 020f 	and.w	r2, r4, #15
 8007562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800756e:	f7f9 f85b 	bl	8000628 <__aeabi_dmul>
 8007572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007576:	1124      	asrs	r4, r4, #4
 8007578:	2300      	movs	r3, #0
 800757a:	2602      	movs	r6, #2
 800757c:	2c00      	cmp	r4, #0
 800757e:	f040 80b2 	bne.w	80076e6 <_dtoa_r+0x4fe>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d3      	bne.n	800752e <_dtoa_r+0x346>
 8007586:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007588:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80b7 	beq.w	8007700 <_dtoa_r+0x518>
 8007592:	4b86      	ldr	r3, [pc, #536]	@ (80077ac <_dtoa_r+0x5c4>)
 8007594:	2200      	movs	r2, #0
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f9 fab7 	bl	8000b0c <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	f000 80ae 	beq.w	8007700 <_dtoa_r+0x518>
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80aa 	beq.w	8007700 <_dtoa_r+0x518>
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd37      	ble.n	8007622 <_dtoa_r+0x43a>
 80075b2:	1e7b      	subs	r3, r7, #1
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	4620      	mov	r0, r4
 80075b8:	4b7d      	ldr	r3, [pc, #500]	@ (80077b0 <_dtoa_r+0x5c8>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	4629      	mov	r1, r5
 80075be:	f7f9 f833 	bl	8000628 <__aeabi_dmul>
 80075c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c6:	9c00      	ldr	r4, [sp, #0]
 80075c8:	3601      	adds	r6, #1
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7f8 ffc2 	bl	8000554 <__aeabi_i2d>
 80075d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075d4:	f7f9 f828 	bl	8000628 <__aeabi_dmul>
 80075d8:	4b76      	ldr	r3, [pc, #472]	@ (80077b4 <_dtoa_r+0x5cc>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f8 fe6e 	bl	80002bc <__adddf3>
 80075e0:	4605      	mov	r5, r0
 80075e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075e6:	2c00      	cmp	r4, #0
 80075e8:	f040 808d 	bne.w	8007706 <_dtoa_r+0x51e>
 80075ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f0:	4b71      	ldr	r3, [pc, #452]	@ (80077b8 <_dtoa_r+0x5d0>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	f7f8 fe60 	bl	80002b8 <__aeabi_dsub>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007600:	462a      	mov	r2, r5
 8007602:	4633      	mov	r3, r6
 8007604:	f7f9 faa0 	bl	8000b48 <__aeabi_dcmpgt>
 8007608:	2800      	cmp	r0, #0
 800760a:	f040 828b 	bne.w	8007b24 <_dtoa_r+0x93c>
 800760e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007612:	462a      	mov	r2, r5
 8007614:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007618:	f7f9 fa78 	bl	8000b0c <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f040 8128 	bne.w	8007872 <_dtoa_r+0x68a>
 8007622:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007626:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800762a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800762c:	2b00      	cmp	r3, #0
 800762e:	f2c0 815a 	blt.w	80078e6 <_dtoa_r+0x6fe>
 8007632:	2f0e      	cmp	r7, #14
 8007634:	f300 8157 	bgt.w	80078e6 <_dtoa_r+0x6fe>
 8007638:	4b5a      	ldr	r3, [pc, #360]	@ (80077a4 <_dtoa_r+0x5bc>)
 800763a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800763e:	ed93 7b00 	vldr	d7, [r3]
 8007642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007644:	2b00      	cmp	r3, #0
 8007646:	ed8d 7b00 	vstr	d7, [sp]
 800764a:	da03      	bge.n	8007654 <_dtoa_r+0x46c>
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f340 8101 	ble.w	8007856 <_dtoa_r+0x66e>
 8007654:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007658:	4656      	mov	r6, sl
 800765a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800765e:	4620      	mov	r0, r4
 8007660:	4629      	mov	r1, r5
 8007662:	f7f9 f90b 	bl	800087c <__aeabi_ddiv>
 8007666:	f7f9 fa8f 	bl	8000b88 <__aeabi_d2iz>
 800766a:	4680      	mov	r8, r0
 800766c:	f7f8 ff72 	bl	8000554 <__aeabi_i2d>
 8007670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007674:	f7f8 ffd8 	bl	8000628 <__aeabi_dmul>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4620      	mov	r0, r4
 800767e:	4629      	mov	r1, r5
 8007680:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007684:	f7f8 fe18 	bl	80002b8 <__aeabi_dsub>
 8007688:	f806 4b01 	strb.w	r4, [r6], #1
 800768c:	9d07      	ldr	r5, [sp, #28]
 800768e:	eba6 040a 	sub.w	r4, r6, sl
 8007692:	42a5      	cmp	r5, r4
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	f040 8117 	bne.w	80078ca <_dtoa_r+0x6e2>
 800769c:	f7f8 fe0e 	bl	80002bc <__adddf3>
 80076a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076a4:	4604      	mov	r4, r0
 80076a6:	460d      	mov	r5, r1
 80076a8:	f7f9 fa4e 	bl	8000b48 <__aeabi_dcmpgt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f040 80f9 	bne.w	80078a4 <_dtoa_r+0x6bc>
 80076b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f9 fa1d 	bl	8000af8 <__aeabi_dcmpeq>
 80076be:	b118      	cbz	r0, 80076c8 <_dtoa_r+0x4e0>
 80076c0:	f018 0f01 	tst.w	r8, #1
 80076c4:	f040 80ee 	bne.w	80078a4 <_dtoa_r+0x6bc>
 80076c8:	4649      	mov	r1, r9
 80076ca:	4658      	mov	r0, fp
 80076cc:	f000 fc90 	bl	8007ff0 <_Bfree>
 80076d0:	2300      	movs	r3, #0
 80076d2:	7033      	strb	r3, [r6, #0]
 80076d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076d6:	3701      	adds	r7, #1
 80076d8:	601f      	str	r7, [r3, #0]
 80076da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 831d 	beq.w	8007d1c <_dtoa_r+0xb34>
 80076e2:	601e      	str	r6, [r3, #0]
 80076e4:	e31a      	b.n	8007d1c <_dtoa_r+0xb34>
 80076e6:	07e2      	lsls	r2, r4, #31
 80076e8:	d505      	bpl.n	80076f6 <_dtoa_r+0x50e>
 80076ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076ee:	f7f8 ff9b 	bl	8000628 <__aeabi_dmul>
 80076f2:	3601      	adds	r6, #1
 80076f4:	2301      	movs	r3, #1
 80076f6:	1064      	asrs	r4, r4, #1
 80076f8:	3508      	adds	r5, #8
 80076fa:	e73f      	b.n	800757c <_dtoa_r+0x394>
 80076fc:	2602      	movs	r6, #2
 80076fe:	e742      	b.n	8007586 <_dtoa_r+0x39e>
 8007700:	9c07      	ldr	r4, [sp, #28]
 8007702:	9704      	str	r7, [sp, #16]
 8007704:	e761      	b.n	80075ca <_dtoa_r+0x3e2>
 8007706:	4b27      	ldr	r3, [pc, #156]	@ (80077a4 <_dtoa_r+0x5bc>)
 8007708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800770a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800770e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007712:	4454      	add	r4, sl
 8007714:	2900      	cmp	r1, #0
 8007716:	d053      	beq.n	80077c0 <_dtoa_r+0x5d8>
 8007718:	4928      	ldr	r1, [pc, #160]	@ (80077bc <_dtoa_r+0x5d4>)
 800771a:	2000      	movs	r0, #0
 800771c:	f7f9 f8ae 	bl	800087c <__aeabi_ddiv>
 8007720:	4633      	mov	r3, r6
 8007722:	462a      	mov	r2, r5
 8007724:	f7f8 fdc8 	bl	80002b8 <__aeabi_dsub>
 8007728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800772c:	4656      	mov	r6, sl
 800772e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007732:	f7f9 fa29 	bl	8000b88 <__aeabi_d2iz>
 8007736:	4605      	mov	r5, r0
 8007738:	f7f8 ff0c 	bl	8000554 <__aeabi_i2d>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007744:	f7f8 fdb8 	bl	80002b8 <__aeabi_dsub>
 8007748:	3530      	adds	r5, #48	@ 0x30
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007752:	f806 5b01 	strb.w	r5, [r6], #1
 8007756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800775a:	f7f9 f9d7 	bl	8000b0c <__aeabi_dcmplt>
 800775e:	2800      	cmp	r0, #0
 8007760:	d171      	bne.n	8007846 <_dtoa_r+0x65e>
 8007762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007766:	4911      	ldr	r1, [pc, #68]	@ (80077ac <_dtoa_r+0x5c4>)
 8007768:	2000      	movs	r0, #0
 800776a:	f7f8 fda5 	bl	80002b8 <__aeabi_dsub>
 800776e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007772:	f7f9 f9cb 	bl	8000b0c <__aeabi_dcmplt>
 8007776:	2800      	cmp	r0, #0
 8007778:	f040 8095 	bne.w	80078a6 <_dtoa_r+0x6be>
 800777c:	42a6      	cmp	r6, r4
 800777e:	f43f af50 	beq.w	8007622 <_dtoa_r+0x43a>
 8007782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007786:	4b0a      	ldr	r3, [pc, #40]	@ (80077b0 <_dtoa_r+0x5c8>)
 8007788:	2200      	movs	r2, #0
 800778a:	f7f8 ff4d 	bl	8000628 <__aeabi_dmul>
 800778e:	4b08      	ldr	r3, [pc, #32]	@ (80077b0 <_dtoa_r+0x5c8>)
 8007790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007794:	2200      	movs	r2, #0
 8007796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779a:	f7f8 ff45 	bl	8000628 <__aeabi_dmul>
 800779e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a2:	e7c4      	b.n	800772e <_dtoa_r+0x546>
 80077a4:	0800a9a8 	.word	0x0800a9a8
 80077a8:	0800a980 	.word	0x0800a980
 80077ac:	3ff00000 	.word	0x3ff00000
 80077b0:	40240000 	.word	0x40240000
 80077b4:	401c0000 	.word	0x401c0000
 80077b8:	40140000 	.word	0x40140000
 80077bc:	3fe00000 	.word	0x3fe00000
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	f7f8 ff30 	bl	8000628 <__aeabi_dmul>
 80077c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80077ce:	4656      	mov	r6, sl
 80077d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d4:	f7f9 f9d8 	bl	8000b88 <__aeabi_d2iz>
 80077d8:	4605      	mov	r5, r0
 80077da:	f7f8 febb 	bl	8000554 <__aeabi_i2d>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e6:	f7f8 fd67 	bl	80002b8 <__aeabi_dsub>
 80077ea:	3530      	adds	r5, #48	@ 0x30
 80077ec:	f806 5b01 	strb.w	r5, [r6], #1
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	42a6      	cmp	r6, r4
 80077f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077fa:	f04f 0200 	mov.w	r2, #0
 80077fe:	d124      	bne.n	800784a <_dtoa_r+0x662>
 8007800:	4bac      	ldr	r3, [pc, #688]	@ (8007ab4 <_dtoa_r+0x8cc>)
 8007802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007806:	f7f8 fd59 	bl	80002bc <__adddf3>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007812:	f7f9 f999 	bl	8000b48 <__aeabi_dcmpgt>
 8007816:	2800      	cmp	r0, #0
 8007818:	d145      	bne.n	80078a6 <_dtoa_r+0x6be>
 800781a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800781e:	49a5      	ldr	r1, [pc, #660]	@ (8007ab4 <_dtoa_r+0x8cc>)
 8007820:	2000      	movs	r0, #0
 8007822:	f7f8 fd49 	bl	80002b8 <__aeabi_dsub>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800782e:	f7f9 f96d 	bl	8000b0c <__aeabi_dcmplt>
 8007832:	2800      	cmp	r0, #0
 8007834:	f43f aef5 	beq.w	8007622 <_dtoa_r+0x43a>
 8007838:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800783a:	1e73      	subs	r3, r6, #1
 800783c:	9315      	str	r3, [sp, #84]	@ 0x54
 800783e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007842:	2b30      	cmp	r3, #48	@ 0x30
 8007844:	d0f8      	beq.n	8007838 <_dtoa_r+0x650>
 8007846:	9f04      	ldr	r7, [sp, #16]
 8007848:	e73e      	b.n	80076c8 <_dtoa_r+0x4e0>
 800784a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ab8 <_dtoa_r+0x8d0>)
 800784c:	f7f8 feec 	bl	8000628 <__aeabi_dmul>
 8007850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007854:	e7bc      	b.n	80077d0 <_dtoa_r+0x5e8>
 8007856:	d10c      	bne.n	8007872 <_dtoa_r+0x68a>
 8007858:	4b98      	ldr	r3, [pc, #608]	@ (8007abc <_dtoa_r+0x8d4>)
 800785a:	2200      	movs	r2, #0
 800785c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007860:	f7f8 fee2 	bl	8000628 <__aeabi_dmul>
 8007864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007868:	f7f9 f964 	bl	8000b34 <__aeabi_dcmpge>
 800786c:	2800      	cmp	r0, #0
 800786e:	f000 8157 	beq.w	8007b20 <_dtoa_r+0x938>
 8007872:	2400      	movs	r4, #0
 8007874:	4625      	mov	r5, r4
 8007876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007878:	43db      	mvns	r3, r3
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	4656      	mov	r6, sl
 800787e:	2700      	movs	r7, #0
 8007880:	4621      	mov	r1, r4
 8007882:	4658      	mov	r0, fp
 8007884:	f000 fbb4 	bl	8007ff0 <_Bfree>
 8007888:	2d00      	cmp	r5, #0
 800788a:	d0dc      	beq.n	8007846 <_dtoa_r+0x65e>
 800788c:	b12f      	cbz	r7, 800789a <_dtoa_r+0x6b2>
 800788e:	42af      	cmp	r7, r5
 8007890:	d003      	beq.n	800789a <_dtoa_r+0x6b2>
 8007892:	4639      	mov	r1, r7
 8007894:	4658      	mov	r0, fp
 8007896:	f000 fbab 	bl	8007ff0 <_Bfree>
 800789a:	4629      	mov	r1, r5
 800789c:	4658      	mov	r0, fp
 800789e:	f000 fba7 	bl	8007ff0 <_Bfree>
 80078a2:	e7d0      	b.n	8007846 <_dtoa_r+0x65e>
 80078a4:	9704      	str	r7, [sp, #16]
 80078a6:	4633      	mov	r3, r6
 80078a8:	461e      	mov	r6, r3
 80078aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ae:	2a39      	cmp	r2, #57	@ 0x39
 80078b0:	d107      	bne.n	80078c2 <_dtoa_r+0x6da>
 80078b2:	459a      	cmp	sl, r3
 80078b4:	d1f8      	bne.n	80078a8 <_dtoa_r+0x6c0>
 80078b6:	9a04      	ldr	r2, [sp, #16]
 80078b8:	3201      	adds	r2, #1
 80078ba:	9204      	str	r2, [sp, #16]
 80078bc:	2230      	movs	r2, #48	@ 0x30
 80078be:	f88a 2000 	strb.w	r2, [sl]
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	3201      	adds	r2, #1
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e7bd      	b.n	8007846 <_dtoa_r+0x65e>
 80078ca:	4b7b      	ldr	r3, [pc, #492]	@ (8007ab8 <_dtoa_r+0x8d0>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	f7f8 feab 	bl	8000628 <__aeabi_dmul>
 80078d2:	2200      	movs	r2, #0
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	460d      	mov	r5, r1
 80078da:	f7f9 f90d 	bl	8000af8 <__aeabi_dcmpeq>
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f aebb 	beq.w	800765a <_dtoa_r+0x472>
 80078e4:	e6f0      	b.n	80076c8 <_dtoa_r+0x4e0>
 80078e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	f000 80db 	beq.w	8007aa4 <_dtoa_r+0x8bc>
 80078ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078f0:	2a01      	cmp	r2, #1
 80078f2:	f300 80bf 	bgt.w	8007a74 <_dtoa_r+0x88c>
 80078f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	f000 80b7 	beq.w	8007a6c <_dtoa_r+0x884>
 80078fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007902:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007904:	4646      	mov	r6, r8
 8007906:	9a08      	ldr	r2, [sp, #32]
 8007908:	2101      	movs	r1, #1
 800790a:	441a      	add	r2, r3
 800790c:	4658      	mov	r0, fp
 800790e:	4498      	add	r8, r3
 8007910:	9208      	str	r2, [sp, #32]
 8007912:	f000 fc6b 	bl	80081ec <__i2b>
 8007916:	4605      	mov	r5, r0
 8007918:	b15e      	cbz	r6, 8007932 <_dtoa_r+0x74a>
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd08      	ble.n	8007932 <_dtoa_r+0x74a>
 8007920:	42b3      	cmp	r3, r6
 8007922:	9a08      	ldr	r2, [sp, #32]
 8007924:	bfa8      	it	ge
 8007926:	4633      	movge	r3, r6
 8007928:	eba8 0803 	sub.w	r8, r8, r3
 800792c:	1af6      	subs	r6, r6, r3
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007934:	b1f3      	cbz	r3, 8007974 <_dtoa_r+0x78c>
 8007936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80b7 	beq.w	8007aac <_dtoa_r+0x8c4>
 800793e:	b18c      	cbz	r4, 8007964 <_dtoa_r+0x77c>
 8007940:	4629      	mov	r1, r5
 8007942:	4622      	mov	r2, r4
 8007944:	4658      	mov	r0, fp
 8007946:	f000 fd11 	bl	800836c <__pow5mult>
 800794a:	464a      	mov	r2, r9
 800794c:	4601      	mov	r1, r0
 800794e:	4605      	mov	r5, r0
 8007950:	4658      	mov	r0, fp
 8007952:	f000 fc61 	bl	8008218 <__multiply>
 8007956:	4649      	mov	r1, r9
 8007958:	9004      	str	r0, [sp, #16]
 800795a:	4658      	mov	r0, fp
 800795c:	f000 fb48 	bl	8007ff0 <_Bfree>
 8007960:	9b04      	ldr	r3, [sp, #16]
 8007962:	4699      	mov	r9, r3
 8007964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007966:	1b1a      	subs	r2, r3, r4
 8007968:	d004      	beq.n	8007974 <_dtoa_r+0x78c>
 800796a:	4649      	mov	r1, r9
 800796c:	4658      	mov	r0, fp
 800796e:	f000 fcfd 	bl	800836c <__pow5mult>
 8007972:	4681      	mov	r9, r0
 8007974:	2101      	movs	r1, #1
 8007976:	4658      	mov	r0, fp
 8007978:	f000 fc38 	bl	80081ec <__i2b>
 800797c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800797e:	4604      	mov	r4, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 81cf 	beq.w	8007d24 <_dtoa_r+0xb3c>
 8007986:	461a      	mov	r2, r3
 8007988:	4601      	mov	r1, r0
 800798a:	4658      	mov	r0, fp
 800798c:	f000 fcee 	bl	800836c <__pow5mult>
 8007990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007992:	2b01      	cmp	r3, #1
 8007994:	4604      	mov	r4, r0
 8007996:	f300 8095 	bgt.w	8007ac4 <_dtoa_r+0x8dc>
 800799a:	9b02      	ldr	r3, [sp, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 8087 	bne.w	8007ab0 <_dtoa_r+0x8c8>
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 8089 	bne.w	8007ac0 <_dtoa_r+0x8d8>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079b4:	0d1b      	lsrs	r3, r3, #20
 80079b6:	051b      	lsls	r3, r3, #20
 80079b8:	b12b      	cbz	r3, 80079c6 <_dtoa_r+0x7de>
 80079ba:	9b08      	ldr	r3, [sp, #32]
 80079bc:	3301      	adds	r3, #1
 80079be:	9308      	str	r3, [sp, #32]
 80079c0:	f108 0801 	add.w	r8, r8, #1
 80079c4:	2301      	movs	r3, #1
 80079c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 81b0 	beq.w	8007d30 <_dtoa_r+0xb48>
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079d6:	6918      	ldr	r0, [r3, #16]
 80079d8:	f000 fbbc 	bl	8008154 <__hi0bits>
 80079dc:	f1c0 0020 	rsb	r0, r0, #32
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	4418      	add	r0, r3
 80079e4:	f010 001f 	ands.w	r0, r0, #31
 80079e8:	d077      	beq.n	8007ada <_dtoa_r+0x8f2>
 80079ea:	f1c0 0320 	rsb	r3, r0, #32
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	dd6b      	ble.n	8007aca <_dtoa_r+0x8e2>
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	f1c0 001c 	rsb	r0, r0, #28
 80079f8:	4403      	add	r3, r0
 80079fa:	4480      	add	r8, r0
 80079fc:	4406      	add	r6, r0
 80079fe:	9308      	str	r3, [sp, #32]
 8007a00:	f1b8 0f00 	cmp.w	r8, #0
 8007a04:	dd05      	ble.n	8007a12 <_dtoa_r+0x82a>
 8007a06:	4649      	mov	r1, r9
 8007a08:	4642      	mov	r2, r8
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f000 fd08 	bl	8008420 <__lshift>
 8007a10:	4681      	mov	r9, r0
 8007a12:	9b08      	ldr	r3, [sp, #32]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd05      	ble.n	8007a24 <_dtoa_r+0x83c>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	4658      	mov	r0, fp
 8007a1e:	f000 fcff 	bl	8008420 <__lshift>
 8007a22:	4604      	mov	r4, r0
 8007a24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d059      	beq.n	8007ade <_dtoa_r+0x8f6>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4648      	mov	r0, r9
 8007a2e:	f000 fd63 	bl	80084f8 <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	da53      	bge.n	8007ade <_dtoa_r+0x8f6>
 8007a36:	1e7b      	subs	r3, r7, #1
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	220a      	movs	r2, #10
 8007a40:	4658      	mov	r0, fp
 8007a42:	f000 faf7 	bl	8008034 <__multadd>
 8007a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a48:	4681      	mov	r9, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8172 	beq.w	8007d34 <_dtoa_r+0xb4c>
 8007a50:	2300      	movs	r3, #0
 8007a52:	4629      	mov	r1, r5
 8007a54:	220a      	movs	r2, #10
 8007a56:	4658      	mov	r0, fp
 8007a58:	f000 faec 	bl	8008034 <__multadd>
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	4605      	mov	r5, r0
 8007a62:	dc67      	bgt.n	8007b34 <_dtoa_r+0x94c>
 8007a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	dc41      	bgt.n	8007aee <_dtoa_r+0x906>
 8007a6a:	e063      	b.n	8007b34 <_dtoa_r+0x94c>
 8007a6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a72:	e746      	b.n	8007902 <_dtoa_r+0x71a>
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	1e5c      	subs	r4, r3, #1
 8007a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7a:	42a3      	cmp	r3, r4
 8007a7c:	bfbf      	itttt	lt
 8007a7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a84:	1ae3      	sublt	r3, r4, r3
 8007a86:	bfb4      	ite	lt
 8007a88:	18d2      	addlt	r2, r2, r3
 8007a8a:	1b1c      	subge	r4, r3, r4
 8007a8c:	9b07      	ldr	r3, [sp, #28]
 8007a8e:	bfbc      	itt	lt
 8007a90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a92:	2400      	movlt	r4, #0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bfb5      	itete	lt
 8007a98:	eba8 0603 	sublt.w	r6, r8, r3
 8007a9c:	9b07      	ldrge	r3, [sp, #28]
 8007a9e:	2300      	movlt	r3, #0
 8007aa0:	4646      	movge	r6, r8
 8007aa2:	e730      	b.n	8007906 <_dtoa_r+0x71e>
 8007aa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007aa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007aa8:	4646      	mov	r6, r8
 8007aaa:	e735      	b.n	8007918 <_dtoa_r+0x730>
 8007aac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007aae:	e75c      	b.n	800796a <_dtoa_r+0x782>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	e788      	b.n	80079c6 <_dtoa_r+0x7de>
 8007ab4:	3fe00000 	.word	0x3fe00000
 8007ab8:	40240000 	.word	0x40240000
 8007abc:	40140000 	.word	0x40140000
 8007ac0:	9b02      	ldr	r3, [sp, #8]
 8007ac2:	e780      	b.n	80079c6 <_dtoa_r+0x7de>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ac8:	e782      	b.n	80079d0 <_dtoa_r+0x7e8>
 8007aca:	d099      	beq.n	8007a00 <_dtoa_r+0x818>
 8007acc:	9a08      	ldr	r2, [sp, #32]
 8007ace:	331c      	adds	r3, #28
 8007ad0:	441a      	add	r2, r3
 8007ad2:	4498      	add	r8, r3
 8007ad4:	441e      	add	r6, r3
 8007ad6:	9208      	str	r2, [sp, #32]
 8007ad8:	e792      	b.n	8007a00 <_dtoa_r+0x818>
 8007ada:	4603      	mov	r3, r0
 8007adc:	e7f6      	b.n	8007acc <_dtoa_r+0x8e4>
 8007ade:	9b07      	ldr	r3, [sp, #28]
 8007ae0:	9704      	str	r7, [sp, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dc20      	bgt.n	8007b28 <_dtoa_r+0x940>
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	dd1e      	ble.n	8007b2c <_dtoa_r+0x944>
 8007aee:	9b00      	ldr	r3, [sp, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f aec0 	bne.w	8007876 <_dtoa_r+0x68e>
 8007af6:	4621      	mov	r1, r4
 8007af8:	2205      	movs	r2, #5
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 fa9a 	bl	8008034 <__multadd>
 8007b00:	4601      	mov	r1, r0
 8007b02:	4604      	mov	r4, r0
 8007b04:	4648      	mov	r0, r9
 8007b06:	f000 fcf7 	bl	80084f8 <__mcmp>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	f77f aeb3 	ble.w	8007876 <_dtoa_r+0x68e>
 8007b10:	4656      	mov	r6, sl
 8007b12:	2331      	movs	r3, #49	@ 0x31
 8007b14:	f806 3b01 	strb.w	r3, [r6], #1
 8007b18:	9b04      	ldr	r3, [sp, #16]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	e6ae      	b.n	800787e <_dtoa_r+0x696>
 8007b20:	9c07      	ldr	r4, [sp, #28]
 8007b22:	9704      	str	r7, [sp, #16]
 8007b24:	4625      	mov	r5, r4
 8007b26:	e7f3      	b.n	8007b10 <_dtoa_r+0x928>
 8007b28:	9b07      	ldr	r3, [sp, #28]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8104 	beq.w	8007d3c <_dtoa_r+0xb54>
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	dd05      	ble.n	8007b44 <_dtoa_r+0x95c>
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	4658      	mov	r0, fp
 8007b3e:	f000 fc6f 	bl	8008420 <__lshift>
 8007b42:	4605      	mov	r5, r0
 8007b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d05a      	beq.n	8007c00 <_dtoa_r+0xa18>
 8007b4a:	6869      	ldr	r1, [r5, #4]
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f000 fa0f 	bl	8007f70 <_Balloc>
 8007b52:	4606      	mov	r6, r0
 8007b54:	b928      	cbnz	r0, 8007b62 <_dtoa_r+0x97a>
 8007b56:	4b84      	ldr	r3, [pc, #528]	@ (8007d68 <_dtoa_r+0xb80>)
 8007b58:	4602      	mov	r2, r0
 8007b5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b5e:	f7ff bb5a 	b.w	8007216 <_dtoa_r+0x2e>
 8007b62:	692a      	ldr	r2, [r5, #16]
 8007b64:	3202      	adds	r2, #2
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	f105 010c 	add.w	r1, r5, #12
 8007b6c:	300c      	adds	r0, #12
 8007b6e:	f7ff fa9c 	bl	80070aa <memcpy>
 8007b72:	2201      	movs	r2, #1
 8007b74:	4631      	mov	r1, r6
 8007b76:	4658      	mov	r0, fp
 8007b78:	f000 fc52 	bl	8008420 <__lshift>
 8007b7c:	f10a 0301 	add.w	r3, sl, #1
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	9b00      	ldr	r3, [sp, #0]
 8007b84:	4453      	add	r3, sl
 8007b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b88:	9b02      	ldr	r3, [sp, #8]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	462f      	mov	r7, r5
 8007b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b92:	4605      	mov	r5, r0
 8007b94:	9b07      	ldr	r3, [sp, #28]
 8007b96:	4621      	mov	r1, r4
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	4648      	mov	r0, r9
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	f7ff fa99 	bl	80070d4 <quorem>
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	9002      	str	r0, [sp, #8]
 8007ba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007baa:	4648      	mov	r0, r9
 8007bac:	f000 fca4 	bl	80084f8 <__mcmp>
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	9008      	str	r0, [sp, #32]
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4658      	mov	r0, fp
 8007bb8:	f000 fcba 	bl	8008530 <__mdiff>
 8007bbc:	68c2      	ldr	r2, [r0, #12]
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	bb02      	cbnz	r2, 8007c04 <_dtoa_r+0xa1c>
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	f000 fc97 	bl	80084f8 <__mcmp>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4658      	mov	r0, fp
 8007bd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bd2:	f000 fa0d 	bl	8007ff0 <_Bfree>
 8007bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bda:	9e07      	ldr	r6, [sp, #28]
 8007bdc:	ea43 0102 	orr.w	r1, r3, r2
 8007be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be2:	4319      	orrs	r1, r3
 8007be4:	d110      	bne.n	8007c08 <_dtoa_r+0xa20>
 8007be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bea:	d029      	beq.n	8007c40 <_dtoa_r+0xa58>
 8007bec:	9b08      	ldr	r3, [sp, #32]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dd02      	ble.n	8007bf8 <_dtoa_r+0xa10>
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	f883 8000 	strb.w	r8, [r3]
 8007bfe:	e63f      	b.n	8007880 <_dtoa_r+0x698>
 8007c00:	4628      	mov	r0, r5
 8007c02:	e7bb      	b.n	8007b7c <_dtoa_r+0x994>
 8007c04:	2201      	movs	r2, #1
 8007c06:	e7e1      	b.n	8007bcc <_dtoa_r+0x9e4>
 8007c08:	9b08      	ldr	r3, [sp, #32]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	db04      	blt.n	8007c18 <_dtoa_r+0xa30>
 8007c0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c10:	430b      	orrs	r3, r1
 8007c12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c14:	430b      	orrs	r3, r1
 8007c16:	d120      	bne.n	8007c5a <_dtoa_r+0xa72>
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	dded      	ble.n	8007bf8 <_dtoa_r+0xa10>
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4658      	mov	r0, fp
 8007c22:	f000 fbfd 	bl	8008420 <__lshift>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4681      	mov	r9, r0
 8007c2a:	f000 fc65 	bl	80084f8 <__mcmp>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	dc03      	bgt.n	8007c3a <_dtoa_r+0xa52>
 8007c32:	d1e1      	bne.n	8007bf8 <_dtoa_r+0xa10>
 8007c34:	f018 0f01 	tst.w	r8, #1
 8007c38:	d0de      	beq.n	8007bf8 <_dtoa_r+0xa10>
 8007c3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c3e:	d1d8      	bne.n	8007bf2 <_dtoa_r+0xa0a>
 8007c40:	9a00      	ldr	r2, [sp, #0]
 8007c42:	2339      	movs	r3, #57	@ 0x39
 8007c44:	7013      	strb	r3, [r2, #0]
 8007c46:	4633      	mov	r3, r6
 8007c48:	461e      	mov	r6, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c50:	2a39      	cmp	r2, #57	@ 0x39
 8007c52:	d052      	beq.n	8007cfa <_dtoa_r+0xb12>
 8007c54:	3201      	adds	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]
 8007c58:	e612      	b.n	8007880 <_dtoa_r+0x698>
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	dd07      	ble.n	8007c6e <_dtoa_r+0xa86>
 8007c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c62:	d0ed      	beq.n	8007c40 <_dtoa_r+0xa58>
 8007c64:	9a00      	ldr	r2, [sp, #0]
 8007c66:	f108 0301 	add.w	r3, r8, #1
 8007c6a:	7013      	strb	r3, [r2, #0]
 8007c6c:	e608      	b.n	8007880 <_dtoa_r+0x698>
 8007c6e:	9b07      	ldr	r3, [sp, #28]
 8007c70:	9a07      	ldr	r2, [sp, #28]
 8007c72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d028      	beq.n	8007cce <_dtoa_r+0xae6>
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	2300      	movs	r3, #0
 8007c80:	220a      	movs	r2, #10
 8007c82:	4658      	mov	r0, fp
 8007c84:	f000 f9d6 	bl	8008034 <__multadd>
 8007c88:	42af      	cmp	r7, r5
 8007c8a:	4681      	mov	r9, r0
 8007c8c:	f04f 0300 	mov.w	r3, #0
 8007c90:	f04f 020a 	mov.w	r2, #10
 8007c94:	4639      	mov	r1, r7
 8007c96:	4658      	mov	r0, fp
 8007c98:	d107      	bne.n	8007caa <_dtoa_r+0xac2>
 8007c9a:	f000 f9cb 	bl	8008034 <__multadd>
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	9307      	str	r3, [sp, #28]
 8007ca8:	e774      	b.n	8007b94 <_dtoa_r+0x9ac>
 8007caa:	f000 f9c3 	bl	8008034 <__multadd>
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	220a      	movs	r2, #10
 8007cb6:	4658      	mov	r0, fp
 8007cb8:	f000 f9bc 	bl	8008034 <__multadd>
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	e7f0      	b.n	8007ca2 <_dtoa_r+0xaba>
 8007cc0:	9b00      	ldr	r3, [sp, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bfcc      	ite	gt
 8007cc6:	461e      	movgt	r6, r3
 8007cc8:	2601      	movle	r6, #1
 8007cca:	4456      	add	r6, sl
 8007ccc:	2700      	movs	r7, #0
 8007cce:	4649      	mov	r1, r9
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	4658      	mov	r0, fp
 8007cd4:	f000 fba4 	bl	8008420 <__lshift>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4681      	mov	r9, r0
 8007cdc:	f000 fc0c 	bl	80084f8 <__mcmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	dcb0      	bgt.n	8007c46 <_dtoa_r+0xa5e>
 8007ce4:	d102      	bne.n	8007cec <_dtoa_r+0xb04>
 8007ce6:	f018 0f01 	tst.w	r8, #1
 8007cea:	d1ac      	bne.n	8007c46 <_dtoa_r+0xa5e>
 8007cec:	4633      	mov	r3, r6
 8007cee:	461e      	mov	r6, r3
 8007cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cf4:	2a30      	cmp	r2, #48	@ 0x30
 8007cf6:	d0fa      	beq.n	8007cee <_dtoa_r+0xb06>
 8007cf8:	e5c2      	b.n	8007880 <_dtoa_r+0x698>
 8007cfa:	459a      	cmp	sl, r3
 8007cfc:	d1a4      	bne.n	8007c48 <_dtoa_r+0xa60>
 8007cfe:	9b04      	ldr	r3, [sp, #16]
 8007d00:	3301      	adds	r3, #1
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	2331      	movs	r3, #49	@ 0x31
 8007d06:	f88a 3000 	strb.w	r3, [sl]
 8007d0a:	e5b9      	b.n	8007880 <_dtoa_r+0x698>
 8007d0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d6c <_dtoa_r+0xb84>
 8007d12:	b11b      	cbz	r3, 8007d1c <_dtoa_r+0xb34>
 8007d14:	f10a 0308 	add.w	r3, sl, #8
 8007d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	4650      	mov	r0, sl
 8007d1e:	b019      	add	sp, #100	@ 0x64
 8007d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	f77f ae37 	ble.w	800799a <_dtoa_r+0x7b2>
 8007d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d30:	2001      	movs	r0, #1
 8007d32:	e655      	b.n	80079e0 <_dtoa_r+0x7f8>
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f77f aed6 	ble.w	8007ae8 <_dtoa_r+0x900>
 8007d3c:	4656      	mov	r6, sl
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4648      	mov	r0, r9
 8007d42:	f7ff f9c7 	bl	80070d4 <quorem>
 8007d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d4a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d4e:	9b00      	ldr	r3, [sp, #0]
 8007d50:	eba6 020a 	sub.w	r2, r6, sl
 8007d54:	4293      	cmp	r3, r2
 8007d56:	ddb3      	ble.n	8007cc0 <_dtoa_r+0xad8>
 8007d58:	4649      	mov	r1, r9
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	4658      	mov	r0, fp
 8007d60:	f000 f968 	bl	8008034 <__multadd>
 8007d64:	4681      	mov	r9, r0
 8007d66:	e7ea      	b.n	8007d3e <_dtoa_r+0xb56>
 8007d68:	0800a909 	.word	0x0800a909
 8007d6c:	0800a88d 	.word	0x0800a88d

08007d70 <_free_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4605      	mov	r5, r0
 8007d74:	2900      	cmp	r1, #0
 8007d76:	d041      	beq.n	8007dfc <_free_r+0x8c>
 8007d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d7c:	1f0c      	subs	r4, r1, #4
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bfb8      	it	lt
 8007d82:	18e4      	addlt	r4, r4, r3
 8007d84:	f000 f8e8 	bl	8007f58 <__malloc_lock>
 8007d88:	4a1d      	ldr	r2, [pc, #116]	@ (8007e00 <_free_r+0x90>)
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	b933      	cbnz	r3, 8007d9c <_free_r+0x2c>
 8007d8e:	6063      	str	r3, [r4, #4]
 8007d90:	6014      	str	r4, [r2, #0]
 8007d92:	4628      	mov	r0, r5
 8007d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d98:	f000 b8e4 	b.w	8007f64 <__malloc_unlock>
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	d908      	bls.n	8007db2 <_free_r+0x42>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	1821      	adds	r1, r4, r0
 8007da4:	428b      	cmp	r3, r1
 8007da6:	bf01      	itttt	eq
 8007da8:	6819      	ldreq	r1, [r3, #0]
 8007daa:	685b      	ldreq	r3, [r3, #4]
 8007dac:	1809      	addeq	r1, r1, r0
 8007dae:	6021      	streq	r1, [r4, #0]
 8007db0:	e7ed      	b.n	8007d8e <_free_r+0x1e>
 8007db2:	461a      	mov	r2, r3
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	b10b      	cbz	r3, 8007dbc <_free_r+0x4c>
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	d9fa      	bls.n	8007db2 <_free_r+0x42>
 8007dbc:	6811      	ldr	r1, [r2, #0]
 8007dbe:	1850      	adds	r0, r2, r1
 8007dc0:	42a0      	cmp	r0, r4
 8007dc2:	d10b      	bne.n	8007ddc <_free_r+0x6c>
 8007dc4:	6820      	ldr	r0, [r4, #0]
 8007dc6:	4401      	add	r1, r0
 8007dc8:	1850      	adds	r0, r2, r1
 8007dca:	4283      	cmp	r3, r0
 8007dcc:	6011      	str	r1, [r2, #0]
 8007dce:	d1e0      	bne.n	8007d92 <_free_r+0x22>
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	6053      	str	r3, [r2, #4]
 8007dd6:	4408      	add	r0, r1
 8007dd8:	6010      	str	r0, [r2, #0]
 8007dda:	e7da      	b.n	8007d92 <_free_r+0x22>
 8007ddc:	d902      	bls.n	8007de4 <_free_r+0x74>
 8007dde:	230c      	movs	r3, #12
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	e7d6      	b.n	8007d92 <_free_r+0x22>
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	1821      	adds	r1, r4, r0
 8007de8:	428b      	cmp	r3, r1
 8007dea:	bf04      	itt	eq
 8007dec:	6819      	ldreq	r1, [r3, #0]
 8007dee:	685b      	ldreq	r3, [r3, #4]
 8007df0:	6063      	str	r3, [r4, #4]
 8007df2:	bf04      	itt	eq
 8007df4:	1809      	addeq	r1, r1, r0
 8007df6:	6021      	streq	r1, [r4, #0]
 8007df8:	6054      	str	r4, [r2, #4]
 8007dfa:	e7ca      	b.n	8007d92 <_free_r+0x22>
 8007dfc:	bd38      	pop	{r3, r4, r5, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000578 	.word	0x20000578

08007e04 <malloc>:
 8007e04:	4b02      	ldr	r3, [pc, #8]	@ (8007e10 <malloc+0xc>)
 8007e06:	4601      	mov	r1, r0
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	f000 b825 	b.w	8007e58 <_malloc_r>
 8007e0e:	bf00      	nop
 8007e10:	2000009c 	.word	0x2000009c

08007e14 <sbrk_aligned>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4e0f      	ldr	r6, [pc, #60]	@ (8007e54 <sbrk_aligned+0x40>)
 8007e18:	460c      	mov	r4, r1
 8007e1a:	6831      	ldr	r1, [r6, #0]
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	b911      	cbnz	r1, 8007e26 <sbrk_aligned+0x12>
 8007e20:	f001 fe0c 	bl	8009a3c <_sbrk_r>
 8007e24:	6030      	str	r0, [r6, #0]
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f001 fe07 	bl	8009a3c <_sbrk_r>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	d103      	bne.n	8007e3a <sbrk_aligned+0x26>
 8007e32:	f04f 34ff 	mov.w	r4, #4294967295
 8007e36:	4620      	mov	r0, r4
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d0f8      	beq.n	8007e36 <sbrk_aligned+0x22>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f001 fdf8 	bl	8009a3c <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d1f2      	bne.n	8007e36 <sbrk_aligned+0x22>
 8007e50:	e7ef      	b.n	8007e32 <sbrk_aligned+0x1e>
 8007e52:	bf00      	nop
 8007e54:	20000574 	.word	0x20000574

08007e58 <_malloc_r>:
 8007e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	1ccd      	adds	r5, r1, #3
 8007e5e:	f025 0503 	bic.w	r5, r5, #3
 8007e62:	3508      	adds	r5, #8
 8007e64:	2d0c      	cmp	r5, #12
 8007e66:	bf38      	it	cc
 8007e68:	250c      	movcc	r5, #12
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	db01      	blt.n	8007e74 <_malloc_r+0x1c>
 8007e70:	42a9      	cmp	r1, r5
 8007e72:	d904      	bls.n	8007e7e <_malloc_r+0x26>
 8007e74:	230c      	movs	r3, #12
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f54 <_malloc_r+0xfc>
 8007e82:	f000 f869 	bl	8007f58 <__malloc_lock>
 8007e86:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8a:	461c      	mov	r4, r3
 8007e8c:	bb44      	cbnz	r4, 8007ee0 <_malloc_r+0x88>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4630      	mov	r0, r6
 8007e92:	f7ff ffbf 	bl	8007e14 <sbrk_aligned>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	4604      	mov	r4, r0
 8007e9a:	d158      	bne.n	8007f4e <_malloc_r+0xf6>
 8007e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007ea0:	4627      	mov	r7, r4
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	d143      	bne.n	8007f2e <_malloc_r+0xd6>
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	d04b      	beq.n	8007f42 <_malloc_r+0xea>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	4639      	mov	r1, r7
 8007eae:	4630      	mov	r0, r6
 8007eb0:	eb04 0903 	add.w	r9, r4, r3
 8007eb4:	f001 fdc2 	bl	8009a3c <_sbrk_r>
 8007eb8:	4581      	cmp	r9, r0
 8007eba:	d142      	bne.n	8007f42 <_malloc_r+0xea>
 8007ebc:	6821      	ldr	r1, [r4, #0]
 8007ebe:	1a6d      	subs	r5, r5, r1
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7ff ffa6 	bl	8007e14 <sbrk_aligned>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d03a      	beq.n	8007f42 <_malloc_r+0xea>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	442b      	add	r3, r5
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	bb62      	cbnz	r2, 8007f34 <_malloc_r+0xdc>
 8007eda:	f8c8 7000 	str.w	r7, [r8]
 8007ede:	e00f      	b.n	8007f00 <_malloc_r+0xa8>
 8007ee0:	6822      	ldr	r2, [r4, #0]
 8007ee2:	1b52      	subs	r2, r2, r5
 8007ee4:	d420      	bmi.n	8007f28 <_malloc_r+0xd0>
 8007ee6:	2a0b      	cmp	r2, #11
 8007ee8:	d917      	bls.n	8007f1a <_malloc_r+0xc2>
 8007eea:	1961      	adds	r1, r4, r5
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	6025      	str	r5, [r4, #0]
 8007ef0:	bf18      	it	ne
 8007ef2:	6059      	strne	r1, [r3, #4]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	bf08      	it	eq
 8007ef8:	f8c8 1000 	streq.w	r1, [r8]
 8007efc:	5162      	str	r2, [r4, r5]
 8007efe:	604b      	str	r3, [r1, #4]
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 f82f 	bl	8007f64 <__malloc_unlock>
 8007f06:	f104 000b 	add.w	r0, r4, #11
 8007f0a:	1d23      	adds	r3, r4, #4
 8007f0c:	f020 0007 	bic.w	r0, r0, #7
 8007f10:	1ac2      	subs	r2, r0, r3
 8007f12:	bf1c      	itt	ne
 8007f14:	1a1b      	subne	r3, r3, r0
 8007f16:	50a3      	strne	r3, [r4, r2]
 8007f18:	e7af      	b.n	8007e7a <_malloc_r+0x22>
 8007f1a:	6862      	ldr	r2, [r4, #4]
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	bf0c      	ite	eq
 8007f20:	f8c8 2000 	streq.w	r2, [r8]
 8007f24:	605a      	strne	r2, [r3, #4]
 8007f26:	e7eb      	b.n	8007f00 <_malloc_r+0xa8>
 8007f28:	4623      	mov	r3, r4
 8007f2a:	6864      	ldr	r4, [r4, #4]
 8007f2c:	e7ae      	b.n	8007e8c <_malloc_r+0x34>
 8007f2e:	463c      	mov	r4, r7
 8007f30:	687f      	ldr	r7, [r7, #4]
 8007f32:	e7b6      	b.n	8007ea2 <_malloc_r+0x4a>
 8007f34:	461a      	mov	r2, r3
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d1fb      	bne.n	8007f34 <_malloc_r+0xdc>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6053      	str	r3, [r2, #4]
 8007f40:	e7de      	b.n	8007f00 <_malloc_r+0xa8>
 8007f42:	230c      	movs	r3, #12
 8007f44:	6033      	str	r3, [r6, #0]
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 f80c 	bl	8007f64 <__malloc_unlock>
 8007f4c:	e794      	b.n	8007e78 <_malloc_r+0x20>
 8007f4e:	6005      	str	r5, [r0, #0]
 8007f50:	e7d6      	b.n	8007f00 <_malloc_r+0xa8>
 8007f52:	bf00      	nop
 8007f54:	20000578 	.word	0x20000578

08007f58 <__malloc_lock>:
 8007f58:	4801      	ldr	r0, [pc, #4]	@ (8007f60 <__malloc_lock+0x8>)
 8007f5a:	f7ff b8a4 	b.w	80070a6 <__retarget_lock_acquire_recursive>
 8007f5e:	bf00      	nop
 8007f60:	20000570 	.word	0x20000570

08007f64 <__malloc_unlock>:
 8007f64:	4801      	ldr	r0, [pc, #4]	@ (8007f6c <__malloc_unlock+0x8>)
 8007f66:	f7ff b89f 	b.w	80070a8 <__retarget_lock_release_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	20000570 	.word	0x20000570

08007f70 <_Balloc>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	69c6      	ldr	r6, [r0, #28]
 8007f74:	4604      	mov	r4, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	b976      	cbnz	r6, 8007f98 <_Balloc+0x28>
 8007f7a:	2010      	movs	r0, #16
 8007f7c:	f7ff ff42 	bl	8007e04 <malloc>
 8007f80:	4602      	mov	r2, r0
 8007f82:	61e0      	str	r0, [r4, #28]
 8007f84:	b920      	cbnz	r0, 8007f90 <_Balloc+0x20>
 8007f86:	4b18      	ldr	r3, [pc, #96]	@ (8007fe8 <_Balloc+0x78>)
 8007f88:	4818      	ldr	r0, [pc, #96]	@ (8007fec <_Balloc+0x7c>)
 8007f8a:	216b      	movs	r1, #107	@ 0x6b
 8007f8c:	f001 fd70 	bl	8009a70 <__assert_func>
 8007f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f94:	6006      	str	r6, [r0, #0]
 8007f96:	60c6      	str	r6, [r0, #12]
 8007f98:	69e6      	ldr	r6, [r4, #28]
 8007f9a:	68f3      	ldr	r3, [r6, #12]
 8007f9c:	b183      	cbz	r3, 8007fc0 <_Balloc+0x50>
 8007f9e:	69e3      	ldr	r3, [r4, #28]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fa6:	b9b8      	cbnz	r0, 8007fd8 <_Balloc+0x68>
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f605 	lsl.w	r6, r1, r5
 8007fae:	1d72      	adds	r2, r6, #5
 8007fb0:	0092      	lsls	r2, r2, #2
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f001 fd7a 	bl	8009aac <_calloc_r>
 8007fb8:	b160      	cbz	r0, 8007fd4 <_Balloc+0x64>
 8007fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fbe:	e00e      	b.n	8007fde <_Balloc+0x6e>
 8007fc0:	2221      	movs	r2, #33	@ 0x21
 8007fc2:	2104      	movs	r1, #4
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f001 fd71 	bl	8009aac <_calloc_r>
 8007fca:	69e3      	ldr	r3, [r4, #28]
 8007fcc:	60f0      	str	r0, [r6, #12]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e4      	bne.n	8007f9e <_Balloc+0x2e>
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	6802      	ldr	r2, [r0, #0]
 8007fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fe4:	e7f7      	b.n	8007fd6 <_Balloc+0x66>
 8007fe6:	bf00      	nop
 8007fe8:	0800a89a 	.word	0x0800a89a
 8007fec:	0800a91a 	.word	0x0800a91a

08007ff0 <_Bfree>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	69c6      	ldr	r6, [r0, #28]
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	b976      	cbnz	r6, 8008018 <_Bfree+0x28>
 8007ffa:	2010      	movs	r0, #16
 8007ffc:	f7ff ff02 	bl	8007e04 <malloc>
 8008000:	4602      	mov	r2, r0
 8008002:	61e8      	str	r0, [r5, #28]
 8008004:	b920      	cbnz	r0, 8008010 <_Bfree+0x20>
 8008006:	4b09      	ldr	r3, [pc, #36]	@ (800802c <_Bfree+0x3c>)
 8008008:	4809      	ldr	r0, [pc, #36]	@ (8008030 <_Bfree+0x40>)
 800800a:	218f      	movs	r1, #143	@ 0x8f
 800800c:	f001 fd30 	bl	8009a70 <__assert_func>
 8008010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008014:	6006      	str	r6, [r0, #0]
 8008016:	60c6      	str	r6, [r0, #12]
 8008018:	b13c      	cbz	r4, 800802a <_Bfree+0x3a>
 800801a:	69eb      	ldr	r3, [r5, #28]
 800801c:	6862      	ldr	r2, [r4, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008024:	6021      	str	r1, [r4, #0]
 8008026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	0800a89a 	.word	0x0800a89a
 8008030:	0800a91a 	.word	0x0800a91a

08008034 <__multadd>:
 8008034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	690d      	ldr	r5, [r1, #16]
 800803a:	4607      	mov	r7, r0
 800803c:	460c      	mov	r4, r1
 800803e:	461e      	mov	r6, r3
 8008040:	f101 0c14 	add.w	ip, r1, #20
 8008044:	2000      	movs	r0, #0
 8008046:	f8dc 3000 	ldr.w	r3, [ip]
 800804a:	b299      	uxth	r1, r3
 800804c:	fb02 6101 	mla	r1, r2, r1, r6
 8008050:	0c1e      	lsrs	r6, r3, #16
 8008052:	0c0b      	lsrs	r3, r1, #16
 8008054:	fb02 3306 	mla	r3, r2, r6, r3
 8008058:	b289      	uxth	r1, r1
 800805a:	3001      	adds	r0, #1
 800805c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008060:	4285      	cmp	r5, r0
 8008062:	f84c 1b04 	str.w	r1, [ip], #4
 8008066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800806a:	dcec      	bgt.n	8008046 <__multadd+0x12>
 800806c:	b30e      	cbz	r6, 80080b2 <__multadd+0x7e>
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	42ab      	cmp	r3, r5
 8008072:	dc19      	bgt.n	80080a8 <__multadd+0x74>
 8008074:	6861      	ldr	r1, [r4, #4]
 8008076:	4638      	mov	r0, r7
 8008078:	3101      	adds	r1, #1
 800807a:	f7ff ff79 	bl	8007f70 <_Balloc>
 800807e:	4680      	mov	r8, r0
 8008080:	b928      	cbnz	r0, 800808e <__multadd+0x5a>
 8008082:	4602      	mov	r2, r0
 8008084:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <__multadd+0x84>)
 8008086:	480d      	ldr	r0, [pc, #52]	@ (80080bc <__multadd+0x88>)
 8008088:	21ba      	movs	r1, #186	@ 0xba
 800808a:	f001 fcf1 	bl	8009a70 <__assert_func>
 800808e:	6922      	ldr	r2, [r4, #16]
 8008090:	3202      	adds	r2, #2
 8008092:	f104 010c 	add.w	r1, r4, #12
 8008096:	0092      	lsls	r2, r2, #2
 8008098:	300c      	adds	r0, #12
 800809a:	f7ff f806 	bl	80070aa <memcpy>
 800809e:	4621      	mov	r1, r4
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ffa5 	bl	8007ff0 <_Bfree>
 80080a6:	4644      	mov	r4, r8
 80080a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080ac:	3501      	adds	r5, #1
 80080ae:	615e      	str	r6, [r3, #20]
 80080b0:	6125      	str	r5, [r4, #16]
 80080b2:	4620      	mov	r0, r4
 80080b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b8:	0800a909 	.word	0x0800a909
 80080bc:	0800a91a 	.word	0x0800a91a

080080c0 <__s2b>:
 80080c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c4:	460c      	mov	r4, r1
 80080c6:	4615      	mov	r5, r2
 80080c8:	461f      	mov	r7, r3
 80080ca:	2209      	movs	r2, #9
 80080cc:	3308      	adds	r3, #8
 80080ce:	4606      	mov	r6, r0
 80080d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080d4:	2100      	movs	r1, #0
 80080d6:	2201      	movs	r2, #1
 80080d8:	429a      	cmp	r2, r3
 80080da:	db09      	blt.n	80080f0 <__s2b+0x30>
 80080dc:	4630      	mov	r0, r6
 80080de:	f7ff ff47 	bl	8007f70 <_Balloc>
 80080e2:	b940      	cbnz	r0, 80080f6 <__s2b+0x36>
 80080e4:	4602      	mov	r2, r0
 80080e6:	4b19      	ldr	r3, [pc, #100]	@ (800814c <__s2b+0x8c>)
 80080e8:	4819      	ldr	r0, [pc, #100]	@ (8008150 <__s2b+0x90>)
 80080ea:	21d3      	movs	r1, #211	@ 0xd3
 80080ec:	f001 fcc0 	bl	8009a70 <__assert_func>
 80080f0:	0052      	lsls	r2, r2, #1
 80080f2:	3101      	adds	r1, #1
 80080f4:	e7f0      	b.n	80080d8 <__s2b+0x18>
 80080f6:	9b08      	ldr	r3, [sp, #32]
 80080f8:	6143      	str	r3, [r0, #20]
 80080fa:	2d09      	cmp	r5, #9
 80080fc:	f04f 0301 	mov.w	r3, #1
 8008100:	6103      	str	r3, [r0, #16]
 8008102:	dd16      	ble.n	8008132 <__s2b+0x72>
 8008104:	f104 0909 	add.w	r9, r4, #9
 8008108:	46c8      	mov	r8, r9
 800810a:	442c      	add	r4, r5
 800810c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008110:	4601      	mov	r1, r0
 8008112:	3b30      	subs	r3, #48	@ 0x30
 8008114:	220a      	movs	r2, #10
 8008116:	4630      	mov	r0, r6
 8008118:	f7ff ff8c 	bl	8008034 <__multadd>
 800811c:	45a0      	cmp	r8, r4
 800811e:	d1f5      	bne.n	800810c <__s2b+0x4c>
 8008120:	f1a5 0408 	sub.w	r4, r5, #8
 8008124:	444c      	add	r4, r9
 8008126:	1b2d      	subs	r5, r5, r4
 8008128:	1963      	adds	r3, r4, r5
 800812a:	42bb      	cmp	r3, r7
 800812c:	db04      	blt.n	8008138 <__s2b+0x78>
 800812e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008132:	340a      	adds	r4, #10
 8008134:	2509      	movs	r5, #9
 8008136:	e7f6      	b.n	8008126 <__s2b+0x66>
 8008138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800813c:	4601      	mov	r1, r0
 800813e:	3b30      	subs	r3, #48	@ 0x30
 8008140:	220a      	movs	r2, #10
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff ff76 	bl	8008034 <__multadd>
 8008148:	e7ee      	b.n	8008128 <__s2b+0x68>
 800814a:	bf00      	nop
 800814c:	0800a909 	.word	0x0800a909
 8008150:	0800a91a 	.word	0x0800a91a

08008154 <__hi0bits>:
 8008154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008158:	4603      	mov	r3, r0
 800815a:	bf36      	itet	cc
 800815c:	0403      	lslcc	r3, r0, #16
 800815e:	2000      	movcs	r0, #0
 8008160:	2010      	movcc	r0, #16
 8008162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008166:	bf3c      	itt	cc
 8008168:	021b      	lslcc	r3, r3, #8
 800816a:	3008      	addcc	r0, #8
 800816c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008170:	bf3c      	itt	cc
 8008172:	011b      	lslcc	r3, r3, #4
 8008174:	3004      	addcc	r0, #4
 8008176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800817a:	bf3c      	itt	cc
 800817c:	009b      	lslcc	r3, r3, #2
 800817e:	3002      	addcc	r0, #2
 8008180:	2b00      	cmp	r3, #0
 8008182:	db05      	blt.n	8008190 <__hi0bits+0x3c>
 8008184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008188:	f100 0001 	add.w	r0, r0, #1
 800818c:	bf08      	it	eq
 800818e:	2020      	moveq	r0, #32
 8008190:	4770      	bx	lr

08008192 <__lo0bits>:
 8008192:	6803      	ldr	r3, [r0, #0]
 8008194:	4602      	mov	r2, r0
 8008196:	f013 0007 	ands.w	r0, r3, #7
 800819a:	d00b      	beq.n	80081b4 <__lo0bits+0x22>
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d421      	bmi.n	80081e4 <__lo0bits+0x52>
 80081a0:	0798      	lsls	r0, r3, #30
 80081a2:	bf49      	itett	mi
 80081a4:	085b      	lsrmi	r3, r3, #1
 80081a6:	089b      	lsrpl	r3, r3, #2
 80081a8:	2001      	movmi	r0, #1
 80081aa:	6013      	strmi	r3, [r2, #0]
 80081ac:	bf5c      	itt	pl
 80081ae:	6013      	strpl	r3, [r2, #0]
 80081b0:	2002      	movpl	r0, #2
 80081b2:	4770      	bx	lr
 80081b4:	b299      	uxth	r1, r3
 80081b6:	b909      	cbnz	r1, 80081bc <__lo0bits+0x2a>
 80081b8:	0c1b      	lsrs	r3, r3, #16
 80081ba:	2010      	movs	r0, #16
 80081bc:	b2d9      	uxtb	r1, r3
 80081be:	b909      	cbnz	r1, 80081c4 <__lo0bits+0x32>
 80081c0:	3008      	adds	r0, #8
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	0719      	lsls	r1, r3, #28
 80081c6:	bf04      	itt	eq
 80081c8:	091b      	lsreq	r3, r3, #4
 80081ca:	3004      	addeq	r0, #4
 80081cc:	0799      	lsls	r1, r3, #30
 80081ce:	bf04      	itt	eq
 80081d0:	089b      	lsreq	r3, r3, #2
 80081d2:	3002      	addeq	r0, #2
 80081d4:	07d9      	lsls	r1, r3, #31
 80081d6:	d403      	bmi.n	80081e0 <__lo0bits+0x4e>
 80081d8:	085b      	lsrs	r3, r3, #1
 80081da:	f100 0001 	add.w	r0, r0, #1
 80081de:	d003      	beq.n	80081e8 <__lo0bits+0x56>
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	4770      	bx	lr
 80081e4:	2000      	movs	r0, #0
 80081e6:	4770      	bx	lr
 80081e8:	2020      	movs	r0, #32
 80081ea:	4770      	bx	lr

080081ec <__i2b>:
 80081ec:	b510      	push	{r4, lr}
 80081ee:	460c      	mov	r4, r1
 80081f0:	2101      	movs	r1, #1
 80081f2:	f7ff febd 	bl	8007f70 <_Balloc>
 80081f6:	4602      	mov	r2, r0
 80081f8:	b928      	cbnz	r0, 8008206 <__i2b+0x1a>
 80081fa:	4b05      	ldr	r3, [pc, #20]	@ (8008210 <__i2b+0x24>)
 80081fc:	4805      	ldr	r0, [pc, #20]	@ (8008214 <__i2b+0x28>)
 80081fe:	f240 1145 	movw	r1, #325	@ 0x145
 8008202:	f001 fc35 	bl	8009a70 <__assert_func>
 8008206:	2301      	movs	r3, #1
 8008208:	6144      	str	r4, [r0, #20]
 800820a:	6103      	str	r3, [r0, #16]
 800820c:	bd10      	pop	{r4, pc}
 800820e:	bf00      	nop
 8008210:	0800a909 	.word	0x0800a909
 8008214:	0800a91a 	.word	0x0800a91a

08008218 <__multiply>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	4614      	mov	r4, r2
 800821e:	690a      	ldr	r2, [r1, #16]
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	429a      	cmp	r2, r3
 8008224:	bfa8      	it	ge
 8008226:	4623      	movge	r3, r4
 8008228:	460f      	mov	r7, r1
 800822a:	bfa4      	itt	ge
 800822c:	460c      	movge	r4, r1
 800822e:	461f      	movge	r7, r3
 8008230:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008234:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008238:	68a3      	ldr	r3, [r4, #8]
 800823a:	6861      	ldr	r1, [r4, #4]
 800823c:	eb0a 0609 	add.w	r6, sl, r9
 8008240:	42b3      	cmp	r3, r6
 8008242:	b085      	sub	sp, #20
 8008244:	bfb8      	it	lt
 8008246:	3101      	addlt	r1, #1
 8008248:	f7ff fe92 	bl	8007f70 <_Balloc>
 800824c:	b930      	cbnz	r0, 800825c <__multiply+0x44>
 800824e:	4602      	mov	r2, r0
 8008250:	4b44      	ldr	r3, [pc, #272]	@ (8008364 <__multiply+0x14c>)
 8008252:	4845      	ldr	r0, [pc, #276]	@ (8008368 <__multiply+0x150>)
 8008254:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008258:	f001 fc0a 	bl	8009a70 <__assert_func>
 800825c:	f100 0514 	add.w	r5, r0, #20
 8008260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008264:	462b      	mov	r3, r5
 8008266:	2200      	movs	r2, #0
 8008268:	4543      	cmp	r3, r8
 800826a:	d321      	bcc.n	80082b0 <__multiply+0x98>
 800826c:	f107 0114 	add.w	r1, r7, #20
 8008270:	f104 0214 	add.w	r2, r4, #20
 8008274:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008278:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	1b13      	subs	r3, r2, r4
 8008280:	3b15      	subs	r3, #21
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	3304      	adds	r3, #4
 8008288:	f104 0715 	add.w	r7, r4, #21
 800828c:	42ba      	cmp	r2, r7
 800828e:	bf38      	it	cc
 8008290:	2304      	movcc	r3, #4
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	9b02      	ldr	r3, [sp, #8]
 8008296:	9103      	str	r1, [sp, #12]
 8008298:	428b      	cmp	r3, r1
 800829a:	d80c      	bhi.n	80082b6 <__multiply+0x9e>
 800829c:	2e00      	cmp	r6, #0
 800829e:	dd03      	ble.n	80082a8 <__multiply+0x90>
 80082a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d05b      	beq.n	8008360 <__multiply+0x148>
 80082a8:	6106      	str	r6, [r0, #16]
 80082aa:	b005      	add	sp, #20
 80082ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b0:	f843 2b04 	str.w	r2, [r3], #4
 80082b4:	e7d8      	b.n	8008268 <__multiply+0x50>
 80082b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80082ba:	f1ba 0f00 	cmp.w	sl, #0
 80082be:	d024      	beq.n	800830a <__multiply+0xf2>
 80082c0:	f104 0e14 	add.w	lr, r4, #20
 80082c4:	46a9      	mov	r9, r5
 80082c6:	f04f 0c00 	mov.w	ip, #0
 80082ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082ce:	f8d9 3000 	ldr.w	r3, [r9]
 80082d2:	fa1f fb87 	uxth.w	fp, r7
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80082dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80082e0:	f8d9 7000 	ldr.w	r7, [r9]
 80082e4:	4463      	add	r3, ip
 80082e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80082ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082f8:	4572      	cmp	r2, lr
 80082fa:	f849 3b04 	str.w	r3, [r9], #4
 80082fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008302:	d8e2      	bhi.n	80082ca <__multiply+0xb2>
 8008304:	9b01      	ldr	r3, [sp, #4]
 8008306:	f845 c003 	str.w	ip, [r5, r3]
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008310:	3104      	adds	r1, #4
 8008312:	f1b9 0f00 	cmp.w	r9, #0
 8008316:	d021      	beq.n	800835c <__multiply+0x144>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	f104 0c14 	add.w	ip, r4, #20
 800831e:	46ae      	mov	lr, r5
 8008320:	f04f 0a00 	mov.w	sl, #0
 8008324:	f8bc b000 	ldrh.w	fp, [ip]
 8008328:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800832c:	fb09 770b 	mla	r7, r9, fp, r7
 8008330:	4457      	add	r7, sl
 8008332:	b29b      	uxth	r3, r3
 8008334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008338:	f84e 3b04 	str.w	r3, [lr], #4
 800833c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008344:	f8be 3000 	ldrh.w	r3, [lr]
 8008348:	fb09 330a 	mla	r3, r9, sl, r3
 800834c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008350:	4562      	cmp	r2, ip
 8008352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008356:	d8e5      	bhi.n	8008324 <__multiply+0x10c>
 8008358:	9f01      	ldr	r7, [sp, #4]
 800835a:	51eb      	str	r3, [r5, r7]
 800835c:	3504      	adds	r5, #4
 800835e:	e799      	b.n	8008294 <__multiply+0x7c>
 8008360:	3e01      	subs	r6, #1
 8008362:	e79b      	b.n	800829c <__multiply+0x84>
 8008364:	0800a909 	.word	0x0800a909
 8008368:	0800a91a 	.word	0x0800a91a

0800836c <__pow5mult>:
 800836c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008370:	4615      	mov	r5, r2
 8008372:	f012 0203 	ands.w	r2, r2, #3
 8008376:	4607      	mov	r7, r0
 8008378:	460e      	mov	r6, r1
 800837a:	d007      	beq.n	800838c <__pow5mult+0x20>
 800837c:	4c25      	ldr	r4, [pc, #148]	@ (8008414 <__pow5mult+0xa8>)
 800837e:	3a01      	subs	r2, #1
 8008380:	2300      	movs	r3, #0
 8008382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008386:	f7ff fe55 	bl	8008034 <__multadd>
 800838a:	4606      	mov	r6, r0
 800838c:	10ad      	asrs	r5, r5, #2
 800838e:	d03d      	beq.n	800840c <__pow5mult+0xa0>
 8008390:	69fc      	ldr	r4, [r7, #28]
 8008392:	b97c      	cbnz	r4, 80083b4 <__pow5mult+0x48>
 8008394:	2010      	movs	r0, #16
 8008396:	f7ff fd35 	bl	8007e04 <malloc>
 800839a:	4602      	mov	r2, r0
 800839c:	61f8      	str	r0, [r7, #28]
 800839e:	b928      	cbnz	r0, 80083ac <__pow5mult+0x40>
 80083a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008418 <__pow5mult+0xac>)
 80083a2:	481e      	ldr	r0, [pc, #120]	@ (800841c <__pow5mult+0xb0>)
 80083a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083a8:	f001 fb62 	bl	8009a70 <__assert_func>
 80083ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083b0:	6004      	str	r4, [r0, #0]
 80083b2:	60c4      	str	r4, [r0, #12]
 80083b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083bc:	b94c      	cbnz	r4, 80083d2 <__pow5mult+0x66>
 80083be:	f240 2171 	movw	r1, #625	@ 0x271
 80083c2:	4638      	mov	r0, r7
 80083c4:	f7ff ff12 	bl	80081ec <__i2b>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80083ce:	4604      	mov	r4, r0
 80083d0:	6003      	str	r3, [r0, #0]
 80083d2:	f04f 0900 	mov.w	r9, #0
 80083d6:	07eb      	lsls	r3, r5, #31
 80083d8:	d50a      	bpl.n	80083f0 <__pow5mult+0x84>
 80083da:	4631      	mov	r1, r6
 80083dc:	4622      	mov	r2, r4
 80083de:	4638      	mov	r0, r7
 80083e0:	f7ff ff1a 	bl	8008218 <__multiply>
 80083e4:	4631      	mov	r1, r6
 80083e6:	4680      	mov	r8, r0
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7ff fe01 	bl	8007ff0 <_Bfree>
 80083ee:	4646      	mov	r6, r8
 80083f0:	106d      	asrs	r5, r5, #1
 80083f2:	d00b      	beq.n	800840c <__pow5mult+0xa0>
 80083f4:	6820      	ldr	r0, [r4, #0]
 80083f6:	b938      	cbnz	r0, 8008408 <__pow5mult+0x9c>
 80083f8:	4622      	mov	r2, r4
 80083fa:	4621      	mov	r1, r4
 80083fc:	4638      	mov	r0, r7
 80083fe:	f7ff ff0b 	bl	8008218 <__multiply>
 8008402:	6020      	str	r0, [r4, #0]
 8008404:	f8c0 9000 	str.w	r9, [r0]
 8008408:	4604      	mov	r4, r0
 800840a:	e7e4      	b.n	80083d6 <__pow5mult+0x6a>
 800840c:	4630      	mov	r0, r6
 800840e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008412:	bf00      	nop
 8008414:	0800a974 	.word	0x0800a974
 8008418:	0800a89a 	.word	0x0800a89a
 800841c:	0800a91a 	.word	0x0800a91a

08008420 <__lshift>:
 8008420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	460c      	mov	r4, r1
 8008426:	6849      	ldr	r1, [r1, #4]
 8008428:	6923      	ldr	r3, [r4, #16]
 800842a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	4607      	mov	r7, r0
 8008432:	4691      	mov	r9, r2
 8008434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008438:	f108 0601 	add.w	r6, r8, #1
 800843c:	42b3      	cmp	r3, r6
 800843e:	db0b      	blt.n	8008458 <__lshift+0x38>
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff fd95 	bl	8007f70 <_Balloc>
 8008446:	4605      	mov	r5, r0
 8008448:	b948      	cbnz	r0, 800845e <__lshift+0x3e>
 800844a:	4602      	mov	r2, r0
 800844c:	4b28      	ldr	r3, [pc, #160]	@ (80084f0 <__lshift+0xd0>)
 800844e:	4829      	ldr	r0, [pc, #164]	@ (80084f4 <__lshift+0xd4>)
 8008450:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008454:	f001 fb0c 	bl	8009a70 <__assert_func>
 8008458:	3101      	adds	r1, #1
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	e7ee      	b.n	800843c <__lshift+0x1c>
 800845e:	2300      	movs	r3, #0
 8008460:	f100 0114 	add.w	r1, r0, #20
 8008464:	f100 0210 	add.w	r2, r0, #16
 8008468:	4618      	mov	r0, r3
 800846a:	4553      	cmp	r3, sl
 800846c:	db33      	blt.n	80084d6 <__lshift+0xb6>
 800846e:	6920      	ldr	r0, [r4, #16]
 8008470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008474:	f104 0314 	add.w	r3, r4, #20
 8008478:	f019 091f 	ands.w	r9, r9, #31
 800847c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008484:	d02b      	beq.n	80084de <__lshift+0xbe>
 8008486:	f1c9 0e20 	rsb	lr, r9, #32
 800848a:	468a      	mov	sl, r1
 800848c:	2200      	movs	r2, #0
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	fa00 f009 	lsl.w	r0, r0, r9
 8008494:	4310      	orrs	r0, r2
 8008496:	f84a 0b04 	str.w	r0, [sl], #4
 800849a:	f853 2b04 	ldr.w	r2, [r3], #4
 800849e:	459c      	cmp	ip, r3
 80084a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80084a4:	d8f3      	bhi.n	800848e <__lshift+0x6e>
 80084a6:	ebac 0304 	sub.w	r3, ip, r4
 80084aa:	3b15      	subs	r3, #21
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	3304      	adds	r3, #4
 80084b2:	f104 0015 	add.w	r0, r4, #21
 80084b6:	4584      	cmp	ip, r0
 80084b8:	bf38      	it	cc
 80084ba:	2304      	movcc	r3, #4
 80084bc:	50ca      	str	r2, [r1, r3]
 80084be:	b10a      	cbz	r2, 80084c4 <__lshift+0xa4>
 80084c0:	f108 0602 	add.w	r6, r8, #2
 80084c4:	3e01      	subs	r6, #1
 80084c6:	4638      	mov	r0, r7
 80084c8:	612e      	str	r6, [r5, #16]
 80084ca:	4621      	mov	r1, r4
 80084cc:	f7ff fd90 	bl	8007ff0 <_Bfree>
 80084d0:	4628      	mov	r0, r5
 80084d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084da:	3301      	adds	r3, #1
 80084dc:	e7c5      	b.n	800846a <__lshift+0x4a>
 80084de:	3904      	subs	r1, #4
 80084e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80084e8:	459c      	cmp	ip, r3
 80084ea:	d8f9      	bhi.n	80084e0 <__lshift+0xc0>
 80084ec:	e7ea      	b.n	80084c4 <__lshift+0xa4>
 80084ee:	bf00      	nop
 80084f0:	0800a909 	.word	0x0800a909
 80084f4:	0800a91a 	.word	0x0800a91a

080084f8 <__mcmp>:
 80084f8:	690a      	ldr	r2, [r1, #16]
 80084fa:	4603      	mov	r3, r0
 80084fc:	6900      	ldr	r0, [r0, #16]
 80084fe:	1a80      	subs	r0, r0, r2
 8008500:	b530      	push	{r4, r5, lr}
 8008502:	d10e      	bne.n	8008522 <__mcmp+0x2a>
 8008504:	3314      	adds	r3, #20
 8008506:	3114      	adds	r1, #20
 8008508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800850c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008518:	4295      	cmp	r5, r2
 800851a:	d003      	beq.n	8008524 <__mcmp+0x2c>
 800851c:	d205      	bcs.n	800852a <__mcmp+0x32>
 800851e:	f04f 30ff 	mov.w	r0, #4294967295
 8008522:	bd30      	pop	{r4, r5, pc}
 8008524:	42a3      	cmp	r3, r4
 8008526:	d3f3      	bcc.n	8008510 <__mcmp+0x18>
 8008528:	e7fb      	b.n	8008522 <__mcmp+0x2a>
 800852a:	2001      	movs	r0, #1
 800852c:	e7f9      	b.n	8008522 <__mcmp+0x2a>
	...

08008530 <__mdiff>:
 8008530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	4689      	mov	r9, r1
 8008536:	4606      	mov	r6, r0
 8008538:	4611      	mov	r1, r2
 800853a:	4648      	mov	r0, r9
 800853c:	4614      	mov	r4, r2
 800853e:	f7ff ffdb 	bl	80084f8 <__mcmp>
 8008542:	1e05      	subs	r5, r0, #0
 8008544:	d112      	bne.n	800856c <__mdiff+0x3c>
 8008546:	4629      	mov	r1, r5
 8008548:	4630      	mov	r0, r6
 800854a:	f7ff fd11 	bl	8007f70 <_Balloc>
 800854e:	4602      	mov	r2, r0
 8008550:	b928      	cbnz	r0, 800855e <__mdiff+0x2e>
 8008552:	4b3f      	ldr	r3, [pc, #252]	@ (8008650 <__mdiff+0x120>)
 8008554:	f240 2137 	movw	r1, #567	@ 0x237
 8008558:	483e      	ldr	r0, [pc, #248]	@ (8008654 <__mdiff+0x124>)
 800855a:	f001 fa89 	bl	8009a70 <__assert_func>
 800855e:	2301      	movs	r3, #1
 8008560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008564:	4610      	mov	r0, r2
 8008566:	b003      	add	sp, #12
 8008568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856c:	bfbc      	itt	lt
 800856e:	464b      	movlt	r3, r9
 8008570:	46a1      	movlt	r9, r4
 8008572:	4630      	mov	r0, r6
 8008574:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008578:	bfba      	itte	lt
 800857a:	461c      	movlt	r4, r3
 800857c:	2501      	movlt	r5, #1
 800857e:	2500      	movge	r5, #0
 8008580:	f7ff fcf6 	bl	8007f70 <_Balloc>
 8008584:	4602      	mov	r2, r0
 8008586:	b918      	cbnz	r0, 8008590 <__mdiff+0x60>
 8008588:	4b31      	ldr	r3, [pc, #196]	@ (8008650 <__mdiff+0x120>)
 800858a:	f240 2145 	movw	r1, #581	@ 0x245
 800858e:	e7e3      	b.n	8008558 <__mdiff+0x28>
 8008590:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008594:	6926      	ldr	r6, [r4, #16]
 8008596:	60c5      	str	r5, [r0, #12]
 8008598:	f109 0310 	add.w	r3, r9, #16
 800859c:	f109 0514 	add.w	r5, r9, #20
 80085a0:	f104 0e14 	add.w	lr, r4, #20
 80085a4:	f100 0b14 	add.w	fp, r0, #20
 80085a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	46d9      	mov	r9, fp
 80085b4:	f04f 0c00 	mov.w	ip, #0
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	fa1f f38a 	uxth.w	r3, sl
 80085c8:	4619      	mov	r1, r3
 80085ca:	b283      	uxth	r3, r0
 80085cc:	1acb      	subs	r3, r1, r3
 80085ce:	0c00      	lsrs	r0, r0, #16
 80085d0:	4463      	add	r3, ip
 80085d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085da:	b29b      	uxth	r3, r3
 80085dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085e0:	4576      	cmp	r6, lr
 80085e2:	f849 3b04 	str.w	r3, [r9], #4
 80085e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085ea:	d8e5      	bhi.n	80085b8 <__mdiff+0x88>
 80085ec:	1b33      	subs	r3, r6, r4
 80085ee:	3b15      	subs	r3, #21
 80085f0:	f023 0303 	bic.w	r3, r3, #3
 80085f4:	3415      	adds	r4, #21
 80085f6:	3304      	adds	r3, #4
 80085f8:	42a6      	cmp	r6, r4
 80085fa:	bf38      	it	cc
 80085fc:	2304      	movcc	r3, #4
 80085fe:	441d      	add	r5, r3
 8008600:	445b      	add	r3, fp
 8008602:	461e      	mov	r6, r3
 8008604:	462c      	mov	r4, r5
 8008606:	4544      	cmp	r4, r8
 8008608:	d30e      	bcc.n	8008628 <__mdiff+0xf8>
 800860a:	f108 0103 	add.w	r1, r8, #3
 800860e:	1b49      	subs	r1, r1, r5
 8008610:	f021 0103 	bic.w	r1, r1, #3
 8008614:	3d03      	subs	r5, #3
 8008616:	45a8      	cmp	r8, r5
 8008618:	bf38      	it	cc
 800861a:	2100      	movcc	r1, #0
 800861c:	440b      	add	r3, r1
 800861e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008622:	b191      	cbz	r1, 800864a <__mdiff+0x11a>
 8008624:	6117      	str	r7, [r2, #16]
 8008626:	e79d      	b.n	8008564 <__mdiff+0x34>
 8008628:	f854 1b04 	ldr.w	r1, [r4], #4
 800862c:	46e6      	mov	lr, ip
 800862e:	0c08      	lsrs	r0, r1, #16
 8008630:	fa1c fc81 	uxtah	ip, ip, r1
 8008634:	4471      	add	r1, lr
 8008636:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800863a:	b289      	uxth	r1, r1
 800863c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008640:	f846 1b04 	str.w	r1, [r6], #4
 8008644:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008648:	e7dd      	b.n	8008606 <__mdiff+0xd6>
 800864a:	3f01      	subs	r7, #1
 800864c:	e7e7      	b.n	800861e <__mdiff+0xee>
 800864e:	bf00      	nop
 8008650:	0800a909 	.word	0x0800a909
 8008654:	0800a91a 	.word	0x0800a91a

08008658 <__ulp>:
 8008658:	b082      	sub	sp, #8
 800865a:	ed8d 0b00 	vstr	d0, [sp]
 800865e:	9a01      	ldr	r2, [sp, #4]
 8008660:	4b0f      	ldr	r3, [pc, #60]	@ (80086a0 <__ulp+0x48>)
 8008662:	4013      	ands	r3, r2
 8008664:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008668:	2b00      	cmp	r3, #0
 800866a:	dc08      	bgt.n	800867e <__ulp+0x26>
 800866c:	425b      	negs	r3, r3
 800866e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008672:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008676:	da04      	bge.n	8008682 <__ulp+0x2a>
 8008678:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800867c:	4113      	asrs	r3, r2
 800867e:	2200      	movs	r2, #0
 8008680:	e008      	b.n	8008694 <__ulp+0x3c>
 8008682:	f1a2 0314 	sub.w	r3, r2, #20
 8008686:	2b1e      	cmp	r3, #30
 8008688:	bfda      	itte	le
 800868a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800868e:	40da      	lsrle	r2, r3
 8008690:	2201      	movgt	r2, #1
 8008692:	2300      	movs	r3, #0
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	ec41 0b10 	vmov	d0, r0, r1
 800869c:	b002      	add	sp, #8
 800869e:	4770      	bx	lr
 80086a0:	7ff00000 	.word	0x7ff00000

080086a4 <__b2d>:
 80086a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a8:	6906      	ldr	r6, [r0, #16]
 80086aa:	f100 0814 	add.w	r8, r0, #20
 80086ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80086b2:	1f37      	subs	r7, r6, #4
 80086b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086b8:	4610      	mov	r0, r2
 80086ba:	f7ff fd4b 	bl	8008154 <__hi0bits>
 80086be:	f1c0 0320 	rsb	r3, r0, #32
 80086c2:	280a      	cmp	r0, #10
 80086c4:	600b      	str	r3, [r1, #0]
 80086c6:	491b      	ldr	r1, [pc, #108]	@ (8008734 <__b2d+0x90>)
 80086c8:	dc15      	bgt.n	80086f6 <__b2d+0x52>
 80086ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80086ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80086d2:	45b8      	cmp	r8, r7
 80086d4:	ea43 0501 	orr.w	r5, r3, r1
 80086d8:	bf34      	ite	cc
 80086da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086de:	2300      	movcs	r3, #0
 80086e0:	3015      	adds	r0, #21
 80086e2:	fa02 f000 	lsl.w	r0, r2, r0
 80086e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80086ea:	4303      	orrs	r3, r0
 80086ec:	461c      	mov	r4, r3
 80086ee:	ec45 4b10 	vmov	d0, r4, r5
 80086f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f6:	45b8      	cmp	r8, r7
 80086f8:	bf3a      	itte	cc
 80086fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8008702:	2300      	movcs	r3, #0
 8008704:	380b      	subs	r0, #11
 8008706:	d012      	beq.n	800872e <__b2d+0x8a>
 8008708:	f1c0 0120 	rsb	r1, r0, #32
 800870c:	fa23 f401 	lsr.w	r4, r3, r1
 8008710:	4082      	lsls	r2, r0
 8008712:	4322      	orrs	r2, r4
 8008714:	4547      	cmp	r7, r8
 8008716:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800871a:	bf8c      	ite	hi
 800871c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008720:	2200      	movls	r2, #0
 8008722:	4083      	lsls	r3, r0
 8008724:	40ca      	lsrs	r2, r1
 8008726:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800872a:	4313      	orrs	r3, r2
 800872c:	e7de      	b.n	80086ec <__b2d+0x48>
 800872e:	ea42 0501 	orr.w	r5, r2, r1
 8008732:	e7db      	b.n	80086ec <__b2d+0x48>
 8008734:	3ff00000 	.word	0x3ff00000

08008738 <__d2b>:
 8008738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800873c:	460f      	mov	r7, r1
 800873e:	2101      	movs	r1, #1
 8008740:	ec59 8b10 	vmov	r8, r9, d0
 8008744:	4616      	mov	r6, r2
 8008746:	f7ff fc13 	bl	8007f70 <_Balloc>
 800874a:	4604      	mov	r4, r0
 800874c:	b930      	cbnz	r0, 800875c <__d2b+0x24>
 800874e:	4602      	mov	r2, r0
 8008750:	4b23      	ldr	r3, [pc, #140]	@ (80087e0 <__d2b+0xa8>)
 8008752:	4824      	ldr	r0, [pc, #144]	@ (80087e4 <__d2b+0xac>)
 8008754:	f240 310f 	movw	r1, #783	@ 0x30f
 8008758:	f001 f98a 	bl	8009a70 <__assert_func>
 800875c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008764:	b10d      	cbz	r5, 800876a <__d2b+0x32>
 8008766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	f1b8 0300 	subs.w	r3, r8, #0
 8008770:	d023      	beq.n	80087ba <__d2b+0x82>
 8008772:	4668      	mov	r0, sp
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	f7ff fd0c 	bl	8008192 <__lo0bits>
 800877a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800877e:	b1d0      	cbz	r0, 80087b6 <__d2b+0x7e>
 8008780:	f1c0 0320 	rsb	r3, r0, #32
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	430b      	orrs	r3, r1
 800878a:	40c2      	lsrs	r2, r0
 800878c:	6163      	str	r3, [r4, #20]
 800878e:	9201      	str	r2, [sp, #4]
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	61a3      	str	r3, [r4, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	bf0c      	ite	eq
 8008798:	2201      	moveq	r2, #1
 800879a:	2202      	movne	r2, #2
 800879c:	6122      	str	r2, [r4, #16]
 800879e:	b1a5      	cbz	r5, 80087ca <__d2b+0x92>
 80087a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087a4:	4405      	add	r5, r0
 80087a6:	603d      	str	r5, [r7, #0]
 80087a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087ac:	6030      	str	r0, [r6, #0]
 80087ae:	4620      	mov	r0, r4
 80087b0:	b003      	add	sp, #12
 80087b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087b6:	6161      	str	r1, [r4, #20]
 80087b8:	e7ea      	b.n	8008790 <__d2b+0x58>
 80087ba:	a801      	add	r0, sp, #4
 80087bc:	f7ff fce9 	bl	8008192 <__lo0bits>
 80087c0:	9b01      	ldr	r3, [sp, #4]
 80087c2:	6163      	str	r3, [r4, #20]
 80087c4:	3020      	adds	r0, #32
 80087c6:	2201      	movs	r2, #1
 80087c8:	e7e8      	b.n	800879c <__d2b+0x64>
 80087ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80087d2:	6038      	str	r0, [r7, #0]
 80087d4:	6918      	ldr	r0, [r3, #16]
 80087d6:	f7ff fcbd 	bl	8008154 <__hi0bits>
 80087da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087de:	e7e5      	b.n	80087ac <__d2b+0x74>
 80087e0:	0800a909 	.word	0x0800a909
 80087e4:	0800a91a 	.word	0x0800a91a

080087e8 <__ratio>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	b085      	sub	sp, #20
 80087ee:	e9cd 1000 	strd	r1, r0, [sp]
 80087f2:	a902      	add	r1, sp, #8
 80087f4:	f7ff ff56 	bl	80086a4 <__b2d>
 80087f8:	9800      	ldr	r0, [sp, #0]
 80087fa:	a903      	add	r1, sp, #12
 80087fc:	ec55 4b10 	vmov	r4, r5, d0
 8008800:	f7ff ff50 	bl	80086a4 <__b2d>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	6919      	ldr	r1, [r3, #16]
 8008808:	9b00      	ldr	r3, [sp, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	1ac9      	subs	r1, r1, r3
 800880e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008812:	1a9b      	subs	r3, r3, r2
 8008814:	ec5b ab10 	vmov	sl, fp, d0
 8008818:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfce      	itee	gt
 8008820:	462a      	movgt	r2, r5
 8008822:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008826:	465a      	movle	r2, fp
 8008828:	462f      	mov	r7, r5
 800882a:	46d9      	mov	r9, fp
 800882c:	bfcc      	ite	gt
 800882e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008832:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008836:	464b      	mov	r3, r9
 8008838:	4652      	mov	r2, sl
 800883a:	4620      	mov	r0, r4
 800883c:	4639      	mov	r1, r7
 800883e:	f7f8 f81d 	bl	800087c <__aeabi_ddiv>
 8008842:	ec41 0b10 	vmov	d0, r0, r1
 8008846:	b005      	add	sp, #20
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800884c <__copybits>:
 800884c:	3901      	subs	r1, #1
 800884e:	b570      	push	{r4, r5, r6, lr}
 8008850:	1149      	asrs	r1, r1, #5
 8008852:	6914      	ldr	r4, [r2, #16]
 8008854:	3101      	adds	r1, #1
 8008856:	f102 0314 	add.w	r3, r2, #20
 800885a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800885e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008862:	1f05      	subs	r5, r0, #4
 8008864:	42a3      	cmp	r3, r4
 8008866:	d30c      	bcc.n	8008882 <__copybits+0x36>
 8008868:	1aa3      	subs	r3, r4, r2
 800886a:	3b11      	subs	r3, #17
 800886c:	f023 0303 	bic.w	r3, r3, #3
 8008870:	3211      	adds	r2, #17
 8008872:	42a2      	cmp	r2, r4
 8008874:	bf88      	it	hi
 8008876:	2300      	movhi	r3, #0
 8008878:	4418      	add	r0, r3
 800887a:	2300      	movs	r3, #0
 800887c:	4288      	cmp	r0, r1
 800887e:	d305      	bcc.n	800888c <__copybits+0x40>
 8008880:	bd70      	pop	{r4, r5, r6, pc}
 8008882:	f853 6b04 	ldr.w	r6, [r3], #4
 8008886:	f845 6f04 	str.w	r6, [r5, #4]!
 800888a:	e7eb      	b.n	8008864 <__copybits+0x18>
 800888c:	f840 3b04 	str.w	r3, [r0], #4
 8008890:	e7f4      	b.n	800887c <__copybits+0x30>

08008892 <__any_on>:
 8008892:	f100 0214 	add.w	r2, r0, #20
 8008896:	6900      	ldr	r0, [r0, #16]
 8008898:	114b      	asrs	r3, r1, #5
 800889a:	4298      	cmp	r0, r3
 800889c:	b510      	push	{r4, lr}
 800889e:	db11      	blt.n	80088c4 <__any_on+0x32>
 80088a0:	dd0a      	ble.n	80088b8 <__any_on+0x26>
 80088a2:	f011 011f 	ands.w	r1, r1, #31
 80088a6:	d007      	beq.n	80088b8 <__any_on+0x26>
 80088a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80088ac:	fa24 f001 	lsr.w	r0, r4, r1
 80088b0:	fa00 f101 	lsl.w	r1, r0, r1
 80088b4:	428c      	cmp	r4, r1
 80088b6:	d10b      	bne.n	80088d0 <__any_on+0x3e>
 80088b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088bc:	4293      	cmp	r3, r2
 80088be:	d803      	bhi.n	80088c8 <__any_on+0x36>
 80088c0:	2000      	movs	r0, #0
 80088c2:	bd10      	pop	{r4, pc}
 80088c4:	4603      	mov	r3, r0
 80088c6:	e7f7      	b.n	80088b8 <__any_on+0x26>
 80088c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088cc:	2900      	cmp	r1, #0
 80088ce:	d0f5      	beq.n	80088bc <__any_on+0x2a>
 80088d0:	2001      	movs	r0, #1
 80088d2:	e7f6      	b.n	80088c2 <__any_on+0x30>

080088d4 <sulp>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	ec45 4b10 	vmov	d0, r4, r5
 80088de:	4616      	mov	r6, r2
 80088e0:	f7ff feba 	bl	8008658 <__ulp>
 80088e4:	ec51 0b10 	vmov	r0, r1, d0
 80088e8:	b17e      	cbz	r6, 800890a <sulp+0x36>
 80088ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80088ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dd09      	ble.n	800890a <sulp+0x36>
 80088f6:	051b      	lsls	r3, r3, #20
 80088f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80088fc:	2400      	movs	r4, #0
 80088fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008902:	4622      	mov	r2, r4
 8008904:	462b      	mov	r3, r5
 8008906:	f7f7 fe8f 	bl	8000628 <__aeabi_dmul>
 800890a:	ec41 0b10 	vmov	d0, r0, r1
 800890e:	bd70      	pop	{r4, r5, r6, pc}

08008910 <_strtod_l>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	b09f      	sub	sp, #124	@ 0x7c
 8008916:	460c      	mov	r4, r1
 8008918:	9217      	str	r2, [sp, #92]	@ 0x5c
 800891a:	2200      	movs	r2, #0
 800891c:	921a      	str	r2, [sp, #104]	@ 0x68
 800891e:	9005      	str	r0, [sp, #20]
 8008920:	f04f 0a00 	mov.w	sl, #0
 8008924:	f04f 0b00 	mov.w	fp, #0
 8008928:	460a      	mov	r2, r1
 800892a:	9219      	str	r2, [sp, #100]	@ 0x64
 800892c:	7811      	ldrb	r1, [r2, #0]
 800892e:	292b      	cmp	r1, #43	@ 0x2b
 8008930:	d04a      	beq.n	80089c8 <_strtod_l+0xb8>
 8008932:	d838      	bhi.n	80089a6 <_strtod_l+0x96>
 8008934:	290d      	cmp	r1, #13
 8008936:	d832      	bhi.n	800899e <_strtod_l+0x8e>
 8008938:	2908      	cmp	r1, #8
 800893a:	d832      	bhi.n	80089a2 <_strtod_l+0x92>
 800893c:	2900      	cmp	r1, #0
 800893e:	d03b      	beq.n	80089b8 <_strtod_l+0xa8>
 8008940:	2200      	movs	r2, #0
 8008942:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008944:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008946:	782a      	ldrb	r2, [r5, #0]
 8008948:	2a30      	cmp	r2, #48	@ 0x30
 800894a:	f040 80b3 	bne.w	8008ab4 <_strtod_l+0x1a4>
 800894e:	786a      	ldrb	r2, [r5, #1]
 8008950:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008954:	2a58      	cmp	r2, #88	@ 0x58
 8008956:	d16e      	bne.n	8008a36 <_strtod_l+0x126>
 8008958:	9302      	str	r3, [sp, #8]
 800895a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4a8e      	ldr	r2, [pc, #568]	@ (8008b9c <_strtod_l+0x28c>)
 8008964:	9805      	ldr	r0, [sp, #20]
 8008966:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008968:	a919      	add	r1, sp, #100	@ 0x64
 800896a:	f001 f91b 	bl	8009ba4 <__gethex>
 800896e:	f010 060f 	ands.w	r6, r0, #15
 8008972:	4604      	mov	r4, r0
 8008974:	d005      	beq.n	8008982 <_strtod_l+0x72>
 8008976:	2e06      	cmp	r6, #6
 8008978:	d128      	bne.n	80089cc <_strtod_l+0xbc>
 800897a:	3501      	adds	r5, #1
 800897c:	2300      	movs	r3, #0
 800897e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 858e 	bne.w	80094a6 <_strtod_l+0xb96>
 800898a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800898c:	b1cb      	cbz	r3, 80089c2 <_strtod_l+0xb2>
 800898e:	4652      	mov	r2, sl
 8008990:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008994:	ec43 2b10 	vmov	d0, r2, r3
 8008998:	b01f      	add	sp, #124	@ 0x7c
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899e:	2920      	cmp	r1, #32
 80089a0:	d1ce      	bne.n	8008940 <_strtod_l+0x30>
 80089a2:	3201      	adds	r2, #1
 80089a4:	e7c1      	b.n	800892a <_strtod_l+0x1a>
 80089a6:	292d      	cmp	r1, #45	@ 0x2d
 80089a8:	d1ca      	bne.n	8008940 <_strtod_l+0x30>
 80089aa:	2101      	movs	r1, #1
 80089ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80089ae:	1c51      	adds	r1, r2, #1
 80089b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80089b2:	7852      	ldrb	r2, [r2, #1]
 80089b4:	2a00      	cmp	r2, #0
 80089b6:	d1c5      	bne.n	8008944 <_strtod_l+0x34>
 80089b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f040 8570 	bne.w	80094a2 <_strtod_l+0xb92>
 80089c2:	4652      	mov	r2, sl
 80089c4:	465b      	mov	r3, fp
 80089c6:	e7e5      	b.n	8008994 <_strtod_l+0x84>
 80089c8:	2100      	movs	r1, #0
 80089ca:	e7ef      	b.n	80089ac <_strtod_l+0x9c>
 80089cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089ce:	b13a      	cbz	r2, 80089e0 <_strtod_l+0xd0>
 80089d0:	2135      	movs	r1, #53	@ 0x35
 80089d2:	a81c      	add	r0, sp, #112	@ 0x70
 80089d4:	f7ff ff3a 	bl	800884c <__copybits>
 80089d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089da:	9805      	ldr	r0, [sp, #20]
 80089dc:	f7ff fb08 	bl	8007ff0 <_Bfree>
 80089e0:	3e01      	subs	r6, #1
 80089e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80089e4:	2e04      	cmp	r6, #4
 80089e6:	d806      	bhi.n	80089f6 <_strtod_l+0xe6>
 80089e8:	e8df f006 	tbb	[pc, r6]
 80089ec:	201d0314 	.word	0x201d0314
 80089f0:	14          	.byte	0x14
 80089f1:	00          	.byte	0x00
 80089f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80089f6:	05e1      	lsls	r1, r4, #23
 80089f8:	bf48      	it	mi
 80089fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80089fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a02:	0d1b      	lsrs	r3, r3, #20
 8008a04:	051b      	lsls	r3, r3, #20
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1bb      	bne.n	8008982 <_strtod_l+0x72>
 8008a0a:	f7fe fb21 	bl	8007050 <__errno>
 8008a0e:	2322      	movs	r3, #34	@ 0x22
 8008a10:	6003      	str	r3, [r0, #0]
 8008a12:	e7b6      	b.n	8008982 <_strtod_l+0x72>
 8008a14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a24:	e7e7      	b.n	80089f6 <_strtod_l+0xe6>
 8008a26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008ba4 <_strtod_l+0x294>
 8008a2a:	e7e4      	b.n	80089f6 <_strtod_l+0xe6>
 8008a2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a30:	f04f 3aff 	mov.w	sl, #4294967295
 8008a34:	e7df      	b.n	80089f6 <_strtod_l+0xe6>
 8008a36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a3c:	785b      	ldrb	r3, [r3, #1]
 8008a3e:	2b30      	cmp	r3, #48	@ 0x30
 8008a40:	d0f9      	beq.n	8008a36 <_strtod_l+0x126>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d09d      	beq.n	8008982 <_strtod_l+0x72>
 8008a46:	2301      	movs	r3, #1
 8008a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9308      	str	r3, [sp, #32]
 8008a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a54:	461f      	mov	r7, r3
 8008a56:	220a      	movs	r2, #10
 8008a58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a5a:	7805      	ldrb	r5, [r0, #0]
 8008a5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a60:	b2d9      	uxtb	r1, r3
 8008a62:	2909      	cmp	r1, #9
 8008a64:	d928      	bls.n	8008ab8 <_strtod_l+0x1a8>
 8008a66:	494e      	ldr	r1, [pc, #312]	@ (8008ba0 <_strtod_l+0x290>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f000 ffd5 	bl	8009a18 <strncmp>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d032      	beq.n	8008ad8 <_strtod_l+0x1c8>
 8008a72:	2000      	movs	r0, #0
 8008a74:	462a      	mov	r2, r5
 8008a76:	4681      	mov	r9, r0
 8008a78:	463d      	mov	r5, r7
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2a65      	cmp	r2, #101	@ 0x65
 8008a7e:	d001      	beq.n	8008a84 <_strtod_l+0x174>
 8008a80:	2a45      	cmp	r2, #69	@ 0x45
 8008a82:	d114      	bne.n	8008aae <_strtod_l+0x19e>
 8008a84:	b91d      	cbnz	r5, 8008a8e <_strtod_l+0x17e>
 8008a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a88:	4302      	orrs	r2, r0
 8008a8a:	d095      	beq.n	80089b8 <_strtod_l+0xa8>
 8008a8c:	2500      	movs	r5, #0
 8008a8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008a90:	1c62      	adds	r2, r4, #1
 8008a92:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a94:	7862      	ldrb	r2, [r4, #1]
 8008a96:	2a2b      	cmp	r2, #43	@ 0x2b
 8008a98:	d077      	beq.n	8008b8a <_strtod_l+0x27a>
 8008a9a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008a9c:	d07b      	beq.n	8008b96 <_strtod_l+0x286>
 8008a9e:	f04f 0c00 	mov.w	ip, #0
 8008aa2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008aa6:	2909      	cmp	r1, #9
 8008aa8:	f240 8082 	bls.w	8008bb0 <_strtod_l+0x2a0>
 8008aac:	9419      	str	r4, [sp, #100]	@ 0x64
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	e0a2      	b.n	8008bfa <_strtod_l+0x2ea>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e7c7      	b.n	8008a48 <_strtod_l+0x138>
 8008ab8:	2f08      	cmp	r7, #8
 8008aba:	bfd5      	itete	le
 8008abc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008abe:	9908      	ldrgt	r1, [sp, #32]
 8008ac0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ac4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ac8:	f100 0001 	add.w	r0, r0, #1
 8008acc:	bfd4      	ite	le
 8008ace:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008ad0:	9308      	strgt	r3, [sp, #32]
 8008ad2:	3701      	adds	r7, #1
 8008ad4:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ad6:	e7bf      	b.n	8008a58 <_strtod_l+0x148>
 8008ad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ade:	785a      	ldrb	r2, [r3, #1]
 8008ae0:	b37f      	cbz	r7, 8008b42 <_strtod_l+0x232>
 8008ae2:	4681      	mov	r9, r0
 8008ae4:	463d      	mov	r5, r7
 8008ae6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008aea:	2b09      	cmp	r3, #9
 8008aec:	d912      	bls.n	8008b14 <_strtod_l+0x204>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e7c4      	b.n	8008a7c <_strtod_l+0x16c>
 8008af2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008af4:	1c5a      	adds	r2, r3, #1
 8008af6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008af8:	785a      	ldrb	r2, [r3, #1]
 8008afa:	3001      	adds	r0, #1
 8008afc:	2a30      	cmp	r2, #48	@ 0x30
 8008afe:	d0f8      	beq.n	8008af2 <_strtod_l+0x1e2>
 8008b00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	f200 84d3 	bhi.w	80094b0 <_strtod_l+0xba0>
 8008b0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b0e:	4681      	mov	r9, r0
 8008b10:	2000      	movs	r0, #0
 8008b12:	4605      	mov	r5, r0
 8008b14:	3a30      	subs	r2, #48	@ 0x30
 8008b16:	f100 0301 	add.w	r3, r0, #1
 8008b1a:	d02a      	beq.n	8008b72 <_strtod_l+0x262>
 8008b1c:	4499      	add	r9, r3
 8008b1e:	eb00 0c05 	add.w	ip, r0, r5
 8008b22:	462b      	mov	r3, r5
 8008b24:	210a      	movs	r1, #10
 8008b26:	4563      	cmp	r3, ip
 8008b28:	d10d      	bne.n	8008b46 <_strtod_l+0x236>
 8008b2a:	1c69      	adds	r1, r5, #1
 8008b2c:	4401      	add	r1, r0
 8008b2e:	4428      	add	r0, r5
 8008b30:	2808      	cmp	r0, #8
 8008b32:	dc16      	bgt.n	8008b62 <_strtod_l+0x252>
 8008b34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b36:	230a      	movs	r3, #10
 8008b38:	fb03 2300 	mla	r3, r3, r0, r2
 8008b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e018      	b.n	8008b74 <_strtod_l+0x264>
 8008b42:	4638      	mov	r0, r7
 8008b44:	e7da      	b.n	8008afc <_strtod_l+0x1ec>
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	f103 0301 	add.w	r3, r3, #1
 8008b4c:	dc03      	bgt.n	8008b56 <_strtod_l+0x246>
 8008b4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008b50:	434e      	muls	r6, r1
 8008b52:	960a      	str	r6, [sp, #40]	@ 0x28
 8008b54:	e7e7      	b.n	8008b26 <_strtod_l+0x216>
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	bfde      	ittt	le
 8008b5a:	9e08      	ldrle	r6, [sp, #32]
 8008b5c:	434e      	mulle	r6, r1
 8008b5e:	9608      	strle	r6, [sp, #32]
 8008b60:	e7e1      	b.n	8008b26 <_strtod_l+0x216>
 8008b62:	280f      	cmp	r0, #15
 8008b64:	dceb      	bgt.n	8008b3e <_strtod_l+0x22e>
 8008b66:	9808      	ldr	r0, [sp, #32]
 8008b68:	230a      	movs	r3, #10
 8008b6a:	fb03 2300 	mla	r3, r3, r0, r2
 8008b6e:	9308      	str	r3, [sp, #32]
 8008b70:	e7e5      	b.n	8008b3e <_strtod_l+0x22e>
 8008b72:	4629      	mov	r1, r5
 8008b74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b76:	1c50      	adds	r0, r2, #1
 8008b78:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b7a:	7852      	ldrb	r2, [r2, #1]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	460d      	mov	r5, r1
 8008b80:	e7b1      	b.n	8008ae6 <_strtod_l+0x1d6>
 8008b82:	f04f 0900 	mov.w	r9, #0
 8008b86:	2301      	movs	r3, #1
 8008b88:	e77d      	b.n	8008a86 <_strtod_l+0x176>
 8008b8a:	f04f 0c00 	mov.w	ip, #0
 8008b8e:	1ca2      	adds	r2, r4, #2
 8008b90:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b92:	78a2      	ldrb	r2, [r4, #2]
 8008b94:	e785      	b.n	8008aa2 <_strtod_l+0x192>
 8008b96:	f04f 0c01 	mov.w	ip, #1
 8008b9a:	e7f8      	b.n	8008b8e <_strtod_l+0x27e>
 8008b9c:	0800aa88 	.word	0x0800aa88
 8008ba0:	0800aa70 	.word	0x0800aa70
 8008ba4:	7ff00000 	.word	0x7ff00000
 8008ba8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008baa:	1c51      	adds	r1, r2, #1
 8008bac:	9119      	str	r1, [sp, #100]	@ 0x64
 8008bae:	7852      	ldrb	r2, [r2, #1]
 8008bb0:	2a30      	cmp	r2, #48	@ 0x30
 8008bb2:	d0f9      	beq.n	8008ba8 <_strtod_l+0x298>
 8008bb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008bb8:	2908      	cmp	r1, #8
 8008bba:	f63f af78 	bhi.w	8008aae <_strtod_l+0x19e>
 8008bbe:	3a30      	subs	r2, #48	@ 0x30
 8008bc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008bc6:	f04f 080a 	mov.w	r8, #10
 8008bca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bcc:	1c56      	adds	r6, r2, #1
 8008bce:	9619      	str	r6, [sp, #100]	@ 0x64
 8008bd0:	7852      	ldrb	r2, [r2, #1]
 8008bd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008bd6:	f1be 0f09 	cmp.w	lr, #9
 8008bda:	d939      	bls.n	8008c50 <_strtod_l+0x340>
 8008bdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008bde:	1a76      	subs	r6, r6, r1
 8008be0:	2e08      	cmp	r6, #8
 8008be2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008be6:	dc03      	bgt.n	8008bf0 <_strtod_l+0x2e0>
 8008be8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008bea:	4588      	cmp	r8, r1
 8008bec:	bfa8      	it	ge
 8008bee:	4688      	movge	r8, r1
 8008bf0:	f1bc 0f00 	cmp.w	ip, #0
 8008bf4:	d001      	beq.n	8008bfa <_strtod_l+0x2ea>
 8008bf6:	f1c8 0800 	rsb	r8, r8, #0
 8008bfa:	2d00      	cmp	r5, #0
 8008bfc:	d14e      	bne.n	8008c9c <_strtod_l+0x38c>
 8008bfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c00:	4308      	orrs	r0, r1
 8008c02:	f47f aebe 	bne.w	8008982 <_strtod_l+0x72>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f47f aed6 	bne.w	80089b8 <_strtod_l+0xa8>
 8008c0c:	2a69      	cmp	r2, #105	@ 0x69
 8008c0e:	d028      	beq.n	8008c62 <_strtod_l+0x352>
 8008c10:	dc25      	bgt.n	8008c5e <_strtod_l+0x34e>
 8008c12:	2a49      	cmp	r2, #73	@ 0x49
 8008c14:	d025      	beq.n	8008c62 <_strtod_l+0x352>
 8008c16:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c18:	f47f aece 	bne.w	80089b8 <_strtod_l+0xa8>
 8008c1c:	499b      	ldr	r1, [pc, #620]	@ (8008e8c <_strtod_l+0x57c>)
 8008c1e:	a819      	add	r0, sp, #100	@ 0x64
 8008c20:	f001 f9e2 	bl	8009fe8 <__match>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f43f aec7 	beq.w	80089b8 <_strtod_l+0xa8>
 8008c2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b28      	cmp	r3, #40	@ 0x28
 8008c30:	d12e      	bne.n	8008c90 <_strtod_l+0x380>
 8008c32:	4997      	ldr	r1, [pc, #604]	@ (8008e90 <_strtod_l+0x580>)
 8008c34:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c36:	a819      	add	r0, sp, #100	@ 0x64
 8008c38:	f001 f9ea 	bl	800a010 <__hexnan>
 8008c3c:	2805      	cmp	r0, #5
 8008c3e:	d127      	bne.n	8008c90 <_strtod_l+0x380>
 8008c40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008c4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c4e:	e698      	b.n	8008982 <_strtod_l+0x72>
 8008c50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c52:	fb08 2101 	mla	r1, r8, r1, r2
 8008c56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c5c:	e7b5      	b.n	8008bca <_strtod_l+0x2ba>
 8008c5e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c60:	e7da      	b.n	8008c18 <_strtod_l+0x308>
 8008c62:	498c      	ldr	r1, [pc, #560]	@ (8008e94 <_strtod_l+0x584>)
 8008c64:	a819      	add	r0, sp, #100	@ 0x64
 8008c66:	f001 f9bf 	bl	8009fe8 <__match>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f43f aea4 	beq.w	80089b8 <_strtod_l+0xa8>
 8008c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c72:	4989      	ldr	r1, [pc, #548]	@ (8008e98 <_strtod_l+0x588>)
 8008c74:	3b01      	subs	r3, #1
 8008c76:	a819      	add	r0, sp, #100	@ 0x64
 8008c78:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c7a:	f001 f9b5 	bl	8009fe8 <__match>
 8008c7e:	b910      	cbnz	r0, 8008c86 <_strtod_l+0x376>
 8008c80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c82:	3301      	adds	r3, #1
 8008c84:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008ea8 <_strtod_l+0x598>
 8008c8a:	f04f 0a00 	mov.w	sl, #0
 8008c8e:	e678      	b.n	8008982 <_strtod_l+0x72>
 8008c90:	4882      	ldr	r0, [pc, #520]	@ (8008e9c <_strtod_l+0x58c>)
 8008c92:	f000 fee5 	bl	8009a60 <nan>
 8008c96:	ec5b ab10 	vmov	sl, fp, d0
 8008c9a:	e672      	b.n	8008982 <_strtod_l+0x72>
 8008c9c:	eba8 0309 	sub.w	r3, r8, r9
 8008ca0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ca4:	2f00      	cmp	r7, #0
 8008ca6:	bf08      	it	eq
 8008ca8:	462f      	moveq	r7, r5
 8008caa:	2d10      	cmp	r5, #16
 8008cac:	462c      	mov	r4, r5
 8008cae:	bfa8      	it	ge
 8008cb0:	2410      	movge	r4, #16
 8008cb2:	f7f7 fc3f 	bl	8000534 <__aeabi_ui2d>
 8008cb6:	2d09      	cmp	r5, #9
 8008cb8:	4682      	mov	sl, r0
 8008cba:	468b      	mov	fp, r1
 8008cbc:	dc13      	bgt.n	8008ce6 <_strtod_l+0x3d6>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f43f ae5e 	beq.w	8008982 <_strtod_l+0x72>
 8008cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc8:	dd78      	ble.n	8008dbc <_strtod_l+0x4ac>
 8008cca:	2b16      	cmp	r3, #22
 8008ccc:	dc5f      	bgt.n	8008d8e <_strtod_l+0x47e>
 8008cce:	4974      	ldr	r1, [pc, #464]	@ (8008ea0 <_strtod_l+0x590>)
 8008cd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd8:	4652      	mov	r2, sl
 8008cda:	465b      	mov	r3, fp
 8008cdc:	f7f7 fca4 	bl	8000628 <__aeabi_dmul>
 8008ce0:	4682      	mov	sl, r0
 8008ce2:	468b      	mov	fp, r1
 8008ce4:	e64d      	b.n	8008982 <_strtod_l+0x72>
 8008ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8008ea0 <_strtod_l+0x590>)
 8008ce8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008cf0:	f7f7 fc9a 	bl	8000628 <__aeabi_dmul>
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	9808      	ldr	r0, [sp, #32]
 8008cf8:	468b      	mov	fp, r1
 8008cfa:	f7f7 fc1b 	bl	8000534 <__aeabi_ui2d>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4650      	mov	r0, sl
 8008d04:	4659      	mov	r1, fp
 8008d06:	f7f7 fad9 	bl	80002bc <__adddf3>
 8008d0a:	2d0f      	cmp	r5, #15
 8008d0c:	4682      	mov	sl, r0
 8008d0e:	468b      	mov	fp, r1
 8008d10:	ddd5      	ble.n	8008cbe <_strtod_l+0x3ae>
 8008d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d14:	1b2c      	subs	r4, r5, r4
 8008d16:	441c      	add	r4, r3
 8008d18:	2c00      	cmp	r4, #0
 8008d1a:	f340 8096 	ble.w	8008e4a <_strtod_l+0x53a>
 8008d1e:	f014 030f 	ands.w	r3, r4, #15
 8008d22:	d00a      	beq.n	8008d3a <_strtod_l+0x42a>
 8008d24:	495e      	ldr	r1, [pc, #376]	@ (8008ea0 <_strtod_l+0x590>)
 8008d26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d2a:	4652      	mov	r2, sl
 8008d2c:	465b      	mov	r3, fp
 8008d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d32:	f7f7 fc79 	bl	8000628 <__aeabi_dmul>
 8008d36:	4682      	mov	sl, r0
 8008d38:	468b      	mov	fp, r1
 8008d3a:	f034 040f 	bics.w	r4, r4, #15
 8008d3e:	d073      	beq.n	8008e28 <_strtod_l+0x518>
 8008d40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d44:	dd48      	ble.n	8008dd8 <_strtod_l+0x4c8>
 8008d46:	2400      	movs	r4, #0
 8008d48:	46a0      	mov	r8, r4
 8008d4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d4c:	46a1      	mov	r9, r4
 8008d4e:	9a05      	ldr	r2, [sp, #20]
 8008d50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008ea8 <_strtod_l+0x598>
 8008d54:	2322      	movs	r3, #34	@ 0x22
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	f04f 0a00 	mov.w	sl, #0
 8008d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f43f ae0f 	beq.w	8008982 <_strtod_l+0x72>
 8008d64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d66:	9805      	ldr	r0, [sp, #20]
 8008d68:	f7ff f942 	bl	8007ff0 <_Bfree>
 8008d6c:	9805      	ldr	r0, [sp, #20]
 8008d6e:	4649      	mov	r1, r9
 8008d70:	f7ff f93e 	bl	8007ff0 <_Bfree>
 8008d74:	9805      	ldr	r0, [sp, #20]
 8008d76:	4641      	mov	r1, r8
 8008d78:	f7ff f93a 	bl	8007ff0 <_Bfree>
 8008d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d7e:	9805      	ldr	r0, [sp, #20]
 8008d80:	f7ff f936 	bl	8007ff0 <_Bfree>
 8008d84:	9805      	ldr	r0, [sp, #20]
 8008d86:	4621      	mov	r1, r4
 8008d88:	f7ff f932 	bl	8007ff0 <_Bfree>
 8008d8c:	e5f9      	b.n	8008982 <_strtod_l+0x72>
 8008d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008d94:	4293      	cmp	r3, r2
 8008d96:	dbbc      	blt.n	8008d12 <_strtod_l+0x402>
 8008d98:	4c41      	ldr	r4, [pc, #260]	@ (8008ea0 <_strtod_l+0x590>)
 8008d9a:	f1c5 050f 	rsb	r5, r5, #15
 8008d9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008da2:	4652      	mov	r2, sl
 8008da4:	465b      	mov	r3, fp
 8008da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008daa:	f7f7 fc3d 	bl	8000628 <__aeabi_dmul>
 8008dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db0:	1b5d      	subs	r5, r3, r5
 8008db2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008db6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008dba:	e78f      	b.n	8008cdc <_strtod_l+0x3cc>
 8008dbc:	3316      	adds	r3, #22
 8008dbe:	dba8      	blt.n	8008d12 <_strtod_l+0x402>
 8008dc0:	4b37      	ldr	r3, [pc, #220]	@ (8008ea0 <_strtod_l+0x590>)
 8008dc2:	eba9 0808 	sub.w	r8, r9, r8
 8008dc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008dca:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008dce:	4650      	mov	r0, sl
 8008dd0:	4659      	mov	r1, fp
 8008dd2:	f7f7 fd53 	bl	800087c <__aeabi_ddiv>
 8008dd6:	e783      	b.n	8008ce0 <_strtod_l+0x3d0>
 8008dd8:	4b32      	ldr	r3, [pc, #200]	@ (8008ea4 <_strtod_l+0x594>)
 8008dda:	9308      	str	r3, [sp, #32]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	1124      	asrs	r4, r4, #4
 8008de0:	4650      	mov	r0, sl
 8008de2:	4659      	mov	r1, fp
 8008de4:	461e      	mov	r6, r3
 8008de6:	2c01      	cmp	r4, #1
 8008de8:	dc21      	bgt.n	8008e2e <_strtod_l+0x51e>
 8008dea:	b10b      	cbz	r3, 8008df0 <_strtod_l+0x4e0>
 8008dec:	4682      	mov	sl, r0
 8008dee:	468b      	mov	fp, r1
 8008df0:	492c      	ldr	r1, [pc, #176]	@ (8008ea4 <_strtod_l+0x594>)
 8008df2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008df6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e02:	f7f7 fc11 	bl	8000628 <__aeabi_dmul>
 8008e06:	4b28      	ldr	r3, [pc, #160]	@ (8008ea8 <_strtod_l+0x598>)
 8008e08:	460a      	mov	r2, r1
 8008e0a:	400b      	ands	r3, r1
 8008e0c:	4927      	ldr	r1, [pc, #156]	@ (8008eac <_strtod_l+0x59c>)
 8008e0e:	428b      	cmp	r3, r1
 8008e10:	4682      	mov	sl, r0
 8008e12:	d898      	bhi.n	8008d46 <_strtod_l+0x436>
 8008e14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf86      	itte	hi
 8008e1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008eb0 <_strtod_l+0x5a0>
 8008e20:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9308      	str	r3, [sp, #32]
 8008e2c:	e07a      	b.n	8008f24 <_strtod_l+0x614>
 8008e2e:	07e2      	lsls	r2, r4, #31
 8008e30:	d505      	bpl.n	8008e3e <_strtod_l+0x52e>
 8008e32:	9b08      	ldr	r3, [sp, #32]
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	f7f7 fbf6 	bl	8000628 <__aeabi_dmul>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	9a08      	ldr	r2, [sp, #32]
 8008e40:	3208      	adds	r2, #8
 8008e42:	3601      	adds	r6, #1
 8008e44:	1064      	asrs	r4, r4, #1
 8008e46:	9208      	str	r2, [sp, #32]
 8008e48:	e7cd      	b.n	8008de6 <_strtod_l+0x4d6>
 8008e4a:	d0ed      	beq.n	8008e28 <_strtod_l+0x518>
 8008e4c:	4264      	negs	r4, r4
 8008e4e:	f014 020f 	ands.w	r2, r4, #15
 8008e52:	d00a      	beq.n	8008e6a <_strtod_l+0x55a>
 8008e54:	4b12      	ldr	r3, [pc, #72]	@ (8008ea0 <_strtod_l+0x590>)
 8008e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 fd0b 	bl	800087c <__aeabi_ddiv>
 8008e66:	4682      	mov	sl, r0
 8008e68:	468b      	mov	fp, r1
 8008e6a:	1124      	asrs	r4, r4, #4
 8008e6c:	d0dc      	beq.n	8008e28 <_strtod_l+0x518>
 8008e6e:	2c1f      	cmp	r4, #31
 8008e70:	dd20      	ble.n	8008eb4 <_strtod_l+0x5a4>
 8008e72:	2400      	movs	r4, #0
 8008e74:	46a0      	mov	r8, r4
 8008e76:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e78:	46a1      	mov	r9, r4
 8008e7a:	9a05      	ldr	r2, [sp, #20]
 8008e7c:	2322      	movs	r3, #34	@ 0x22
 8008e7e:	f04f 0a00 	mov.w	sl, #0
 8008e82:	f04f 0b00 	mov.w	fp, #0
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	e768      	b.n	8008d5c <_strtod_l+0x44c>
 8008e8a:	bf00      	nop
 8008e8c:	0800a861 	.word	0x0800a861
 8008e90:	0800aa74 	.word	0x0800aa74
 8008e94:	0800a859 	.word	0x0800a859
 8008e98:	0800a890 	.word	0x0800a890
 8008e9c:	0800ac1d 	.word	0x0800ac1d
 8008ea0:	0800a9a8 	.word	0x0800a9a8
 8008ea4:	0800a980 	.word	0x0800a980
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	7ca00000 	.word	0x7ca00000
 8008eb0:	7fefffff 	.word	0x7fefffff
 8008eb4:	f014 0310 	ands.w	r3, r4, #16
 8008eb8:	bf18      	it	ne
 8008eba:	236a      	movne	r3, #106	@ 0x6a
 8008ebc:	4ea9      	ldr	r6, [pc, #676]	@ (8009164 <_strtod_l+0x854>)
 8008ebe:	9308      	str	r3, [sp, #32]
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	07e2      	lsls	r2, r4, #31
 8008ec8:	d504      	bpl.n	8008ed4 <_strtod_l+0x5c4>
 8008eca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ece:	f7f7 fbab 	bl	8000628 <__aeabi_dmul>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	1064      	asrs	r4, r4, #1
 8008ed6:	f106 0608 	add.w	r6, r6, #8
 8008eda:	d1f4      	bne.n	8008ec6 <_strtod_l+0x5b6>
 8008edc:	b10b      	cbz	r3, 8008ee2 <_strtod_l+0x5d2>
 8008ede:	4682      	mov	sl, r0
 8008ee0:	468b      	mov	fp, r1
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	b1b3      	cbz	r3, 8008f14 <_strtod_l+0x604>
 8008ee6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008eea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	4659      	mov	r1, fp
 8008ef2:	dd0f      	ble.n	8008f14 <_strtod_l+0x604>
 8008ef4:	2b1f      	cmp	r3, #31
 8008ef6:	dd55      	ble.n	8008fa4 <_strtod_l+0x694>
 8008ef8:	2b34      	cmp	r3, #52	@ 0x34
 8008efa:	bfde      	ittt	le
 8008efc:	f04f 33ff 	movle.w	r3, #4294967295
 8008f00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f04:	4093      	lslle	r3, r2
 8008f06:	f04f 0a00 	mov.w	sl, #0
 8008f0a:	bfcc      	ite	gt
 8008f0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f10:	ea03 0b01 	andle.w	fp, r3, r1
 8008f14:	2200      	movs	r2, #0
 8008f16:	2300      	movs	r3, #0
 8008f18:	4650      	mov	r0, sl
 8008f1a:	4659      	mov	r1, fp
 8008f1c:	f7f7 fdec 	bl	8000af8 <__aeabi_dcmpeq>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d1a6      	bne.n	8008e72 <_strtod_l+0x562>
 8008f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f2a:	9805      	ldr	r0, [sp, #20]
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	463a      	mov	r2, r7
 8008f30:	f7ff f8c6 	bl	80080c0 <__s2b>
 8008f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f43f af05 	beq.w	8008d46 <_strtod_l+0x436>
 8008f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	eba9 0308 	sub.w	r3, r9, r8
 8008f44:	bfa8      	it	ge
 8008f46:	2300      	movge	r3, #0
 8008f48:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f4a:	2400      	movs	r4, #0
 8008f4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f50:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f52:	46a0      	mov	r8, r4
 8008f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f56:	9805      	ldr	r0, [sp, #20]
 8008f58:	6859      	ldr	r1, [r3, #4]
 8008f5a:	f7ff f809 	bl	8007f70 <_Balloc>
 8008f5e:	4681      	mov	r9, r0
 8008f60:	2800      	cmp	r0, #0
 8008f62:	f43f aef4 	beq.w	8008d4e <_strtod_l+0x43e>
 8008f66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f68:	691a      	ldr	r2, [r3, #16]
 8008f6a:	3202      	adds	r2, #2
 8008f6c:	f103 010c 	add.w	r1, r3, #12
 8008f70:	0092      	lsls	r2, r2, #2
 8008f72:	300c      	adds	r0, #12
 8008f74:	f7fe f899 	bl	80070aa <memcpy>
 8008f78:	ec4b ab10 	vmov	d0, sl, fp
 8008f7c:	9805      	ldr	r0, [sp, #20]
 8008f7e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f80:	a91b      	add	r1, sp, #108	@ 0x6c
 8008f82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008f86:	f7ff fbd7 	bl	8008738 <__d2b>
 8008f8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	f43f aede 	beq.w	8008d4e <_strtod_l+0x43e>
 8008f92:	9805      	ldr	r0, [sp, #20]
 8008f94:	2101      	movs	r1, #1
 8008f96:	f7ff f929 	bl	80081ec <__i2b>
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	b948      	cbnz	r0, 8008fb2 <_strtod_l+0x6a2>
 8008f9e:	f04f 0800 	mov.w	r8, #0
 8008fa2:	e6d4      	b.n	8008d4e <_strtod_l+0x43e>
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fac:	ea03 0a0a 	and.w	sl, r3, sl
 8008fb0:	e7b0      	b.n	8008f14 <_strtod_l+0x604>
 8008fb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008fb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008fb6:	2d00      	cmp	r5, #0
 8008fb8:	bfab      	itete	ge
 8008fba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008fbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008fbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008fc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008fc2:	bfac      	ite	ge
 8008fc4:	18ef      	addge	r7, r5, r3
 8008fc6:	1b5e      	sublt	r6, r3, r5
 8008fc8:	9b08      	ldr	r3, [sp, #32]
 8008fca:	1aed      	subs	r5, r5, r3
 8008fcc:	4415      	add	r5, r2
 8008fce:	4b66      	ldr	r3, [pc, #408]	@ (8009168 <_strtod_l+0x858>)
 8008fd0:	3d01      	subs	r5, #1
 8008fd2:	429d      	cmp	r5, r3
 8008fd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008fd8:	da50      	bge.n	800907c <_strtod_l+0x76c>
 8008fda:	1b5b      	subs	r3, r3, r5
 8008fdc:	2b1f      	cmp	r3, #31
 8008fde:	eba2 0203 	sub.w	r2, r2, r3
 8008fe2:	f04f 0101 	mov.w	r1, #1
 8008fe6:	dc3d      	bgt.n	8009064 <_strtod_l+0x754>
 8008fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ff2:	18bd      	adds	r5, r7, r2
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	42af      	cmp	r7, r5
 8008ff8:	4416      	add	r6, r2
 8008ffa:	441e      	add	r6, r3
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	bfa8      	it	ge
 8009000:	462b      	movge	r3, r5
 8009002:	42b3      	cmp	r3, r6
 8009004:	bfa8      	it	ge
 8009006:	4633      	movge	r3, r6
 8009008:	2b00      	cmp	r3, #0
 800900a:	bfc2      	ittt	gt
 800900c:	1aed      	subgt	r5, r5, r3
 800900e:	1af6      	subgt	r6, r6, r3
 8009010:	1aff      	subgt	r7, r7, r3
 8009012:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009014:	2b00      	cmp	r3, #0
 8009016:	dd16      	ble.n	8009046 <_strtod_l+0x736>
 8009018:	4641      	mov	r1, r8
 800901a:	9805      	ldr	r0, [sp, #20]
 800901c:	461a      	mov	r2, r3
 800901e:	f7ff f9a5 	bl	800836c <__pow5mult>
 8009022:	4680      	mov	r8, r0
 8009024:	2800      	cmp	r0, #0
 8009026:	d0ba      	beq.n	8008f9e <_strtod_l+0x68e>
 8009028:	4601      	mov	r1, r0
 800902a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800902c:	9805      	ldr	r0, [sp, #20]
 800902e:	f7ff f8f3 	bl	8008218 <__multiply>
 8009032:	900e      	str	r0, [sp, #56]	@ 0x38
 8009034:	2800      	cmp	r0, #0
 8009036:	f43f ae8a 	beq.w	8008d4e <_strtod_l+0x43e>
 800903a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800903c:	9805      	ldr	r0, [sp, #20]
 800903e:	f7fe ffd7 	bl	8007ff0 <_Bfree>
 8009042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009044:	931a      	str	r3, [sp, #104]	@ 0x68
 8009046:	2d00      	cmp	r5, #0
 8009048:	dc1d      	bgt.n	8009086 <_strtod_l+0x776>
 800904a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	dd23      	ble.n	8009098 <_strtod_l+0x788>
 8009050:	4649      	mov	r1, r9
 8009052:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009054:	9805      	ldr	r0, [sp, #20]
 8009056:	f7ff f989 	bl	800836c <__pow5mult>
 800905a:	4681      	mov	r9, r0
 800905c:	b9e0      	cbnz	r0, 8009098 <_strtod_l+0x788>
 800905e:	f04f 0900 	mov.w	r9, #0
 8009062:	e674      	b.n	8008d4e <_strtod_l+0x43e>
 8009064:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009068:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800906c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009070:	35e2      	adds	r5, #226	@ 0xe2
 8009072:	fa01 f305 	lsl.w	r3, r1, r5
 8009076:	9310      	str	r3, [sp, #64]	@ 0x40
 8009078:	9113      	str	r1, [sp, #76]	@ 0x4c
 800907a:	e7ba      	b.n	8008ff2 <_strtod_l+0x6e2>
 800907c:	2300      	movs	r3, #0
 800907e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009080:	2301      	movs	r3, #1
 8009082:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009084:	e7b5      	b.n	8008ff2 <_strtod_l+0x6e2>
 8009086:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009088:	9805      	ldr	r0, [sp, #20]
 800908a:	462a      	mov	r2, r5
 800908c:	f7ff f9c8 	bl	8008420 <__lshift>
 8009090:	901a      	str	r0, [sp, #104]	@ 0x68
 8009092:	2800      	cmp	r0, #0
 8009094:	d1d9      	bne.n	800904a <_strtod_l+0x73a>
 8009096:	e65a      	b.n	8008d4e <_strtod_l+0x43e>
 8009098:	2e00      	cmp	r6, #0
 800909a:	dd07      	ble.n	80090ac <_strtod_l+0x79c>
 800909c:	4649      	mov	r1, r9
 800909e:	9805      	ldr	r0, [sp, #20]
 80090a0:	4632      	mov	r2, r6
 80090a2:	f7ff f9bd 	bl	8008420 <__lshift>
 80090a6:	4681      	mov	r9, r0
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d0d8      	beq.n	800905e <_strtod_l+0x74e>
 80090ac:	2f00      	cmp	r7, #0
 80090ae:	dd08      	ble.n	80090c2 <_strtod_l+0x7b2>
 80090b0:	4641      	mov	r1, r8
 80090b2:	9805      	ldr	r0, [sp, #20]
 80090b4:	463a      	mov	r2, r7
 80090b6:	f7ff f9b3 	bl	8008420 <__lshift>
 80090ba:	4680      	mov	r8, r0
 80090bc:	2800      	cmp	r0, #0
 80090be:	f43f ae46 	beq.w	8008d4e <_strtod_l+0x43e>
 80090c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090c4:	9805      	ldr	r0, [sp, #20]
 80090c6:	464a      	mov	r2, r9
 80090c8:	f7ff fa32 	bl	8008530 <__mdiff>
 80090cc:	4604      	mov	r4, r0
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f43f ae3d 	beq.w	8008d4e <_strtod_l+0x43e>
 80090d4:	68c3      	ldr	r3, [r0, #12]
 80090d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090d8:	2300      	movs	r3, #0
 80090da:	60c3      	str	r3, [r0, #12]
 80090dc:	4641      	mov	r1, r8
 80090de:	f7ff fa0b 	bl	80084f8 <__mcmp>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	da46      	bge.n	8009174 <_strtod_l+0x864>
 80090e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090e8:	ea53 030a 	orrs.w	r3, r3, sl
 80090ec:	d16c      	bne.n	80091c8 <_strtod_l+0x8b8>
 80090ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d168      	bne.n	80091c8 <_strtod_l+0x8b8>
 80090f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090fa:	0d1b      	lsrs	r3, r3, #20
 80090fc:	051b      	lsls	r3, r3, #20
 80090fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009102:	d961      	bls.n	80091c8 <_strtod_l+0x8b8>
 8009104:	6963      	ldr	r3, [r4, #20]
 8009106:	b913      	cbnz	r3, 800910e <_strtod_l+0x7fe>
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	2b01      	cmp	r3, #1
 800910c:	dd5c      	ble.n	80091c8 <_strtod_l+0x8b8>
 800910e:	4621      	mov	r1, r4
 8009110:	2201      	movs	r2, #1
 8009112:	9805      	ldr	r0, [sp, #20]
 8009114:	f7ff f984 	bl	8008420 <__lshift>
 8009118:	4641      	mov	r1, r8
 800911a:	4604      	mov	r4, r0
 800911c:	f7ff f9ec 	bl	80084f8 <__mcmp>
 8009120:	2800      	cmp	r0, #0
 8009122:	dd51      	ble.n	80091c8 <_strtod_l+0x8b8>
 8009124:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009128:	9a08      	ldr	r2, [sp, #32]
 800912a:	0d1b      	lsrs	r3, r3, #20
 800912c:	051b      	lsls	r3, r3, #20
 800912e:	2a00      	cmp	r2, #0
 8009130:	d06b      	beq.n	800920a <_strtod_l+0x8fa>
 8009132:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009136:	d868      	bhi.n	800920a <_strtod_l+0x8fa>
 8009138:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800913c:	f67f ae9d 	bls.w	8008e7a <_strtod_l+0x56a>
 8009140:	4b0a      	ldr	r3, [pc, #40]	@ (800916c <_strtod_l+0x85c>)
 8009142:	4650      	mov	r0, sl
 8009144:	4659      	mov	r1, fp
 8009146:	2200      	movs	r2, #0
 8009148:	f7f7 fa6e 	bl	8000628 <__aeabi_dmul>
 800914c:	4b08      	ldr	r3, [pc, #32]	@ (8009170 <_strtod_l+0x860>)
 800914e:	400b      	ands	r3, r1
 8009150:	4682      	mov	sl, r0
 8009152:	468b      	mov	fp, r1
 8009154:	2b00      	cmp	r3, #0
 8009156:	f47f ae05 	bne.w	8008d64 <_strtod_l+0x454>
 800915a:	9a05      	ldr	r2, [sp, #20]
 800915c:	2322      	movs	r3, #34	@ 0x22
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	e600      	b.n	8008d64 <_strtod_l+0x454>
 8009162:	bf00      	nop
 8009164:	0800aaa0 	.word	0x0800aaa0
 8009168:	fffffc02 	.word	0xfffffc02
 800916c:	39500000 	.word	0x39500000
 8009170:	7ff00000 	.word	0x7ff00000
 8009174:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009178:	d165      	bne.n	8009246 <_strtod_l+0x936>
 800917a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800917c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009180:	b35a      	cbz	r2, 80091da <_strtod_l+0x8ca>
 8009182:	4a9f      	ldr	r2, [pc, #636]	@ (8009400 <_strtod_l+0xaf0>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d12b      	bne.n	80091e0 <_strtod_l+0x8d0>
 8009188:	9b08      	ldr	r3, [sp, #32]
 800918a:	4651      	mov	r1, sl
 800918c:	b303      	cbz	r3, 80091d0 <_strtod_l+0x8c0>
 800918e:	4b9d      	ldr	r3, [pc, #628]	@ (8009404 <_strtod_l+0xaf4>)
 8009190:	465a      	mov	r2, fp
 8009192:	4013      	ands	r3, r2
 8009194:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009198:	f04f 32ff 	mov.w	r2, #4294967295
 800919c:	d81b      	bhi.n	80091d6 <_strtod_l+0x8c6>
 800919e:	0d1b      	lsrs	r3, r3, #20
 80091a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091a4:	fa02 f303 	lsl.w	r3, r2, r3
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d119      	bne.n	80091e0 <_strtod_l+0x8d0>
 80091ac:	4b96      	ldr	r3, [pc, #600]	@ (8009408 <_strtod_l+0xaf8>)
 80091ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d102      	bne.n	80091ba <_strtod_l+0x8aa>
 80091b4:	3101      	adds	r1, #1
 80091b6:	f43f adca 	beq.w	8008d4e <_strtod_l+0x43e>
 80091ba:	4b92      	ldr	r3, [pc, #584]	@ (8009404 <_strtod_l+0xaf4>)
 80091bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091be:	401a      	ands	r2, r3
 80091c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80091c4:	f04f 0a00 	mov.w	sl, #0
 80091c8:	9b08      	ldr	r3, [sp, #32]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1b8      	bne.n	8009140 <_strtod_l+0x830>
 80091ce:	e5c9      	b.n	8008d64 <_strtod_l+0x454>
 80091d0:	f04f 33ff 	mov.w	r3, #4294967295
 80091d4:	e7e8      	b.n	80091a8 <_strtod_l+0x898>
 80091d6:	4613      	mov	r3, r2
 80091d8:	e7e6      	b.n	80091a8 <_strtod_l+0x898>
 80091da:	ea53 030a 	orrs.w	r3, r3, sl
 80091de:	d0a1      	beq.n	8009124 <_strtod_l+0x814>
 80091e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091e2:	b1db      	cbz	r3, 800921c <_strtod_l+0x90c>
 80091e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091e6:	4213      	tst	r3, r2
 80091e8:	d0ee      	beq.n	80091c8 <_strtod_l+0x8b8>
 80091ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ec:	9a08      	ldr	r2, [sp, #32]
 80091ee:	4650      	mov	r0, sl
 80091f0:	4659      	mov	r1, fp
 80091f2:	b1bb      	cbz	r3, 8009224 <_strtod_l+0x914>
 80091f4:	f7ff fb6e 	bl	80088d4 <sulp>
 80091f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091fc:	ec53 2b10 	vmov	r2, r3, d0
 8009200:	f7f7 f85c 	bl	80002bc <__adddf3>
 8009204:	4682      	mov	sl, r0
 8009206:	468b      	mov	fp, r1
 8009208:	e7de      	b.n	80091c8 <_strtod_l+0x8b8>
 800920a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800920e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009212:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009216:	f04f 3aff 	mov.w	sl, #4294967295
 800921a:	e7d5      	b.n	80091c8 <_strtod_l+0x8b8>
 800921c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800921e:	ea13 0f0a 	tst.w	r3, sl
 8009222:	e7e1      	b.n	80091e8 <_strtod_l+0x8d8>
 8009224:	f7ff fb56 	bl	80088d4 <sulp>
 8009228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800922c:	ec53 2b10 	vmov	r2, r3, d0
 8009230:	f7f7 f842 	bl	80002b8 <__aeabi_dsub>
 8009234:	2200      	movs	r2, #0
 8009236:	2300      	movs	r3, #0
 8009238:	4682      	mov	sl, r0
 800923a:	468b      	mov	fp, r1
 800923c:	f7f7 fc5c 	bl	8000af8 <__aeabi_dcmpeq>
 8009240:	2800      	cmp	r0, #0
 8009242:	d0c1      	beq.n	80091c8 <_strtod_l+0x8b8>
 8009244:	e619      	b.n	8008e7a <_strtod_l+0x56a>
 8009246:	4641      	mov	r1, r8
 8009248:	4620      	mov	r0, r4
 800924a:	f7ff facd 	bl	80087e8 <__ratio>
 800924e:	ec57 6b10 	vmov	r6, r7, d0
 8009252:	2200      	movs	r2, #0
 8009254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009258:	4630      	mov	r0, r6
 800925a:	4639      	mov	r1, r7
 800925c:	f7f7 fc60 	bl	8000b20 <__aeabi_dcmple>
 8009260:	2800      	cmp	r0, #0
 8009262:	d06f      	beq.n	8009344 <_strtod_l+0xa34>
 8009264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d17a      	bne.n	8009360 <_strtod_l+0xa50>
 800926a:	f1ba 0f00 	cmp.w	sl, #0
 800926e:	d158      	bne.n	8009322 <_strtod_l+0xa12>
 8009270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009276:	2b00      	cmp	r3, #0
 8009278:	d15a      	bne.n	8009330 <_strtod_l+0xa20>
 800927a:	4b64      	ldr	r3, [pc, #400]	@ (800940c <_strtod_l+0xafc>)
 800927c:	2200      	movs	r2, #0
 800927e:	4630      	mov	r0, r6
 8009280:	4639      	mov	r1, r7
 8009282:	f7f7 fc43 	bl	8000b0c <__aeabi_dcmplt>
 8009286:	2800      	cmp	r0, #0
 8009288:	d159      	bne.n	800933e <_strtod_l+0xa2e>
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	4b60      	ldr	r3, [pc, #384]	@ (8009410 <_strtod_l+0xb00>)
 8009290:	2200      	movs	r2, #0
 8009292:	f7f7 f9c9 	bl	8000628 <__aeabi_dmul>
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800929e:	9606      	str	r6, [sp, #24]
 80092a0:	9307      	str	r3, [sp, #28]
 80092a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092a6:	4d57      	ldr	r5, [pc, #348]	@ (8009404 <_strtod_l+0xaf4>)
 80092a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80092ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ae:	401d      	ands	r5, r3
 80092b0:	4b58      	ldr	r3, [pc, #352]	@ (8009414 <_strtod_l+0xb04>)
 80092b2:	429d      	cmp	r5, r3
 80092b4:	f040 80b2 	bne.w	800941c <_strtod_l+0xb0c>
 80092b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80092be:	ec4b ab10 	vmov	d0, sl, fp
 80092c2:	f7ff f9c9 	bl	8008658 <__ulp>
 80092c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092ca:	ec51 0b10 	vmov	r0, r1, d0
 80092ce:	f7f7 f9ab 	bl	8000628 <__aeabi_dmul>
 80092d2:	4652      	mov	r2, sl
 80092d4:	465b      	mov	r3, fp
 80092d6:	f7f6 fff1 	bl	80002bc <__adddf3>
 80092da:	460b      	mov	r3, r1
 80092dc:	4949      	ldr	r1, [pc, #292]	@ (8009404 <_strtod_l+0xaf4>)
 80092de:	4a4e      	ldr	r2, [pc, #312]	@ (8009418 <_strtod_l+0xb08>)
 80092e0:	4019      	ands	r1, r3
 80092e2:	4291      	cmp	r1, r2
 80092e4:	4682      	mov	sl, r0
 80092e6:	d942      	bls.n	800936e <_strtod_l+0xa5e>
 80092e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092ea:	4b47      	ldr	r3, [pc, #284]	@ (8009408 <_strtod_l+0xaf8>)
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d103      	bne.n	80092f8 <_strtod_l+0x9e8>
 80092f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092f2:	3301      	adds	r3, #1
 80092f4:	f43f ad2b 	beq.w	8008d4e <_strtod_l+0x43e>
 80092f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009408 <_strtod_l+0xaf8>
 80092fc:	f04f 3aff 	mov.w	sl, #4294967295
 8009300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009302:	9805      	ldr	r0, [sp, #20]
 8009304:	f7fe fe74 	bl	8007ff0 <_Bfree>
 8009308:	9805      	ldr	r0, [sp, #20]
 800930a:	4649      	mov	r1, r9
 800930c:	f7fe fe70 	bl	8007ff0 <_Bfree>
 8009310:	9805      	ldr	r0, [sp, #20]
 8009312:	4641      	mov	r1, r8
 8009314:	f7fe fe6c 	bl	8007ff0 <_Bfree>
 8009318:	9805      	ldr	r0, [sp, #20]
 800931a:	4621      	mov	r1, r4
 800931c:	f7fe fe68 	bl	8007ff0 <_Bfree>
 8009320:	e618      	b.n	8008f54 <_strtod_l+0x644>
 8009322:	f1ba 0f01 	cmp.w	sl, #1
 8009326:	d103      	bne.n	8009330 <_strtod_l+0xa20>
 8009328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800932a:	2b00      	cmp	r3, #0
 800932c:	f43f ada5 	beq.w	8008e7a <_strtod_l+0x56a>
 8009330:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80093e0 <_strtod_l+0xad0>
 8009334:	4f35      	ldr	r7, [pc, #212]	@ (800940c <_strtod_l+0xafc>)
 8009336:	ed8d 7b06 	vstr	d7, [sp, #24]
 800933a:	2600      	movs	r6, #0
 800933c:	e7b1      	b.n	80092a2 <_strtod_l+0x992>
 800933e:	4f34      	ldr	r7, [pc, #208]	@ (8009410 <_strtod_l+0xb00>)
 8009340:	2600      	movs	r6, #0
 8009342:	e7aa      	b.n	800929a <_strtod_l+0x98a>
 8009344:	4b32      	ldr	r3, [pc, #200]	@ (8009410 <_strtod_l+0xb00>)
 8009346:	4630      	mov	r0, r6
 8009348:	4639      	mov	r1, r7
 800934a:	2200      	movs	r2, #0
 800934c:	f7f7 f96c 	bl	8000628 <__aeabi_dmul>
 8009350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009352:	4606      	mov	r6, r0
 8009354:	460f      	mov	r7, r1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d09f      	beq.n	800929a <_strtod_l+0x98a>
 800935a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800935e:	e7a0      	b.n	80092a2 <_strtod_l+0x992>
 8009360:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80093e8 <_strtod_l+0xad8>
 8009364:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009368:	ec57 6b17 	vmov	r6, r7, d7
 800936c:	e799      	b.n	80092a2 <_strtod_l+0x992>
 800936e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009372:	9b08      	ldr	r3, [sp, #32]
 8009374:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1c1      	bne.n	8009300 <_strtod_l+0x9f0>
 800937c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009380:	0d1b      	lsrs	r3, r3, #20
 8009382:	051b      	lsls	r3, r3, #20
 8009384:	429d      	cmp	r5, r3
 8009386:	d1bb      	bne.n	8009300 <_strtod_l+0x9f0>
 8009388:	4630      	mov	r0, r6
 800938a:	4639      	mov	r1, r7
 800938c:	f7f7 fcac 	bl	8000ce8 <__aeabi_d2lz>
 8009390:	f7f7 f91c 	bl	80005cc <__aeabi_l2d>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f6 ff8c 	bl	80002b8 <__aeabi_dsub>
 80093a0:	460b      	mov	r3, r1
 80093a2:	4602      	mov	r2, r0
 80093a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80093a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80093ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ae:	ea46 060a 	orr.w	r6, r6, sl
 80093b2:	431e      	orrs	r6, r3
 80093b4:	d06f      	beq.n	8009496 <_strtod_l+0xb86>
 80093b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80093f0 <_strtod_l+0xae0>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f7 fba6 	bl	8000b0c <__aeabi_dcmplt>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f47f accf 	bne.w	8008d64 <_strtod_l+0x454>
 80093c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80093f8 <_strtod_l+0xae8>)
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093d0:	f7f7 fbba 	bl	8000b48 <__aeabi_dcmpgt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d093      	beq.n	8009300 <_strtod_l+0x9f0>
 80093d8:	e4c4      	b.n	8008d64 <_strtod_l+0x454>
 80093da:	bf00      	nop
 80093dc:	f3af 8000 	nop.w
 80093e0:	00000000 	.word	0x00000000
 80093e4:	bff00000 	.word	0xbff00000
 80093e8:	00000000 	.word	0x00000000
 80093ec:	3ff00000 	.word	0x3ff00000
 80093f0:	94a03595 	.word	0x94a03595
 80093f4:	3fdfffff 	.word	0x3fdfffff
 80093f8:	35afe535 	.word	0x35afe535
 80093fc:	3fe00000 	.word	0x3fe00000
 8009400:	000fffff 	.word	0x000fffff
 8009404:	7ff00000 	.word	0x7ff00000
 8009408:	7fefffff 	.word	0x7fefffff
 800940c:	3ff00000 	.word	0x3ff00000
 8009410:	3fe00000 	.word	0x3fe00000
 8009414:	7fe00000 	.word	0x7fe00000
 8009418:	7c9fffff 	.word	0x7c9fffff
 800941c:	9b08      	ldr	r3, [sp, #32]
 800941e:	b323      	cbz	r3, 800946a <_strtod_l+0xb5a>
 8009420:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009424:	d821      	bhi.n	800946a <_strtod_l+0xb5a>
 8009426:	a328      	add	r3, pc, #160	@ (adr r3, 80094c8 <_strtod_l+0xbb8>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	4630      	mov	r0, r6
 800942e:	4639      	mov	r1, r7
 8009430:	f7f7 fb76 	bl	8000b20 <__aeabi_dcmple>
 8009434:	b1a0      	cbz	r0, 8009460 <_strtod_l+0xb50>
 8009436:	4639      	mov	r1, r7
 8009438:	4630      	mov	r0, r6
 800943a:	f7f7 fbcd 	bl	8000bd8 <__aeabi_d2uiz>
 800943e:	2801      	cmp	r0, #1
 8009440:	bf38      	it	cc
 8009442:	2001      	movcc	r0, #1
 8009444:	f7f7 f876 	bl	8000534 <__aeabi_ui2d>
 8009448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800944a:	4606      	mov	r6, r0
 800944c:	460f      	mov	r7, r1
 800944e:	b9fb      	cbnz	r3, 8009490 <_strtod_l+0xb80>
 8009450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009454:	9014      	str	r0, [sp, #80]	@ 0x50
 8009456:	9315      	str	r3, [sp, #84]	@ 0x54
 8009458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800945c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009462:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009466:	1b5b      	subs	r3, r3, r5
 8009468:	9311      	str	r3, [sp, #68]	@ 0x44
 800946a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800946e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009472:	f7ff f8f1 	bl	8008658 <__ulp>
 8009476:	4650      	mov	r0, sl
 8009478:	ec53 2b10 	vmov	r2, r3, d0
 800947c:	4659      	mov	r1, fp
 800947e:	f7f7 f8d3 	bl	8000628 <__aeabi_dmul>
 8009482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009486:	f7f6 ff19 	bl	80002bc <__adddf3>
 800948a:	4682      	mov	sl, r0
 800948c:	468b      	mov	fp, r1
 800948e:	e770      	b.n	8009372 <_strtod_l+0xa62>
 8009490:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009494:	e7e0      	b.n	8009458 <_strtod_l+0xb48>
 8009496:	a30e      	add	r3, pc, #56	@ (adr r3, 80094d0 <_strtod_l+0xbc0>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f7 fb36 	bl	8000b0c <__aeabi_dcmplt>
 80094a0:	e798      	b.n	80093d4 <_strtod_l+0xac4>
 80094a2:	2300      	movs	r3, #0
 80094a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80094a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	f7ff ba6d 	b.w	800898a <_strtod_l+0x7a>
 80094b0:	2a65      	cmp	r2, #101	@ 0x65
 80094b2:	f43f ab66 	beq.w	8008b82 <_strtod_l+0x272>
 80094b6:	2a45      	cmp	r2, #69	@ 0x45
 80094b8:	f43f ab63 	beq.w	8008b82 <_strtod_l+0x272>
 80094bc:	2301      	movs	r3, #1
 80094be:	f7ff bb9e 	b.w	8008bfe <_strtod_l+0x2ee>
 80094c2:	bf00      	nop
 80094c4:	f3af 8000 	nop.w
 80094c8:	ffc00000 	.word	0xffc00000
 80094cc:	41dfffff 	.word	0x41dfffff
 80094d0:	94a03595 	.word	0x94a03595
 80094d4:	3fcfffff 	.word	0x3fcfffff

080094d8 <_strtod_r>:
 80094d8:	4b01      	ldr	r3, [pc, #4]	@ (80094e0 <_strtod_r+0x8>)
 80094da:	f7ff ba19 	b.w	8008910 <_strtod_l>
 80094de:	bf00      	nop
 80094e0:	200000ec 	.word	0x200000ec

080094e4 <_strtol_l.constprop.0>:
 80094e4:	2b24      	cmp	r3, #36	@ 0x24
 80094e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ea:	4686      	mov	lr, r0
 80094ec:	4690      	mov	r8, r2
 80094ee:	d801      	bhi.n	80094f4 <_strtol_l.constprop.0+0x10>
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d106      	bne.n	8009502 <_strtol_l.constprop.0+0x1e>
 80094f4:	f7fd fdac 	bl	8007050 <__errno>
 80094f8:	2316      	movs	r3, #22
 80094fa:	6003      	str	r3, [r0, #0]
 80094fc:	2000      	movs	r0, #0
 80094fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009502:	4834      	ldr	r0, [pc, #208]	@ (80095d4 <_strtol_l.constprop.0+0xf0>)
 8009504:	460d      	mov	r5, r1
 8009506:	462a      	mov	r2, r5
 8009508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800950c:	5d06      	ldrb	r6, [r0, r4]
 800950e:	f016 0608 	ands.w	r6, r6, #8
 8009512:	d1f8      	bne.n	8009506 <_strtol_l.constprop.0+0x22>
 8009514:	2c2d      	cmp	r4, #45	@ 0x2d
 8009516:	d12d      	bne.n	8009574 <_strtol_l.constprop.0+0x90>
 8009518:	782c      	ldrb	r4, [r5, #0]
 800951a:	2601      	movs	r6, #1
 800951c:	1c95      	adds	r5, r2, #2
 800951e:	f033 0210 	bics.w	r2, r3, #16
 8009522:	d109      	bne.n	8009538 <_strtol_l.constprop.0+0x54>
 8009524:	2c30      	cmp	r4, #48	@ 0x30
 8009526:	d12a      	bne.n	800957e <_strtol_l.constprop.0+0x9a>
 8009528:	782a      	ldrb	r2, [r5, #0]
 800952a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800952e:	2a58      	cmp	r2, #88	@ 0x58
 8009530:	d125      	bne.n	800957e <_strtol_l.constprop.0+0x9a>
 8009532:	786c      	ldrb	r4, [r5, #1]
 8009534:	2310      	movs	r3, #16
 8009536:	3502      	adds	r5, #2
 8009538:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800953c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009540:	2200      	movs	r2, #0
 8009542:	fbbc f9f3 	udiv	r9, ip, r3
 8009546:	4610      	mov	r0, r2
 8009548:	fb03 ca19 	mls	sl, r3, r9, ip
 800954c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009550:	2f09      	cmp	r7, #9
 8009552:	d81b      	bhi.n	800958c <_strtol_l.constprop.0+0xa8>
 8009554:	463c      	mov	r4, r7
 8009556:	42a3      	cmp	r3, r4
 8009558:	dd27      	ble.n	80095aa <_strtol_l.constprop.0+0xc6>
 800955a:	1c57      	adds	r7, r2, #1
 800955c:	d007      	beq.n	800956e <_strtol_l.constprop.0+0x8a>
 800955e:	4581      	cmp	r9, r0
 8009560:	d320      	bcc.n	80095a4 <_strtol_l.constprop.0+0xc0>
 8009562:	d101      	bne.n	8009568 <_strtol_l.constprop.0+0x84>
 8009564:	45a2      	cmp	sl, r4
 8009566:	db1d      	blt.n	80095a4 <_strtol_l.constprop.0+0xc0>
 8009568:	fb00 4003 	mla	r0, r0, r3, r4
 800956c:	2201      	movs	r2, #1
 800956e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009572:	e7eb      	b.n	800954c <_strtol_l.constprop.0+0x68>
 8009574:	2c2b      	cmp	r4, #43	@ 0x2b
 8009576:	bf04      	itt	eq
 8009578:	782c      	ldrbeq	r4, [r5, #0]
 800957a:	1c95      	addeq	r5, r2, #2
 800957c:	e7cf      	b.n	800951e <_strtol_l.constprop.0+0x3a>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1da      	bne.n	8009538 <_strtol_l.constprop.0+0x54>
 8009582:	2c30      	cmp	r4, #48	@ 0x30
 8009584:	bf0c      	ite	eq
 8009586:	2308      	moveq	r3, #8
 8009588:	230a      	movne	r3, #10
 800958a:	e7d5      	b.n	8009538 <_strtol_l.constprop.0+0x54>
 800958c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009590:	2f19      	cmp	r7, #25
 8009592:	d801      	bhi.n	8009598 <_strtol_l.constprop.0+0xb4>
 8009594:	3c37      	subs	r4, #55	@ 0x37
 8009596:	e7de      	b.n	8009556 <_strtol_l.constprop.0+0x72>
 8009598:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800959c:	2f19      	cmp	r7, #25
 800959e:	d804      	bhi.n	80095aa <_strtol_l.constprop.0+0xc6>
 80095a0:	3c57      	subs	r4, #87	@ 0x57
 80095a2:	e7d8      	b.n	8009556 <_strtol_l.constprop.0+0x72>
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295
 80095a8:	e7e1      	b.n	800956e <_strtol_l.constprop.0+0x8a>
 80095aa:	1c53      	adds	r3, r2, #1
 80095ac:	d108      	bne.n	80095c0 <_strtol_l.constprop.0+0xdc>
 80095ae:	2322      	movs	r3, #34	@ 0x22
 80095b0:	f8ce 3000 	str.w	r3, [lr]
 80095b4:	4660      	mov	r0, ip
 80095b6:	f1b8 0f00 	cmp.w	r8, #0
 80095ba:	d0a0      	beq.n	80094fe <_strtol_l.constprop.0+0x1a>
 80095bc:	1e69      	subs	r1, r5, #1
 80095be:	e006      	b.n	80095ce <_strtol_l.constprop.0+0xea>
 80095c0:	b106      	cbz	r6, 80095c4 <_strtol_l.constprop.0+0xe0>
 80095c2:	4240      	negs	r0, r0
 80095c4:	f1b8 0f00 	cmp.w	r8, #0
 80095c8:	d099      	beq.n	80094fe <_strtol_l.constprop.0+0x1a>
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	d1f6      	bne.n	80095bc <_strtol_l.constprop.0+0xd8>
 80095ce:	f8c8 1000 	str.w	r1, [r8]
 80095d2:	e794      	b.n	80094fe <_strtol_l.constprop.0+0x1a>
 80095d4:	0800aac9 	.word	0x0800aac9

080095d8 <_strtol_r>:
 80095d8:	f7ff bf84 	b.w	80094e4 <_strtol_l.constprop.0>

080095dc <__ssputs_r>:
 80095dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e0:	688e      	ldr	r6, [r1, #8]
 80095e2:	461f      	mov	r7, r3
 80095e4:	42be      	cmp	r6, r7
 80095e6:	680b      	ldr	r3, [r1, #0]
 80095e8:	4682      	mov	sl, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	4690      	mov	r8, r2
 80095ee:	d82d      	bhi.n	800964c <__ssputs_r+0x70>
 80095f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095f8:	d026      	beq.n	8009648 <__ssputs_r+0x6c>
 80095fa:	6965      	ldr	r5, [r4, #20]
 80095fc:	6909      	ldr	r1, [r1, #16]
 80095fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009602:	eba3 0901 	sub.w	r9, r3, r1
 8009606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800960a:	1c7b      	adds	r3, r7, #1
 800960c:	444b      	add	r3, r9
 800960e:	106d      	asrs	r5, r5, #1
 8009610:	429d      	cmp	r5, r3
 8009612:	bf38      	it	cc
 8009614:	461d      	movcc	r5, r3
 8009616:	0553      	lsls	r3, r2, #21
 8009618:	d527      	bpl.n	800966a <__ssputs_r+0x8e>
 800961a:	4629      	mov	r1, r5
 800961c:	f7fe fc1c 	bl	8007e58 <_malloc_r>
 8009620:	4606      	mov	r6, r0
 8009622:	b360      	cbz	r0, 800967e <__ssputs_r+0xa2>
 8009624:	6921      	ldr	r1, [r4, #16]
 8009626:	464a      	mov	r2, r9
 8009628:	f7fd fd3f 	bl	80070aa <memcpy>
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	6126      	str	r6, [r4, #16]
 800963a:	6165      	str	r5, [r4, #20]
 800963c:	444e      	add	r6, r9
 800963e:	eba5 0509 	sub.w	r5, r5, r9
 8009642:	6026      	str	r6, [r4, #0]
 8009644:	60a5      	str	r5, [r4, #8]
 8009646:	463e      	mov	r6, r7
 8009648:	42be      	cmp	r6, r7
 800964a:	d900      	bls.n	800964e <__ssputs_r+0x72>
 800964c:	463e      	mov	r6, r7
 800964e:	6820      	ldr	r0, [r4, #0]
 8009650:	4632      	mov	r2, r6
 8009652:	4641      	mov	r1, r8
 8009654:	f000 f9c6 	bl	80099e4 <memmove>
 8009658:	68a3      	ldr	r3, [r4, #8]
 800965a:	1b9b      	subs	r3, r3, r6
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	4433      	add	r3, r6
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	2000      	movs	r0, #0
 8009666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966a:	462a      	mov	r2, r5
 800966c:	f000 fd7d 	bl	800a16a <_realloc_r>
 8009670:	4606      	mov	r6, r0
 8009672:	2800      	cmp	r0, #0
 8009674:	d1e0      	bne.n	8009638 <__ssputs_r+0x5c>
 8009676:	6921      	ldr	r1, [r4, #16]
 8009678:	4650      	mov	r0, sl
 800967a:	f7fe fb79 	bl	8007d70 <_free_r>
 800967e:	230c      	movs	r3, #12
 8009680:	f8ca 3000 	str.w	r3, [sl]
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	f04f 30ff 	mov.w	r0, #4294967295
 8009690:	e7e9      	b.n	8009666 <__ssputs_r+0x8a>
	...

08009694 <_svfiprintf_r>:
 8009694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	4698      	mov	r8, r3
 800969a:	898b      	ldrh	r3, [r1, #12]
 800969c:	061b      	lsls	r3, r3, #24
 800969e:	b09d      	sub	sp, #116	@ 0x74
 80096a0:	4607      	mov	r7, r0
 80096a2:	460d      	mov	r5, r1
 80096a4:	4614      	mov	r4, r2
 80096a6:	d510      	bpl.n	80096ca <_svfiprintf_r+0x36>
 80096a8:	690b      	ldr	r3, [r1, #16]
 80096aa:	b973      	cbnz	r3, 80096ca <_svfiprintf_r+0x36>
 80096ac:	2140      	movs	r1, #64	@ 0x40
 80096ae:	f7fe fbd3 	bl	8007e58 <_malloc_r>
 80096b2:	6028      	str	r0, [r5, #0]
 80096b4:	6128      	str	r0, [r5, #16]
 80096b6:	b930      	cbnz	r0, 80096c6 <_svfiprintf_r+0x32>
 80096b8:	230c      	movs	r3, #12
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
 80096c0:	b01d      	add	sp, #116	@ 0x74
 80096c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c6:	2340      	movs	r3, #64	@ 0x40
 80096c8:	616b      	str	r3, [r5, #20]
 80096ca:	2300      	movs	r3, #0
 80096cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ce:	2320      	movs	r3, #32
 80096d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096d8:	2330      	movs	r3, #48	@ 0x30
 80096da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009878 <_svfiprintf_r+0x1e4>
 80096de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096e2:	f04f 0901 	mov.w	r9, #1
 80096e6:	4623      	mov	r3, r4
 80096e8:	469a      	mov	sl, r3
 80096ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ee:	b10a      	cbz	r2, 80096f4 <_svfiprintf_r+0x60>
 80096f0:	2a25      	cmp	r2, #37	@ 0x25
 80096f2:	d1f9      	bne.n	80096e8 <_svfiprintf_r+0x54>
 80096f4:	ebba 0b04 	subs.w	fp, sl, r4
 80096f8:	d00b      	beq.n	8009712 <_svfiprintf_r+0x7e>
 80096fa:	465b      	mov	r3, fp
 80096fc:	4622      	mov	r2, r4
 80096fe:	4629      	mov	r1, r5
 8009700:	4638      	mov	r0, r7
 8009702:	f7ff ff6b 	bl	80095dc <__ssputs_r>
 8009706:	3001      	adds	r0, #1
 8009708:	f000 80a7 	beq.w	800985a <_svfiprintf_r+0x1c6>
 800970c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800970e:	445a      	add	r2, fp
 8009710:	9209      	str	r2, [sp, #36]	@ 0x24
 8009712:	f89a 3000 	ldrb.w	r3, [sl]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 809f 	beq.w	800985a <_svfiprintf_r+0x1c6>
 800971c:	2300      	movs	r3, #0
 800971e:	f04f 32ff 	mov.w	r2, #4294967295
 8009722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009726:	f10a 0a01 	add.w	sl, sl, #1
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	9307      	str	r3, [sp, #28]
 800972e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009732:	931a      	str	r3, [sp, #104]	@ 0x68
 8009734:	4654      	mov	r4, sl
 8009736:	2205      	movs	r2, #5
 8009738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973c:	484e      	ldr	r0, [pc, #312]	@ (8009878 <_svfiprintf_r+0x1e4>)
 800973e:	f7f6 fd5f 	bl	8000200 <memchr>
 8009742:	9a04      	ldr	r2, [sp, #16]
 8009744:	b9d8      	cbnz	r0, 800977e <_svfiprintf_r+0xea>
 8009746:	06d0      	lsls	r0, r2, #27
 8009748:	bf44      	itt	mi
 800974a:	2320      	movmi	r3, #32
 800974c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009750:	0711      	lsls	r1, r2, #28
 8009752:	bf44      	itt	mi
 8009754:	232b      	movmi	r3, #43	@ 0x2b
 8009756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800975a:	f89a 3000 	ldrb.w	r3, [sl]
 800975e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009760:	d015      	beq.n	800978e <_svfiprintf_r+0xfa>
 8009762:	9a07      	ldr	r2, [sp, #28]
 8009764:	4654      	mov	r4, sl
 8009766:	2000      	movs	r0, #0
 8009768:	f04f 0c0a 	mov.w	ip, #10
 800976c:	4621      	mov	r1, r4
 800976e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009772:	3b30      	subs	r3, #48	@ 0x30
 8009774:	2b09      	cmp	r3, #9
 8009776:	d94b      	bls.n	8009810 <_svfiprintf_r+0x17c>
 8009778:	b1b0      	cbz	r0, 80097a8 <_svfiprintf_r+0x114>
 800977a:	9207      	str	r2, [sp, #28]
 800977c:	e014      	b.n	80097a8 <_svfiprintf_r+0x114>
 800977e:	eba0 0308 	sub.w	r3, r0, r8
 8009782:	fa09 f303 	lsl.w	r3, r9, r3
 8009786:	4313      	orrs	r3, r2
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	46a2      	mov	sl, r4
 800978c:	e7d2      	b.n	8009734 <_svfiprintf_r+0xa0>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	1d19      	adds	r1, r3, #4
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	9103      	str	r1, [sp, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	bfbb      	ittet	lt
 800979a:	425b      	neglt	r3, r3
 800979c:	f042 0202 	orrlt.w	r2, r2, #2
 80097a0:	9307      	strge	r3, [sp, #28]
 80097a2:	9307      	strlt	r3, [sp, #28]
 80097a4:	bfb8      	it	lt
 80097a6:	9204      	strlt	r2, [sp, #16]
 80097a8:	7823      	ldrb	r3, [r4, #0]
 80097aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80097ac:	d10a      	bne.n	80097c4 <_svfiprintf_r+0x130>
 80097ae:	7863      	ldrb	r3, [r4, #1]
 80097b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b2:	d132      	bne.n	800981a <_svfiprintf_r+0x186>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	1d1a      	adds	r2, r3, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	9203      	str	r2, [sp, #12]
 80097bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097c0:	3402      	adds	r4, #2
 80097c2:	9305      	str	r3, [sp, #20]
 80097c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009888 <_svfiprintf_r+0x1f4>
 80097c8:	7821      	ldrb	r1, [r4, #0]
 80097ca:	2203      	movs	r2, #3
 80097cc:	4650      	mov	r0, sl
 80097ce:	f7f6 fd17 	bl	8000200 <memchr>
 80097d2:	b138      	cbz	r0, 80097e4 <_svfiprintf_r+0x150>
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	eba0 000a 	sub.w	r0, r0, sl
 80097da:	2240      	movs	r2, #64	@ 0x40
 80097dc:	4082      	lsls	r2, r0
 80097de:	4313      	orrs	r3, r2
 80097e0:	3401      	adds	r4, #1
 80097e2:	9304      	str	r3, [sp, #16]
 80097e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e8:	4824      	ldr	r0, [pc, #144]	@ (800987c <_svfiprintf_r+0x1e8>)
 80097ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097ee:	2206      	movs	r2, #6
 80097f0:	f7f6 fd06 	bl	8000200 <memchr>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d036      	beq.n	8009866 <_svfiprintf_r+0x1d2>
 80097f8:	4b21      	ldr	r3, [pc, #132]	@ (8009880 <_svfiprintf_r+0x1ec>)
 80097fa:	bb1b      	cbnz	r3, 8009844 <_svfiprintf_r+0x1b0>
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	3307      	adds	r3, #7
 8009800:	f023 0307 	bic.w	r3, r3, #7
 8009804:	3308      	adds	r3, #8
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800980a:	4433      	add	r3, r6
 800980c:	9309      	str	r3, [sp, #36]	@ 0x24
 800980e:	e76a      	b.n	80096e6 <_svfiprintf_r+0x52>
 8009810:	fb0c 3202 	mla	r2, ip, r2, r3
 8009814:	460c      	mov	r4, r1
 8009816:	2001      	movs	r0, #1
 8009818:	e7a8      	b.n	800976c <_svfiprintf_r+0xd8>
 800981a:	2300      	movs	r3, #0
 800981c:	3401      	adds	r4, #1
 800981e:	9305      	str	r3, [sp, #20]
 8009820:	4619      	mov	r1, r3
 8009822:	f04f 0c0a 	mov.w	ip, #10
 8009826:	4620      	mov	r0, r4
 8009828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800982c:	3a30      	subs	r2, #48	@ 0x30
 800982e:	2a09      	cmp	r2, #9
 8009830:	d903      	bls.n	800983a <_svfiprintf_r+0x1a6>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0c6      	beq.n	80097c4 <_svfiprintf_r+0x130>
 8009836:	9105      	str	r1, [sp, #20]
 8009838:	e7c4      	b.n	80097c4 <_svfiprintf_r+0x130>
 800983a:	fb0c 2101 	mla	r1, ip, r1, r2
 800983e:	4604      	mov	r4, r0
 8009840:	2301      	movs	r3, #1
 8009842:	e7f0      	b.n	8009826 <_svfiprintf_r+0x192>
 8009844:	ab03      	add	r3, sp, #12
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	462a      	mov	r2, r5
 800984a:	4b0e      	ldr	r3, [pc, #56]	@ (8009884 <_svfiprintf_r+0x1f0>)
 800984c:	a904      	add	r1, sp, #16
 800984e:	4638      	mov	r0, r7
 8009850:	f7fc fcba 	bl	80061c8 <_printf_float>
 8009854:	1c42      	adds	r2, r0, #1
 8009856:	4606      	mov	r6, r0
 8009858:	d1d6      	bne.n	8009808 <_svfiprintf_r+0x174>
 800985a:	89ab      	ldrh	r3, [r5, #12]
 800985c:	065b      	lsls	r3, r3, #25
 800985e:	f53f af2d 	bmi.w	80096bc <_svfiprintf_r+0x28>
 8009862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009864:	e72c      	b.n	80096c0 <_svfiprintf_r+0x2c>
 8009866:	ab03      	add	r3, sp, #12
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	462a      	mov	r2, r5
 800986c:	4b05      	ldr	r3, [pc, #20]	@ (8009884 <_svfiprintf_r+0x1f0>)
 800986e:	a904      	add	r1, sp, #16
 8009870:	4638      	mov	r0, r7
 8009872:	f7fc ff41 	bl	80066f8 <_printf_i>
 8009876:	e7ed      	b.n	8009854 <_svfiprintf_r+0x1c0>
 8009878:	0800abc9 	.word	0x0800abc9
 800987c:	0800abd3 	.word	0x0800abd3
 8009880:	080061c9 	.word	0x080061c9
 8009884:	080095dd 	.word	0x080095dd
 8009888:	0800abcf 	.word	0x0800abcf

0800988c <__sflush_r>:
 800988c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009894:	0716      	lsls	r6, r2, #28
 8009896:	4605      	mov	r5, r0
 8009898:	460c      	mov	r4, r1
 800989a:	d454      	bmi.n	8009946 <__sflush_r+0xba>
 800989c:	684b      	ldr	r3, [r1, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc02      	bgt.n	80098a8 <__sflush_r+0x1c>
 80098a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dd48      	ble.n	800993a <__sflush_r+0xae>
 80098a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	d045      	beq.n	800993a <__sflush_r+0xae>
 80098ae:	2300      	movs	r3, #0
 80098b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098b4:	682f      	ldr	r7, [r5, #0]
 80098b6:	6a21      	ldr	r1, [r4, #32]
 80098b8:	602b      	str	r3, [r5, #0]
 80098ba:	d030      	beq.n	800991e <__sflush_r+0x92>
 80098bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	0759      	lsls	r1, r3, #29
 80098c2:	d505      	bpl.n	80098d0 <__sflush_r+0x44>
 80098c4:	6863      	ldr	r3, [r4, #4]
 80098c6:	1ad2      	subs	r2, r2, r3
 80098c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098ca:	b10b      	cbz	r3, 80098d0 <__sflush_r+0x44>
 80098cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098ce:	1ad2      	subs	r2, r2, r3
 80098d0:	2300      	movs	r3, #0
 80098d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098d4:	6a21      	ldr	r1, [r4, #32]
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b0      	blx	r6
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	d106      	bne.n	80098ee <__sflush_r+0x62>
 80098e0:	6829      	ldr	r1, [r5, #0]
 80098e2:	291d      	cmp	r1, #29
 80098e4:	d82b      	bhi.n	800993e <__sflush_r+0xb2>
 80098e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009990 <__sflush_r+0x104>)
 80098e8:	410a      	asrs	r2, r1
 80098ea:	07d6      	lsls	r6, r2, #31
 80098ec:	d427      	bmi.n	800993e <__sflush_r+0xb2>
 80098ee:	2200      	movs	r2, #0
 80098f0:	6062      	str	r2, [r4, #4]
 80098f2:	04d9      	lsls	r1, r3, #19
 80098f4:	6922      	ldr	r2, [r4, #16]
 80098f6:	6022      	str	r2, [r4, #0]
 80098f8:	d504      	bpl.n	8009904 <__sflush_r+0x78>
 80098fa:	1c42      	adds	r2, r0, #1
 80098fc:	d101      	bne.n	8009902 <__sflush_r+0x76>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	b903      	cbnz	r3, 8009904 <__sflush_r+0x78>
 8009902:	6560      	str	r0, [r4, #84]	@ 0x54
 8009904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009906:	602f      	str	r7, [r5, #0]
 8009908:	b1b9      	cbz	r1, 800993a <__sflush_r+0xae>
 800990a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800990e:	4299      	cmp	r1, r3
 8009910:	d002      	beq.n	8009918 <__sflush_r+0x8c>
 8009912:	4628      	mov	r0, r5
 8009914:	f7fe fa2c 	bl	8007d70 <_free_r>
 8009918:	2300      	movs	r3, #0
 800991a:	6363      	str	r3, [r4, #52]	@ 0x34
 800991c:	e00d      	b.n	800993a <__sflush_r+0xae>
 800991e:	2301      	movs	r3, #1
 8009920:	4628      	mov	r0, r5
 8009922:	47b0      	blx	r6
 8009924:	4602      	mov	r2, r0
 8009926:	1c50      	adds	r0, r2, #1
 8009928:	d1c9      	bne.n	80098be <__sflush_r+0x32>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0c6      	beq.n	80098be <__sflush_r+0x32>
 8009930:	2b1d      	cmp	r3, #29
 8009932:	d001      	beq.n	8009938 <__sflush_r+0xac>
 8009934:	2b16      	cmp	r3, #22
 8009936:	d11e      	bne.n	8009976 <__sflush_r+0xea>
 8009938:	602f      	str	r7, [r5, #0]
 800993a:	2000      	movs	r0, #0
 800993c:	e022      	b.n	8009984 <__sflush_r+0xf8>
 800993e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009942:	b21b      	sxth	r3, r3
 8009944:	e01b      	b.n	800997e <__sflush_r+0xf2>
 8009946:	690f      	ldr	r7, [r1, #16]
 8009948:	2f00      	cmp	r7, #0
 800994a:	d0f6      	beq.n	800993a <__sflush_r+0xae>
 800994c:	0793      	lsls	r3, r2, #30
 800994e:	680e      	ldr	r6, [r1, #0]
 8009950:	bf08      	it	eq
 8009952:	694b      	ldreq	r3, [r1, #20]
 8009954:	600f      	str	r7, [r1, #0]
 8009956:	bf18      	it	ne
 8009958:	2300      	movne	r3, #0
 800995a:	eba6 0807 	sub.w	r8, r6, r7
 800995e:	608b      	str	r3, [r1, #8]
 8009960:	f1b8 0f00 	cmp.w	r8, #0
 8009964:	dde9      	ble.n	800993a <__sflush_r+0xae>
 8009966:	6a21      	ldr	r1, [r4, #32]
 8009968:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800996a:	4643      	mov	r3, r8
 800996c:	463a      	mov	r2, r7
 800996e:	4628      	mov	r0, r5
 8009970:	47b0      	blx	r6
 8009972:	2800      	cmp	r0, #0
 8009974:	dc08      	bgt.n	8009988 <__sflush_r+0xfc>
 8009976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009988:	4407      	add	r7, r0
 800998a:	eba8 0800 	sub.w	r8, r8, r0
 800998e:	e7e7      	b.n	8009960 <__sflush_r+0xd4>
 8009990:	dfbffffe 	.word	0xdfbffffe

08009994 <_fflush_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	690b      	ldr	r3, [r1, #16]
 8009998:	4605      	mov	r5, r0
 800999a:	460c      	mov	r4, r1
 800999c:	b913      	cbnz	r3, 80099a4 <_fflush_r+0x10>
 800999e:	2500      	movs	r5, #0
 80099a0:	4628      	mov	r0, r5
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	b118      	cbz	r0, 80099ae <_fflush_r+0x1a>
 80099a6:	6a03      	ldr	r3, [r0, #32]
 80099a8:	b90b      	cbnz	r3, 80099ae <_fflush_r+0x1a>
 80099aa:	f7fd fa65 	bl	8006e78 <__sinit>
 80099ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0f3      	beq.n	800999e <_fflush_r+0xa>
 80099b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099b8:	07d0      	lsls	r0, r2, #31
 80099ba:	d404      	bmi.n	80099c6 <_fflush_r+0x32>
 80099bc:	0599      	lsls	r1, r3, #22
 80099be:	d402      	bmi.n	80099c6 <_fflush_r+0x32>
 80099c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099c2:	f7fd fb70 	bl	80070a6 <__retarget_lock_acquire_recursive>
 80099c6:	4628      	mov	r0, r5
 80099c8:	4621      	mov	r1, r4
 80099ca:	f7ff ff5f 	bl	800988c <__sflush_r>
 80099ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099d0:	07da      	lsls	r2, r3, #31
 80099d2:	4605      	mov	r5, r0
 80099d4:	d4e4      	bmi.n	80099a0 <_fflush_r+0xc>
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	059b      	lsls	r3, r3, #22
 80099da:	d4e1      	bmi.n	80099a0 <_fflush_r+0xc>
 80099dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099de:	f7fd fb63 	bl	80070a8 <__retarget_lock_release_recursive>
 80099e2:	e7dd      	b.n	80099a0 <_fflush_r+0xc>

080099e4 <memmove>:
 80099e4:	4288      	cmp	r0, r1
 80099e6:	b510      	push	{r4, lr}
 80099e8:	eb01 0402 	add.w	r4, r1, r2
 80099ec:	d902      	bls.n	80099f4 <memmove+0x10>
 80099ee:	4284      	cmp	r4, r0
 80099f0:	4623      	mov	r3, r4
 80099f2:	d807      	bhi.n	8009a04 <memmove+0x20>
 80099f4:	1e43      	subs	r3, r0, #1
 80099f6:	42a1      	cmp	r1, r4
 80099f8:	d008      	beq.n	8009a0c <memmove+0x28>
 80099fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a02:	e7f8      	b.n	80099f6 <memmove+0x12>
 8009a04:	4402      	add	r2, r0
 8009a06:	4601      	mov	r1, r0
 8009a08:	428a      	cmp	r2, r1
 8009a0a:	d100      	bne.n	8009a0e <memmove+0x2a>
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a16:	e7f7      	b.n	8009a08 <memmove+0x24>

08009a18 <strncmp>:
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	b16a      	cbz	r2, 8009a38 <strncmp+0x20>
 8009a1c:	3901      	subs	r1, #1
 8009a1e:	1884      	adds	r4, r0, r2
 8009a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d103      	bne.n	8009a34 <strncmp+0x1c>
 8009a2c:	42a0      	cmp	r0, r4
 8009a2e:	d001      	beq.n	8009a34 <strncmp+0x1c>
 8009a30:	2a00      	cmp	r2, #0
 8009a32:	d1f5      	bne.n	8009a20 <strncmp+0x8>
 8009a34:	1ad0      	subs	r0, r2, r3
 8009a36:	bd10      	pop	{r4, pc}
 8009a38:	4610      	mov	r0, r2
 8009a3a:	e7fc      	b.n	8009a36 <strncmp+0x1e>

08009a3c <_sbrk_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	@ (8009a58 <_sbrk_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7f8 f908 	bl	8001c5c <_sbrk>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_sbrk_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_sbrk_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	2000056c 	.word	0x2000056c
 8009a5c:	00000000 	.word	0x00000000

08009a60 <nan>:
 8009a60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009a68 <nan+0x8>
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	7ff80000 	.word	0x7ff80000

08009a70 <__assert_func>:
 8009a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a72:	4614      	mov	r4, r2
 8009a74:	461a      	mov	r2, r3
 8009a76:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <__assert_func+0x2c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	68d8      	ldr	r0, [r3, #12]
 8009a7e:	b954      	cbnz	r4, 8009a96 <__assert_func+0x26>
 8009a80:	4b07      	ldr	r3, [pc, #28]	@ (8009aa0 <__assert_func+0x30>)
 8009a82:	461c      	mov	r4, r3
 8009a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a88:	9100      	str	r1, [sp, #0]
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	4905      	ldr	r1, [pc, #20]	@ (8009aa4 <__assert_func+0x34>)
 8009a8e:	f000 fba7 	bl	800a1e0 <fiprintf>
 8009a92:	f000 fbb7 	bl	800a204 <abort>
 8009a96:	4b04      	ldr	r3, [pc, #16]	@ (8009aa8 <__assert_func+0x38>)
 8009a98:	e7f4      	b.n	8009a84 <__assert_func+0x14>
 8009a9a:	bf00      	nop
 8009a9c:	2000009c 	.word	0x2000009c
 8009aa0:	0800ac1d 	.word	0x0800ac1d
 8009aa4:	0800abef 	.word	0x0800abef
 8009aa8:	0800abe2 	.word	0x0800abe2

08009aac <_calloc_r>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	fba1 5402 	umull	r5, r4, r1, r2
 8009ab2:	b93c      	cbnz	r4, 8009ac4 <_calloc_r+0x18>
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	f7fe f9cf 	bl	8007e58 <_malloc_r>
 8009aba:	4606      	mov	r6, r0
 8009abc:	b928      	cbnz	r0, 8009aca <_calloc_r+0x1e>
 8009abe:	2600      	movs	r6, #0
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	220c      	movs	r2, #12
 8009ac6:	6002      	str	r2, [r0, #0]
 8009ac8:	e7f9      	b.n	8009abe <_calloc_r+0x12>
 8009aca:	462a      	mov	r2, r5
 8009acc:	4621      	mov	r1, r4
 8009ace:	f7fd fa6c 	bl	8006faa <memset>
 8009ad2:	e7f5      	b.n	8009ac0 <_calloc_r+0x14>

08009ad4 <rshift>:
 8009ad4:	6903      	ldr	r3, [r0, #16]
 8009ad6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ada:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ade:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ae2:	f100 0414 	add.w	r4, r0, #20
 8009ae6:	dd45      	ble.n	8009b74 <rshift+0xa0>
 8009ae8:	f011 011f 	ands.w	r1, r1, #31
 8009aec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009af0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009af4:	d10c      	bne.n	8009b10 <rshift+0x3c>
 8009af6:	f100 0710 	add.w	r7, r0, #16
 8009afa:	4629      	mov	r1, r5
 8009afc:	42b1      	cmp	r1, r6
 8009afe:	d334      	bcc.n	8009b6a <rshift+0x96>
 8009b00:	1a9b      	subs	r3, r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	1eea      	subs	r2, r5, #3
 8009b06:	4296      	cmp	r6, r2
 8009b08:	bf38      	it	cc
 8009b0a:	2300      	movcc	r3, #0
 8009b0c:	4423      	add	r3, r4
 8009b0e:	e015      	b.n	8009b3c <rshift+0x68>
 8009b10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b14:	f1c1 0820 	rsb	r8, r1, #32
 8009b18:	40cf      	lsrs	r7, r1
 8009b1a:	f105 0e04 	add.w	lr, r5, #4
 8009b1e:	46a1      	mov	r9, r4
 8009b20:	4576      	cmp	r6, lr
 8009b22:	46f4      	mov	ip, lr
 8009b24:	d815      	bhi.n	8009b52 <rshift+0x7e>
 8009b26:	1a9a      	subs	r2, r3, r2
 8009b28:	0092      	lsls	r2, r2, #2
 8009b2a:	3a04      	subs	r2, #4
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	42ae      	cmp	r6, r5
 8009b30:	bf38      	it	cc
 8009b32:	2200      	movcc	r2, #0
 8009b34:	18a3      	adds	r3, r4, r2
 8009b36:	50a7      	str	r7, [r4, r2]
 8009b38:	b107      	cbz	r7, 8009b3c <rshift+0x68>
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	1b1a      	subs	r2, r3, r4
 8009b3e:	42a3      	cmp	r3, r4
 8009b40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b44:	bf08      	it	eq
 8009b46:	2300      	moveq	r3, #0
 8009b48:	6102      	str	r2, [r0, #16]
 8009b4a:	bf08      	it	eq
 8009b4c:	6143      	streq	r3, [r0, #20]
 8009b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b52:	f8dc c000 	ldr.w	ip, [ip]
 8009b56:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b5a:	ea4c 0707 	orr.w	r7, ip, r7
 8009b5e:	f849 7b04 	str.w	r7, [r9], #4
 8009b62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b66:	40cf      	lsrs	r7, r1
 8009b68:	e7da      	b.n	8009b20 <rshift+0x4c>
 8009b6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b72:	e7c3      	b.n	8009afc <rshift+0x28>
 8009b74:	4623      	mov	r3, r4
 8009b76:	e7e1      	b.n	8009b3c <rshift+0x68>

08009b78 <__hexdig_fun>:
 8009b78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b7c:	2b09      	cmp	r3, #9
 8009b7e:	d802      	bhi.n	8009b86 <__hexdig_fun+0xe>
 8009b80:	3820      	subs	r0, #32
 8009b82:	b2c0      	uxtb	r0, r0
 8009b84:	4770      	bx	lr
 8009b86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d801      	bhi.n	8009b92 <__hexdig_fun+0x1a>
 8009b8e:	3847      	subs	r0, #71	@ 0x47
 8009b90:	e7f7      	b.n	8009b82 <__hexdig_fun+0xa>
 8009b92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b96:	2b05      	cmp	r3, #5
 8009b98:	d801      	bhi.n	8009b9e <__hexdig_fun+0x26>
 8009b9a:	3827      	subs	r0, #39	@ 0x27
 8009b9c:	e7f1      	b.n	8009b82 <__hexdig_fun+0xa>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	4770      	bx	lr
	...

08009ba4 <__gethex>:
 8009ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	468a      	mov	sl, r1
 8009bac:	9302      	str	r3, [sp, #8]
 8009bae:	680b      	ldr	r3, [r1, #0]
 8009bb0:	9001      	str	r0, [sp, #4]
 8009bb2:	4690      	mov	r8, r2
 8009bb4:	1c9c      	adds	r4, r3, #2
 8009bb6:	46a1      	mov	r9, r4
 8009bb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009bbc:	2830      	cmp	r0, #48	@ 0x30
 8009bbe:	d0fa      	beq.n	8009bb6 <__gethex+0x12>
 8009bc0:	eba9 0303 	sub.w	r3, r9, r3
 8009bc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009bc8:	f7ff ffd6 	bl	8009b78 <__hexdig_fun>
 8009bcc:	4605      	mov	r5, r0
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d168      	bne.n	8009ca4 <__gethex+0x100>
 8009bd2:	49a0      	ldr	r1, [pc, #640]	@ (8009e54 <__gethex+0x2b0>)
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4648      	mov	r0, r9
 8009bd8:	f7ff ff1e 	bl	8009a18 <strncmp>
 8009bdc:	4607      	mov	r7, r0
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d167      	bne.n	8009cb2 <__gethex+0x10e>
 8009be2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009be6:	4626      	mov	r6, r4
 8009be8:	f7ff ffc6 	bl	8009b78 <__hexdig_fun>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d062      	beq.n	8009cb6 <__gethex+0x112>
 8009bf0:	4623      	mov	r3, r4
 8009bf2:	7818      	ldrb	r0, [r3, #0]
 8009bf4:	2830      	cmp	r0, #48	@ 0x30
 8009bf6:	4699      	mov	r9, r3
 8009bf8:	f103 0301 	add.w	r3, r3, #1
 8009bfc:	d0f9      	beq.n	8009bf2 <__gethex+0x4e>
 8009bfe:	f7ff ffbb 	bl	8009b78 <__hexdig_fun>
 8009c02:	fab0 f580 	clz	r5, r0
 8009c06:	096d      	lsrs	r5, r5, #5
 8009c08:	f04f 0b01 	mov.w	fp, #1
 8009c0c:	464a      	mov	r2, r9
 8009c0e:	4616      	mov	r6, r2
 8009c10:	3201      	adds	r2, #1
 8009c12:	7830      	ldrb	r0, [r6, #0]
 8009c14:	f7ff ffb0 	bl	8009b78 <__hexdig_fun>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d1f8      	bne.n	8009c0e <__gethex+0x6a>
 8009c1c:	498d      	ldr	r1, [pc, #564]	@ (8009e54 <__gethex+0x2b0>)
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4630      	mov	r0, r6
 8009c22:	f7ff fef9 	bl	8009a18 <strncmp>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d13f      	bne.n	8009caa <__gethex+0x106>
 8009c2a:	b944      	cbnz	r4, 8009c3e <__gethex+0x9a>
 8009c2c:	1c74      	adds	r4, r6, #1
 8009c2e:	4622      	mov	r2, r4
 8009c30:	4616      	mov	r6, r2
 8009c32:	3201      	adds	r2, #1
 8009c34:	7830      	ldrb	r0, [r6, #0]
 8009c36:	f7ff ff9f 	bl	8009b78 <__hexdig_fun>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d1f8      	bne.n	8009c30 <__gethex+0x8c>
 8009c3e:	1ba4      	subs	r4, r4, r6
 8009c40:	00a7      	lsls	r7, r4, #2
 8009c42:	7833      	ldrb	r3, [r6, #0]
 8009c44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009c48:	2b50      	cmp	r3, #80	@ 0x50
 8009c4a:	d13e      	bne.n	8009cca <__gethex+0x126>
 8009c4c:	7873      	ldrb	r3, [r6, #1]
 8009c4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c50:	d033      	beq.n	8009cba <__gethex+0x116>
 8009c52:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c54:	d034      	beq.n	8009cc0 <__gethex+0x11c>
 8009c56:	1c71      	adds	r1, r6, #1
 8009c58:	2400      	movs	r4, #0
 8009c5a:	7808      	ldrb	r0, [r1, #0]
 8009c5c:	f7ff ff8c 	bl	8009b78 <__hexdig_fun>
 8009c60:	1e43      	subs	r3, r0, #1
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b18      	cmp	r3, #24
 8009c66:	d830      	bhi.n	8009cca <__gethex+0x126>
 8009c68:	f1a0 0210 	sub.w	r2, r0, #16
 8009c6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c70:	f7ff ff82 	bl	8009b78 <__hexdig_fun>
 8009c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c78:	fa5f fc8c 	uxtb.w	ip, ip
 8009c7c:	f1bc 0f18 	cmp.w	ip, #24
 8009c80:	f04f 030a 	mov.w	r3, #10
 8009c84:	d91e      	bls.n	8009cc4 <__gethex+0x120>
 8009c86:	b104      	cbz	r4, 8009c8a <__gethex+0xe6>
 8009c88:	4252      	negs	r2, r2
 8009c8a:	4417      	add	r7, r2
 8009c8c:	f8ca 1000 	str.w	r1, [sl]
 8009c90:	b1ed      	cbz	r5, 8009cce <__gethex+0x12a>
 8009c92:	f1bb 0f00 	cmp.w	fp, #0
 8009c96:	bf0c      	ite	eq
 8009c98:	2506      	moveq	r5, #6
 8009c9a:	2500      	movne	r5, #0
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	b005      	add	sp, #20
 8009ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	462c      	mov	r4, r5
 8009ca8:	e7b0      	b.n	8009c0c <__gethex+0x68>
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	d1c7      	bne.n	8009c3e <__gethex+0x9a>
 8009cae:	4627      	mov	r7, r4
 8009cb0:	e7c7      	b.n	8009c42 <__gethex+0x9e>
 8009cb2:	464e      	mov	r6, r9
 8009cb4:	462f      	mov	r7, r5
 8009cb6:	2501      	movs	r5, #1
 8009cb8:	e7c3      	b.n	8009c42 <__gethex+0x9e>
 8009cba:	2400      	movs	r4, #0
 8009cbc:	1cb1      	adds	r1, r6, #2
 8009cbe:	e7cc      	b.n	8009c5a <__gethex+0xb6>
 8009cc0:	2401      	movs	r4, #1
 8009cc2:	e7fb      	b.n	8009cbc <__gethex+0x118>
 8009cc4:	fb03 0002 	mla	r0, r3, r2, r0
 8009cc8:	e7ce      	b.n	8009c68 <__gethex+0xc4>
 8009cca:	4631      	mov	r1, r6
 8009ccc:	e7de      	b.n	8009c8c <__gethex+0xe8>
 8009cce:	eba6 0309 	sub.w	r3, r6, r9
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	2b07      	cmp	r3, #7
 8009cd8:	dc0a      	bgt.n	8009cf0 <__gethex+0x14c>
 8009cda:	9801      	ldr	r0, [sp, #4]
 8009cdc:	f7fe f948 	bl	8007f70 <_Balloc>
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	b940      	cbnz	r0, 8009cf6 <__gethex+0x152>
 8009ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8009e58 <__gethex+0x2b4>)
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	21e4      	movs	r1, #228	@ 0xe4
 8009cea:	485c      	ldr	r0, [pc, #368]	@ (8009e5c <__gethex+0x2b8>)
 8009cec:	f7ff fec0 	bl	8009a70 <__assert_func>
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	105b      	asrs	r3, r3, #1
 8009cf4:	e7ef      	b.n	8009cd6 <__gethex+0x132>
 8009cf6:	f100 0a14 	add.w	sl, r0, #20
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	4655      	mov	r5, sl
 8009cfe:	469b      	mov	fp, r3
 8009d00:	45b1      	cmp	r9, r6
 8009d02:	d337      	bcc.n	8009d74 <__gethex+0x1d0>
 8009d04:	f845 bb04 	str.w	fp, [r5], #4
 8009d08:	eba5 050a 	sub.w	r5, r5, sl
 8009d0c:	10ad      	asrs	r5, r5, #2
 8009d0e:	6125      	str	r5, [r4, #16]
 8009d10:	4658      	mov	r0, fp
 8009d12:	f7fe fa1f 	bl	8008154 <__hi0bits>
 8009d16:	016d      	lsls	r5, r5, #5
 8009d18:	f8d8 6000 	ldr.w	r6, [r8]
 8009d1c:	1a2d      	subs	r5, r5, r0
 8009d1e:	42b5      	cmp	r5, r6
 8009d20:	dd54      	ble.n	8009dcc <__gethex+0x228>
 8009d22:	1bad      	subs	r5, r5, r6
 8009d24:	4629      	mov	r1, r5
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7fe fdb3 	bl	8008892 <__any_on>
 8009d2c:	4681      	mov	r9, r0
 8009d2e:	b178      	cbz	r0, 8009d50 <__gethex+0x1ac>
 8009d30:	1e6b      	subs	r3, r5, #1
 8009d32:	1159      	asrs	r1, r3, #5
 8009d34:	f003 021f 	and.w	r2, r3, #31
 8009d38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d3c:	f04f 0901 	mov.w	r9, #1
 8009d40:	fa09 f202 	lsl.w	r2, r9, r2
 8009d44:	420a      	tst	r2, r1
 8009d46:	d003      	beq.n	8009d50 <__gethex+0x1ac>
 8009d48:	454b      	cmp	r3, r9
 8009d4a:	dc36      	bgt.n	8009dba <__gethex+0x216>
 8009d4c:	f04f 0902 	mov.w	r9, #2
 8009d50:	4629      	mov	r1, r5
 8009d52:	4620      	mov	r0, r4
 8009d54:	f7ff febe 	bl	8009ad4 <rshift>
 8009d58:	442f      	add	r7, r5
 8009d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d5e:	42bb      	cmp	r3, r7
 8009d60:	da42      	bge.n	8009de8 <__gethex+0x244>
 8009d62:	9801      	ldr	r0, [sp, #4]
 8009d64:	4621      	mov	r1, r4
 8009d66:	f7fe f943 	bl	8007ff0 <_Bfree>
 8009d6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	25a3      	movs	r5, #163	@ 0xa3
 8009d72:	e793      	b.n	8009c9c <__gethex+0xf8>
 8009d74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d78:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d7a:	d012      	beq.n	8009da2 <__gethex+0x1fe>
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	d104      	bne.n	8009d8a <__gethex+0x1e6>
 8009d80:	f845 bb04 	str.w	fp, [r5], #4
 8009d84:	f04f 0b00 	mov.w	fp, #0
 8009d88:	465b      	mov	r3, fp
 8009d8a:	7830      	ldrb	r0, [r6, #0]
 8009d8c:	9303      	str	r3, [sp, #12]
 8009d8e:	f7ff fef3 	bl	8009b78 <__hexdig_fun>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	f000 000f 	and.w	r0, r0, #15
 8009d98:	4098      	lsls	r0, r3
 8009d9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d9e:	3304      	adds	r3, #4
 8009da0:	e7ae      	b.n	8009d00 <__gethex+0x15c>
 8009da2:	45b1      	cmp	r9, r6
 8009da4:	d8ea      	bhi.n	8009d7c <__gethex+0x1d8>
 8009da6:	492b      	ldr	r1, [pc, #172]	@ (8009e54 <__gethex+0x2b0>)
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	4630      	mov	r0, r6
 8009dae:	f7ff fe33 	bl	8009a18 <strncmp>
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d1e1      	bne.n	8009d7c <__gethex+0x1d8>
 8009db8:	e7a2      	b.n	8009d00 <__gethex+0x15c>
 8009dba:	1ea9      	subs	r1, r5, #2
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f7fe fd68 	bl	8008892 <__any_on>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d0c2      	beq.n	8009d4c <__gethex+0x1a8>
 8009dc6:	f04f 0903 	mov.w	r9, #3
 8009dca:	e7c1      	b.n	8009d50 <__gethex+0x1ac>
 8009dcc:	da09      	bge.n	8009de2 <__gethex+0x23e>
 8009dce:	1b75      	subs	r5, r6, r5
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	9801      	ldr	r0, [sp, #4]
 8009dd4:	462a      	mov	r2, r5
 8009dd6:	f7fe fb23 	bl	8008420 <__lshift>
 8009dda:	1b7f      	subs	r7, r7, r5
 8009ddc:	4604      	mov	r4, r0
 8009dde:	f100 0a14 	add.w	sl, r0, #20
 8009de2:	f04f 0900 	mov.w	r9, #0
 8009de6:	e7b8      	b.n	8009d5a <__gethex+0x1b6>
 8009de8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009dec:	42bd      	cmp	r5, r7
 8009dee:	dd6f      	ble.n	8009ed0 <__gethex+0x32c>
 8009df0:	1bed      	subs	r5, r5, r7
 8009df2:	42ae      	cmp	r6, r5
 8009df4:	dc34      	bgt.n	8009e60 <__gethex+0x2bc>
 8009df6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d022      	beq.n	8009e44 <__gethex+0x2a0>
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d024      	beq.n	8009e4c <__gethex+0x2a8>
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d115      	bne.n	8009e32 <__gethex+0x28e>
 8009e06:	42ae      	cmp	r6, r5
 8009e08:	d113      	bne.n	8009e32 <__gethex+0x28e>
 8009e0a:	2e01      	cmp	r6, #1
 8009e0c:	d10b      	bne.n	8009e26 <__gethex+0x282>
 8009e0e:	9a02      	ldr	r2, [sp, #8]
 8009e10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	2301      	movs	r3, #1
 8009e18:	6123      	str	r3, [r4, #16]
 8009e1a:	f8ca 3000 	str.w	r3, [sl]
 8009e1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e20:	2562      	movs	r5, #98	@ 0x62
 8009e22:	601c      	str	r4, [r3, #0]
 8009e24:	e73a      	b.n	8009c9c <__gethex+0xf8>
 8009e26:	1e71      	subs	r1, r6, #1
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7fe fd32 	bl	8008892 <__any_on>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d1ed      	bne.n	8009e0e <__gethex+0x26a>
 8009e32:	9801      	ldr	r0, [sp, #4]
 8009e34:	4621      	mov	r1, r4
 8009e36:	f7fe f8db 	bl	8007ff0 <_Bfree>
 8009e3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	2550      	movs	r5, #80	@ 0x50
 8009e42:	e72b      	b.n	8009c9c <__gethex+0xf8>
 8009e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1f3      	bne.n	8009e32 <__gethex+0x28e>
 8009e4a:	e7e0      	b.n	8009e0e <__gethex+0x26a>
 8009e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1dd      	bne.n	8009e0e <__gethex+0x26a>
 8009e52:	e7ee      	b.n	8009e32 <__gethex+0x28e>
 8009e54:	0800aa70 	.word	0x0800aa70
 8009e58:	0800a909 	.word	0x0800a909
 8009e5c:	0800ac1e 	.word	0x0800ac1e
 8009e60:	1e6f      	subs	r7, r5, #1
 8009e62:	f1b9 0f00 	cmp.w	r9, #0
 8009e66:	d130      	bne.n	8009eca <__gethex+0x326>
 8009e68:	b127      	cbz	r7, 8009e74 <__gethex+0x2d0>
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f7fe fd10 	bl	8008892 <__any_on>
 8009e72:	4681      	mov	r9, r0
 8009e74:	117a      	asrs	r2, r7, #5
 8009e76:	2301      	movs	r3, #1
 8009e78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e7c:	f007 071f 	and.w	r7, r7, #31
 8009e80:	40bb      	lsls	r3, r7
 8009e82:	4213      	tst	r3, r2
 8009e84:	4629      	mov	r1, r5
 8009e86:	4620      	mov	r0, r4
 8009e88:	bf18      	it	ne
 8009e8a:	f049 0902 	orrne.w	r9, r9, #2
 8009e8e:	f7ff fe21 	bl	8009ad4 <rshift>
 8009e92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e96:	1b76      	subs	r6, r6, r5
 8009e98:	2502      	movs	r5, #2
 8009e9a:	f1b9 0f00 	cmp.w	r9, #0
 8009e9e:	d047      	beq.n	8009f30 <__gethex+0x38c>
 8009ea0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d015      	beq.n	8009ed4 <__gethex+0x330>
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d017      	beq.n	8009edc <__gethex+0x338>
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d109      	bne.n	8009ec4 <__gethex+0x320>
 8009eb0:	f019 0f02 	tst.w	r9, #2
 8009eb4:	d006      	beq.n	8009ec4 <__gethex+0x320>
 8009eb6:	f8da 3000 	ldr.w	r3, [sl]
 8009eba:	ea49 0903 	orr.w	r9, r9, r3
 8009ebe:	f019 0f01 	tst.w	r9, #1
 8009ec2:	d10e      	bne.n	8009ee2 <__gethex+0x33e>
 8009ec4:	f045 0510 	orr.w	r5, r5, #16
 8009ec8:	e032      	b.n	8009f30 <__gethex+0x38c>
 8009eca:	f04f 0901 	mov.w	r9, #1
 8009ece:	e7d1      	b.n	8009e74 <__gethex+0x2d0>
 8009ed0:	2501      	movs	r5, #1
 8009ed2:	e7e2      	b.n	8009e9a <__gethex+0x2f6>
 8009ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ed6:	f1c3 0301 	rsb	r3, r3, #1
 8009eda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0f0      	beq.n	8009ec4 <__gethex+0x320>
 8009ee2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ee6:	f104 0314 	add.w	r3, r4, #20
 8009eea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009eee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ef2:	f04f 0c00 	mov.w	ip, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009efc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f00:	d01b      	beq.n	8009f3a <__gethex+0x396>
 8009f02:	3201      	adds	r2, #1
 8009f04:	6002      	str	r2, [r0, #0]
 8009f06:	2d02      	cmp	r5, #2
 8009f08:	f104 0314 	add.w	r3, r4, #20
 8009f0c:	d13c      	bne.n	8009f88 <__gethex+0x3e4>
 8009f0e:	f8d8 2000 	ldr.w	r2, [r8]
 8009f12:	3a01      	subs	r2, #1
 8009f14:	42b2      	cmp	r2, r6
 8009f16:	d109      	bne.n	8009f2c <__gethex+0x388>
 8009f18:	1171      	asrs	r1, r6, #5
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f20:	f006 061f 	and.w	r6, r6, #31
 8009f24:	fa02 f606 	lsl.w	r6, r2, r6
 8009f28:	421e      	tst	r6, r3
 8009f2a:	d13a      	bne.n	8009fa2 <__gethex+0x3fe>
 8009f2c:	f045 0520 	orr.w	r5, r5, #32
 8009f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f32:	601c      	str	r4, [r3, #0]
 8009f34:	9b02      	ldr	r3, [sp, #8]
 8009f36:	601f      	str	r7, [r3, #0]
 8009f38:	e6b0      	b.n	8009c9c <__gethex+0xf8>
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f40:	d8d9      	bhi.n	8009ef6 <__gethex+0x352>
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	459b      	cmp	fp, r3
 8009f46:	db17      	blt.n	8009f78 <__gethex+0x3d4>
 8009f48:	6861      	ldr	r1, [r4, #4]
 8009f4a:	9801      	ldr	r0, [sp, #4]
 8009f4c:	3101      	adds	r1, #1
 8009f4e:	f7fe f80f 	bl	8007f70 <_Balloc>
 8009f52:	4681      	mov	r9, r0
 8009f54:	b918      	cbnz	r0, 8009f5e <__gethex+0x3ba>
 8009f56:	4b1a      	ldr	r3, [pc, #104]	@ (8009fc0 <__gethex+0x41c>)
 8009f58:	4602      	mov	r2, r0
 8009f5a:	2184      	movs	r1, #132	@ 0x84
 8009f5c:	e6c5      	b.n	8009cea <__gethex+0x146>
 8009f5e:	6922      	ldr	r2, [r4, #16]
 8009f60:	3202      	adds	r2, #2
 8009f62:	f104 010c 	add.w	r1, r4, #12
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	300c      	adds	r0, #12
 8009f6a:	f7fd f89e 	bl	80070aa <memcpy>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	9801      	ldr	r0, [sp, #4]
 8009f72:	f7fe f83d 	bl	8007ff0 <_Bfree>
 8009f76:	464c      	mov	r4, r9
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f80:	6122      	str	r2, [r4, #16]
 8009f82:	2201      	movs	r2, #1
 8009f84:	615a      	str	r2, [r3, #20]
 8009f86:	e7be      	b.n	8009f06 <__gethex+0x362>
 8009f88:	6922      	ldr	r2, [r4, #16]
 8009f8a:	455a      	cmp	r2, fp
 8009f8c:	dd0b      	ble.n	8009fa6 <__gethex+0x402>
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4620      	mov	r0, r4
 8009f92:	f7ff fd9f 	bl	8009ad4 <rshift>
 8009f96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f9a:	3701      	adds	r7, #1
 8009f9c:	42bb      	cmp	r3, r7
 8009f9e:	f6ff aee0 	blt.w	8009d62 <__gethex+0x1be>
 8009fa2:	2501      	movs	r5, #1
 8009fa4:	e7c2      	b.n	8009f2c <__gethex+0x388>
 8009fa6:	f016 061f 	ands.w	r6, r6, #31
 8009faa:	d0fa      	beq.n	8009fa2 <__gethex+0x3fe>
 8009fac:	4453      	add	r3, sl
 8009fae:	f1c6 0620 	rsb	r6, r6, #32
 8009fb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fb6:	f7fe f8cd 	bl	8008154 <__hi0bits>
 8009fba:	42b0      	cmp	r0, r6
 8009fbc:	dbe7      	blt.n	8009f8e <__gethex+0x3ea>
 8009fbe:	e7f0      	b.n	8009fa2 <__gethex+0x3fe>
 8009fc0:	0800a909 	.word	0x0800a909

08009fc4 <L_shift>:
 8009fc4:	f1c2 0208 	rsb	r2, r2, #8
 8009fc8:	0092      	lsls	r2, r2, #2
 8009fca:	b570      	push	{r4, r5, r6, lr}
 8009fcc:	f1c2 0620 	rsb	r6, r2, #32
 8009fd0:	6843      	ldr	r3, [r0, #4]
 8009fd2:	6804      	ldr	r4, [r0, #0]
 8009fd4:	fa03 f506 	lsl.w	r5, r3, r6
 8009fd8:	432c      	orrs	r4, r5
 8009fda:	40d3      	lsrs	r3, r2
 8009fdc:	6004      	str	r4, [r0, #0]
 8009fde:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fe2:	4288      	cmp	r0, r1
 8009fe4:	d3f4      	bcc.n	8009fd0 <L_shift+0xc>
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}

08009fe8 <__match>:
 8009fe8:	b530      	push	{r4, r5, lr}
 8009fea:	6803      	ldr	r3, [r0, #0]
 8009fec:	3301      	adds	r3, #1
 8009fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ff2:	b914      	cbnz	r4, 8009ffa <__match+0x12>
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	bd30      	pop	{r4, r5, pc}
 8009ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ffe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a002:	2d19      	cmp	r5, #25
 800a004:	bf98      	it	ls
 800a006:	3220      	addls	r2, #32
 800a008:	42a2      	cmp	r2, r4
 800a00a:	d0f0      	beq.n	8009fee <__match+0x6>
 800a00c:	2000      	movs	r0, #0
 800a00e:	e7f3      	b.n	8009ff8 <__match+0x10>

0800a010 <__hexnan>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	680b      	ldr	r3, [r1, #0]
 800a016:	6801      	ldr	r1, [r0, #0]
 800a018:	115e      	asrs	r6, r3, #5
 800a01a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a01e:	f013 031f 	ands.w	r3, r3, #31
 800a022:	b087      	sub	sp, #28
 800a024:	bf18      	it	ne
 800a026:	3604      	addne	r6, #4
 800a028:	2500      	movs	r5, #0
 800a02a:	1f37      	subs	r7, r6, #4
 800a02c:	4682      	mov	sl, r0
 800a02e:	4690      	mov	r8, r2
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	f846 5c04 	str.w	r5, [r6, #-4]
 800a036:	46b9      	mov	r9, r7
 800a038:	463c      	mov	r4, r7
 800a03a:	9502      	str	r5, [sp, #8]
 800a03c:	46ab      	mov	fp, r5
 800a03e:	784a      	ldrb	r2, [r1, #1]
 800a040:	1c4b      	adds	r3, r1, #1
 800a042:	9303      	str	r3, [sp, #12]
 800a044:	b342      	cbz	r2, 800a098 <__hexnan+0x88>
 800a046:	4610      	mov	r0, r2
 800a048:	9105      	str	r1, [sp, #20]
 800a04a:	9204      	str	r2, [sp, #16]
 800a04c:	f7ff fd94 	bl	8009b78 <__hexdig_fun>
 800a050:	2800      	cmp	r0, #0
 800a052:	d151      	bne.n	800a0f8 <__hexnan+0xe8>
 800a054:	9a04      	ldr	r2, [sp, #16]
 800a056:	9905      	ldr	r1, [sp, #20]
 800a058:	2a20      	cmp	r2, #32
 800a05a:	d818      	bhi.n	800a08e <__hexnan+0x7e>
 800a05c:	9b02      	ldr	r3, [sp, #8]
 800a05e:	459b      	cmp	fp, r3
 800a060:	dd13      	ble.n	800a08a <__hexnan+0x7a>
 800a062:	454c      	cmp	r4, r9
 800a064:	d206      	bcs.n	800a074 <__hexnan+0x64>
 800a066:	2d07      	cmp	r5, #7
 800a068:	dc04      	bgt.n	800a074 <__hexnan+0x64>
 800a06a:	462a      	mov	r2, r5
 800a06c:	4649      	mov	r1, r9
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff ffa8 	bl	8009fc4 <L_shift>
 800a074:	4544      	cmp	r4, r8
 800a076:	d952      	bls.n	800a11e <__hexnan+0x10e>
 800a078:	2300      	movs	r3, #0
 800a07a:	f1a4 0904 	sub.w	r9, r4, #4
 800a07e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a082:	f8cd b008 	str.w	fp, [sp, #8]
 800a086:	464c      	mov	r4, r9
 800a088:	461d      	mov	r5, r3
 800a08a:	9903      	ldr	r1, [sp, #12]
 800a08c:	e7d7      	b.n	800a03e <__hexnan+0x2e>
 800a08e:	2a29      	cmp	r2, #41	@ 0x29
 800a090:	d157      	bne.n	800a142 <__hexnan+0x132>
 800a092:	3102      	adds	r1, #2
 800a094:	f8ca 1000 	str.w	r1, [sl]
 800a098:	f1bb 0f00 	cmp.w	fp, #0
 800a09c:	d051      	beq.n	800a142 <__hexnan+0x132>
 800a09e:	454c      	cmp	r4, r9
 800a0a0:	d206      	bcs.n	800a0b0 <__hexnan+0xa0>
 800a0a2:	2d07      	cmp	r5, #7
 800a0a4:	dc04      	bgt.n	800a0b0 <__hexnan+0xa0>
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7ff ff8a 	bl	8009fc4 <L_shift>
 800a0b0:	4544      	cmp	r4, r8
 800a0b2:	d936      	bls.n	800a122 <__hexnan+0x112>
 800a0b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a0b8:	4623      	mov	r3, r4
 800a0ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0c2:	429f      	cmp	r7, r3
 800a0c4:	d2f9      	bcs.n	800a0ba <__hexnan+0xaa>
 800a0c6:	1b3b      	subs	r3, r7, r4
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	3401      	adds	r4, #1
 800a0d0:	3e03      	subs	r6, #3
 800a0d2:	42b4      	cmp	r4, r6
 800a0d4:	bf88      	it	hi
 800a0d6:	2304      	movhi	r3, #4
 800a0d8:	4443      	add	r3, r8
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f843 2b04 	str.w	r2, [r3], #4
 800a0e0:	429f      	cmp	r7, r3
 800a0e2:	d2fb      	bcs.n	800a0dc <__hexnan+0xcc>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	b91b      	cbnz	r3, 800a0f0 <__hexnan+0xe0>
 800a0e8:	4547      	cmp	r7, r8
 800a0ea:	d128      	bne.n	800a13e <__hexnan+0x12e>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	2005      	movs	r0, #5
 800a0f2:	b007      	add	sp, #28
 800a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f8:	3501      	adds	r5, #1
 800a0fa:	2d08      	cmp	r5, #8
 800a0fc:	f10b 0b01 	add.w	fp, fp, #1
 800a100:	dd06      	ble.n	800a110 <__hexnan+0x100>
 800a102:	4544      	cmp	r4, r8
 800a104:	d9c1      	bls.n	800a08a <__hexnan+0x7a>
 800a106:	2300      	movs	r3, #0
 800a108:	f844 3c04 	str.w	r3, [r4, #-4]
 800a10c:	2501      	movs	r5, #1
 800a10e:	3c04      	subs	r4, #4
 800a110:	6822      	ldr	r2, [r4, #0]
 800a112:	f000 000f 	and.w	r0, r0, #15
 800a116:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a11a:	6020      	str	r0, [r4, #0]
 800a11c:	e7b5      	b.n	800a08a <__hexnan+0x7a>
 800a11e:	2508      	movs	r5, #8
 800a120:	e7b3      	b.n	800a08a <__hexnan+0x7a>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0dd      	beq.n	800a0e4 <__hexnan+0xd4>
 800a128:	f1c3 0320 	rsb	r3, r3, #32
 800a12c:	f04f 32ff 	mov.w	r2, #4294967295
 800a130:	40da      	lsrs	r2, r3
 800a132:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a136:	4013      	ands	r3, r2
 800a138:	f846 3c04 	str.w	r3, [r6, #-4]
 800a13c:	e7d2      	b.n	800a0e4 <__hexnan+0xd4>
 800a13e:	3f04      	subs	r7, #4
 800a140:	e7d0      	b.n	800a0e4 <__hexnan+0xd4>
 800a142:	2004      	movs	r0, #4
 800a144:	e7d5      	b.n	800a0f2 <__hexnan+0xe2>

0800a146 <__ascii_mbtowc>:
 800a146:	b082      	sub	sp, #8
 800a148:	b901      	cbnz	r1, 800a14c <__ascii_mbtowc+0x6>
 800a14a:	a901      	add	r1, sp, #4
 800a14c:	b142      	cbz	r2, 800a160 <__ascii_mbtowc+0x1a>
 800a14e:	b14b      	cbz	r3, 800a164 <__ascii_mbtowc+0x1e>
 800a150:	7813      	ldrb	r3, [r2, #0]
 800a152:	600b      	str	r3, [r1, #0]
 800a154:	7812      	ldrb	r2, [r2, #0]
 800a156:	1e10      	subs	r0, r2, #0
 800a158:	bf18      	it	ne
 800a15a:	2001      	movne	r0, #1
 800a15c:	b002      	add	sp, #8
 800a15e:	4770      	bx	lr
 800a160:	4610      	mov	r0, r2
 800a162:	e7fb      	b.n	800a15c <__ascii_mbtowc+0x16>
 800a164:	f06f 0001 	mvn.w	r0, #1
 800a168:	e7f8      	b.n	800a15c <__ascii_mbtowc+0x16>

0800a16a <_realloc_r>:
 800a16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16e:	4680      	mov	r8, r0
 800a170:	4615      	mov	r5, r2
 800a172:	460c      	mov	r4, r1
 800a174:	b921      	cbnz	r1, 800a180 <_realloc_r+0x16>
 800a176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a17a:	4611      	mov	r1, r2
 800a17c:	f7fd be6c 	b.w	8007e58 <_malloc_r>
 800a180:	b92a      	cbnz	r2, 800a18e <_realloc_r+0x24>
 800a182:	f7fd fdf5 	bl	8007d70 <_free_r>
 800a186:	2400      	movs	r4, #0
 800a188:	4620      	mov	r0, r4
 800a18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a18e:	f000 f840 	bl	800a212 <_malloc_usable_size_r>
 800a192:	4285      	cmp	r5, r0
 800a194:	4606      	mov	r6, r0
 800a196:	d802      	bhi.n	800a19e <_realloc_r+0x34>
 800a198:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a19c:	d8f4      	bhi.n	800a188 <_realloc_r+0x1e>
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	f7fd fe59 	bl	8007e58 <_malloc_r>
 800a1a6:	4607      	mov	r7, r0
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d0ec      	beq.n	800a186 <_realloc_r+0x1c>
 800a1ac:	42b5      	cmp	r5, r6
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	bf28      	it	cs
 800a1b4:	4632      	movcs	r2, r6
 800a1b6:	f7fc ff78 	bl	80070aa <memcpy>
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4640      	mov	r0, r8
 800a1be:	f7fd fdd7 	bl	8007d70 <_free_r>
 800a1c2:	463c      	mov	r4, r7
 800a1c4:	e7e0      	b.n	800a188 <_realloc_r+0x1e>

0800a1c6 <__ascii_wctomb>:
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	b141      	cbz	r1, 800a1de <__ascii_wctomb+0x18>
 800a1cc:	2aff      	cmp	r2, #255	@ 0xff
 800a1ce:	d904      	bls.n	800a1da <__ascii_wctomb+0x14>
 800a1d0:	228a      	movs	r2, #138	@ 0x8a
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	4770      	bx	lr
 800a1da:	700a      	strb	r2, [r1, #0]
 800a1dc:	2001      	movs	r0, #1
 800a1de:	4770      	bx	lr

0800a1e0 <fiprintf>:
 800a1e0:	b40e      	push	{r1, r2, r3}
 800a1e2:	b503      	push	{r0, r1, lr}
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	4805      	ldr	r0, [pc, #20]	@ (800a200 <fiprintf+0x20>)
 800a1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ee:	6800      	ldr	r0, [r0, #0]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f000 f83f 	bl	800a274 <_vfiprintf_r>
 800a1f6:	b002      	add	sp, #8
 800a1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1fc:	b003      	add	sp, #12
 800a1fe:	4770      	bx	lr
 800a200:	2000009c 	.word	0x2000009c

0800a204 <abort>:
 800a204:	b508      	push	{r3, lr}
 800a206:	2006      	movs	r0, #6
 800a208:	f000 fa08 	bl	800a61c <raise>
 800a20c:	2001      	movs	r0, #1
 800a20e:	f7f7 fcac 	bl	8001b6a <_exit>

0800a212 <_malloc_usable_size_r>:
 800a212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a216:	1f18      	subs	r0, r3, #4
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfbc      	itt	lt
 800a21c:	580b      	ldrlt	r3, [r1, r0]
 800a21e:	18c0      	addlt	r0, r0, r3
 800a220:	4770      	bx	lr

0800a222 <__sfputc_r>:
 800a222:	6893      	ldr	r3, [r2, #8]
 800a224:	3b01      	subs	r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	b410      	push	{r4}
 800a22a:	6093      	str	r3, [r2, #8]
 800a22c:	da08      	bge.n	800a240 <__sfputc_r+0x1e>
 800a22e:	6994      	ldr	r4, [r2, #24]
 800a230:	42a3      	cmp	r3, r4
 800a232:	db01      	blt.n	800a238 <__sfputc_r+0x16>
 800a234:	290a      	cmp	r1, #10
 800a236:	d103      	bne.n	800a240 <__sfputc_r+0x1e>
 800a238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a23c:	f000 b932 	b.w	800a4a4 <__swbuf_r>
 800a240:	6813      	ldr	r3, [r2, #0]
 800a242:	1c58      	adds	r0, r3, #1
 800a244:	6010      	str	r0, [r2, #0]
 800a246:	7019      	strb	r1, [r3, #0]
 800a248:	4608      	mov	r0, r1
 800a24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <__sfputs_r>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	4606      	mov	r6, r0
 800a254:	460f      	mov	r7, r1
 800a256:	4614      	mov	r4, r2
 800a258:	18d5      	adds	r5, r2, r3
 800a25a:	42ac      	cmp	r4, r5
 800a25c:	d101      	bne.n	800a262 <__sfputs_r+0x12>
 800a25e:	2000      	movs	r0, #0
 800a260:	e007      	b.n	800a272 <__sfputs_r+0x22>
 800a262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a266:	463a      	mov	r2, r7
 800a268:	4630      	mov	r0, r6
 800a26a:	f7ff ffda 	bl	800a222 <__sfputc_r>
 800a26e:	1c43      	adds	r3, r0, #1
 800a270:	d1f3      	bne.n	800a25a <__sfputs_r+0xa>
 800a272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a274 <_vfiprintf_r>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	460d      	mov	r5, r1
 800a27a:	b09d      	sub	sp, #116	@ 0x74
 800a27c:	4614      	mov	r4, r2
 800a27e:	4698      	mov	r8, r3
 800a280:	4606      	mov	r6, r0
 800a282:	b118      	cbz	r0, 800a28c <_vfiprintf_r+0x18>
 800a284:	6a03      	ldr	r3, [r0, #32]
 800a286:	b90b      	cbnz	r3, 800a28c <_vfiprintf_r+0x18>
 800a288:	f7fc fdf6 	bl	8006e78 <__sinit>
 800a28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a28e:	07d9      	lsls	r1, r3, #31
 800a290:	d405      	bmi.n	800a29e <_vfiprintf_r+0x2a>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	059a      	lsls	r2, r3, #22
 800a296:	d402      	bmi.n	800a29e <_vfiprintf_r+0x2a>
 800a298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a29a:	f7fc ff04 	bl	80070a6 <__retarget_lock_acquire_recursive>
 800a29e:	89ab      	ldrh	r3, [r5, #12]
 800a2a0:	071b      	lsls	r3, r3, #28
 800a2a2:	d501      	bpl.n	800a2a8 <_vfiprintf_r+0x34>
 800a2a4:	692b      	ldr	r3, [r5, #16]
 800a2a6:	b99b      	cbnz	r3, 800a2d0 <_vfiprintf_r+0x5c>
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f000 f938 	bl	800a520 <__swsetup_r>
 800a2b0:	b170      	cbz	r0, 800a2d0 <_vfiprintf_r+0x5c>
 800a2b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2b4:	07dc      	lsls	r4, r3, #31
 800a2b6:	d504      	bpl.n	800a2c2 <_vfiprintf_r+0x4e>
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2bc:	b01d      	add	sp, #116	@ 0x74
 800a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	0598      	lsls	r0, r3, #22
 800a2c6:	d4f7      	bmi.n	800a2b8 <_vfiprintf_r+0x44>
 800a2c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ca:	f7fc feed 	bl	80070a8 <__retarget_lock_release_recursive>
 800a2ce:	e7f3      	b.n	800a2b8 <_vfiprintf_r+0x44>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d4:	2320      	movs	r3, #32
 800a2d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2de:	2330      	movs	r3, #48	@ 0x30
 800a2e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a490 <_vfiprintf_r+0x21c>
 800a2e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2e8:	f04f 0901 	mov.w	r9, #1
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	469a      	mov	sl, r3
 800a2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f4:	b10a      	cbz	r2, 800a2fa <_vfiprintf_r+0x86>
 800a2f6:	2a25      	cmp	r2, #37	@ 0x25
 800a2f8:	d1f9      	bne.n	800a2ee <_vfiprintf_r+0x7a>
 800a2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a2fe:	d00b      	beq.n	800a318 <_vfiprintf_r+0xa4>
 800a300:	465b      	mov	r3, fp
 800a302:	4622      	mov	r2, r4
 800a304:	4629      	mov	r1, r5
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ffa2 	bl	800a250 <__sfputs_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	f000 80a7 	beq.w	800a460 <_vfiprintf_r+0x1ec>
 800a312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a314:	445a      	add	r2, fp
 800a316:	9209      	str	r2, [sp, #36]	@ 0x24
 800a318:	f89a 3000 	ldrb.w	r3, [sl]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 809f 	beq.w	800a460 <_vfiprintf_r+0x1ec>
 800a322:	2300      	movs	r3, #0
 800a324:	f04f 32ff 	mov.w	r2, #4294967295
 800a328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a32c:	f10a 0a01 	add.w	sl, sl, #1
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	9307      	str	r3, [sp, #28]
 800a334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a338:	931a      	str	r3, [sp, #104]	@ 0x68
 800a33a:	4654      	mov	r4, sl
 800a33c:	2205      	movs	r2, #5
 800a33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a342:	4853      	ldr	r0, [pc, #332]	@ (800a490 <_vfiprintf_r+0x21c>)
 800a344:	f7f5 ff5c 	bl	8000200 <memchr>
 800a348:	9a04      	ldr	r2, [sp, #16]
 800a34a:	b9d8      	cbnz	r0, 800a384 <_vfiprintf_r+0x110>
 800a34c:	06d1      	lsls	r1, r2, #27
 800a34e:	bf44      	itt	mi
 800a350:	2320      	movmi	r3, #32
 800a352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a356:	0713      	lsls	r3, r2, #28
 800a358:	bf44      	itt	mi
 800a35a:	232b      	movmi	r3, #43	@ 0x2b
 800a35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a360:	f89a 3000 	ldrb.w	r3, [sl]
 800a364:	2b2a      	cmp	r3, #42	@ 0x2a
 800a366:	d015      	beq.n	800a394 <_vfiprintf_r+0x120>
 800a368:	9a07      	ldr	r2, [sp, #28]
 800a36a:	4654      	mov	r4, sl
 800a36c:	2000      	movs	r0, #0
 800a36e:	f04f 0c0a 	mov.w	ip, #10
 800a372:	4621      	mov	r1, r4
 800a374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a378:	3b30      	subs	r3, #48	@ 0x30
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	d94b      	bls.n	800a416 <_vfiprintf_r+0x1a2>
 800a37e:	b1b0      	cbz	r0, 800a3ae <_vfiprintf_r+0x13a>
 800a380:	9207      	str	r2, [sp, #28]
 800a382:	e014      	b.n	800a3ae <_vfiprintf_r+0x13a>
 800a384:	eba0 0308 	sub.w	r3, r0, r8
 800a388:	fa09 f303 	lsl.w	r3, r9, r3
 800a38c:	4313      	orrs	r3, r2
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	46a2      	mov	sl, r4
 800a392:	e7d2      	b.n	800a33a <_vfiprintf_r+0xc6>
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	1d19      	adds	r1, r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	9103      	str	r1, [sp, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bfbb      	ittet	lt
 800a3a0:	425b      	neglt	r3, r3
 800a3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a6:	9307      	strge	r3, [sp, #28]
 800a3a8:	9307      	strlt	r3, [sp, #28]
 800a3aa:	bfb8      	it	lt
 800a3ac:	9204      	strlt	r2, [sp, #16]
 800a3ae:	7823      	ldrb	r3, [r4, #0]
 800a3b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3b2:	d10a      	bne.n	800a3ca <_vfiprintf_r+0x156>
 800a3b4:	7863      	ldrb	r3, [r4, #1]
 800a3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3b8:	d132      	bne.n	800a420 <_vfiprintf_r+0x1ac>
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	1d1a      	adds	r2, r3, #4
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	9203      	str	r2, [sp, #12]
 800a3c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3c6:	3402      	adds	r4, #2
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4a0 <_vfiprintf_r+0x22c>
 800a3ce:	7821      	ldrb	r1, [r4, #0]
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	f7f5 ff14 	bl	8000200 <memchr>
 800a3d8:	b138      	cbz	r0, 800a3ea <_vfiprintf_r+0x176>
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	eba0 000a 	sub.w	r0, r0, sl
 800a3e0:	2240      	movs	r2, #64	@ 0x40
 800a3e2:	4082      	lsls	r2, r0
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	3401      	adds	r4, #1
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ee:	4829      	ldr	r0, [pc, #164]	@ (800a494 <_vfiprintf_r+0x220>)
 800a3f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3f4:	2206      	movs	r2, #6
 800a3f6:	f7f5 ff03 	bl	8000200 <memchr>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d03f      	beq.n	800a47e <_vfiprintf_r+0x20a>
 800a3fe:	4b26      	ldr	r3, [pc, #152]	@ (800a498 <_vfiprintf_r+0x224>)
 800a400:	bb1b      	cbnz	r3, 800a44a <_vfiprintf_r+0x1d6>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	3307      	adds	r3, #7
 800a406:	f023 0307 	bic.w	r3, r3, #7
 800a40a:	3308      	adds	r3, #8
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a410:	443b      	add	r3, r7
 800a412:	9309      	str	r3, [sp, #36]	@ 0x24
 800a414:	e76a      	b.n	800a2ec <_vfiprintf_r+0x78>
 800a416:	fb0c 3202 	mla	r2, ip, r2, r3
 800a41a:	460c      	mov	r4, r1
 800a41c:	2001      	movs	r0, #1
 800a41e:	e7a8      	b.n	800a372 <_vfiprintf_r+0xfe>
 800a420:	2300      	movs	r3, #0
 800a422:	3401      	adds	r4, #1
 800a424:	9305      	str	r3, [sp, #20]
 800a426:	4619      	mov	r1, r3
 800a428:	f04f 0c0a 	mov.w	ip, #10
 800a42c:	4620      	mov	r0, r4
 800a42e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a432:	3a30      	subs	r2, #48	@ 0x30
 800a434:	2a09      	cmp	r2, #9
 800a436:	d903      	bls.n	800a440 <_vfiprintf_r+0x1cc>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0c6      	beq.n	800a3ca <_vfiprintf_r+0x156>
 800a43c:	9105      	str	r1, [sp, #20]
 800a43e:	e7c4      	b.n	800a3ca <_vfiprintf_r+0x156>
 800a440:	fb0c 2101 	mla	r1, ip, r1, r2
 800a444:	4604      	mov	r4, r0
 800a446:	2301      	movs	r3, #1
 800a448:	e7f0      	b.n	800a42c <_vfiprintf_r+0x1b8>
 800a44a:	ab03      	add	r3, sp, #12
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	462a      	mov	r2, r5
 800a450:	4b12      	ldr	r3, [pc, #72]	@ (800a49c <_vfiprintf_r+0x228>)
 800a452:	a904      	add	r1, sp, #16
 800a454:	4630      	mov	r0, r6
 800a456:	f7fb feb7 	bl	80061c8 <_printf_float>
 800a45a:	4607      	mov	r7, r0
 800a45c:	1c78      	adds	r0, r7, #1
 800a45e:	d1d6      	bne.n	800a40e <_vfiprintf_r+0x19a>
 800a460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a462:	07d9      	lsls	r1, r3, #31
 800a464:	d405      	bmi.n	800a472 <_vfiprintf_r+0x1fe>
 800a466:	89ab      	ldrh	r3, [r5, #12]
 800a468:	059a      	lsls	r2, r3, #22
 800a46a:	d402      	bmi.n	800a472 <_vfiprintf_r+0x1fe>
 800a46c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a46e:	f7fc fe1b 	bl	80070a8 <__retarget_lock_release_recursive>
 800a472:	89ab      	ldrh	r3, [r5, #12]
 800a474:	065b      	lsls	r3, r3, #25
 800a476:	f53f af1f 	bmi.w	800a2b8 <_vfiprintf_r+0x44>
 800a47a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a47c:	e71e      	b.n	800a2bc <_vfiprintf_r+0x48>
 800a47e:	ab03      	add	r3, sp, #12
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	462a      	mov	r2, r5
 800a484:	4b05      	ldr	r3, [pc, #20]	@ (800a49c <_vfiprintf_r+0x228>)
 800a486:	a904      	add	r1, sp, #16
 800a488:	4630      	mov	r0, r6
 800a48a:	f7fc f935 	bl	80066f8 <_printf_i>
 800a48e:	e7e4      	b.n	800a45a <_vfiprintf_r+0x1e6>
 800a490:	0800abc9 	.word	0x0800abc9
 800a494:	0800abd3 	.word	0x0800abd3
 800a498:	080061c9 	.word	0x080061c9
 800a49c:	0800a251 	.word	0x0800a251
 800a4a0:	0800abcf 	.word	0x0800abcf

0800a4a4 <__swbuf_r>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	460e      	mov	r6, r1
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	b118      	cbz	r0, 800a4b6 <__swbuf_r+0x12>
 800a4ae:	6a03      	ldr	r3, [r0, #32]
 800a4b0:	b90b      	cbnz	r3, 800a4b6 <__swbuf_r+0x12>
 800a4b2:	f7fc fce1 	bl	8006e78 <__sinit>
 800a4b6:	69a3      	ldr	r3, [r4, #24]
 800a4b8:	60a3      	str	r3, [r4, #8]
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	071a      	lsls	r2, r3, #28
 800a4be:	d501      	bpl.n	800a4c4 <__swbuf_r+0x20>
 800a4c0:	6923      	ldr	r3, [r4, #16]
 800a4c2:	b943      	cbnz	r3, 800a4d6 <__swbuf_r+0x32>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f000 f82a 	bl	800a520 <__swsetup_r>
 800a4cc:	b118      	cbz	r0, 800a4d6 <__swbuf_r+0x32>
 800a4ce:	f04f 37ff 	mov.w	r7, #4294967295
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	6922      	ldr	r2, [r4, #16]
 800a4da:	1a98      	subs	r0, r3, r2
 800a4dc:	6963      	ldr	r3, [r4, #20]
 800a4de:	b2f6      	uxtb	r6, r6
 800a4e0:	4283      	cmp	r3, r0
 800a4e2:	4637      	mov	r7, r6
 800a4e4:	dc05      	bgt.n	800a4f2 <__swbuf_r+0x4e>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f7ff fa53 	bl	8009994 <_fflush_r>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d1ed      	bne.n	800a4ce <__swbuf_r+0x2a>
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	60a3      	str	r3, [r4, #8]
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	6022      	str	r2, [r4, #0]
 800a4fe:	701e      	strb	r6, [r3, #0]
 800a500:	6962      	ldr	r2, [r4, #20]
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	429a      	cmp	r2, r3
 800a506:	d004      	beq.n	800a512 <__swbuf_r+0x6e>
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	07db      	lsls	r3, r3, #31
 800a50c:	d5e1      	bpl.n	800a4d2 <__swbuf_r+0x2e>
 800a50e:	2e0a      	cmp	r6, #10
 800a510:	d1df      	bne.n	800a4d2 <__swbuf_r+0x2e>
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f7ff fa3d 	bl	8009994 <_fflush_r>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d0d9      	beq.n	800a4d2 <__swbuf_r+0x2e>
 800a51e:	e7d6      	b.n	800a4ce <__swbuf_r+0x2a>

0800a520 <__swsetup_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4b29      	ldr	r3, [pc, #164]	@ (800a5c8 <__swsetup_r+0xa8>)
 800a524:	4605      	mov	r5, r0
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	460c      	mov	r4, r1
 800a52a:	b118      	cbz	r0, 800a534 <__swsetup_r+0x14>
 800a52c:	6a03      	ldr	r3, [r0, #32]
 800a52e:	b90b      	cbnz	r3, 800a534 <__swsetup_r+0x14>
 800a530:	f7fc fca2 	bl	8006e78 <__sinit>
 800a534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a538:	0719      	lsls	r1, r3, #28
 800a53a:	d422      	bmi.n	800a582 <__swsetup_r+0x62>
 800a53c:	06da      	lsls	r2, r3, #27
 800a53e:	d407      	bmi.n	800a550 <__swsetup_r+0x30>
 800a540:	2209      	movs	r2, #9
 800a542:	602a      	str	r2, [r5, #0]
 800a544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a548:	81a3      	strh	r3, [r4, #12]
 800a54a:	f04f 30ff 	mov.w	r0, #4294967295
 800a54e:	e033      	b.n	800a5b8 <__swsetup_r+0x98>
 800a550:	0758      	lsls	r0, r3, #29
 800a552:	d512      	bpl.n	800a57a <__swsetup_r+0x5a>
 800a554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a556:	b141      	cbz	r1, 800a56a <__swsetup_r+0x4a>
 800a558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a55c:	4299      	cmp	r1, r3
 800a55e:	d002      	beq.n	800a566 <__swsetup_r+0x46>
 800a560:	4628      	mov	r0, r5
 800a562:	f7fd fc05 	bl	8007d70 <_free_r>
 800a566:	2300      	movs	r3, #0
 800a568:	6363      	str	r3, [r4, #52]	@ 0x34
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	2300      	movs	r3, #0
 800a574:	6063      	str	r3, [r4, #4]
 800a576:	6923      	ldr	r3, [r4, #16]
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f043 0308 	orr.w	r3, r3, #8
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	b94b      	cbnz	r3, 800a59a <__swsetup_r+0x7a>
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a58c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a590:	d003      	beq.n	800a59a <__swsetup_r+0x7a>
 800a592:	4621      	mov	r1, r4
 800a594:	4628      	mov	r0, r5
 800a596:	f000 f883 	bl	800a6a0 <__smakebuf_r>
 800a59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59e:	f013 0201 	ands.w	r2, r3, #1
 800a5a2:	d00a      	beq.n	800a5ba <__swsetup_r+0x9a>
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	60a2      	str	r2, [r4, #8]
 800a5a8:	6962      	ldr	r2, [r4, #20]
 800a5aa:	4252      	negs	r2, r2
 800a5ac:	61a2      	str	r2, [r4, #24]
 800a5ae:	6922      	ldr	r2, [r4, #16]
 800a5b0:	b942      	cbnz	r2, 800a5c4 <__swsetup_r+0xa4>
 800a5b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5b6:	d1c5      	bne.n	800a544 <__swsetup_r+0x24>
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ba:	0799      	lsls	r1, r3, #30
 800a5bc:	bf58      	it	pl
 800a5be:	6962      	ldrpl	r2, [r4, #20]
 800a5c0:	60a2      	str	r2, [r4, #8]
 800a5c2:	e7f4      	b.n	800a5ae <__swsetup_r+0x8e>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e7f7      	b.n	800a5b8 <__swsetup_r+0x98>
 800a5c8:	2000009c 	.word	0x2000009c

0800a5cc <_raise_r>:
 800a5cc:	291f      	cmp	r1, #31
 800a5ce:	b538      	push	{r3, r4, r5, lr}
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	d904      	bls.n	800a5e0 <_raise_r+0x14>
 800a5d6:	2316      	movs	r3, #22
 800a5d8:	6003      	str	r3, [r0, #0]
 800a5da:	f04f 30ff 	mov.w	r0, #4294967295
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5e2:	b112      	cbz	r2, 800a5ea <_raise_r+0x1e>
 800a5e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5e8:	b94b      	cbnz	r3, 800a5fe <_raise_r+0x32>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f000 f830 	bl	800a650 <_getpid_r>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	4601      	mov	r1, r0
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5fa:	f000 b817 	b.w	800a62c <_kill_r>
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d00a      	beq.n	800a618 <_raise_r+0x4c>
 800a602:	1c59      	adds	r1, r3, #1
 800a604:	d103      	bne.n	800a60e <_raise_r+0x42>
 800a606:	2316      	movs	r3, #22
 800a608:	6003      	str	r3, [r0, #0]
 800a60a:	2001      	movs	r0, #1
 800a60c:	e7e7      	b.n	800a5de <_raise_r+0x12>
 800a60e:	2100      	movs	r1, #0
 800a610:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a614:	4620      	mov	r0, r4
 800a616:	4798      	blx	r3
 800a618:	2000      	movs	r0, #0
 800a61a:	e7e0      	b.n	800a5de <_raise_r+0x12>

0800a61c <raise>:
 800a61c:	4b02      	ldr	r3, [pc, #8]	@ (800a628 <raise+0xc>)
 800a61e:	4601      	mov	r1, r0
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	f7ff bfd3 	b.w	800a5cc <_raise_r>
 800a626:	bf00      	nop
 800a628:	2000009c 	.word	0x2000009c

0800a62c <_kill_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d07      	ldr	r5, [pc, #28]	@ (800a64c <_kill_r+0x20>)
 800a630:	2300      	movs	r3, #0
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	4611      	mov	r1, r2
 800a638:	602b      	str	r3, [r5, #0]
 800a63a:	f7f7 fa86 	bl	8001b4a <_kill>
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	d102      	bne.n	800a648 <_kill_r+0x1c>
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	b103      	cbz	r3, 800a648 <_kill_r+0x1c>
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	bd38      	pop	{r3, r4, r5, pc}
 800a64a:	bf00      	nop
 800a64c:	2000056c 	.word	0x2000056c

0800a650 <_getpid_r>:
 800a650:	f7f7 ba73 	b.w	8001b3a <_getpid>

0800a654 <__swhatbuf_r>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	460c      	mov	r4, r1
 800a658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65c:	2900      	cmp	r1, #0
 800a65e:	b096      	sub	sp, #88	@ 0x58
 800a660:	4615      	mov	r5, r2
 800a662:	461e      	mov	r6, r3
 800a664:	da0d      	bge.n	800a682 <__swhatbuf_r+0x2e>
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a66c:	f04f 0100 	mov.w	r1, #0
 800a670:	bf14      	ite	ne
 800a672:	2340      	movne	r3, #64	@ 0x40
 800a674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a678:	2000      	movs	r0, #0
 800a67a:	6031      	str	r1, [r6, #0]
 800a67c:	602b      	str	r3, [r5, #0]
 800a67e:	b016      	add	sp, #88	@ 0x58
 800a680:	bd70      	pop	{r4, r5, r6, pc}
 800a682:	466a      	mov	r2, sp
 800a684:	f000 f848 	bl	800a718 <_fstat_r>
 800a688:	2800      	cmp	r0, #0
 800a68a:	dbec      	blt.n	800a666 <__swhatbuf_r+0x12>
 800a68c:	9901      	ldr	r1, [sp, #4]
 800a68e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a696:	4259      	negs	r1, r3
 800a698:	4159      	adcs	r1, r3
 800a69a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a69e:	e7eb      	b.n	800a678 <__swhatbuf_r+0x24>

0800a6a0 <__smakebuf_r>:
 800a6a0:	898b      	ldrh	r3, [r1, #12]
 800a6a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6a4:	079d      	lsls	r5, r3, #30
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	d507      	bpl.n	800a6bc <__smakebuf_r+0x1c>
 800a6ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	6163      	str	r3, [r4, #20]
 800a6b8:	b003      	add	sp, #12
 800a6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6bc:	ab01      	add	r3, sp, #4
 800a6be:	466a      	mov	r2, sp
 800a6c0:	f7ff ffc8 	bl	800a654 <__swhatbuf_r>
 800a6c4:	9f00      	ldr	r7, [sp, #0]
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7fd fbc4 	bl	8007e58 <_malloc_r>
 800a6d0:	b948      	cbnz	r0, 800a6e6 <__smakebuf_r+0x46>
 800a6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d6:	059a      	lsls	r2, r3, #22
 800a6d8:	d4ee      	bmi.n	800a6b8 <__smakebuf_r+0x18>
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	f043 0302 	orr.w	r3, r3, #2
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	e7e2      	b.n	800a6ac <__smakebuf_r+0xc>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	6020      	str	r0, [r4, #0]
 800a6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ee:	81a3      	strh	r3, [r4, #12]
 800a6f0:	9b01      	ldr	r3, [sp, #4]
 800a6f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6f6:	b15b      	cbz	r3, 800a710 <__smakebuf_r+0x70>
 800a6f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f000 f81d 	bl	800a73c <_isatty_r>
 800a702:	b128      	cbz	r0, 800a710 <__smakebuf_r+0x70>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f023 0303 	bic.w	r3, r3, #3
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	431d      	orrs	r5, r3
 800a714:	81a5      	strh	r5, [r4, #12]
 800a716:	e7cf      	b.n	800a6b8 <__smakebuf_r+0x18>

0800a718 <_fstat_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d07      	ldr	r5, [pc, #28]	@ (800a738 <_fstat_r+0x20>)
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	4608      	mov	r0, r1
 800a722:	4611      	mov	r1, r2
 800a724:	602b      	str	r3, [r5, #0]
 800a726:	f7f7 fa70 	bl	8001c0a <_fstat>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	d102      	bne.n	800a734 <_fstat_r+0x1c>
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	b103      	cbz	r3, 800a734 <_fstat_r+0x1c>
 800a732:	6023      	str	r3, [r4, #0]
 800a734:	bd38      	pop	{r3, r4, r5, pc}
 800a736:	bf00      	nop
 800a738:	2000056c 	.word	0x2000056c

0800a73c <_isatty_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d06      	ldr	r5, [pc, #24]	@ (800a758 <_isatty_r+0x1c>)
 800a740:	2300      	movs	r3, #0
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	602b      	str	r3, [r5, #0]
 800a748:	f7f7 fa6f 	bl	8001c2a <_isatty>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	d102      	bne.n	800a756 <_isatty_r+0x1a>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	b103      	cbz	r3, 800a756 <_isatty_r+0x1a>
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	2000056c 	.word	0x2000056c

0800a75c <_init>:
 800a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75e:	bf00      	nop
 800a760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a762:	bc08      	pop	{r3}
 800a764:	469e      	mov	lr, r3
 800a766:	4770      	bx	lr

0800a768 <_fini>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	bf00      	nop
 800a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76e:	bc08      	pop	{r3}
 800a770:	469e      	mov	lr, r3
 800a772:	4770      	bx	lr
